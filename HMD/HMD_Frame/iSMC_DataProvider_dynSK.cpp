// This file is generated by omniidl (C++ backend) - omniORB_4_1. Do not edit.

#include "iSMC_DataProvider_s.hh"

OMNI_USING_NAMESPACE(omni)

static const char* _0RL_dyn_library_version = omniORB_4_1_dyn;

static ::CORBA::TypeCode::_Tracker _0RL_tcTrack(__FILE__);

static CORBA::PR_structMember _0RL_structmember_sTlgRecordElem[] = {
  {"Name", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"Type", CORBA::TypeCode::PR_long_tc()},
  {"Value", CORBA::TypeCode::PR_any_tc()}
};

#ifdef _0RL_tc_sTlgRecordElem
#  undef _0RL_tc_sTlgRecordElem
#endif
static CORBA::TypeCode_ptr _0RL_tc_sTlgRecordElem = CORBA::TypeCode::PR_struct_tc("IDL:sTlgRecordElem:1.0", "sTlgRecordElem", _0RL_structmember_sTlgRecordElem, 3, &_0RL_tcTrack);

const CORBA::TypeCode_ptr _tc_sTlgRecordElem = _0RL_tc_sTlgRecordElem;






static CORBA::TypeCode_ptr _0RL_tc_seqTlgRecordElem = CORBA::TypeCode::PR_alias_tc("IDL:seqTlgRecordElem:1.0", "seqTlgRecordElem", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sTlgRecordElem, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqTlgRecordElem = _0RL_tc_seqTlgRecordElem;


static CORBA::PR_structMember _0RL_structmember_sTlgRecord[] = {
  {"Name", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"TlgRecordElem", _0RL_tc_seqTlgRecordElem}
};

#ifdef _0RL_tc_sTlgRecord
#  undef _0RL_tc_sTlgRecord
#endif
static CORBA::TypeCode_ptr _0RL_tc_sTlgRecord = CORBA::TypeCode::PR_struct_tc("IDL:sTlgRecord:1.0", "sTlgRecord", _0RL_structmember_sTlgRecord, 2, &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_sTlgRecord = _0RL_tc_sTlgRecord;










static CORBA::TypeCode_ptr _0RL_tc_seqTlgRecord = CORBA::TypeCode::PR_alias_tc("IDL:seqTlgRecord:1.0", "seqTlgRecord", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sTlgRecord, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqTlgRecord = _0RL_tc_seqTlgRecord;

static CORBA::PR_structMember _0RL_structmember_sAnalysisString[] = {
  {"Element", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"Concentration", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)}
};

#ifdef _0RL_tc_sAnalysisString
#  undef _0RL_tc_sAnalysisString
#endif
static CORBA::TypeCode_ptr _0RL_tc_sAnalysisString = CORBA::TypeCode::PR_struct_tc("IDL:sAnalysisString:1.0", "sAnalysisString", _0RL_structmember_sAnalysisString, 2, &_0RL_tcTrack);

const CORBA::TypeCode_ptr _tc_sAnalysisString = _0RL_tc_sAnalysisString;


static CORBA::PR_structMember _0RL_structmember_sAnalysis[] = {
  {"Element", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"Concentration", CORBA::TypeCode::PR_double_tc()}
};

#ifdef _0RL_tc_sAnalysis
#  undef _0RL_tc_sAnalysis
#endif
static CORBA::TypeCode_ptr _0RL_tc_sAnalysis = CORBA::TypeCode::PR_struct_tc("IDL:sAnalysis:1.0", "sAnalysis", _0RL_structmember_sAnalysis, 2, &_0RL_tcTrack);

const CORBA::TypeCode_ptr _tc_sAnalysis = _0RL_tc_sAnalysis;


static CORBA::PR_structMember _0RL_structmember_sBatch[] = {
  {"MatCode", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"Mass", CORBA::TypeCode::PR_double_tc()},
  {"MatFeedSpeed", CORBA::TypeCode::PR_double_tc()},
  {"Source", CORBA::TypeCode::PR_long_tc()},
  {"FeedingRateRel2Energy", CORBA::TypeCode::PR_double_tc()},
  {"MatLoadingSequence", CORBA::TypeCode::PR_long_tc()}
};

#ifdef _0RL_tc_sBatch
#  undef _0RL_tc_sBatch
#endif
static CORBA::TypeCode_ptr _0RL_tc_sBatch = CORBA::TypeCode::PR_struct_tc("IDL:sBatch:1.0", "sBatch", _0RL_structmember_sBatch, 6, &_0RL_tcTrack);

const CORBA::TypeCode_ptr _tc_sBatch = _0RL_tc_sBatch;


static CORBA::PR_structMember _0RL_structmember_MCBS_mCBS__LocalTime[] = {
  {"year", CORBA::TypeCode::PR_ushort_tc()},
  {"month", CORBA::TypeCode::PR_ushort_tc()},
  {"day", CORBA::TypeCode::PR_ushort_tc()},
  {"hour", CORBA::TypeCode::PR_ushort_tc()},
  {"minute", CORBA::TypeCode::PR_ushort_tc()},
  {"second", CORBA::TypeCode::PR_ushort_tc()},
  {"msec", CORBA::TypeCode::PR_ushort_tc()},
  {"dstFlag", CORBA::TypeCode::PR_boolean_tc()}
};

#ifdef _0RL_tc_MCBS_mCBS__LocalTime
#  undef _0RL_tc_MCBS_mCBS__LocalTime
#endif
static CORBA::TypeCode_ptr _0RL_tc_MCBS_mCBS__LocalTime = CORBA::TypeCode::PR_struct_tc("IDL:MCBS/CBS_LocalTime:1.0", "CBS_LocalTime", _0RL_structmember_MCBS_mCBS__LocalTime, 8, &_0RL_tcTrack);




static CORBA::TypeCode_ptr _0RL_tc_sDate = CORBA::TypeCode::PR_alias_tc("IDL:sDate:1.0", "sDate", _0RL_tc_MCBS_mCBS__LocalTime, &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_sDate = _0RL_tc_sDate;

static CORBA::PR_structMember _0RL_structmember_sEAFBurnerPredRes[] = {
  {"Phase", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"PhaseNo", CORBA::TypeCode::PR_long_tc()},
  {"Step", CORBA::TypeCode::PR_long_tc()},
  {"BurnerName", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"BaseMass", CORBA::TypeCode::PR_double_tc()},
  {"DurStep", CORBA::TypeCode::PR_double_tc()},
  {"SpecEgy", CORBA::TypeCode::PR_double_tc()},
  {"ElecEgy", CORBA::TypeCode::PR_double_tc()},
  {"Gastype", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"GasFlow", CORBA::TypeCode::PR_double_tc()},
  {"O2Flow", CORBA::TypeCode::PR_double_tc()},
  {"ElecEgyStep", CORBA::TypeCode::PR_double_tc()},
  {"DurUntilEndOfStep", CORBA::TypeCode::PR_double_tc()},
  {"DurUntilStartOfStep", CORBA::TypeCode::PR_double_tc()},
  {"SpecEgyStep", CORBA::TypeCode::PR_double_tc()},
  {"FlameProfile_Burner", CORBA::TypeCode::PR_long_tc()}
};

#ifdef _0RL_tc_sEAFBurnerPredRes
#  undef _0RL_tc_sEAFBurnerPredRes
#endif
static CORBA::TypeCode_ptr _0RL_tc_sEAFBurnerPredRes = CORBA::TypeCode::PR_struct_tc("IDL:sEAFBurnerPredRes:1.0", "sEAFBurnerPredRes", _0RL_structmember_sEAFBurnerPredRes, 16, &_0RL_tcTrack);

const CORBA::TypeCode_ptr _tc_sEAFBurnerPredRes = _0RL_tc_sEAFBurnerPredRes;


static CORBA::PR_structMember _0RL_structmember_sEAFProcessPredRes[] = {
  {"Phase", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"PhaseNo", CORBA::TypeCode::PR_long_tc()},
  {"DeviceNo", CORBA::TypeCode::PR_long_tc()},
  {"Step", CORBA::TypeCode::PR_long_tc()},
  {"VoltTap", CORBA::TypeCode::PR_long_tc()},
  {"ImpCurve", CORBA::TypeCode::PR_long_tc()},
  {"ReactorTap", CORBA::TypeCode::PR_long_tc()},
  {"DurStep", CORBA::TypeCode::PR_double_tc()},
  {"Temp", CORBA::TypeCode::PR_double_tc()},
  {"DurUntilEndOfStep", CORBA::TypeCode::PR_double_tc()},
  {"DurUntilStartOfStep", CORBA::TypeCode::PR_double_tc()},
  {"SpecEgyStep", CORBA::TypeCode::PR_double_tc()},
  {"SpecEgy", CORBA::TypeCode::PR_double_tc()},
  {"ElecEgyStep", CORBA::TypeCode::PR_double_tc()},
  {"ElecEgy", CORBA::TypeCode::PR_double_tc()},
  {"O2Flow", CORBA::TypeCode::PR_double_tc()},
  {"O2Amount", CORBA::TypeCode::PR_double_tc()},
  {"BaseMass", CORBA::TypeCode::PR_double_tc()}
};

#ifdef _0RL_tc_sEAFProcessPredRes
#  undef _0RL_tc_sEAFProcessPredRes
#endif
static CORBA::TypeCode_ptr _0RL_tc_sEAFProcessPredRes = CORBA::TypeCode::PR_struct_tc("IDL:sEAFProcessPredRes:1.0", "sEAFProcessPredRes", _0RL_structmember_sEAFProcessPredRes, 18, &_0RL_tcTrack);

const CORBA::TypeCode_ptr _tc_sEAFProcessPredRes = _0RL_tc_sEAFProcessPredRes;



static CORBA::PR_structMember _0RL_structmember_sLFElecPredRes[] = {
  {"Step", CORBA::TypeCode::PR_long_tc()},
  {"VoltTap", CORBA::TypeCode::PR_long_tc()},
  {"ImpCurve", CORBA::TypeCode::PR_long_tc()},
  {"ElecEgy", CORBA::TypeCode::PR_double_tc()},
  {"SpecEgy", CORBA::TypeCode::PR_double_tc()},
  {"StirrIntensity", CORBA::TypeCode::PR_long_tc()},
  {"StirrFlow", CORBA::TypeCode::PR_double_tc()},
  {"GasType", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"Priority", CORBA::TypeCode::PR_long_tc()},
  {"DurStep", CORBA::TypeCode::PR_double_tc()},
  {"Enable", CORBA::TypeCode::PR_long_tc()},
  {"Order", CORBA::TypeCode::PR_long_tc()},
  {"RevDate", _0RL_tc_sDate},
  {"StirrIntensityCode", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"ElecPhase", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"ElecEgyStep", CORBA::TypeCode::PR_double_tc()},
  {"DurUntilEndOfStep", CORBA::TypeCode::PR_double_tc()},
  {"DurUntilStartOfStep", CORBA::TypeCode::PR_double_tc()},
  {"BaseMass", CORBA::TypeCode::PR_double_tc()}
};

#ifdef _0RL_tc_sLFElecPredRes
#  undef _0RL_tc_sLFElecPredRes
#endif
static CORBA::TypeCode_ptr _0RL_tc_sLFElecPredRes = CORBA::TypeCode::PR_struct_tc("IDL:sLFElecPredRes:1.0", "sLFElecPredRes", _0RL_structmember_sLFElecPredRes, 19, &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_sLFElecPredRes = _0RL_tc_sLFElecPredRes;


static CORBA::PR_structMember _0RL_structmember_sLFStirrPredRes[] = {
  {"StirrPhase", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"StirrIntensity", CORBA::TypeCode::PR_long_tc()},
  {"StirrFlow", CORBA::TypeCode::PR_double_tc()},
  {"GasType", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"Priority", CORBA::TypeCode::PR_long_tc()},
  {"DurStep", CORBA::TypeCode::PR_double_tc()},
  {"StirrIntensityCode", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"Enable", CORBA::TypeCode::PR_long_tc()},
  {"Order", CORBA::TypeCode::PR_long_tc()},
  {"isPatternOrActivity", CORBA::TypeCode::PR_long_tc()},
  {"DurUntilEndOfStep", CORBA::TypeCode::PR_double_tc()},
  {"DurUntilStartOfStep", CORBA::TypeCode::PR_double_tc()},
  {"VoltTap", CORBA::TypeCode::PR_long_tc()},
  {"ImpCurve", CORBA::TypeCode::PR_long_tc()},
  {"ElecEgy", CORBA::TypeCode::PR_double_tc()},
  {"SteelMass", CORBA::TypeCode::PR_double_tc()},
  {"SlagMass", CORBA::TypeCode::PR_double_tc()},
  {"Temp", CORBA::TypeCode::PR_double_tc()}
};

#ifdef _0RL_tc_sLFStirrPredRes
#  undef _0RL_tc_sLFStirrPredRes
#endif
static CORBA::TypeCode_ptr _0RL_tc_sLFStirrPredRes = CORBA::TypeCode::PR_struct_tc("IDL:sLFStirrPredRes:1.0", "sLFStirrPredRes", _0RL_structmember_sLFStirrPredRes, 18, &_0RL_tcTrack);

const CORBA::TypeCode_ptr _tc_sLFStirrPredRes = _0RL_tc_sLFStirrPredRes;




static CORBA::PR_structMember _0RL_structmember_sMetTimeStamp[] = {
  {"O2_Moment", CORBA::TypeCode::PR_double_tc()},
  {"Ar_Moment", CORBA::TypeCode::PR_double_tc()},
  {"N2_Moment", CORBA::TypeCode::PR_double_tc()},
  {"Elec_Moment", CORBA::TypeCode::PR_double_tc()},
  {"DurSinceHeatAnnouncement", CORBA::TypeCode::PR_double_tc()},
  {"DurSinceStartOfHeat", CORBA::TypeCode::PR_double_tc()},
  {"RevDate", _0RL_tc_sDate},
  {"ActionDate", _0RL_tc_sDate}
};

#ifdef _0RL_tc_sMetTimeStamp
#  undef _0RL_tc_sMetTimeStamp
#endif
static CORBA::TypeCode_ptr _0RL_tc_sMetTimeStamp = CORBA::TypeCode::PR_struct_tc("IDL:sMetTimeStamp:1.0", "sMetTimeStamp", _0RL_structmember_sMetTimeStamp, 8, &_0RL_tcTrack);



const CORBA::TypeCode_ptr _tc_sMetTimeStamp = _0RL_tc_sMetTimeStamp;


static CORBA::PR_structMember _0RL_structmember_sRecipeProperties[] = {
  {"RecipeStatus", CORBA::TypeCode::PR_long_tc()},
  {"HomogDuration", CORBA::TypeCode::PR_double_tc()},
  {"TotalMass", CORBA::TypeCode::PR_double_tc()},
  {"BulkVolume", CORBA::TypeCode::PR_double_tc()}
};

#ifdef _0RL_tc_sRecipeProperties
#  undef _0RL_tc_sRecipeProperties
#endif
static CORBA::TypeCode_ptr _0RL_tc_sRecipeProperties = CORBA::TypeCode::PR_struct_tc("IDL:sRecipeProperties:1.0", "sRecipeProperties", _0RL_structmember_sRecipeProperties, 4, &_0RL_tcTrack);

const CORBA::TypeCode_ptr _tc_sRecipeProperties = _0RL_tc_sRecipeProperties;






static CORBA::TypeCode_ptr _0RL_tc_seqAnalysis = CORBA::TypeCode::PR_alias_tc("IDL:seqAnalysis:1.0", "seqAnalysis", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sAnalysis, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqAnalysis = _0RL_tc_seqAnalysis;





static CORBA::TypeCode_ptr _0RL_tc_seqBatch = CORBA::TypeCode::PR_alias_tc("IDL:seqBatch:1.0", "seqBatch", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sBatch, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqBatch = _0RL_tc_seqBatch;


static CORBA::PR_structMember _0RL_structmember_sEAFMatFeed[] = {
  {"Phase", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"PhaseNo", CORBA::TypeCode::PR_long_tc()},
  {"Step", CORBA::TypeCode::PR_long_tc()},
  {"DurStep", CORBA::TypeCode::PR_double_tc()},
  {"SpecEgy", CORBA::TypeCode::PR_double_tc()},
  {"MatFeed", _0RL_tc_seqBatch}
};

#ifdef _0RL_tc_sEAFMatFeed
#  undef _0RL_tc_sEAFMatFeed
#endif
static CORBA::TypeCode_ptr _0RL_tc_sEAFMatFeed = CORBA::TypeCode::PR_struct_tc("IDL:sEAFMatFeed:1.0", "sEAFMatFeed", _0RL_structmember_sEAFMatFeed, 6, &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_sEAFMatFeed = _0RL_tc_sEAFMatFeed;






static CORBA::TypeCode_ptr _0RL_tc_seqEAFBurnerPredRes = CORBA::TypeCode::PR_alias_tc("IDL:seqEAFBurnerPredRes:1.0", "seqEAFBurnerPredRes", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sEAFBurnerPredRes, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqEAFBurnerPredRes = _0RL_tc_seqEAFBurnerPredRes;





static CORBA::TypeCode_ptr _0RL_tc_seqEAFProcessPredRes = CORBA::TypeCode::PR_alias_tc("IDL:seqEAFProcessPredRes:1.0", "seqEAFProcessPredRes", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sEAFProcessPredRes, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqEAFProcessPredRes = _0RL_tc_seqEAFProcessPredRes;









static CORBA::TypeCode_ptr _0RL_tc_seqEAFMatFeed = CORBA::TypeCode::PR_alias_tc("IDL:seqEAFMatFeed:1.0", "seqEAFMatFeed", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sEAFMatFeed, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqEAFMatFeed = _0RL_tc_seqEAFMatFeed;









static CORBA::TypeCode_ptr _0RL_tc_seqLFElecPredRes = CORBA::TypeCode::PR_alias_tc("IDL:seqLFElecPredRes:1.0", "seqLFElecPredRes", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sLFElecPredRes, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqLFElecPredRes = _0RL_tc_seqLFElecPredRes;





static CORBA::TypeCode_ptr _0RL_tc_seqLFStirrPredRes = CORBA::TypeCode::PR_alias_tc("IDL:seqLFStirrPredRes:1.0", "seqLFStirrPredRes", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sLFStirrPredRes, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqLFStirrPredRes = _0RL_tc_seqLFStirrPredRes;

static CORBA::PR_structMember _0RL_structmember_sAODGlobalSetpoints[] = {
  {"O2VolStartMatAddn", CORBA::TypeCode::PR_double_tc()},
  {"O2VolStartScrapChute", CORBA::TypeCode::PR_double_tc()},
  {"O2VolSubLance", CORBA::TypeCode::PR_double_tc()},
  {"O2VolTotal", CORBA::TypeCode::PR_double_tc()},
  {"O2VolTotalLance", CORBA::TypeCode::PR_double_tc()},
  {"N2VolTotal", CORBA::TypeCode::PR_double_tc()},
  {"MatFeedRate", CORBA::TypeCode::PR_double_tc()},
  {"MatDynFeedRate", CORBA::TypeCode::PR_double_tc()},
  {"O2VolStartMatDynAddn", CORBA::TypeCode::PR_double_tc()},
  {"AimTapWeightCalc", CORBA::TypeCode::PR_double_tc()},
  {"DurStartMatAddn", CORBA::TypeCode::PR_double_tc()},
  {"DurStartMatDynAddn", CORBA::TypeCode::PR_double_tc()},
  {"DurStartScrapChute", CORBA::TypeCode::PR_double_tc()},
  {"DurSubLance", CORBA::TypeCode::PR_double_tc()},
  {"O2VolStartMat2ndAddn", CORBA::TypeCode::PR_double_tc()},
  {"DurStartMat2ndAddn", CORBA::TypeCode::PR_double_tc()},
  {"MatFeedRate2ndAdd", CORBA::TypeCode::PR_double_tc()},
  {"O2VolSwN2toAr", CORBA::TypeCode::PR_double_tc()},
  {"DurUntilN2ToAr", CORBA::TypeCode::PR_double_tc()},
  {"N2VolSwN2toAr", CORBA::TypeCode::PR_double_tc()},
  {"AimSteelMassCalc", CORBA::TypeCode::PR_double_tc()},
  {"Duration", CORBA::TypeCode::PR_double_tc()},
  {"LanceO2Flow", CORBA::TypeCode::PR_double_tc()},
  {"LanceN2Flow", CORBA::TypeCode::PR_double_tc()},
  {"LanceArFlow", CORBA::TypeCode::PR_double_tc()},
  {"TuyereO2Flow", CORBA::TypeCode::PR_double_tc()},
  {"TuyereN2Flow", CORBA::TypeCode::PR_double_tc()},
  {"TuyereArFlow", CORBA::TypeCode::PR_double_tc()},
  {"LanceDepth", CORBA::TypeCode::PR_double_tc()},
  {"CalcSteelWeight", CORBA::TypeCode::PR_double_tc()},
  {"CalcSlagWeight", CORBA::TypeCode::PR_double_tc()},
  {"CalcTemp", CORBA::TypeCode::PR_double_tc()},
  {"DecarbDelta", CORBA::TypeCode::PR_double_tc()}
};

#ifdef _0RL_tc_sAODGlobalSetpoints
#  undef _0RL_tc_sAODGlobalSetpoints
#endif
static CORBA::TypeCode_ptr _0RL_tc_sAODGlobalSetpoints = CORBA::TypeCode::PR_struct_tc("IDL:sAODGlobalSetpoints:1.0", "sAODGlobalSetpoints", _0RL_structmember_sAODGlobalSetpoints, 33, &_0RL_tcTrack);

const CORBA::TypeCode_ptr _tc_sAODGlobalSetpoints = _0RL_tc_sAODGlobalSetpoints;






static CORBA::TypeCode_ptr _0RL_tc_seqAODGlobalSetpoints = CORBA::TypeCode::PR_alias_tc("IDL:seqAODGlobalSetpoints:1.0", "seqAODGlobalSetpoints", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sAODGlobalSetpoints, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqAODGlobalSetpoints = _0RL_tc_seqAODGlobalSetpoints;





static CORBA::PR_structMember _0RL_structmember_sGenRes[] = {
  {"Analysis", _0RL_tc_seqAnalysis},
  {"SteelWeight", CORBA::TypeCode::PR_double_tc()},
  {"SlagWeight", CORBA::TypeCode::PR_double_tc()},
  {"Temp", CORBA::TypeCode::PR_double_tc()},
  {"DurPhase", CORBA::TypeCode::PR_double_tc()},
  {"MetTimeStamp", _0RL_tc_sMetTimeStamp}
};

#ifdef _0RL_tc_sGenRes
#  undef _0RL_tc_sGenRes
#endif
static CORBA::TypeCode_ptr _0RL_tc_sGenRes = CORBA::TypeCode::PR_struct_tc("IDL:sGenRes:1.0", "sGenRes", _0RL_structmember_sGenRes, 6, &_0RL_tcTrack);





const CORBA::TypeCode_ptr _tc_sGenRes = _0RL_tc_sGenRes;







static CORBA::PR_structMember _0RL_structmember_sAODPredBlowRes[] = {
  {"Phase", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"PhaseNo", CORBA::TypeCode::PR_long_tc()},
  {"O2Vol", CORBA::TypeCode::PR_double_tc()},
  {"TopLanceO2Flow", CORBA::TypeCode::PR_double_tc()},
  {"TopLanceN2Flow", CORBA::TypeCode::PR_double_tc()},
  {"TopLanceArFlow", CORBA::TypeCode::PR_double_tc()},
  {"TopLanceO2Cons", CORBA::TypeCode::PR_double_tc()},
  {"TopLanceArCons", CORBA::TypeCode::PR_double_tc()},
  {"TopLanceN2Cons", CORBA::TypeCode::PR_double_tc()},
  {"TuyerO2Flow", CORBA::TypeCode::PR_double_tc()},
  {"TuyerN2Flow", CORBA::TypeCode::PR_double_tc()},
  {"TuyerArFlow", CORBA::TypeCode::PR_double_tc()},
  {"TuyerO2Cons", CORBA::TypeCode::PR_double_tc()},
  {"TuyerArCons", CORBA::TypeCode::PR_double_tc()},
  {"TuyerN2Cons", CORBA::TypeCode::PR_double_tc()},
  {"DecarbRate", CORBA::TypeCode::PR_double_tc()},
  {"ChromDeslagRate", CORBA::TypeCode::PR_double_tc()},
  {"TopLanceHeight", CORBA::TypeCode::PR_double_tc()},
  {"PhaseActive", CORBA::TypeCode::PR_long_tc()},
  {"GenRes", _0RL_tc_sGenRes}
};

#ifdef _0RL_tc_sAODPredBlowRes
#  undef _0RL_tc_sAODPredBlowRes
#endif
static CORBA::TypeCode_ptr _0RL_tc_sAODPredBlowRes = CORBA::TypeCode::PR_struct_tc("IDL:sAODPredBlowRes:1.0", "sAODPredBlowRes", _0RL_structmember_sAODPredBlowRes, 20, &_0RL_tcTrack);






const CORBA::TypeCode_ptr _tc_sAODPredBlowRes = _0RL_tc_sAODPredBlowRes;







static CORBA::PR_structMember _0RL_structmember_sPredRes[] = {
  {"Phase", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"PhaseNo", CORBA::TypeCode::PR_long_tc()},
  {"GenRes", _0RL_tc_sGenRes},
  {"PhaseActive", CORBA::TypeCode::PR_long_tc()}
};

#ifdef _0RL_tc_sPredRes
#  undef _0RL_tc_sPredRes
#endif
static CORBA::TypeCode_ptr _0RL_tc_sPredRes = CORBA::TypeCode::PR_struct_tc("IDL:sPredRes:1.0", "sPredRes", _0RL_structmember_sPredRes, 4, &_0RL_tcTrack);






const CORBA::TypeCode_ptr _tc_sPredRes = _0RL_tc_sPredRes;


























static CORBA::TypeCode_ptr _0RL_tc_seqAODBlowPredRes = CORBA::TypeCode::PR_alias_tc("IDL:seqAODBlowPredRes:1.0", "seqAODBlowPredRes", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sAODPredBlowRes, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqAODBlowPredRes = _0RL_tc_seqAODBlowPredRes;

























static CORBA::TypeCode_ptr _0RL_tc_seqPredRes = CORBA::TypeCode::PR_alias_tc("IDL:seqPredRes:1.0", "seqPredRes", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sPredRes, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqPredRes = _0RL_tc_seqPredRes;

static CORBA::PR_structMember _0RL_structmember_sCoolWater[] = {
  {"CircuitName", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"WaterFlow", CORBA::TypeCode::PR_double_tc()},
  {"OutletTemp", CORBA::TypeCode::PR_double_tc()},
  {"InletTemp", CORBA::TypeCode::PR_double_tc()}
};

#ifdef _0RL_tc_sCoolWater
#  undef _0RL_tc_sCoolWater
#endif
static CORBA::TypeCode_ptr _0RL_tc_sCoolWater = CORBA::TypeCode::PR_struct_tc("IDL:sCoolWater:1.0", "sCoolWater", _0RL_structmember_sCoolWater, 4, &_0RL_tcTrack);

const CORBA::TypeCode_ptr _tc_sCoolWater = _0RL_tc_sCoolWater;


static CORBA::PR_structMember _0RL_structmember_sComputerMode[] = {
  {"Device", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"Status", CORBA::TypeCode::PR_long_tc()}
};

#ifdef _0RL_tc_sComputerMode
#  undef _0RL_tc_sComputerMode
#endif
static CORBA::TypeCode_ptr _0RL_tc_sComputerMode = CORBA::TypeCode::PR_struct_tc("IDL:sComputerMode:1.0", "sComputerMode", _0RL_structmember_sComputerMode, 2, &_0RL_tcTrack);

const CORBA::TypeCode_ptr _tc_sComputerMode = _0RL_tc_sComputerMode;



static CORBA::PR_structMember _0RL_structmember_sCoolWaterDevice[] = {
  {"CoolWaterDeviceNo", CORBA::TypeCode::PR_long_tc()},
  {"CoolWaterDevice", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"CoolWaterData", _0RL_tc_sCoolWater}
};

#ifdef _0RL_tc_sCoolWaterDevice
#  undef _0RL_tc_sCoolWaterDevice
#endif
static CORBA::TypeCode_ptr _0RL_tc_sCoolWaterDevice = CORBA::TypeCode::PR_struct_tc("IDL:sCoolWaterDevice:1.0", "sCoolWaterDevice", _0RL_structmember_sCoolWaterDevice, 3, &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_sCoolWaterDevice = _0RL_tc_sCoolWaterDevice;










static CORBA::TypeCode_ptr _0RL_tc_seqCoolWaterData = CORBA::TypeCode::PR_alias_tc("IDL:seqCoolWaterData:1.0", "seqCoolWaterData", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sCoolWaterDevice, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqCoolWaterData = _0RL_tc_seqCoolWaterData;





static CORBA::TypeCode_ptr _0RL_tc_seqComputerModes = CORBA::TypeCode::PR_alias_tc("IDL:seqComputerModes:1.0", "seqComputerModes", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sComputerMode, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqComputerModes = _0RL_tc_seqComputerModes;

static CORBA::PR_structMember _0RL_structmember_sWireFeeder[] = {
  {"WireFeederLineNo", CORBA::TypeCode::PR_long_tc()},
  {"WireFeederMatCode", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"WireFeedSpeed", CORBA::TypeCode::PR_double_tc()},
  {"WireFeederAmount", CORBA::TypeCode::PR_double_tc()}
};

#ifdef _0RL_tc_sWireFeeder
#  undef _0RL_tc_sWireFeeder
#endif
static CORBA::TypeCode_ptr _0RL_tc_sWireFeeder = CORBA::TypeCode::PR_struct_tc("IDL:sWireFeeder:1.0", "sWireFeeder", _0RL_structmember_sWireFeeder, 4, &_0RL_tcTrack);

const CORBA::TypeCode_ptr _tc_sWireFeeder = _0RL_tc_sWireFeeder;






static CORBA::TypeCode_ptr _0RL_tc_seqWireFeeder = CORBA::TypeCode::PR_alias_tc("IDL:seqWireFeeder:1.0", "seqWireFeeder", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sWireFeeder, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqWireFeeder = _0RL_tc_seqWireFeeder;

static CORBA::TypeCode_ptr _0RL_tc_seqStringList = CORBA::TypeCode::PR_alias_tc("IDL:seqStringList:1.0", "seqStringList", CORBA::TypeCode::PR_sequence_tc(0, CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack), &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqStringList = _0RL_tc_seqStringList;

static CORBA::PR_structMember _0RL_structmember_sGasData[] = {
  {"GasType", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"GasValue", CORBA::TypeCode::PR_double_tc()}
};

#ifdef _0RL_tc_sGasData
#  undef _0RL_tc_sGasData
#endif
static CORBA::TypeCode_ptr _0RL_tc_sGasData = CORBA::TypeCode::PR_struct_tc("IDL:sGasData:1.0", "sGasData", _0RL_structmember_sGasData, 2, &_0RL_tcTrack);

const CORBA::TypeCode_ptr _tc_sGasData = _0RL_tc_sGasData;






static CORBA::TypeCode_ptr _0RL_tc_seqGasData = CORBA::TypeCode::PR_alias_tc("IDL:seqGasData:1.0", "seqGasData", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sGasData, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqGasData = _0RL_tc_seqGasData;


static CORBA::PR_structMember _0RL_structmember_sGasLanceData[] = {
  {"LanceData", _0RL_tc_seqGasData},
  {"Device", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)}
};

#ifdef _0RL_tc_sGasLanceData
#  undef _0RL_tc_sGasLanceData
#endif
static CORBA::TypeCode_ptr _0RL_tc_sGasLanceData = CORBA::TypeCode::PR_struct_tc("IDL:sGasLanceData:1.0", "sGasLanceData", _0RL_structmember_sGasLanceData, 2, &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_sGasLanceData = _0RL_tc_sGasLanceData;










static CORBA::TypeCode_ptr _0RL_tc_seqGasLanceData = CORBA::TypeCode::PR_alias_tc("IDL:seqGasLanceData:1.0", "seqGasLanceData", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sGasLanceData, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqGasLanceData = _0RL_tc_seqGasLanceData;


static CORBA::PR_structMember _0RL_structmember_sDeviceGasData[] = {
  {"Device", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"GasData", _0RL_tc_seqGasData}
};

#ifdef _0RL_tc_sDeviceGasData
#  undef _0RL_tc_sDeviceGasData
#endif
static CORBA::TypeCode_ptr _0RL_tc_sDeviceGasData = CORBA::TypeCode::PR_struct_tc("IDL:sDeviceGasData:1.0", "sDeviceGasData", _0RL_structmember_sDeviceGasData, 2, &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_sDeviceGasData = _0RL_tc_sDeviceGasData;










static CORBA::TypeCode_ptr _0RL_tc_seqDeviceGasData = CORBA::TypeCode::PR_alias_tc("IDL:seqDeviceGasData:1.0", "seqDeviceGasData", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sDeviceGasData, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqDeviceGasData = _0RL_tc_seqDeviceGasData;





static CORBA::PR_structMember _0RL_structmember_sEAFGasLancePredRes[] = {
  {"Phase", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"PhaseNo", CORBA::TypeCode::PR_long_tc()},
  {"Step", CORBA::TypeCode::PR_long_tc()},
  {"DurStep", CORBA::TypeCode::PR_double_tc()},
  {"GasFlow", _0RL_tc_seqDeviceGasData},
  {"ElecEgy", CORBA::TypeCode::PR_double_tc()},
  {"DurUntilEndOfStep", CORBA::TypeCode::PR_double_tc()},
  {"DurUntilStartOfStep", CORBA::TypeCode::PR_double_tc()},
  {"SpecEgyStep", CORBA::TypeCode::PR_double_tc()},
  {"ElecEgyStep", CORBA::TypeCode::PR_double_tc()},
  {"SpecEgy", CORBA::TypeCode::PR_double_tc()},
  {"BaseMass", CORBA::TypeCode::PR_double_tc()},
  {"GasAmount", _0RL_tc_seqDeviceGasData}
};

#ifdef _0RL_tc_sEAFGasLancePredRes
#  undef _0RL_tc_sEAFGasLancePredRes
#endif
static CORBA::TypeCode_ptr _0RL_tc_sEAFGasLancePredRes = CORBA::TypeCode::PR_struct_tc("IDL:sEAFGasLancePredRes:1.0", "sEAFGasLancePredRes", _0RL_structmember_sEAFGasLancePredRes, 13, &_0RL_tcTrack);





const CORBA::TypeCode_ptr _tc_sEAFGasLancePredRes = _0RL_tc_sEAFGasLancePredRes;






















static CORBA::TypeCode_ptr _0RL_tc_seqEAFGasLancePredRes = CORBA::TypeCode::PR_alias_tc("IDL:seqEAFGasLancePredRes:1.0", "seqEAFGasLancePredRes", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sEAFGasLancePredRes, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqEAFGasLancePredRes = _0RL_tc_seqEAFGasLancePredRes;

static CORBA::PR_structMember _0RL_structmember_sGasAvail[] = {
  {"GasType", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"GasAvail", CORBA::TypeCode::PR_long_tc()}
};

#ifdef _0RL_tc_sGasAvail
#  undef _0RL_tc_sGasAvail
#endif
static CORBA::TypeCode_ptr _0RL_tc_sGasAvail = CORBA::TypeCode::PR_struct_tc("IDL:sGasAvail:1.0", "sGasAvail", _0RL_structmember_sGasAvail, 2, &_0RL_tcTrack);

const CORBA::TypeCode_ptr _tc_sGasAvail = _0RL_tc_sGasAvail;






static CORBA::TypeCode_ptr _0RL_tc_seqGasAvail = CORBA::TypeCode::PR_alias_tc("IDL:seqGasAvail:1.0", "seqGasAvail", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sGasAvail, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqGasAvail = _0RL_tc_seqGasAvail;

static CORBA::PR_structMember _0RL_structmember_sWasteGas[] = {
  {"WasteGasType", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"WasteGasConc", CORBA::TypeCode::PR_double_tc()}
};

#ifdef _0RL_tc_sWasteGas
#  undef _0RL_tc_sWasteGas
#endif
static CORBA::TypeCode_ptr _0RL_tc_sWasteGas = CORBA::TypeCode::PR_struct_tc("IDL:sWasteGas:1.0", "sWasteGas", _0RL_structmember_sWasteGas, 2, &_0RL_tcTrack);

const CORBA::TypeCode_ptr _tc_sWasteGas = _0RL_tc_sWasteGas;






static CORBA::TypeCode_ptr _0RL_tc_seqWasteGas = CORBA::TypeCode::PR_alias_tc("IDL:seqWasteGas:1.0", "seqWasteGas", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sWasteGas, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqWasteGas = _0RL_tc_seqWasteGas;


static CORBA::PR_structMember _0RL_structmember_sBlowStatus[] = {
  {"BlowDevice", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"BlowStatus", CORBA::TypeCode::PR_long_tc()},
  {"BlowTime", _0RL_tc_sDate}
};

#ifdef _0RL_tc_sBlowStatus
#  undef _0RL_tc_sBlowStatus
#endif
static CORBA::TypeCode_ptr _0RL_tc_sBlowStatus = CORBA::TypeCode::PR_struct_tc("IDL:sBlowStatus:1.0", "sBlowStatus", _0RL_structmember_sBlowStatus, 3, &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_sBlowStatus = _0RL_tc_sBlowStatus;










static CORBA::TypeCode_ptr _0RL_tc_seqBlowStatus = CORBA::TypeCode::PR_alias_tc("IDL:seqBlowStatus:1.0", "seqBlowStatus", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sBlowStatus, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqBlowStatus = _0RL_tc_seqBlowStatus;



static CORBA::PR_structMember _0RL_structmember_sStatus[] = {
  {"Device", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"Status", CORBA::TypeCode::PR_long_tc()},
  {"StatusName", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"EndTime", _0RL_tc_sDate},
  {"StartTime", _0RL_tc_sDate}
};

#ifdef _0RL_tc_sStatus
#  undef _0RL_tc_sStatus
#endif
static CORBA::TypeCode_ptr _0RL_tc_sStatus = CORBA::TypeCode::PR_struct_tc("IDL:sStatus:1.0", "sStatus", _0RL_structmember_sStatus, 5, &_0RL_tcTrack);



const CORBA::TypeCode_ptr _tc_sStatus = _0RL_tc_sStatus;














static CORBA::TypeCode_ptr _0RL_tc_seqStatus = CORBA::TypeCode::PR_alias_tc("IDL:seqStatus:1.0", "seqStatus", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sStatus, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqStatus = _0RL_tc_seqStatus;



static CORBA::PR_structMember _0RL_structmember_sHeatSchedulePlant[] = {
  {"Plant", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"TreatID", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"TreatStartPlan", _0RL_tc_sDate},
  {"TreatEndPlan", _0RL_tc_sDate},
  {"PlantNo", CORBA::TypeCode::PR_long_tc()}
};

#ifdef _0RL_tc_sHeatSchedulePlant
#  undef _0RL_tc_sHeatSchedulePlant
#endif
static CORBA::TypeCode_ptr _0RL_tc_sHeatSchedulePlant = CORBA::TypeCode::PR_struct_tc("IDL:sHeatSchedulePlant:1.0", "sHeatSchedulePlant", _0RL_structmember_sHeatSchedulePlant, 5, &_0RL_tcTrack);



const CORBA::TypeCode_ptr _tc_sHeatSchedulePlant = _0RL_tc_sHeatSchedulePlant;














static CORBA::TypeCode_ptr _0RL_tc_seqHeatSchedulePlant = CORBA::TypeCode::PR_alias_tc("IDL:seqHeatSchedulePlant:1.0", "seqHeatSchedulePlant", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sHeatSchedulePlant, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqHeatSchedulePlant = _0RL_tc_seqHeatSchedulePlant;




static CORBA::PR_structMember _0RL_structmember_sHeatSchedule[] = {
  {"HeatId", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"OrderId", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"RouteCode", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"CasterSeqId", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"CasterSeqNo", CORBA::TypeCode::PR_long_tc()},
  {"ActionFlag", CORBA::TypeCode::PR_long_tc()},
  {"HeatPlant", _0RL_tc_seqHeatSchedulePlant}
};

#ifdef _0RL_tc_sHeatSchedule
#  undef _0RL_tc_sHeatSchedule
#endif
static CORBA::TypeCode_ptr _0RL_tc_sHeatSchedule = CORBA::TypeCode::PR_struct_tc("IDL:sHeatSchedule:1.0", "sHeatSchedule", _0RL_structmember_sHeatSchedule, 7, &_0RL_tcTrack);




const CORBA::TypeCode_ptr _tc_sHeatSchedule = _0RL_tc_sHeatSchedule;


















static CORBA::TypeCode_ptr _0RL_tc_seqHeatSchedule = CORBA::TypeCode::PR_alias_tc("IDL:seqHeatSchedule:1.0", "seqHeatSchedule", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sHeatSchedule, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqHeatSchedule = _0RL_tc_seqHeatSchedule;

static CORBA::PR_structMember _0RL_structmember_sOrderData[] = {
  {"SteelGradeCode", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"OrderId", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"AimSteelEAF", CORBA::TypeCode::PR_double_tc()},
  {"ActionFlag", CORBA::TypeCode::PR_long_tc()},
  {"AimSteelCCS", CORBA::TypeCode::PR_double_tc()},
  {"SlabDimension", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)}
};

#ifdef _0RL_tc_sOrderData
#  undef _0RL_tc_sOrderData
#endif
static CORBA::TypeCode_ptr _0RL_tc_sOrderData = CORBA::TypeCode::PR_struct_tc("IDL:sOrderData:1.0", "sOrderData", _0RL_structmember_sOrderData, 6, &_0RL_tcTrack);

const CORBA::TypeCode_ptr _tc_sOrderData = _0RL_tc_sOrderData;






static CORBA::TypeCode_ptr _0RL_tc_seqOrderData = CORBA::TypeCode::PR_alias_tc("IDL:seqOrderData:1.0", "seqOrderData", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sOrderData, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqOrderData = _0RL_tc_seqOrderData;


static CORBA::PR_structMember _0RL_structmember_sSampleData[] = {
  {"SampleCode", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"SampleTime", _0RL_tc_sDate},
  {"SampleNo", CORBA::TypeCode::PR_long_tc()},
  {"SampleType", CORBA::TypeCode::PR_long_tc()},
  {"PlantID", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"ProcessStage", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"SampleId", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"SampleMode", CORBA::TypeCode::PR_long_tc()},
  {"SampleLocation", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"SampleOrigin", CORBA::TypeCode::PR_long_tc()},
  {"SampleUsable", CORBA::TypeCode::PR_long_tc()}
};

#ifdef _0RL_tc_sSampleData
#  undef _0RL_tc_sSampleData
#endif
static CORBA::TypeCode_ptr _0RL_tc_sSampleData = CORBA::TypeCode::PR_struct_tc("IDL:sSampleData:1.0", "sSampleData", _0RL_structmember_sSampleData, 11, &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_sSampleData = _0RL_tc_sSampleData;










static CORBA::TypeCode_ptr _0RL_tc_seqSampleData = CORBA::TypeCode::PR_alias_tc("IDL:seqSampleData:1.0", "seqSampleData", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sSampleData, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqSampleData = _0RL_tc_seqSampleData;




static CORBA::PR_structMember _0RL_structmember_sAnalysisData[] = {
  {"SampleData", _0RL_tc_sSampleData},
  {"Analysis", _0RL_tc_seqAnalysis}
};

#ifdef _0RL_tc_sAnalysisData
#  undef _0RL_tc_sAnalysisData
#endif
static CORBA::TypeCode_ptr _0RL_tc_sAnalysisData = CORBA::TypeCode::PR_struct_tc("IDL:sAnalysisData:1.0", "sAnalysisData", _0RL_structmember_sAnalysisData, 2, &_0RL_tcTrack);




const CORBA::TypeCode_ptr _tc_sAnalysisData = _0RL_tc_sAnalysisData;


static CORBA::PR_structMember _0RL_structmember_sHeatData[] = {
  {"Plant", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"HeatId", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"Device", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"TreatId", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)}
};

#ifdef _0RL_tc_sHeatData
#  undef _0RL_tc_sHeatData
#endif
static CORBA::TypeCode_ptr _0RL_tc_sHeatData = CORBA::TypeCode::PR_struct_tc("IDL:sHeatData:1.0", "sHeatData", _0RL_structmember_sHeatData, 4, &_0RL_tcTrack);

const CORBA::TypeCode_ptr _tc_sHeatData = _0RL_tc_sHeatData;






static CORBA::TypeCode_ptr _0RL_tc_seqHeatData = CORBA::TypeCode::PR_alias_tc("IDL:seqHeatData:1.0", "seqHeatData", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sHeatData, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqHeatData = _0RL_tc_seqHeatData;

static CORBA::PR_structMember _0RL_structmember_sInjectLanceData[] = {
  {"Device", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"Value", CORBA::TypeCode::PR_double_tc()},
  {"MatCode", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"InjectionType", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"ModuleName", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)}
};

#ifdef _0RL_tc_sInjectLanceData
#  undef _0RL_tc_sInjectLanceData
#endif
static CORBA::TypeCode_ptr _0RL_tc_sInjectLanceData = CORBA::TypeCode::PR_struct_tc("IDL:sInjectLanceData:1.0", "sInjectLanceData", _0RL_structmember_sInjectLanceData, 5, &_0RL_tcTrack);

const CORBA::TypeCode_ptr _tc_sInjectLanceData = _0RL_tc_sInjectLanceData;






static CORBA::TypeCode_ptr _0RL_tc_seqInjectLanceData = CORBA::TypeCode::PR_alias_tc("IDL:seqInjectLanceData:1.0", "seqInjectLanceData", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sInjectLanceData, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqInjectLanceData = _0RL_tc_seqInjectLanceData;


static CORBA::PR_structMember _0RL_structmember_sGasLanceGasAvail[] = {
  {"Device", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"GasAvail", _0RL_tc_seqGasAvail}
};

#ifdef _0RL_tc_sGasLanceGasAvail
#  undef _0RL_tc_sGasLanceGasAvail
#endif
static CORBA::TypeCode_ptr _0RL_tc_sGasLanceGasAvail = CORBA::TypeCode::PR_struct_tc("IDL:sGasLanceGasAvail:1.0", "sGasLanceGasAvail", _0RL_structmember_sGasLanceGasAvail, 2, &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_sGasLanceGasAvail = _0RL_tc_sGasLanceGasAvail;










static CORBA::TypeCode_ptr _0RL_tc_seqGasLanceGasAvail = CORBA::TypeCode::PR_alias_tc("IDL:seqGasLanceGasAvail:1.0", "seqGasLanceGasAvail", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sGasLanceGasAvail, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqGasLanceGasAvail = _0RL_tc_seqGasLanceGasAvail;


static CORBA::PR_structMember _0RL_structmember_sBatchPrio[] = {
  {"BatchData", _0RL_tc_sBatch},
  {"ChargPrio", CORBA::TypeCode::PR_long_tc()}
};

#ifdef _0RL_tc_sBatchPrio
#  undef _0RL_tc_sBatchPrio
#endif
static CORBA::TypeCode_ptr _0RL_tc_sBatchPrio = CORBA::TypeCode::PR_struct_tc("IDL:sBatchPrio:1.0", "sBatchPrio", _0RL_structmember_sBatchPrio, 2, &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_sBatchPrio = _0RL_tc_sBatchPrio;










static CORBA::TypeCode_ptr _0RL_tc_seqBatchPrio = CORBA::TypeCode::PR_alias_tc("IDL:seqBatchPrio:1.0", "seqBatchPrio", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sBatchPrio, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqBatchPrio = _0RL_tc_seqBatchPrio;

















static CORBA::TypeCode_ptr _0RL_tc_seqAnalysisData = CORBA::TypeCode::PR_alias_tc("IDL:seqAnalysisData:1.0", "seqAnalysisData", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sAnalysisData, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqAnalysisData = _0RL_tc_seqAnalysisData;

static CORBA::PR_structMember _0RL_structmember_LFGlobalSetpoints[] = {
  {"GasType", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)}
};

#ifdef _0RL_tc_LFGlobalSetpoints
#  undef _0RL_tc_LFGlobalSetpoints
#endif
static CORBA::TypeCode_ptr _0RL_tc_LFGlobalSetpoints = CORBA::TypeCode::PR_struct_tc("IDL:LFGlobalSetpoints:1.0", "LFGlobalSetpoints", _0RL_structmember_LFGlobalSetpoints, 1, &_0RL_tcTrack);

const CORBA::TypeCode_ptr _tc_LFGlobalSetpoints = _0RL_tc_LFGlobalSetpoints;


static CORBA::PR_structMember _0RL_structmember_sLiqMatReport[] = {
  {"WeighingType", CORBA::TypeCode::PR_long_tc()},
  {"LiqMatType", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"LiqMatWeight", CORBA::TypeCode::PR_double_tc()}
};

#ifdef _0RL_tc_sLiqMatReport
#  undef _0RL_tc_sLiqMatReport
#endif
static CORBA::TypeCode_ptr _0RL_tc_sLiqMatReport = CORBA::TypeCode::PR_struct_tc("IDL:sLiqMatReport:1.0", "sLiqMatReport", _0RL_structmember_sLiqMatReport, 3, &_0RL_tcTrack);

const CORBA::TypeCode_ptr _tc_sLiqMatReport = _0RL_tc_sLiqMatReport;






static CORBA::TypeCode_ptr _0RL_tc_seqLiqMatReport = CORBA::TypeCode::PR_alias_tc("IDL:seqLiqMatReport:1.0", "seqLiqMatReport", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sLiqMatReport, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqLiqMatReport = _0RL_tc_seqLiqMatReport;






static CORBA::PR_structMember _0RL_structmember_sBOFPredBlowRes[] = {
  {"Phase", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"PhaseNo", CORBA::TypeCode::PR_long_tc()},
  {"PhaseActive", CORBA::TypeCode::PR_long_tc()},
  {"O2Vol", CORBA::TypeCode::PR_double_tc()},
  {"TopLanceO2Flow", CORBA::TypeCode::PR_double_tc()},
  {"TopLanceHeight", CORBA::TypeCode::PR_double_tc()},
  {"PorousPlugN2Flow", CORBA::TypeCode::PR_double_tc()},
  {"PorousPlugArFlow", CORBA::TypeCode::PR_double_tc()},
  {"O2MomentPorPlugs", CORBA::TypeCode::PR_double_tc()},
  {"DecarbRate", CORBA::TypeCode::PR_double_tc()},
  {"O2MomentTopLance", CORBA::TypeCode::PR_double_tc()},
  {"GenRes", _0RL_tc_sGenRes}
};

#ifdef _0RL_tc_sBOFPredBlowRes
#  undef _0RL_tc_sBOFPredBlowRes
#endif
static CORBA::TypeCode_ptr _0RL_tc_sBOFPredBlowRes = CORBA::TypeCode::PR_struct_tc("IDL:sBOFPredBlowRes:1.0", "sBOFPredBlowRes", _0RL_structmember_sBOFPredBlowRes, 12, &_0RL_tcTrack);






const CORBA::TypeCode_ptr _tc_sBOFPredBlowRes = _0RL_tc_sBOFPredBlowRes;


























static CORBA::TypeCode_ptr _0RL_tc_seqBOFBlowPredRes = CORBA::TypeCode::PR_alias_tc("IDL:seqBOFBlowPredRes:1.0", "seqBOFBlowPredRes", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sBOFPredBlowRes, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqBOFBlowPredRes = _0RL_tc_seqBOFBlowPredRes;

static CORBA::PR_structMember _0RL_structmember_sInjectData[] = {
  {"InjectMatCode", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"InjectMatValue", CORBA::TypeCode::PR_double_tc()},
  {"InjectType", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)}
};

#ifdef _0RL_tc_sInjectData
#  undef _0RL_tc_sInjectData
#endif
static CORBA::TypeCode_ptr _0RL_tc_sInjectData = CORBA::TypeCode::PR_struct_tc("IDL:sInjectData:1.0", "sInjectData", _0RL_structmember_sInjectData, 3, &_0RL_tcTrack);

const CORBA::TypeCode_ptr _tc_sInjectData = _0RL_tc_sInjectData;






static CORBA::TypeCode_ptr _0RL_tc_seqInjectData = CORBA::TypeCode::PR_alias_tc("IDL:seqInjectData:1.0", "seqInjectData", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sInjectData, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqInjectData = _0RL_tc_seqInjectData;



static CORBA::PR_structMember _0RL_structmember_sEAFInjectLance[] = {
  {"Phase", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"PhaseNo", CORBA::TypeCode::PR_long_tc()},
  {"Step", CORBA::TypeCode::PR_long_tc()},
  {"DurStep", CORBA::TypeCode::PR_double_tc()},
  {"Egy", CORBA::TypeCode::PR_double_tc()},
  {"RemEgy", CORBA::TypeCode::PR_double_tc()},
  {"DurUntilEndOfStep", CORBA::TypeCode::PR_double_tc()},
  {"DurUntilStartOfStep", CORBA::TypeCode::PR_double_tc()},
  {"SpecEgyStep", CORBA::TypeCode::PR_double_tc()},
  {"ElecEgyStep", CORBA::TypeCode::PR_double_tc()},
  {"SpecEgy", CORBA::TypeCode::PR_double_tc()},
  {"BaseMass", CORBA::TypeCode::PR_double_tc()},
  {"InjectFlow", _0RL_tc_seqInjectLanceData},
  {"InjectAmount", _0RL_tc_seqInjectLanceData}
};

#ifdef _0RL_tc_sEAFInjectLance
#  undef _0RL_tc_sEAFInjectLance
#endif
static CORBA::TypeCode_ptr _0RL_tc_sEAFInjectLance = CORBA::TypeCode::PR_struct_tc("IDL:sEAFInjectLance:1.0", "sEAFInjectLance", _0RL_structmember_sEAFInjectLance, 14, &_0RL_tcTrack);



const CORBA::TypeCode_ptr _tc_sEAFInjectLance = _0RL_tc_sEAFInjectLance;














static CORBA::TypeCode_ptr _0RL_tc_seqEAFInjectLance = CORBA::TypeCode::PR_alias_tc("IDL:seqEAFInjectLance:1.0", "seqEAFInjectLance", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sEAFInjectLance, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqEAFInjectLance = _0RL_tc_seqEAFInjectLance;

static CORBA::TypeCode_ptr _0RL_tc_DEF_mseqDouble = CORBA::TypeCode::PR_alias_tc("IDL:DEF/seqDouble:1.0", "seqDouble", CORBA::TypeCode::PR_sequence_tc(0, CORBA::TypeCode::PR_double_tc(), &_0RL_tcTrack), &_0RL_tcTrack);





static CORBA::PR_structMember _0RL_structmember_sHMDCalc[] = {
  {"Lime", _0RL_tc_DEF_mseqDouble},
  {"Material", _0RL_tc_seqBatchPrio},
  {"Analysis", _0RL_tc_seqAnalysis},
  {"Carbide", _0RL_tc_DEF_mseqDouble},
  {"Magnesium", _0RL_tc_DEF_mseqDouble}
};

#ifdef _0RL_tc_sHMDCalc
#  undef _0RL_tc_sHMDCalc
#endif
static CORBA::TypeCode_ptr _0RL_tc_sHMDCalc = CORBA::TypeCode::PR_struct_tc("IDL:sHMDCalc:1.0", "sHMDCalc", _0RL_structmember_sHMDCalc, 5, &_0RL_tcTrack);




const CORBA::TypeCode_ptr _tc_sHMDCalc = _0RL_tc_sHMDCalc;


static CORBA::PR_structMember _0RL_structmember_sConArcElecData[] = {
  {"BasketNo", CORBA::TypeCode::PR_long_tc()},
  {"ReactTapNo", CORBA::TypeCode::PR_long_tc()},
  {"TransfTapNo", CORBA::TypeCode::PR_long_tc()},
  {"ArcLenNo", CORBA::TypeCode::PR_long_tc()},
  {"DurUntilEndOfStep", CORBA::TypeCode::PR_double_tc()},
  {"DurUntilStartOfStep", CORBA::TypeCode::PR_double_tc()},
  {"SpecEgyStep", CORBA::TypeCode::PR_double_tc()},
  {"SpecEgy", CORBA::TypeCode::PR_double_tc()},
  {"ElecEgyStep", CORBA::TypeCode::PR_double_tc()},
  {"ElecEgy", CORBA::TypeCode::PR_double_tc()},
  {"EnergyStart", CORBA::TypeCode::PR_double_tc()}
};

#ifdef _0RL_tc_sConArcElecData
#  undef _0RL_tc_sConArcElecData
#endif
static CORBA::TypeCode_ptr _0RL_tc_sConArcElecData = CORBA::TypeCode::PR_struct_tc("IDL:sConArcElecData:1.0", "sConArcElecData", _0RL_structmember_sConArcElecData, 11, &_0RL_tcTrack);

const CORBA::TypeCode_ptr _tc_sConArcElecData = _0RL_tc_sConArcElecData;


static CORBA::PR_structMember _0RL_structmember_sConArcMediaData[] = {
  {"DeviceName", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"DeviceNo", CORBA::TypeCode::PR_long_tc()},
  {"MediaTypeSelect", CORBA::TypeCode::PR_long_tc()},
  {"MediaType", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"Flow", CORBA::TypeCode::PR_double_tc()},
  {"Cons", CORBA::TypeCode::PR_double_tc()}
};

#ifdef _0RL_tc_sConArcMediaData
#  undef _0RL_tc_sConArcMediaData
#endif
static CORBA::TypeCode_ptr _0RL_tc_sConArcMediaData = CORBA::TypeCode::PR_struct_tc("IDL:sConArcMediaData:1.0", "sConArcMediaData", _0RL_structmember_sConArcMediaData, 6, &_0RL_tcTrack);

const CORBA::TypeCode_ptr _tc_sConArcMediaData = _0RL_tc_sConArcMediaData;






static CORBA::TypeCode_ptr _0RL_tc_seqConArcElecData = CORBA::TypeCode::PR_alias_tc("IDL:seqConArcElecData:1.0", "seqConArcElecData", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sConArcElecData, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqConArcElecData = _0RL_tc_seqConArcElecData;





static CORBA::TypeCode_ptr _0RL_tc_seqConArcMediaData = CORBA::TypeCode::PR_alias_tc("IDL:seqConArcMediaData:1.0", "seqConArcMediaData", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sConArcMediaData, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqConArcMediaData = _0RL_tc_seqConArcMediaData;




static CORBA::PR_structMember _0RL_structmember_sConArcSetptData[] = {
  {"EgyTotal", CORBA::TypeCode::PR_double_tc()},
  {"MediaData", _0RL_tc_seqConArcMediaData},
  {"ElecData", _0RL_tc_sConArcElecData},
  {"MatFeedTotalMass", _0RL_tc_seqConArcMediaData}
};

#ifdef _0RL_tc_sConArcSetptData
#  undef _0RL_tc_sConArcSetptData
#endif
static CORBA::TypeCode_ptr _0RL_tc_sConArcSetptData = CORBA::TypeCode::PR_struct_tc("IDL:sConArcSetptData:1.0", "sConArcSetptData", _0RL_structmember_sConArcSetptData, 4, &_0RL_tcTrack);




const CORBA::TypeCode_ptr _tc_sConArcSetptData = _0RL_tc_sConArcSetptData;




static CORBA::PR_structMember _0RL_structmember_sConArcMeasData[] = {
  {"SlagQuality", CORBA::TypeCode::PR_double_tc()},
  {"MediaData", _0RL_tc_seqConArcMediaData},
  {"ElecData", _0RL_tc_sConArcElecData}
};

#ifdef _0RL_tc_sConArcMeasData
#  undef _0RL_tc_sConArcMeasData
#endif
static CORBA::TypeCode_ptr _0RL_tc_sConArcMeasData = CORBA::TypeCode::PR_struct_tc("IDL:sConArcMeasData:1.0", "sConArcMeasData", _0RL_structmember_sConArcMeasData, 3, &_0RL_tcTrack);



const CORBA::TypeCode_ptr _tc_sConArcMeasData = _0RL_tc_sConArcMeasData;


















static CORBA::TypeCode_ptr _0RL_tc_seqConArcSetptData = CORBA::TypeCode::PR_alias_tc("IDL:seqConArcSetptData:1.0", "seqConArcSetptData", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sConArcSetptData, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqConArcSetptData = _0RL_tc_seqConArcSetptData;













static CORBA::TypeCode_ptr _0RL_tc_seqConArcMeasData = CORBA::TypeCode::PR_alias_tc("IDL:seqConArcMeasData:1.0", "seqConArcMeasData", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sConArcMeasData, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqConArcMeasData = _0RL_tc_seqConArcMeasData;


static CORBA::PR_structMember _0RL_structmember_sEAFMatFeedPredRes[] = {
  {"BasketNo", CORBA::TypeCode::PR_long_tc()},
  {"Step", CORBA::TypeCode::PR_long_tc()},
  {"DurStep", CORBA::TypeCode::PR_double_tc()},
  {"DurUntilStartOfStep", CORBA::TypeCode::PR_double_tc()},
  {"DurUntilEndOfStep", CORBA::TypeCode::PR_double_tc()},
  {"Egy", CORBA::TypeCode::PR_double_tc()},
  {"SpecEgy", CORBA::TypeCode::PR_double_tc()},
  {"ElecEgyStep", CORBA::TypeCode::PR_double_tc()},
  {"BaseMass", CORBA::TypeCode::PR_double_tc()},
  {"MatFeedData", _0RL_tc_seqBatch},
  {"PhaseName", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"SpecEgyStep", CORBA::TypeCode::PR_double_tc()}
};

#ifdef _0RL_tc_sEAFMatFeedPredRes
#  undef _0RL_tc_sEAFMatFeedPredRes
#endif
static CORBA::TypeCode_ptr _0RL_tc_sEAFMatFeedPredRes = CORBA::TypeCode::PR_struct_tc("IDL:sEAFMatFeedPredRes:1.0", "sEAFMatFeedPredRes", _0RL_structmember_sEAFMatFeedPredRes, 12, &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_sEAFMatFeedPredRes = _0RL_tc_sEAFMatFeedPredRes;










static CORBA::TypeCode_ptr _0RL_tc_seqEAFMatFeedPredRes = CORBA::TypeCode::PR_alias_tc("IDL:seqEAFMatFeedPredRes:1.0", "seqEAFMatFeedPredRes", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sEAFMatFeedPredRes, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqEAFMatFeedPredRes = _0RL_tc_seqEAFMatFeedPredRes;

static CORBA::PR_structMember _0RL_structmember_sPhaseStatus[] = {
  {"PhaseName", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"Status", CORBA::TypeCode::PR_long_tc()}
};

#ifdef _0RL_tc_sPhaseStatus
#  undef _0RL_tc_sPhaseStatus
#endif
static CORBA::TypeCode_ptr _0RL_tc_sPhaseStatus = CORBA::TypeCode::PR_struct_tc("IDL:sPhaseStatus:1.0", "sPhaseStatus", _0RL_structmember_sPhaseStatus, 2, &_0RL_tcTrack);

const CORBA::TypeCode_ptr _tc_sPhaseStatus = _0RL_tc_sPhaseStatus;






static CORBA::TypeCode_ptr _0RL_tc_seqPhaseStatus = CORBA::TypeCode::PR_alias_tc("IDL:seqPhaseStatus:1.0", "seqPhaseStatus", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sPhaseStatus, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqPhaseStatus = _0RL_tc_seqPhaseStatus;

static CORBA::PR_structMember _0RL_structmember_sMaterial[] = {
  {"MatCode", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"MatWeight", CORBA::TypeCode::PR_double_tc()},
  {"Purpose", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"SourceNo", CORBA::TypeCode::PR_long_tc()},
  {"Source", CORBA::TypeCode::PR_long_tc()}
};

#ifdef _0RL_tc_sMaterial
#  undef _0RL_tc_sMaterial
#endif
static CORBA::TypeCode_ptr _0RL_tc_sMaterial = CORBA::TypeCode::PR_struct_tc("IDL:sMaterial:1.0", "sMaterial", _0RL_structmember_sMaterial, 5, &_0RL_tcTrack);

const CORBA::TypeCode_ptr _tc_sMaterial = _0RL_tc_sMaterial;






static CORBA::TypeCode_ptr _0RL_tc_seqMaterials = CORBA::TypeCode::PR_alias_tc("IDL:seqMaterials:1.0", "seqMaterials", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sMaterial, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqMaterials = _0RL_tc_seqMaterials;


static CORBA::PR_structMember _0RL_structmember_sStirringData[] = {
  {"Device", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"GasData", _0RL_tc_seqGasData}
};

#ifdef _0RL_tc_sStirringData
#  undef _0RL_tc_sStirringData
#endif
static CORBA::TypeCode_ptr _0RL_tc_sStirringData = CORBA::TypeCode::PR_struct_tc("IDL:sStirringData:1.0", "sStirringData", _0RL_structmember_sStirringData, 2, &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_sStirringData = _0RL_tc_sStirringData;










static CORBA::TypeCode_ptr _0RL_tc_seqStirringData = CORBA::TypeCode::PR_alias_tc("IDL:seqStirringData:1.0", "seqStirringData", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sStirringData, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqStirringData = _0RL_tc_seqStirringData;

static CORBA::PR_structMember _0RL_structmember_sProductIdentification[] = {
  {"HeatId", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"TreatId", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"OrderId", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"Plant", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)}
};

#ifdef _0RL_tc_sProductIdentification
#  undef _0RL_tc_sProductIdentification
#endif
static CORBA::TypeCode_ptr _0RL_tc_sProductIdentification = CORBA::TypeCode::PR_struct_tc("IDL:sProductIdentification:1.0", "sProductIdentification", _0RL_structmember_sProductIdentification, 4, &_0RL_tcTrack);

const CORBA::TypeCode_ptr _tc_sProductIdentification = _0RL_tc_sProductIdentification;









static CORBA::PR_structMember _0RL_structmember_sRecipe[] = {
  {"RecipeName", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"RecipeNo", CORBA::TypeCode::PR_long_tc()},
  {"RecipeSource", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"RecipeContent", _0RL_tc_seqBatchPrio},
  {"TimeStamp", _0RL_tc_sMetTimeStamp},
  {"Product", _0RL_tc_sProductIdentification},
  {"RecipeData", _0RL_tc_sRecipeProperties},
  {"MatFeedRate", CORBA::TypeCode::PR_double_tc()},
  {"ChargeMoment", CORBA::TypeCode::PR_double_tc()},
  {"RecipeName_Model", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"RecipeNo_Model", CORBA::TypeCode::PR_long_tc()}
};

#ifdef _0RL_tc_sRecipe
#  undef _0RL_tc_sRecipe
#endif
static CORBA::TypeCode_ptr _0RL_tc_sRecipe = CORBA::TypeCode::PR_struct_tc("IDL:sRecipe:1.0", "sRecipe", _0RL_structmember_sRecipe, 11, &_0RL_tcTrack);








const CORBA::TypeCode_ptr _tc_sRecipe = _0RL_tc_sRecipe;


































static CORBA::TypeCode_ptr _0RL_tc_seqRecipeList = CORBA::TypeCode::PR_alias_tc("IDL:seqRecipeList:1.0", "seqRecipeList", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sRecipe, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqRecipeList = _0RL_tc_seqRecipeList;





static CORBA::TypeCode_ptr _0RL_tc_seqProductIdentification = CORBA::TypeCode::PR_alias_tc("IDL:seqProductIdentification:1.0", "seqProductIdentification", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sProductIdentification, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqProductIdentification = _0RL_tc_seqProductIdentification;

















static CORBA::TypeCode_ptr _0RL_tc_seqHMDCalc = CORBA::TypeCode::PR_alias_tc("IDL:seqHMDCalc:1.0", "seqHMDCalc", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sHMDCalc, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqHMDCalc = _0RL_tc_seqHMDCalc;









static CORBA::PR_structMember _0RL_structmember_sHMDModelResult[] = {
  {"TreatmentKind", CORBA::TypeCode::PR_long_tc()},
  {"CalcAmount", _0RL_tc_seqHMDCalc},
  {"CalcFlow", _0RL_tc_seqHMDCalc},
  {"SlagAmount", _0RL_tc_DEF_mseqDouble},
  {"DurationDeslagging", _0RL_tc_DEF_mseqDouble},
  {"TemperatureAfter", _0RL_tc_DEF_mseqDouble},
  {"Cost", _0RL_tc_DEF_mseqDouble},
  {"Duration", _0RL_tc_DEF_mseqDouble},
  {"IWarn", CORBA::TypeCode::PR_long_tc()}
};

#ifdef _0RL_tc_sHMDModelResult
#  undef _0RL_tc_sHMDModelResult
#endif
static CORBA::TypeCode_ptr _0RL_tc_sHMDModelResult = CORBA::TypeCode::PR_struct_tc("IDL:sHMDModelResult:1.0", "sHMDModelResult", _0RL_structmember_sHMDModelResult, 9, &_0RL_tcTrack);









const CORBA::TypeCode_ptr _tc_sHMDModelResult = _0RL_tc_sHMDModelResult;











static CORBA::PR_structMember _0RL_structmember_sRHModelResult[] = {
  {"PhaseNo", CORBA::TypeCode::PR_long_tc()},
  {"Res_PhaseNoModel", CORBA::TypeCode::PR_long_tc()},
  {"TotDurPhase", CORBA::TypeCode::PR_double_tc()},
  {"Alloy", _0RL_tc_seqRecipeList},
  {"TempDiffAlloy", CORBA::TypeCode::PR_double_tc()},
  {"Analysis", _0RL_tc_seqAnalysis},
  {"SlagWeight", CORBA::TypeCode::PR_double_tc()},
  {"SteelWeight", CORBA::TypeCode::PR_double_tc()},
  {"PhaseCodeModel", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"PhaseName", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"HeatTemp", CORBA::TypeCode::PR_double_tc()},
  {"TempDiffPassive", CORBA::TypeCode::PR_double_tc()},
  {"OxygenAmount", CORBA::TypeCode::PR_double_tc()},
  {"OxygenFlow", CORBA::TypeCode::PR_double_tc()},
  {"PowderFlow", CORBA::TypeCode::PR_double_tc()},
  {"LanceDist", CORBA::TypeCode::PR_double_tc()},
  {"DurSinceHeatAnnouncement", CORBA::TypeCode::PR_double_tc()},
  {"RemDur", CORBA::TypeCode::PR_double_tc()},
  {"AlHeat", CORBA::TypeCode::PR_double_tc()},
  {"AlAlloy", CORBA::TypeCode::PR_double_tc()},
  {"AlDeox", CORBA::TypeCode::PR_double_tc()},
  {"VacuumPressure", CORBA::TypeCode::PR_double_tc()},
  {"DNTime", CORBA::TypeCode::PR_double_tc()},
  {"DHTime", CORBA::TypeCode::PR_double_tc()},
  {"TempDiffStep", CORBA::TypeCode::PR_double_tc()},
  {"LiftGasFlow", CORBA::TypeCode::PR_double_tc()},
  {"VacCurve", CORBA::TypeCode::PR_long_tc()},
  {"StirrIntensity", CORBA::TypeCode::PR_long_tc()},
  {"StirrGasFlow", CORBA::TypeCode::PR_double_tc()},
  {"StirrGasType", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)}
};

#ifdef _0RL_tc_sRHModelResult
#  undef _0RL_tc_sRHModelResult
#endif
static CORBA::TypeCode_ptr _0RL_tc_sRHModelResult = CORBA::TypeCode::PR_struct_tc("IDL:sRHModelResult:1.0", "sRHModelResult", _0RL_structmember_sRHModelResult, 30, &_0RL_tcTrack);










const CORBA::TypeCode_ptr _tc_sRHModelResult = _0RL_tc_sRHModelResult;










































static CORBA::TypeCode_ptr _0RL_tc_seqRHModelResult = CORBA::TypeCode::PR_alias_tc("IDL:seqRHModelResult:1.0", "seqRHModelResult", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sRHModelResult, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqRHModelResult = _0RL_tc_seqRHModelResult;





































static CORBA::TypeCode_ptr _0RL_tc_seqHMDModelResult = CORBA::TypeCode::PR_alias_tc("IDL:seqHMDModelResult:1.0", "seqHMDModelResult", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sHMDModelResult, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqHMDModelResult = _0RL_tc_seqHMDModelResult;





static CORBA::PR_structMember _0RL_structmember_sElecPhaseData[] = {
  {"PhaseNo", CORBA::TypeCode::PR_long_tc()},
  {"PhaseName", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"PhaseType", CORBA::TypeCode::PR_long_tc()},
  {"StartTime", _0RL_tc_sDate},
  {"EndTime", _0RL_tc_sDate},
  {"Duration", CORBA::TypeCode::PR_double_tc()},
  {"ElecCons", CORBA::TypeCode::PR_double_tc()},
  {"ElecConsStart", CORBA::TypeCode::PR_double_tc()},
  {"GasData", _0RL_tc_seqGasData},
  {"GasDataStart", _0RL_tc_seqGasData}
};

#ifdef _0RL_tc_sElecPhaseData
#  undef _0RL_tc_sElecPhaseData
#endif
static CORBA::TypeCode_ptr _0RL_tc_sElecPhaseData = CORBA::TypeCode::PR_struct_tc("IDL:sElecPhaseData:1.0", "sElecPhaseData", _0RL_structmember_sElecPhaseData, 10, &_0RL_tcTrack);





const CORBA::TypeCode_ptr _tc_sElecPhaseData = _0RL_tc_sElecPhaseData;






















static CORBA::TypeCode_ptr _0RL_tc_seqElecPhaseData = CORBA::TypeCode::PR_alias_tc("IDL:seqElecPhaseData:1.0", "seqElecPhaseData", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sElecPhaseData, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqElecPhaseData = _0RL_tc_seqElecPhaseData;










static CORBA::PR_structMember _0RL_structmember_sVDModelResult[] = {
  {"PhaseNo", CORBA::TypeCode::PR_long_tc()},
  {"PhaseName", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"Analysis", _0RL_tc_seqAnalysis},
  {"SteelWeight", CORBA::TypeCode::PR_double_tc()},
  {"SlagWeight", CORBA::TypeCode::PR_double_tc()},
  {"HeatTemp", CORBA::TypeCode::PR_double_tc()},
  {"TotDurPhase", CORBA::TypeCode::PR_double_tc()},
  {"Alloy", _0RL_tc_seqRecipeList},
  {"TempDiffAlloy", CORBA::TypeCode::PR_double_tc()},
  {"TempDiffStep", CORBA::TypeCode::PR_double_tc()},
  {"TempDiffPassive", CORBA::TypeCode::PR_double_tc()},
  {"RemDur", CORBA::TypeCode::PR_double_tc()},
  {"AlHeat", CORBA::TypeCode::PR_double_tc()},
  {"AlAlloy", CORBA::TypeCode::PR_double_tc()},
  {"AlDeox", CORBA::TypeCode::PR_double_tc()},
  {"DCTime", CORBA::TypeCode::PR_double_tc()},
  {"VacuumPressure", CORBA::TypeCode::PR_double_tc()},
  {"DNTime", CORBA::TypeCode::PR_double_tc()},
  {"DHTime", CORBA::TypeCode::PR_double_tc()},
  {"StirringFlow", CORBA::TypeCode::PR_double_tc()}
};

#ifdef _0RL_tc_sVDModelResult
#  undef _0RL_tc_sVDModelResult
#endif
static CORBA::TypeCode_ptr _0RL_tc_sVDModelResult = CORBA::TypeCode::PR_struct_tc("IDL:sVDModelResult:1.0", "sVDModelResult", _0RL_structmember_sVDModelResult, 20, &_0RL_tcTrack);










const CORBA::TypeCode_ptr _tc_sVDModelResult = _0RL_tc_sVDModelResult;










































static CORBA::TypeCode_ptr _0RL_tc_seqVDModelResult = CORBA::TypeCode::PR_alias_tc("IDL:seqVDModelResult:1.0", "seqVDModelResult", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sVDModelResult, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqVDModelResult = _0RL_tc_seqVDModelResult;

static CORBA::PR_structMember _0RL_structmember_sConArcBlowData[] = {
  {"O2MomentEndStep", CORBA::TypeCode::PR_double_tc()},
  {"O2Flow", CORBA::TypeCode::PR_double_tc()},
  {"O2Cons", CORBA::TypeCode::PR_double_tc()},
  {"TopLanceHeight", CORBA::TypeCode::PR_long_tc()},
  {"PorousPlugN2Flow", CORBA::TypeCode::PR_double_tc()},
  {"PorousPlugArFlow", CORBA::TypeCode::PR_double_tc()},
  {"O2Start", CORBA::TypeCode::PR_double_tc()}
};

#ifdef _0RL_tc_sConArcBlowData
#  undef _0RL_tc_sConArcBlowData
#endif
static CORBA::TypeCode_ptr _0RL_tc_sConArcBlowData = CORBA::TypeCode::PR_struct_tc("IDL:sConArcBlowData:1.0", "sConArcBlowData", _0RL_structmember_sConArcBlowData, 7, &_0RL_tcTrack);

const CORBA::TypeCode_ptr _tc_sConArcBlowData = _0RL_tc_sConArcBlowData;










static CORBA::PR_structMember _0RL_structmember_sConArcModelResult[] = {
  {"Phase", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"PhaseNo", CORBA::TypeCode::PR_long_tc()},
  {"GenRes", _0RL_tc_sGenRes},
  {"BaseMass", CORBA::TypeCode::PR_double_tc()},
  {"PhaseActive", CORBA::TypeCode::PR_long_tc()},
  {"ElectricalData", _0RL_tc_sConArcElecData},
  {"BlowingData", _0RL_tc_sConArcBlowData},
  {"MaterialData", _0RL_tc_seqConArcMediaData},
  {"StepNo", CORBA::TypeCode::PR_long_tc()},
  {"DecarbRate", CORBA::TypeCode::PR_double_tc()}
};

#ifdef _0RL_tc_sConArcModelResult
#  undef _0RL_tc_sConArcModelResult
#endif
static CORBA::TypeCode_ptr _0RL_tc_sConArcModelResult = CORBA::TypeCode::PR_struct_tc("IDL:sConArcModelResult:1.0", "sConArcModelResult", _0RL_structmember_sConArcModelResult, 10, &_0RL_tcTrack);









const CORBA::TypeCode_ptr _tc_sConArcModelResult = _0RL_tc_sConArcModelResult;



static CORBA::PR_structMember _0RL_structmember_sConArcMediaPredRes[] = {
  {"StepNo", CORBA::TypeCode::PR_long_tc()},
  {"MediaData", _0RL_tc_seqConArcMediaData}
};

#ifdef _0RL_tc_sConArcMediaPredRes
#  undef _0RL_tc_sConArcMediaPredRes
#endif
static CORBA::TypeCode_ptr _0RL_tc_sConArcMediaPredRes = CORBA::TypeCode::PR_struct_tc("IDL:sConArcMediaPredRes:1.0", "sConArcMediaPredRes", _0RL_structmember_sConArcMediaPredRes, 2, &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_sConArcMediaPredRes = _0RL_tc_sConArcMediaPredRes;










static CORBA::TypeCode_ptr _0RL_tc_seqConArcMediaPredRes = CORBA::TypeCode::PR_alias_tc("IDL:seqConArcMediaPredRes:1.0", "seqConArcMediaPredRes", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sConArcMediaPredRes, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqConArcMediaPredRes = _0RL_tc_seqConArcMediaPredRes;





static CORBA::TypeCode_ptr _0RL_tc_seqConArcBlowData = CORBA::TypeCode::PR_alias_tc("IDL:seqConArcBlowData:1.0", "seqConArcBlowData", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sConArcBlowData, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqConArcBlowData = _0RL_tc_seqConArcBlowData;





































static CORBA::TypeCode_ptr _0RL_tc_seqConArcModelResult = CORBA::TypeCode::PR_alias_tc("IDL:seqConArcModelResult:1.0", "seqConArcModelResult", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sConArcModelResult, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqConArcModelResult = _0RL_tc_seqConArcModelResult;

static CORBA::PR_structMember _0RL_structmember_sLTSStirrPredRes[] = {
  {"StirrPhase", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"StirrIntensity", CORBA::TypeCode::PR_long_tc()},
  {"StirrFlow", CORBA::TypeCode::PR_double_tc()},
  {"GasType", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"Priority", CORBA::TypeCode::PR_long_tc()},
  {"DurStep", CORBA::TypeCode::PR_double_tc()},
  {"StirrIntensityCode", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"Enable", CORBA::TypeCode::PR_long_tc()},
  {"Order", CORBA::TypeCode::PR_long_tc()},
  {"isPatternOrActivity", CORBA::TypeCode::PR_long_tc()},
  {"DurUntilEndOfStep", CORBA::TypeCode::PR_double_tc()},
  {"DurUntilStartOfStep", CORBA::TypeCode::PR_double_tc()},
  {"VoltTap", CORBA::TypeCode::PR_long_tc()},
  {"ImpCurve", CORBA::TypeCode::PR_long_tc()},
  {"ElecEgy", CORBA::TypeCode::PR_double_tc()},
  {"SteelMass", CORBA::TypeCode::PR_double_tc()},
  {"SlagMass", CORBA::TypeCode::PR_double_tc()},
  {"Temp", CORBA::TypeCode::PR_double_tc()}
};

#ifdef _0RL_tc_sLTSStirrPredRes
#  undef _0RL_tc_sLTSStirrPredRes
#endif
static CORBA::TypeCode_ptr _0RL_tc_sLTSStirrPredRes = CORBA::TypeCode::PR_struct_tc("IDL:sLTSStirrPredRes:1.0", "sLTSStirrPredRes", _0RL_structmember_sLTSStirrPredRes, 18, &_0RL_tcTrack);

const CORBA::TypeCode_ptr _tc_sLTSStirrPredRes = _0RL_tc_sLTSStirrPredRes;






static CORBA::TypeCode_ptr _0RL_tc_seqLTSStirrPredRes = CORBA::TypeCode::PR_alias_tc("IDL:seqLTSStirrPredRes:1.0", "seqLTSStirrPredRes", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sLTSStirrPredRes, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqLTSStirrPredRes = _0RL_tc_seqLTSStirrPredRes;

static CORBA::PR_structMember _0RL_structmember_sBOFGlobalSetpoints[] = {
  {"O2VolStartMatAddn", CORBA::TypeCode::PR_double_tc()},
  {"O2VolSartMatDynAddn", CORBA::TypeCode::PR_double_tc()},
  {"O2VolStartScrapChute", CORBA::TypeCode::PR_double_tc()},
  {"O2VolSubLance", CORBA::TypeCode::PR_double_tc()},
  {"O2VolTotal", CORBA::TypeCode::PR_double_tc()},
  {"O2VolTotalLance", CORBA::TypeCode::PR_double_tc()},
  {"N2VolTotal", CORBA::TypeCode::PR_double_tc()},
  {"MatFeedRate", CORBA::TypeCode::PR_double_tc()},
  {"MatDynFeedRate", CORBA::TypeCode::PR_double_tc()},
  {"AimTapWeightCalc", CORBA::TypeCode::PR_double_tc()},
  {"DurStartMatAddn", CORBA::TypeCode::PR_double_tc()},
  {"DurStartMatDynAddn", CORBA::TypeCode::PR_double_tc()},
  {"DurStartScrapChute", CORBA::TypeCode::PR_double_tc()},
  {"DurSubLance", CORBA::TypeCode::PR_double_tc()},
  {"O2VolStartMat2ndAddn", CORBA::TypeCode::PR_double_tc()},
  {"DurStartMat2ndAddn", CORBA::TypeCode::PR_double_tc()},
  {"MatFeedRate2ndAdd", CORBA::TypeCode::PR_double_tc()},
  {"AimSteelMassCalc", CORBA::TypeCode::PR_double_tc()},
  {"ReblowCode", CORBA::TypeCode::PR_long_tc()}
};

#ifdef _0RL_tc_sBOFGlobalSetpoints
#  undef _0RL_tc_sBOFGlobalSetpoints
#endif
static CORBA::TypeCode_ptr _0RL_tc_sBOFGlobalSetpoints = CORBA::TypeCode::PR_struct_tc("IDL:sBOFGlobalSetpoints:1.0", "sBOFGlobalSetpoints", _0RL_structmember_sBOFGlobalSetpoints, 19, &_0RL_tcTrack);

const CORBA::TypeCode_ptr _tc_sBOFGlobalSetpoints = _0RL_tc_sBOFGlobalSetpoints;






static CORBA::TypeCode_ptr _0RL_tc_seqBOFGlobalSetpoints = CORBA::TypeCode::PR_alias_tc("IDL:seqBOFGlobalSetpoints:1.0", "seqBOFGlobalSetpoints", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sBOFGlobalSetpoints, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqBOFGlobalSetpoints = _0RL_tc_seqBOFGlobalSetpoints;

static CORBA::PR_structMember _0RL_structmember_sConArcGlobalSetpoints[] = {
  {"O2VolStartMatAddn", CORBA::TypeCode::PR_double_tc()},
  {"O2VolSartMatDynAddn", CORBA::TypeCode::PR_double_tc()},
  {"O2VolStartScrapChute", CORBA::TypeCode::PR_double_tc()},
  {"O2VolSubLance", CORBA::TypeCode::PR_double_tc()},
  {"O2VolTotal", CORBA::TypeCode::PR_double_tc()},
  {"O2VolTotalLance", CORBA::TypeCode::PR_double_tc()},
  {"N2VolTotal", CORBA::TypeCode::PR_double_tc()},
  {"ArVolTotal", CORBA::TypeCode::PR_double_tc()},
  {"MatFeedRate", CORBA::TypeCode::PR_double_tc()},
  {"MatDynFeedRate", CORBA::TypeCode::PR_double_tc()},
  {"AimTapWeightCalc", CORBA::TypeCode::PR_double_tc()},
  {"AimSteelMassCalc", CORBA::TypeCode::PR_double_tc()},
  {"DurStartMatAddn", CORBA::TypeCode::PR_double_tc()},
  {"DurStartMatDynAddn", CORBA::TypeCode::PR_double_tc()},
  {"DurStartScrapChute", CORBA::TypeCode::PR_double_tc()},
  {"DurSubLance", CORBA::TypeCode::PR_double_tc()},
  {"O2VolStartMat2ndAddn", CORBA::TypeCode::PR_double_tc()},
  {"DurStartMat2ndAddn", CORBA::TypeCode::PR_double_tc()},
  {"MatFeedRate2ndAdd", CORBA::TypeCode::PR_double_tc()},
  {"ReblowCode", CORBA::TypeCode::PR_long_tc()},
  {"DRICons", CORBA::TypeCode::PR_double_tc()},
  {"LimeCons", CORBA::TypeCode::PR_double_tc()},
  {"DoloCons", CORBA::TypeCode::PR_double_tc()},
  {"CoalCons", CORBA::TypeCode::PR_double_tc()},
  {"EgyTotal", CORBA::TypeCode::PR_double_tc()}
};

#ifdef _0RL_tc_sConArcGlobalSetpoints
#  undef _0RL_tc_sConArcGlobalSetpoints
#endif
static CORBA::TypeCode_ptr _0RL_tc_sConArcGlobalSetpoints = CORBA::TypeCode::PR_struct_tc("IDL:sConArcGlobalSetpoints:1.0", "sConArcGlobalSetpoints", _0RL_structmember_sConArcGlobalSetpoints, 25, &_0RL_tcTrack);

const CORBA::TypeCode_ptr _tc_sConArcGlobalSetpoints = _0RL_tc_sConArcGlobalSetpoints;






static CORBA::TypeCode_ptr _0RL_tc_seqConArcGlobalSetpoints = CORBA::TypeCode::PR_alias_tc("IDL:seqConArcGlobalSetpoints:1.0", "seqConArcGlobalSetpoints", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sConArcGlobalSetpoints, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqConArcGlobalSetpoints = _0RL_tc_seqConArcGlobalSetpoints;

static CORBA::PR_structMember _0RL_structmember_sSample[] = {
  {"MeasName", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"MeasValue", CORBA::TypeCode::PR_double_tc()}
};

#ifdef _0RL_tc_sSample
#  undef _0RL_tc_sSample
#endif
static CORBA::TypeCode_ptr _0RL_tc_sSample = CORBA::TypeCode::PR_struct_tc("IDL:sSample:1.0", "sSample", _0RL_structmember_sSample, 2, &_0RL_tcTrack);

const CORBA::TypeCode_ptr _tc_sSample = _0RL_tc_sSample;






static CORBA::TypeCode_ptr _0RL_tc_seqSample = CORBA::TypeCode::PR_alias_tc("IDL:seqSample:1.0", "seqSample", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sSample, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqSample = _0RL_tc_seqSample;

static CORBA::PR_structMember _0RL_structmember_sTorpedoData[] = {
  {"TorpedoNo", CORBA::TypeCode::PR_long_tc()},
  {"Weight", CORBA::TypeCode::PR_double_tc()}
};

#ifdef _0RL_tc_sTorpedoData
#  undef _0RL_tc_sTorpedoData
#endif
static CORBA::TypeCode_ptr _0RL_tc_sTorpedoData = CORBA::TypeCode::PR_struct_tc("IDL:sTorpedoData:1.0", "sTorpedoData", _0RL_structmember_sTorpedoData, 2, &_0RL_tcTrack);

const CORBA::TypeCode_ptr _tc_sTorpedoData = _0RL_tc_sTorpedoData;






static CORBA::TypeCode_ptr _0RL_tc_seqTorpedoData = CORBA::TypeCode::PR_alias_tc("IDL:seqTorpedoData:1.0", "seqTorpedoData", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sTorpedoData, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqTorpedoData = _0RL_tc_seqTorpedoData;

static CORBA::PR_structMember _0RL_structmember_strSampleRef[] = {
  {"mSteel", CORBA::TypeCode::PR_long_tc()},
  {"mSteelCalc", CORBA::TypeCode::PR_long_tc()},
  {"mSlag", CORBA::TypeCode::PR_long_tc()},
  {"mSlagCalc", CORBA::TypeCode::PR_long_tc()},
  {"mCarbon", CORBA::TypeCode::PR_long_tc()},
  {"mOxygen", CORBA::TypeCode::PR_long_tc()},
  {"mHydrogen", CORBA::TypeCode::PR_long_tc()},
  {"mCelogSlag", CORBA::TypeCode::PR_long_tc()},
  {"mAluminium", CORBA::TypeCode::PR_long_tc()},
  {"mEMF", CORBA::TypeCode::PR_long_tc()},
  {"mTemp", CORBA::TypeCode::PR_long_tc()},
  {"mTempCalc", CORBA::TypeCode::PR_long_tc()}
};

#ifdef _0RL_tc_strSampleRef
#  undef _0RL_tc_strSampleRef
#endif
static CORBA::TypeCode_ptr _0RL_tc_strSampleRef = CORBA::TypeCode::PR_struct_tc("IDL:strSampleRef:1.0", "strSampleRef", _0RL_structmember_strSampleRef, 12, &_0RL_tcTrack);

const CORBA::TypeCode_ptr _tc_strSampleRef = _0RL_tc_strSampleRef;




static CORBA::TypeCode_ptr _0RL_tc_sSampleRef = CORBA::TypeCode::PR_alias_tc("IDL:sSampleRef:1.0", "sSampleRef", _0RL_tc_strSampleRef, &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_sSampleRef = _0RL_tc_sSampleRef;







static CORBA::PR_structMember _0RL_structmember_sPhaseDataReport[] = {
  {"PhaseName", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"PhaseNo", CORBA::TypeCode::PR_long_tc()},
  {"StartTime", _0RL_tc_sDate},
  {"EndTime", _0RL_tc_sDate},
  {"Duration", CORBA::TypeCode::PR_double_tc()},
  {"ElecCons", CORBA::TypeCode::PR_double_tc()},
  {"ElecConsStart", CORBA::TypeCode::PR_double_tc()},
  {"GasCons", _0RL_tc_seqDeviceGasData},
  {"GasConsStart", _0RL_tc_seqDeviceGasData}
};

#ifdef _0RL_tc_sPhaseDataReport
#  undef _0RL_tc_sPhaseDataReport
#endif
static CORBA::TypeCode_ptr _0RL_tc_sPhaseDataReport = CORBA::TypeCode::PR_struct_tc("IDL:sPhaseDataReport:1.0", "sPhaseDataReport", _0RL_structmember_sPhaseDataReport, 9, &_0RL_tcTrack);







const CORBA::TypeCode_ptr _tc_sPhaseDataReport = _0RL_tc_sPhaseDataReport;






























static CORBA::TypeCode_ptr _0RL_tc_seqPhaseDataReport = CORBA::TypeCode::PR_alias_tc("IDL:seqPhaseDataReport:1.0", "seqPhaseDataReport", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sPhaseDataReport, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqPhaseDataReport = _0RL_tc_seqPhaseDataReport;


static CORBA::PR_structMember _0RL_structmember_sEquipmentLifeData[] = {
  {"EquipID", CORBA::TypeCode::PR_long_tc()},
  {"EquipPartID", CORBA::TypeCode::PR_long_tc()},
  {"EquipCounter1Life", CORBA::TypeCode::PR_long_tc()},
  {"EquipCounter2Life", CORBA::TypeCode::PR_long_tc()},
  {"ChangeTime", _0RL_tc_sDate},
  {"Weight", CORBA::TypeCode::PR_double_tc()}
};

#ifdef _0RL_tc_sEquipmentLifeData
#  undef _0RL_tc_sEquipmentLifeData
#endif
static CORBA::TypeCode_ptr _0RL_tc_sEquipmentLifeData = CORBA::TypeCode::PR_struct_tc("IDL:sEquipmentLifeData:1.0", "sEquipmentLifeData", _0RL_structmember_sEquipmentLifeData, 6, &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_sEquipmentLifeData = _0RL_tc_sEquipmentLifeData;










static CORBA::TypeCode_ptr _0RL_tc_seqEquipmentLifeData = CORBA::TypeCode::PR_alias_tc("IDL:seqEquipmentLifeData:1.0", "seqEquipmentLifeData", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sEquipmentLifeData, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqEquipmentLifeData = _0RL_tc_seqEquipmentLifeData;

static CORBA::PR_structMember _0RL_structmember_sPPRestriction[] = {
  {"PPDescription", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"PPNumber", CORBA::TypeCode::PR_long_tc()}
};

#ifdef _0RL_tc_sPPRestriction
#  undef _0RL_tc_sPPRestriction
#endif
static CORBA::TypeCode_ptr _0RL_tc_sPPRestriction = CORBA::TypeCode::PR_struct_tc("IDL:sPPRestriction:1.0", "sPPRestriction", _0RL_structmember_sPPRestriction, 2, &_0RL_tcTrack);

const CORBA::TypeCode_ptr _tc_sPPRestriction = _0RL_tc_sPPRestriction;






static CORBA::TypeCode_ptr _0RL_tc_seqPPRestriction = CORBA::TypeCode::PR_alias_tc("IDL:seqPPRestriction:1.0", "seqPPRestriction", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sPPRestriction, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqPPRestriction = _0RL_tc_seqPPRestriction;

static CORBA::PR_structMember _0RL_structmember_sHeatStack[] = {
  {"ExternalHeatID", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"ExternalTreatID", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"HeatId", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"TreatId", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"OrderId", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"Plant", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"PlantNo", CORBA::TypeCode::PR_long_tc()},
  {"HeatStatus", CORBA::TypeCode::PR_long_tc()},
  {"ScrapOrderStatus", CORBA::TypeCode::PR_long_tc()},
  {"HotMetalOrderStatus", CORBA::TypeCode::PR_long_tc()}
};

#ifdef _0RL_tc_sHeatStack
#  undef _0RL_tc_sHeatStack
#endif
static CORBA::TypeCode_ptr _0RL_tc_sHeatStack = CORBA::TypeCode::PR_struct_tc("IDL:sHeatStack:1.0", "sHeatStack", _0RL_structmember_sHeatStack, 10, &_0RL_tcTrack);

const CORBA::TypeCode_ptr _tc_sHeatStack = _0RL_tc_sHeatStack;






static CORBA::TypeCode_ptr _0RL_tc_seqHeatStack = CORBA::TypeCode::PR_alias_tc("IDL:seqHeatStack:1.0", "seqHeatStack", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sHeatStack, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqHeatStack = _0RL_tc_seqHeatStack;

static CORBA::PR_structMember _0RL_structmember_sMediaConsumed[] = {
  {"ConsumerUnit", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"N2Cons", CORBA::TypeCode::PR_double_tc()},
  {"O2Cons", CORBA::TypeCode::PR_double_tc()},
  {"WaterCons", CORBA::TypeCode::PR_double_tc()},
  {"AirCons", CORBA::TypeCode::PR_double_tc()},
  {"N2Flow", CORBA::TypeCode::PR_double_tc()},
  {"O2Flow", CORBA::TypeCode::PR_double_tc()},
  {"WaterFlow", CORBA::TypeCode::PR_double_tc()},
  {"AirFlow", CORBA::TypeCode::PR_double_tc()}
};

#ifdef _0RL_tc_sMediaConsumed
#  undef _0RL_tc_sMediaConsumed
#endif
static CORBA::TypeCode_ptr _0RL_tc_sMediaConsumed = CORBA::TypeCode::PR_struct_tc("IDL:sMediaConsumed:1.0", "sMediaConsumed", _0RL_structmember_sMediaConsumed, 9, &_0RL_tcTrack);

const CORBA::TypeCode_ptr _tc_sMediaConsumed = _0RL_tc_sMediaConsumed;






static CORBA::TypeCode_ptr _0RL_tc_seqMediaConsumed = CORBA::TypeCode::PR_alias_tc("IDL:seqMediaConsumed:1.0", "seqMediaConsumed", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sMediaConsumed, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqMediaConsumed = _0RL_tc_seqMediaConsumed;

static CORBA::PR_structMember _0RL_structmember_sEnergyConsumed[] = {
  {"ConsumerUnit", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"Voltage", CORBA::TypeCode::PR_double_tc()},
  {"ElecCurrent", CORBA::TypeCode::PR_double_tc()},
  {"ActivePower", CORBA::TypeCode::PR_double_tc()},
  {"ReactivePower", CORBA::TypeCode::PR_double_tc()},
  {"ApparentPower", CORBA::TypeCode::PR_double_tc()},
  {"ActiveEnergy", CORBA::TypeCode::PR_double_tc()}
};

#ifdef _0RL_tc_sEnergyConsumed
#  undef _0RL_tc_sEnergyConsumed
#endif
static CORBA::TypeCode_ptr _0RL_tc_sEnergyConsumed = CORBA::TypeCode::PR_struct_tc("IDL:sEnergyConsumed:1.0", "sEnergyConsumed", _0RL_structmember_sEnergyConsumed, 7, &_0RL_tcTrack);

const CORBA::TypeCode_ptr _tc_sEnergyConsumed = _0RL_tc_sEnergyConsumed;






static CORBA::TypeCode_ptr _0RL_tc_seqEnergyConsumed = CORBA::TypeCode::PR_alias_tc("IDL:seqEnergyConsumed:1.0", "seqEnergyConsumed", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sEnergyConsumed, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqEnergyConsumed = _0RL_tc_seqEnergyConsumed;

static CORBA::PR_structMember _0RL_structmember_sSAF__Bin[] = {
  {"FurnaceBinID", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"RecipeCode", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"Amount", CORBA::TypeCode::PR_double_tc()}
};

#ifdef _0RL_tc_sSAF__Bin
#  undef _0RL_tc_sSAF__Bin
#endif
static CORBA::TypeCode_ptr _0RL_tc_sSAF__Bin = CORBA::TypeCode::PR_struct_tc("IDL:sSAF_Bin:1.0", "sSAF_Bin", _0RL_structmember_sSAF__Bin, 3, &_0RL_tcTrack);

const CORBA::TypeCode_ptr _tc_sSAF_Bin = _0RL_tc_sSAF__Bin;






static CORBA::TypeCode_ptr _0RL_tc_seqSAF__Bin = CORBA::TypeCode::PR_alias_tc("IDL:seqSAF_Bin:1.0", "seqSAF_Bin", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sSAF__Bin, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqSAF_Bin = _0RL_tc_seqSAF__Bin;

static CORBA::PR_structMember _0RL_structmember_sHarmonics[] = {
  {"Harmonics", CORBA::TypeCode::PR_double_tc()}
};

#ifdef _0RL_tc_sHarmonics
#  undef _0RL_tc_sHarmonics
#endif
static CORBA::TypeCode_ptr _0RL_tc_sHarmonics = CORBA::TypeCode::PR_struct_tc("IDL:sHarmonics:1.0", "sHarmonics", _0RL_structmember_sHarmonics, 1, &_0RL_tcTrack);

const CORBA::TypeCode_ptr _tc_sHarmonics = _0RL_tc_sHarmonics;






static CORBA::TypeCode_ptr _0RL_tc_seqHarmonics = CORBA::TypeCode::PR_alias_tc("IDL:seqHarmonics:1.0", "seqHarmonics", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sHarmonics, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqHarmonics = _0RL_tc_seqHarmonics;

static CORBA::PR_structMember _0RL_structmember_sWallTemp[] = {
  {"Name", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"Temp", CORBA::TypeCode::PR_double_tc()}
};

#ifdef _0RL_tc_sWallTemp
#  undef _0RL_tc_sWallTemp
#endif
static CORBA::TypeCode_ptr _0RL_tc_sWallTemp = CORBA::TypeCode::PR_struct_tc("IDL:sWallTemp:1.0", "sWallTemp", _0RL_structmember_sWallTemp, 2, &_0RL_tcTrack);

const CORBA::TypeCode_ptr _tc_sWallTemp = _0RL_tc_sWallTemp;






static CORBA::TypeCode_ptr _0RL_tc_seqWallTemp = CORBA::TypeCode::PR_alias_tc("IDL:seqWallTemp:1.0", "seqWallTemp", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sWallTemp, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqWallTemp = _0RL_tc_seqWallTemp;




static CORBA::PR_structMember _0RL_structmember_sHMPouringData[] = {
  {"SourceNo", CORBA::TypeCode::PR_long_tc()},
  {"Weight", CORBA::TypeCode::PR_double_tc()},
  {"Temperature", CORBA::TypeCode::PR_double_tc()},
  {"TempTime", _0RL_tc_sDate},
  {"Analysis", _0RL_tc_seqAnalysis},
  {"SampleTime", _0RL_tc_sDate}
};

#ifdef _0RL_tc_sHMPouringData
#  undef _0RL_tc_sHMPouringData
#endif
static CORBA::TypeCode_ptr _0RL_tc_sHMPouringData = CORBA::TypeCode::PR_struct_tc("IDL:sHMPouringData:1.0", "sHMPouringData", _0RL_structmember_sHMPouringData, 6, &_0RL_tcTrack);




const CORBA::TypeCode_ptr _tc_sHMPouringData = _0RL_tc_sHMPouringData;


















static CORBA::TypeCode_ptr _0RL_tc_seqHMPouringData = CORBA::TypeCode::PR_alias_tc("IDL:seqHMPouringData:1.0", "seqHMPouringData", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_sHMPouringData, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_seqHMPouringData = _0RL_tc_seqHMPouringData;

const CORBA::TypeCode_ptr _tc_iSMC_DataProvider = CORBA::TypeCode::PR_interface_tc("IDL:iSMC_DataProvider:1.0", "iSMC_DataProvider", &_0RL_tcTrack);

static void _0RL_sTlgRecordElem_marshal_fn(cdrStream& _s, void* _v)
{
  sTlgRecordElem* _p = (sTlgRecordElem*)_v;
  *_p >>= _s;
}
static void _0RL_sTlgRecordElem_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sTlgRecordElem* _p = new sTlgRecordElem;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sTlgRecordElem_destructor_fn(void* _v)
{
  sTlgRecordElem* _p = (sTlgRecordElem*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sTlgRecordElem& _s)
{
  sTlgRecordElem* _p = new sTlgRecordElem(_s);
  _a.PR_insert(_0RL_tc_sTlgRecordElem,
               _0RL_sTlgRecordElem_marshal_fn,
               _0RL_sTlgRecordElem_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sTlgRecordElem* _sp)
{
  _a.PR_insert(_0RL_tc_sTlgRecordElem,
               _0RL_sTlgRecordElem_marshal_fn,
               _0RL_sTlgRecordElem_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sTlgRecordElem*& _sp)
{
  return _a >>= (const sTlgRecordElem*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sTlgRecordElem*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sTlgRecordElem,
                    _0RL_sTlgRecordElem_unmarshal_fn,
                    _0RL_sTlgRecordElem_marshal_fn,
                    _0RL_sTlgRecordElem_destructor_fn,
                    _v)) {
    _sp = (const sTlgRecordElem*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqTlgRecordElem_marshal_fn(cdrStream& _s, void* _v)
{
  seqTlgRecordElem* _p = (seqTlgRecordElem*)_v;
  *_p >>= _s;
}
static void _0RL_seqTlgRecordElem_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqTlgRecordElem* _p = new seqTlgRecordElem;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqTlgRecordElem_destructor_fn(void* _v)
{
  seqTlgRecordElem* _p = (seqTlgRecordElem*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqTlgRecordElem& _s)
{
  seqTlgRecordElem* _p = new seqTlgRecordElem(_s);
  _a.PR_insert(_0RL_tc_seqTlgRecordElem,
               _0RL_seqTlgRecordElem_marshal_fn,
               _0RL_seqTlgRecordElem_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqTlgRecordElem* _sp)
{
  _a.PR_insert(_0RL_tc_seqTlgRecordElem,
               _0RL_seqTlgRecordElem_marshal_fn,
               _0RL_seqTlgRecordElem_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqTlgRecordElem*& _sp)
{
  return _a >>= (const seqTlgRecordElem*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqTlgRecordElem*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqTlgRecordElem,
                    _0RL_seqTlgRecordElem_unmarshal_fn,
                    _0RL_seqTlgRecordElem_marshal_fn,
                    _0RL_seqTlgRecordElem_destructor_fn,
                    _v)) {
    _sp = (const seqTlgRecordElem*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sTlgRecord_marshal_fn(cdrStream& _s, void* _v)
{
  sTlgRecord* _p = (sTlgRecord*)_v;
  *_p >>= _s;
}
static void _0RL_sTlgRecord_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sTlgRecord* _p = new sTlgRecord;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sTlgRecord_destructor_fn(void* _v)
{
  sTlgRecord* _p = (sTlgRecord*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sTlgRecord& _s)
{
  sTlgRecord* _p = new sTlgRecord(_s);
  _a.PR_insert(_0RL_tc_sTlgRecord,
               _0RL_sTlgRecord_marshal_fn,
               _0RL_sTlgRecord_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sTlgRecord* _sp)
{
  _a.PR_insert(_0RL_tc_sTlgRecord,
               _0RL_sTlgRecord_marshal_fn,
               _0RL_sTlgRecord_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sTlgRecord*& _sp)
{
  return _a >>= (const sTlgRecord*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sTlgRecord*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sTlgRecord,
                    _0RL_sTlgRecord_unmarshal_fn,
                    _0RL_sTlgRecord_marshal_fn,
                    _0RL_sTlgRecord_destructor_fn,
                    _v)) {
    _sp = (const sTlgRecord*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqTlgRecord_marshal_fn(cdrStream& _s, void* _v)
{
  seqTlgRecord* _p = (seqTlgRecord*)_v;
  *_p >>= _s;
}
static void _0RL_seqTlgRecord_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqTlgRecord* _p = new seqTlgRecord;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqTlgRecord_destructor_fn(void* _v)
{
  seqTlgRecord* _p = (seqTlgRecord*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqTlgRecord& _s)
{
  seqTlgRecord* _p = new seqTlgRecord(_s);
  _a.PR_insert(_0RL_tc_seqTlgRecord,
               _0RL_seqTlgRecord_marshal_fn,
               _0RL_seqTlgRecord_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqTlgRecord* _sp)
{
  _a.PR_insert(_0RL_tc_seqTlgRecord,
               _0RL_seqTlgRecord_marshal_fn,
               _0RL_seqTlgRecord_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqTlgRecord*& _sp)
{
  return _a >>= (const seqTlgRecord*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqTlgRecord*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqTlgRecord,
                    _0RL_seqTlgRecord_unmarshal_fn,
                    _0RL_seqTlgRecord_marshal_fn,
                    _0RL_seqTlgRecord_destructor_fn,
                    _v)) {
    _sp = (const seqTlgRecord*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sAnalysisString_marshal_fn(cdrStream& _s, void* _v)
{
  sAnalysisString* _p = (sAnalysisString*)_v;
  *_p >>= _s;
}
static void _0RL_sAnalysisString_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sAnalysisString* _p = new sAnalysisString;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sAnalysisString_destructor_fn(void* _v)
{
  sAnalysisString* _p = (sAnalysisString*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sAnalysisString& _s)
{
  sAnalysisString* _p = new sAnalysisString(_s);
  _a.PR_insert(_0RL_tc_sAnalysisString,
               _0RL_sAnalysisString_marshal_fn,
               _0RL_sAnalysisString_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sAnalysisString* _sp)
{
  _a.PR_insert(_0RL_tc_sAnalysisString,
               _0RL_sAnalysisString_marshal_fn,
               _0RL_sAnalysisString_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sAnalysisString*& _sp)
{
  return _a >>= (const sAnalysisString*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sAnalysisString*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sAnalysisString,
                    _0RL_sAnalysisString_unmarshal_fn,
                    _0RL_sAnalysisString_marshal_fn,
                    _0RL_sAnalysisString_destructor_fn,
                    _v)) {
    _sp = (const sAnalysisString*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sAnalysis_marshal_fn(cdrStream& _s, void* _v)
{
  sAnalysis* _p = (sAnalysis*)_v;
  *_p >>= _s;
}
static void _0RL_sAnalysis_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sAnalysis* _p = new sAnalysis;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sAnalysis_destructor_fn(void* _v)
{
  sAnalysis* _p = (sAnalysis*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sAnalysis& _s)
{
  sAnalysis* _p = new sAnalysis(_s);
  _a.PR_insert(_0RL_tc_sAnalysis,
               _0RL_sAnalysis_marshal_fn,
               _0RL_sAnalysis_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sAnalysis* _sp)
{
  _a.PR_insert(_0RL_tc_sAnalysis,
               _0RL_sAnalysis_marshal_fn,
               _0RL_sAnalysis_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sAnalysis*& _sp)
{
  return _a >>= (const sAnalysis*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sAnalysis*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sAnalysis,
                    _0RL_sAnalysis_unmarshal_fn,
                    _0RL_sAnalysis_marshal_fn,
                    _0RL_sAnalysis_destructor_fn,
                    _v)) {
    _sp = (const sAnalysis*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sBatch_marshal_fn(cdrStream& _s, void* _v)
{
  sBatch* _p = (sBatch*)_v;
  *_p >>= _s;
}
static void _0RL_sBatch_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sBatch* _p = new sBatch;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sBatch_destructor_fn(void* _v)
{
  sBatch* _p = (sBatch*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sBatch& _s)
{
  sBatch* _p = new sBatch(_s);
  _a.PR_insert(_0RL_tc_sBatch,
               _0RL_sBatch_marshal_fn,
               _0RL_sBatch_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sBatch* _sp)
{
  _a.PR_insert(_0RL_tc_sBatch,
               _0RL_sBatch_marshal_fn,
               _0RL_sBatch_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sBatch*& _sp)
{
  return _a >>= (const sBatch*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sBatch*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sBatch,
                    _0RL_sBatch_unmarshal_fn,
                    _0RL_sBatch_marshal_fn,
                    _0RL_sBatch_destructor_fn,
                    _v)) {
    _sp = (const sBatch*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sEAFBurnerPredRes_marshal_fn(cdrStream& _s, void* _v)
{
  sEAFBurnerPredRes* _p = (sEAFBurnerPredRes*)_v;
  *_p >>= _s;
}
static void _0RL_sEAFBurnerPredRes_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sEAFBurnerPredRes* _p = new sEAFBurnerPredRes;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sEAFBurnerPredRes_destructor_fn(void* _v)
{
  sEAFBurnerPredRes* _p = (sEAFBurnerPredRes*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sEAFBurnerPredRes& _s)
{
  sEAFBurnerPredRes* _p = new sEAFBurnerPredRes(_s);
  _a.PR_insert(_0RL_tc_sEAFBurnerPredRes,
               _0RL_sEAFBurnerPredRes_marshal_fn,
               _0RL_sEAFBurnerPredRes_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sEAFBurnerPredRes* _sp)
{
  _a.PR_insert(_0RL_tc_sEAFBurnerPredRes,
               _0RL_sEAFBurnerPredRes_marshal_fn,
               _0RL_sEAFBurnerPredRes_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sEAFBurnerPredRes*& _sp)
{
  return _a >>= (const sEAFBurnerPredRes*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sEAFBurnerPredRes*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sEAFBurnerPredRes,
                    _0RL_sEAFBurnerPredRes_unmarshal_fn,
                    _0RL_sEAFBurnerPredRes_marshal_fn,
                    _0RL_sEAFBurnerPredRes_destructor_fn,
                    _v)) {
    _sp = (const sEAFBurnerPredRes*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sEAFProcessPredRes_marshal_fn(cdrStream& _s, void* _v)
{
  sEAFProcessPredRes* _p = (sEAFProcessPredRes*)_v;
  *_p >>= _s;
}
static void _0RL_sEAFProcessPredRes_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sEAFProcessPredRes* _p = new sEAFProcessPredRes;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sEAFProcessPredRes_destructor_fn(void* _v)
{
  sEAFProcessPredRes* _p = (sEAFProcessPredRes*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sEAFProcessPredRes& _s)
{
  sEAFProcessPredRes* _p = new sEAFProcessPredRes(_s);
  _a.PR_insert(_0RL_tc_sEAFProcessPredRes,
               _0RL_sEAFProcessPredRes_marshal_fn,
               _0RL_sEAFProcessPredRes_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sEAFProcessPredRes* _sp)
{
  _a.PR_insert(_0RL_tc_sEAFProcessPredRes,
               _0RL_sEAFProcessPredRes_marshal_fn,
               _0RL_sEAFProcessPredRes_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sEAFProcessPredRes*& _sp)
{
  return _a >>= (const sEAFProcessPredRes*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sEAFProcessPredRes*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sEAFProcessPredRes,
                    _0RL_sEAFProcessPredRes_unmarshal_fn,
                    _0RL_sEAFProcessPredRes_marshal_fn,
                    _0RL_sEAFProcessPredRes_destructor_fn,
                    _v)) {
    _sp = (const sEAFProcessPredRes*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sLFElecPredRes_marshal_fn(cdrStream& _s, void* _v)
{
  sLFElecPredRes* _p = (sLFElecPredRes*)_v;
  *_p >>= _s;
}
static void _0RL_sLFElecPredRes_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sLFElecPredRes* _p = new sLFElecPredRes;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sLFElecPredRes_destructor_fn(void* _v)
{
  sLFElecPredRes* _p = (sLFElecPredRes*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sLFElecPredRes& _s)
{
  sLFElecPredRes* _p = new sLFElecPredRes(_s);
  _a.PR_insert(_0RL_tc_sLFElecPredRes,
               _0RL_sLFElecPredRes_marshal_fn,
               _0RL_sLFElecPredRes_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sLFElecPredRes* _sp)
{
  _a.PR_insert(_0RL_tc_sLFElecPredRes,
               _0RL_sLFElecPredRes_marshal_fn,
               _0RL_sLFElecPredRes_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sLFElecPredRes*& _sp)
{
  return _a >>= (const sLFElecPredRes*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sLFElecPredRes*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sLFElecPredRes,
                    _0RL_sLFElecPredRes_unmarshal_fn,
                    _0RL_sLFElecPredRes_marshal_fn,
                    _0RL_sLFElecPredRes_destructor_fn,
                    _v)) {
    _sp = (const sLFElecPredRes*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sLFStirrPredRes_marshal_fn(cdrStream& _s, void* _v)
{
  sLFStirrPredRes* _p = (sLFStirrPredRes*)_v;
  *_p >>= _s;
}
static void _0RL_sLFStirrPredRes_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sLFStirrPredRes* _p = new sLFStirrPredRes;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sLFStirrPredRes_destructor_fn(void* _v)
{
  sLFStirrPredRes* _p = (sLFStirrPredRes*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sLFStirrPredRes& _s)
{
  sLFStirrPredRes* _p = new sLFStirrPredRes(_s);
  _a.PR_insert(_0RL_tc_sLFStirrPredRes,
               _0RL_sLFStirrPredRes_marshal_fn,
               _0RL_sLFStirrPredRes_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sLFStirrPredRes* _sp)
{
  _a.PR_insert(_0RL_tc_sLFStirrPredRes,
               _0RL_sLFStirrPredRes_marshal_fn,
               _0RL_sLFStirrPredRes_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sLFStirrPredRes*& _sp)
{
  return _a >>= (const sLFStirrPredRes*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sLFStirrPredRes*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sLFStirrPredRes,
                    _0RL_sLFStirrPredRes_unmarshal_fn,
                    _0RL_sLFStirrPredRes_marshal_fn,
                    _0RL_sLFStirrPredRes_destructor_fn,
                    _v)) {
    _sp = (const sLFStirrPredRes*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sMetTimeStamp_marshal_fn(cdrStream& _s, void* _v)
{
  sMetTimeStamp* _p = (sMetTimeStamp*)_v;
  *_p >>= _s;
}
static void _0RL_sMetTimeStamp_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sMetTimeStamp* _p = new sMetTimeStamp;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sMetTimeStamp_destructor_fn(void* _v)
{
  sMetTimeStamp* _p = (sMetTimeStamp*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sMetTimeStamp& _s)
{
  sMetTimeStamp* _p = new sMetTimeStamp(_s);
  _a.PR_insert(_0RL_tc_sMetTimeStamp,
               _0RL_sMetTimeStamp_marshal_fn,
               _0RL_sMetTimeStamp_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sMetTimeStamp* _sp)
{
  _a.PR_insert(_0RL_tc_sMetTimeStamp,
               _0RL_sMetTimeStamp_marshal_fn,
               _0RL_sMetTimeStamp_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sMetTimeStamp*& _sp)
{
  return _a >>= (const sMetTimeStamp*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sMetTimeStamp*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sMetTimeStamp,
                    _0RL_sMetTimeStamp_unmarshal_fn,
                    _0RL_sMetTimeStamp_marshal_fn,
                    _0RL_sMetTimeStamp_destructor_fn,
                    _v)) {
    _sp = (const sMetTimeStamp*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sRecipeProperties_marshal_fn(cdrStream& _s, void* _v)
{
  sRecipeProperties* _p = (sRecipeProperties*)_v;
  *_p >>= _s;
}
static void _0RL_sRecipeProperties_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sRecipeProperties* _p = new sRecipeProperties;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sRecipeProperties_destructor_fn(void* _v)
{
  sRecipeProperties* _p = (sRecipeProperties*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sRecipeProperties& _s)
{
  sRecipeProperties* _p = new sRecipeProperties(_s);
  _a.PR_insert(_0RL_tc_sRecipeProperties,
               _0RL_sRecipeProperties_marshal_fn,
               _0RL_sRecipeProperties_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sRecipeProperties* _sp)
{
  _a.PR_insert(_0RL_tc_sRecipeProperties,
               _0RL_sRecipeProperties_marshal_fn,
               _0RL_sRecipeProperties_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sRecipeProperties*& _sp)
{
  return _a >>= (const sRecipeProperties*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sRecipeProperties*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sRecipeProperties,
                    _0RL_sRecipeProperties_unmarshal_fn,
                    _0RL_sRecipeProperties_marshal_fn,
                    _0RL_sRecipeProperties_destructor_fn,
                    _v)) {
    _sp = (const sRecipeProperties*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqAnalysis_marshal_fn(cdrStream& _s, void* _v)
{
  seqAnalysis* _p = (seqAnalysis*)_v;
  *_p >>= _s;
}
static void _0RL_seqAnalysis_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqAnalysis* _p = new seqAnalysis;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqAnalysis_destructor_fn(void* _v)
{
  seqAnalysis* _p = (seqAnalysis*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqAnalysis& _s)
{
  seqAnalysis* _p = new seqAnalysis(_s);
  _a.PR_insert(_0RL_tc_seqAnalysis,
               _0RL_seqAnalysis_marshal_fn,
               _0RL_seqAnalysis_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqAnalysis* _sp)
{
  _a.PR_insert(_0RL_tc_seqAnalysis,
               _0RL_seqAnalysis_marshal_fn,
               _0RL_seqAnalysis_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqAnalysis*& _sp)
{
  return _a >>= (const seqAnalysis*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqAnalysis*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqAnalysis,
                    _0RL_seqAnalysis_unmarshal_fn,
                    _0RL_seqAnalysis_marshal_fn,
                    _0RL_seqAnalysis_destructor_fn,
                    _v)) {
    _sp = (const seqAnalysis*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqBatch_marshal_fn(cdrStream& _s, void* _v)
{
  seqBatch* _p = (seqBatch*)_v;
  *_p >>= _s;
}
static void _0RL_seqBatch_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqBatch* _p = new seqBatch;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqBatch_destructor_fn(void* _v)
{
  seqBatch* _p = (seqBatch*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqBatch& _s)
{
  seqBatch* _p = new seqBatch(_s);
  _a.PR_insert(_0RL_tc_seqBatch,
               _0RL_seqBatch_marshal_fn,
               _0RL_seqBatch_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqBatch* _sp)
{
  _a.PR_insert(_0RL_tc_seqBatch,
               _0RL_seqBatch_marshal_fn,
               _0RL_seqBatch_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqBatch*& _sp)
{
  return _a >>= (const seqBatch*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqBatch*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqBatch,
                    _0RL_seqBatch_unmarshal_fn,
                    _0RL_seqBatch_marshal_fn,
                    _0RL_seqBatch_destructor_fn,
                    _v)) {
    _sp = (const seqBatch*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sEAFMatFeed_marshal_fn(cdrStream& _s, void* _v)
{
  sEAFMatFeed* _p = (sEAFMatFeed*)_v;
  *_p >>= _s;
}
static void _0RL_sEAFMatFeed_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sEAFMatFeed* _p = new sEAFMatFeed;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sEAFMatFeed_destructor_fn(void* _v)
{
  sEAFMatFeed* _p = (sEAFMatFeed*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sEAFMatFeed& _s)
{
  sEAFMatFeed* _p = new sEAFMatFeed(_s);
  _a.PR_insert(_0RL_tc_sEAFMatFeed,
               _0RL_sEAFMatFeed_marshal_fn,
               _0RL_sEAFMatFeed_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sEAFMatFeed* _sp)
{
  _a.PR_insert(_0RL_tc_sEAFMatFeed,
               _0RL_sEAFMatFeed_marshal_fn,
               _0RL_sEAFMatFeed_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sEAFMatFeed*& _sp)
{
  return _a >>= (const sEAFMatFeed*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sEAFMatFeed*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sEAFMatFeed,
                    _0RL_sEAFMatFeed_unmarshal_fn,
                    _0RL_sEAFMatFeed_marshal_fn,
                    _0RL_sEAFMatFeed_destructor_fn,
                    _v)) {
    _sp = (const sEAFMatFeed*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqEAFBurnerPredRes_marshal_fn(cdrStream& _s, void* _v)
{
  seqEAFBurnerPredRes* _p = (seqEAFBurnerPredRes*)_v;
  *_p >>= _s;
}
static void _0RL_seqEAFBurnerPredRes_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqEAFBurnerPredRes* _p = new seqEAFBurnerPredRes;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqEAFBurnerPredRes_destructor_fn(void* _v)
{
  seqEAFBurnerPredRes* _p = (seqEAFBurnerPredRes*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqEAFBurnerPredRes& _s)
{
  seqEAFBurnerPredRes* _p = new seqEAFBurnerPredRes(_s);
  _a.PR_insert(_0RL_tc_seqEAFBurnerPredRes,
               _0RL_seqEAFBurnerPredRes_marshal_fn,
               _0RL_seqEAFBurnerPredRes_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqEAFBurnerPredRes* _sp)
{
  _a.PR_insert(_0RL_tc_seqEAFBurnerPredRes,
               _0RL_seqEAFBurnerPredRes_marshal_fn,
               _0RL_seqEAFBurnerPredRes_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqEAFBurnerPredRes*& _sp)
{
  return _a >>= (const seqEAFBurnerPredRes*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqEAFBurnerPredRes*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqEAFBurnerPredRes,
                    _0RL_seqEAFBurnerPredRes_unmarshal_fn,
                    _0RL_seqEAFBurnerPredRes_marshal_fn,
                    _0RL_seqEAFBurnerPredRes_destructor_fn,
                    _v)) {
    _sp = (const seqEAFBurnerPredRes*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqEAFProcessPredRes_marshal_fn(cdrStream& _s, void* _v)
{
  seqEAFProcessPredRes* _p = (seqEAFProcessPredRes*)_v;
  *_p >>= _s;
}
static void _0RL_seqEAFProcessPredRes_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqEAFProcessPredRes* _p = new seqEAFProcessPredRes;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqEAFProcessPredRes_destructor_fn(void* _v)
{
  seqEAFProcessPredRes* _p = (seqEAFProcessPredRes*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqEAFProcessPredRes& _s)
{
  seqEAFProcessPredRes* _p = new seqEAFProcessPredRes(_s);
  _a.PR_insert(_0RL_tc_seqEAFProcessPredRes,
               _0RL_seqEAFProcessPredRes_marshal_fn,
               _0RL_seqEAFProcessPredRes_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqEAFProcessPredRes* _sp)
{
  _a.PR_insert(_0RL_tc_seqEAFProcessPredRes,
               _0RL_seqEAFProcessPredRes_marshal_fn,
               _0RL_seqEAFProcessPredRes_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqEAFProcessPredRes*& _sp)
{
  return _a >>= (const seqEAFProcessPredRes*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqEAFProcessPredRes*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqEAFProcessPredRes,
                    _0RL_seqEAFProcessPredRes_unmarshal_fn,
                    _0RL_seqEAFProcessPredRes_marshal_fn,
                    _0RL_seqEAFProcessPredRes_destructor_fn,
                    _v)) {
    _sp = (const seqEAFProcessPredRes*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqEAFMatFeed_marshal_fn(cdrStream& _s, void* _v)
{
  seqEAFMatFeed* _p = (seqEAFMatFeed*)_v;
  *_p >>= _s;
}
static void _0RL_seqEAFMatFeed_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqEAFMatFeed* _p = new seqEAFMatFeed;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqEAFMatFeed_destructor_fn(void* _v)
{
  seqEAFMatFeed* _p = (seqEAFMatFeed*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqEAFMatFeed& _s)
{
  seqEAFMatFeed* _p = new seqEAFMatFeed(_s);
  _a.PR_insert(_0RL_tc_seqEAFMatFeed,
               _0RL_seqEAFMatFeed_marshal_fn,
               _0RL_seqEAFMatFeed_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqEAFMatFeed* _sp)
{
  _a.PR_insert(_0RL_tc_seqEAFMatFeed,
               _0RL_seqEAFMatFeed_marshal_fn,
               _0RL_seqEAFMatFeed_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqEAFMatFeed*& _sp)
{
  return _a >>= (const seqEAFMatFeed*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqEAFMatFeed*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqEAFMatFeed,
                    _0RL_seqEAFMatFeed_unmarshal_fn,
                    _0RL_seqEAFMatFeed_marshal_fn,
                    _0RL_seqEAFMatFeed_destructor_fn,
                    _v)) {
    _sp = (const seqEAFMatFeed*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqLFElecPredRes_marshal_fn(cdrStream& _s, void* _v)
{
  seqLFElecPredRes* _p = (seqLFElecPredRes*)_v;
  *_p >>= _s;
}
static void _0RL_seqLFElecPredRes_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqLFElecPredRes* _p = new seqLFElecPredRes;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqLFElecPredRes_destructor_fn(void* _v)
{
  seqLFElecPredRes* _p = (seqLFElecPredRes*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqLFElecPredRes& _s)
{
  seqLFElecPredRes* _p = new seqLFElecPredRes(_s);
  _a.PR_insert(_0RL_tc_seqLFElecPredRes,
               _0RL_seqLFElecPredRes_marshal_fn,
               _0RL_seqLFElecPredRes_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqLFElecPredRes* _sp)
{
  _a.PR_insert(_0RL_tc_seqLFElecPredRes,
               _0RL_seqLFElecPredRes_marshal_fn,
               _0RL_seqLFElecPredRes_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqLFElecPredRes*& _sp)
{
  return _a >>= (const seqLFElecPredRes*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqLFElecPredRes*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqLFElecPredRes,
                    _0RL_seqLFElecPredRes_unmarshal_fn,
                    _0RL_seqLFElecPredRes_marshal_fn,
                    _0RL_seqLFElecPredRes_destructor_fn,
                    _v)) {
    _sp = (const seqLFElecPredRes*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqLFStirrPredRes_marshal_fn(cdrStream& _s, void* _v)
{
  seqLFStirrPredRes* _p = (seqLFStirrPredRes*)_v;
  *_p >>= _s;
}
static void _0RL_seqLFStirrPredRes_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqLFStirrPredRes* _p = new seqLFStirrPredRes;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqLFStirrPredRes_destructor_fn(void* _v)
{
  seqLFStirrPredRes* _p = (seqLFStirrPredRes*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqLFStirrPredRes& _s)
{
  seqLFStirrPredRes* _p = new seqLFStirrPredRes(_s);
  _a.PR_insert(_0RL_tc_seqLFStirrPredRes,
               _0RL_seqLFStirrPredRes_marshal_fn,
               _0RL_seqLFStirrPredRes_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqLFStirrPredRes* _sp)
{
  _a.PR_insert(_0RL_tc_seqLFStirrPredRes,
               _0RL_seqLFStirrPredRes_marshal_fn,
               _0RL_seqLFStirrPredRes_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqLFStirrPredRes*& _sp)
{
  return _a >>= (const seqLFStirrPredRes*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqLFStirrPredRes*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqLFStirrPredRes,
                    _0RL_seqLFStirrPredRes_unmarshal_fn,
                    _0RL_seqLFStirrPredRes_marshal_fn,
                    _0RL_seqLFStirrPredRes_destructor_fn,
                    _v)) {
    _sp = (const seqLFStirrPredRes*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sAODGlobalSetpoints_marshal_fn(cdrStream& _s, void* _v)
{
  sAODGlobalSetpoints* _p = (sAODGlobalSetpoints*)_v;
  *_p >>= _s;
}
static void _0RL_sAODGlobalSetpoints_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sAODGlobalSetpoints* _p = new sAODGlobalSetpoints;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sAODGlobalSetpoints_destructor_fn(void* _v)
{
  sAODGlobalSetpoints* _p = (sAODGlobalSetpoints*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sAODGlobalSetpoints& _s)
{
  sAODGlobalSetpoints* _p = new sAODGlobalSetpoints(_s);
  _a.PR_insert(_0RL_tc_sAODGlobalSetpoints,
               _0RL_sAODGlobalSetpoints_marshal_fn,
               _0RL_sAODGlobalSetpoints_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sAODGlobalSetpoints* _sp)
{
  _a.PR_insert(_0RL_tc_sAODGlobalSetpoints,
               _0RL_sAODGlobalSetpoints_marshal_fn,
               _0RL_sAODGlobalSetpoints_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sAODGlobalSetpoints*& _sp)
{
  return _a >>= (const sAODGlobalSetpoints*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sAODGlobalSetpoints*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sAODGlobalSetpoints,
                    _0RL_sAODGlobalSetpoints_unmarshal_fn,
                    _0RL_sAODGlobalSetpoints_marshal_fn,
                    _0RL_sAODGlobalSetpoints_destructor_fn,
                    _v)) {
    _sp = (const sAODGlobalSetpoints*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqAODGlobalSetpoints_marshal_fn(cdrStream& _s, void* _v)
{
  seqAODGlobalSetpoints* _p = (seqAODGlobalSetpoints*)_v;
  *_p >>= _s;
}
static void _0RL_seqAODGlobalSetpoints_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqAODGlobalSetpoints* _p = new seqAODGlobalSetpoints;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqAODGlobalSetpoints_destructor_fn(void* _v)
{
  seqAODGlobalSetpoints* _p = (seqAODGlobalSetpoints*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqAODGlobalSetpoints& _s)
{
  seqAODGlobalSetpoints* _p = new seqAODGlobalSetpoints(_s);
  _a.PR_insert(_0RL_tc_seqAODGlobalSetpoints,
               _0RL_seqAODGlobalSetpoints_marshal_fn,
               _0RL_seqAODGlobalSetpoints_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqAODGlobalSetpoints* _sp)
{
  _a.PR_insert(_0RL_tc_seqAODGlobalSetpoints,
               _0RL_seqAODGlobalSetpoints_marshal_fn,
               _0RL_seqAODGlobalSetpoints_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqAODGlobalSetpoints*& _sp)
{
  return _a >>= (const seqAODGlobalSetpoints*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqAODGlobalSetpoints*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqAODGlobalSetpoints,
                    _0RL_seqAODGlobalSetpoints_unmarshal_fn,
                    _0RL_seqAODGlobalSetpoints_marshal_fn,
                    _0RL_seqAODGlobalSetpoints_destructor_fn,
                    _v)) {
    _sp = (const seqAODGlobalSetpoints*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sGenRes_marshal_fn(cdrStream& _s, void* _v)
{
  sGenRes* _p = (sGenRes*)_v;
  *_p >>= _s;
}
static void _0RL_sGenRes_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sGenRes* _p = new sGenRes;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sGenRes_destructor_fn(void* _v)
{
  sGenRes* _p = (sGenRes*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sGenRes& _s)
{
  sGenRes* _p = new sGenRes(_s);
  _a.PR_insert(_0RL_tc_sGenRes,
               _0RL_sGenRes_marshal_fn,
               _0RL_sGenRes_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sGenRes* _sp)
{
  _a.PR_insert(_0RL_tc_sGenRes,
               _0RL_sGenRes_marshal_fn,
               _0RL_sGenRes_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sGenRes*& _sp)
{
  return _a >>= (const sGenRes*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sGenRes*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sGenRes,
                    _0RL_sGenRes_unmarshal_fn,
                    _0RL_sGenRes_marshal_fn,
                    _0RL_sGenRes_destructor_fn,
                    _v)) {
    _sp = (const sGenRes*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sAODPredBlowRes_marshal_fn(cdrStream& _s, void* _v)
{
  sAODPredBlowRes* _p = (sAODPredBlowRes*)_v;
  *_p >>= _s;
}
static void _0RL_sAODPredBlowRes_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sAODPredBlowRes* _p = new sAODPredBlowRes;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sAODPredBlowRes_destructor_fn(void* _v)
{
  sAODPredBlowRes* _p = (sAODPredBlowRes*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sAODPredBlowRes& _s)
{
  sAODPredBlowRes* _p = new sAODPredBlowRes(_s);
  _a.PR_insert(_0RL_tc_sAODPredBlowRes,
               _0RL_sAODPredBlowRes_marshal_fn,
               _0RL_sAODPredBlowRes_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sAODPredBlowRes* _sp)
{
  _a.PR_insert(_0RL_tc_sAODPredBlowRes,
               _0RL_sAODPredBlowRes_marshal_fn,
               _0RL_sAODPredBlowRes_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sAODPredBlowRes*& _sp)
{
  return _a >>= (const sAODPredBlowRes*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sAODPredBlowRes*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sAODPredBlowRes,
                    _0RL_sAODPredBlowRes_unmarshal_fn,
                    _0RL_sAODPredBlowRes_marshal_fn,
                    _0RL_sAODPredBlowRes_destructor_fn,
                    _v)) {
    _sp = (const sAODPredBlowRes*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sPredRes_marshal_fn(cdrStream& _s, void* _v)
{
  sPredRes* _p = (sPredRes*)_v;
  *_p >>= _s;
}
static void _0RL_sPredRes_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sPredRes* _p = new sPredRes;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sPredRes_destructor_fn(void* _v)
{
  sPredRes* _p = (sPredRes*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sPredRes& _s)
{
  sPredRes* _p = new sPredRes(_s);
  _a.PR_insert(_0RL_tc_sPredRes,
               _0RL_sPredRes_marshal_fn,
               _0RL_sPredRes_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sPredRes* _sp)
{
  _a.PR_insert(_0RL_tc_sPredRes,
               _0RL_sPredRes_marshal_fn,
               _0RL_sPredRes_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sPredRes*& _sp)
{
  return _a >>= (const sPredRes*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sPredRes*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sPredRes,
                    _0RL_sPredRes_unmarshal_fn,
                    _0RL_sPredRes_marshal_fn,
                    _0RL_sPredRes_destructor_fn,
                    _v)) {
    _sp = (const sPredRes*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqAODBlowPredRes_marshal_fn(cdrStream& _s, void* _v)
{
  seqAODBlowPredRes* _p = (seqAODBlowPredRes*)_v;
  *_p >>= _s;
}
static void _0RL_seqAODBlowPredRes_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqAODBlowPredRes* _p = new seqAODBlowPredRes;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqAODBlowPredRes_destructor_fn(void* _v)
{
  seqAODBlowPredRes* _p = (seqAODBlowPredRes*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqAODBlowPredRes& _s)
{
  seqAODBlowPredRes* _p = new seqAODBlowPredRes(_s);
  _a.PR_insert(_0RL_tc_seqAODBlowPredRes,
               _0RL_seqAODBlowPredRes_marshal_fn,
               _0RL_seqAODBlowPredRes_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqAODBlowPredRes* _sp)
{
  _a.PR_insert(_0RL_tc_seqAODBlowPredRes,
               _0RL_seqAODBlowPredRes_marshal_fn,
               _0RL_seqAODBlowPredRes_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqAODBlowPredRes*& _sp)
{
  return _a >>= (const seqAODBlowPredRes*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqAODBlowPredRes*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqAODBlowPredRes,
                    _0RL_seqAODBlowPredRes_unmarshal_fn,
                    _0RL_seqAODBlowPredRes_marshal_fn,
                    _0RL_seqAODBlowPredRes_destructor_fn,
                    _v)) {
    _sp = (const seqAODBlowPredRes*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqPredRes_marshal_fn(cdrStream& _s, void* _v)
{
  seqPredRes* _p = (seqPredRes*)_v;
  *_p >>= _s;
}
static void _0RL_seqPredRes_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqPredRes* _p = new seqPredRes;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqPredRes_destructor_fn(void* _v)
{
  seqPredRes* _p = (seqPredRes*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqPredRes& _s)
{
  seqPredRes* _p = new seqPredRes(_s);
  _a.PR_insert(_0RL_tc_seqPredRes,
               _0RL_seqPredRes_marshal_fn,
               _0RL_seqPredRes_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqPredRes* _sp)
{
  _a.PR_insert(_0RL_tc_seqPredRes,
               _0RL_seqPredRes_marshal_fn,
               _0RL_seqPredRes_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqPredRes*& _sp)
{
  return _a >>= (const seqPredRes*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqPredRes*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqPredRes,
                    _0RL_seqPredRes_unmarshal_fn,
                    _0RL_seqPredRes_marshal_fn,
                    _0RL_seqPredRes_destructor_fn,
                    _v)) {
    _sp = (const seqPredRes*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sCoolWater_marshal_fn(cdrStream& _s, void* _v)
{
  sCoolWater* _p = (sCoolWater*)_v;
  *_p >>= _s;
}
static void _0RL_sCoolWater_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sCoolWater* _p = new sCoolWater;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sCoolWater_destructor_fn(void* _v)
{
  sCoolWater* _p = (sCoolWater*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sCoolWater& _s)
{
  sCoolWater* _p = new sCoolWater(_s);
  _a.PR_insert(_0RL_tc_sCoolWater,
               _0RL_sCoolWater_marshal_fn,
               _0RL_sCoolWater_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sCoolWater* _sp)
{
  _a.PR_insert(_0RL_tc_sCoolWater,
               _0RL_sCoolWater_marshal_fn,
               _0RL_sCoolWater_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sCoolWater*& _sp)
{
  return _a >>= (const sCoolWater*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sCoolWater*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sCoolWater,
                    _0RL_sCoolWater_unmarshal_fn,
                    _0RL_sCoolWater_marshal_fn,
                    _0RL_sCoolWater_destructor_fn,
                    _v)) {
    _sp = (const sCoolWater*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sComputerMode_marshal_fn(cdrStream& _s, void* _v)
{
  sComputerMode* _p = (sComputerMode*)_v;
  *_p >>= _s;
}
static void _0RL_sComputerMode_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sComputerMode* _p = new sComputerMode;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sComputerMode_destructor_fn(void* _v)
{
  sComputerMode* _p = (sComputerMode*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sComputerMode& _s)
{
  sComputerMode* _p = new sComputerMode(_s);
  _a.PR_insert(_0RL_tc_sComputerMode,
               _0RL_sComputerMode_marshal_fn,
               _0RL_sComputerMode_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sComputerMode* _sp)
{
  _a.PR_insert(_0RL_tc_sComputerMode,
               _0RL_sComputerMode_marshal_fn,
               _0RL_sComputerMode_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sComputerMode*& _sp)
{
  return _a >>= (const sComputerMode*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sComputerMode*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sComputerMode,
                    _0RL_sComputerMode_unmarshal_fn,
                    _0RL_sComputerMode_marshal_fn,
                    _0RL_sComputerMode_destructor_fn,
                    _v)) {
    _sp = (const sComputerMode*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sCoolWaterDevice_marshal_fn(cdrStream& _s, void* _v)
{
  sCoolWaterDevice* _p = (sCoolWaterDevice*)_v;
  *_p >>= _s;
}
static void _0RL_sCoolWaterDevice_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sCoolWaterDevice* _p = new sCoolWaterDevice;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sCoolWaterDevice_destructor_fn(void* _v)
{
  sCoolWaterDevice* _p = (sCoolWaterDevice*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sCoolWaterDevice& _s)
{
  sCoolWaterDevice* _p = new sCoolWaterDevice(_s);
  _a.PR_insert(_0RL_tc_sCoolWaterDevice,
               _0RL_sCoolWaterDevice_marshal_fn,
               _0RL_sCoolWaterDevice_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sCoolWaterDevice* _sp)
{
  _a.PR_insert(_0RL_tc_sCoolWaterDevice,
               _0RL_sCoolWaterDevice_marshal_fn,
               _0RL_sCoolWaterDevice_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sCoolWaterDevice*& _sp)
{
  return _a >>= (const sCoolWaterDevice*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sCoolWaterDevice*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sCoolWaterDevice,
                    _0RL_sCoolWaterDevice_unmarshal_fn,
                    _0RL_sCoolWaterDevice_marshal_fn,
                    _0RL_sCoolWaterDevice_destructor_fn,
                    _v)) {
    _sp = (const sCoolWaterDevice*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqCoolWaterData_marshal_fn(cdrStream& _s, void* _v)
{
  seqCoolWaterData* _p = (seqCoolWaterData*)_v;
  *_p >>= _s;
}
static void _0RL_seqCoolWaterData_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqCoolWaterData* _p = new seqCoolWaterData;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqCoolWaterData_destructor_fn(void* _v)
{
  seqCoolWaterData* _p = (seqCoolWaterData*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqCoolWaterData& _s)
{
  seqCoolWaterData* _p = new seqCoolWaterData(_s);
  _a.PR_insert(_0RL_tc_seqCoolWaterData,
               _0RL_seqCoolWaterData_marshal_fn,
               _0RL_seqCoolWaterData_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqCoolWaterData* _sp)
{
  _a.PR_insert(_0RL_tc_seqCoolWaterData,
               _0RL_seqCoolWaterData_marshal_fn,
               _0RL_seqCoolWaterData_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqCoolWaterData*& _sp)
{
  return _a >>= (const seqCoolWaterData*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqCoolWaterData*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqCoolWaterData,
                    _0RL_seqCoolWaterData_unmarshal_fn,
                    _0RL_seqCoolWaterData_marshal_fn,
                    _0RL_seqCoolWaterData_destructor_fn,
                    _v)) {
    _sp = (const seqCoolWaterData*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqComputerModes_marshal_fn(cdrStream& _s, void* _v)
{
  seqComputerModes* _p = (seqComputerModes*)_v;
  *_p >>= _s;
}
static void _0RL_seqComputerModes_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqComputerModes* _p = new seqComputerModes;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqComputerModes_destructor_fn(void* _v)
{
  seqComputerModes* _p = (seqComputerModes*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqComputerModes& _s)
{
  seqComputerModes* _p = new seqComputerModes(_s);
  _a.PR_insert(_0RL_tc_seqComputerModes,
               _0RL_seqComputerModes_marshal_fn,
               _0RL_seqComputerModes_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqComputerModes* _sp)
{
  _a.PR_insert(_0RL_tc_seqComputerModes,
               _0RL_seqComputerModes_marshal_fn,
               _0RL_seqComputerModes_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqComputerModes*& _sp)
{
  return _a >>= (const seqComputerModes*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqComputerModes*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqComputerModes,
                    _0RL_seqComputerModes_unmarshal_fn,
                    _0RL_seqComputerModes_marshal_fn,
                    _0RL_seqComputerModes_destructor_fn,
                    _v)) {
    _sp = (const seqComputerModes*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sWireFeeder_marshal_fn(cdrStream& _s, void* _v)
{
  sWireFeeder* _p = (sWireFeeder*)_v;
  *_p >>= _s;
}
static void _0RL_sWireFeeder_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sWireFeeder* _p = new sWireFeeder;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sWireFeeder_destructor_fn(void* _v)
{
  sWireFeeder* _p = (sWireFeeder*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sWireFeeder& _s)
{
  sWireFeeder* _p = new sWireFeeder(_s);
  _a.PR_insert(_0RL_tc_sWireFeeder,
               _0RL_sWireFeeder_marshal_fn,
               _0RL_sWireFeeder_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sWireFeeder* _sp)
{
  _a.PR_insert(_0RL_tc_sWireFeeder,
               _0RL_sWireFeeder_marshal_fn,
               _0RL_sWireFeeder_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sWireFeeder*& _sp)
{
  return _a >>= (const sWireFeeder*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sWireFeeder*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sWireFeeder,
                    _0RL_sWireFeeder_unmarshal_fn,
                    _0RL_sWireFeeder_marshal_fn,
                    _0RL_sWireFeeder_destructor_fn,
                    _v)) {
    _sp = (const sWireFeeder*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqWireFeeder_marshal_fn(cdrStream& _s, void* _v)
{
  seqWireFeeder* _p = (seqWireFeeder*)_v;
  *_p >>= _s;
}
static void _0RL_seqWireFeeder_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqWireFeeder* _p = new seqWireFeeder;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqWireFeeder_destructor_fn(void* _v)
{
  seqWireFeeder* _p = (seqWireFeeder*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqWireFeeder& _s)
{
  seqWireFeeder* _p = new seqWireFeeder(_s);
  _a.PR_insert(_0RL_tc_seqWireFeeder,
               _0RL_seqWireFeeder_marshal_fn,
               _0RL_seqWireFeeder_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqWireFeeder* _sp)
{
  _a.PR_insert(_0RL_tc_seqWireFeeder,
               _0RL_seqWireFeeder_marshal_fn,
               _0RL_seqWireFeeder_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqWireFeeder*& _sp)
{
  return _a >>= (const seqWireFeeder*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqWireFeeder*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqWireFeeder,
                    _0RL_seqWireFeeder_unmarshal_fn,
                    _0RL_seqWireFeeder_marshal_fn,
                    _0RL_seqWireFeeder_destructor_fn,
                    _v)) {
    _sp = (const seqWireFeeder*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqStringList_marshal_fn(cdrStream& _s, void* _v)
{
  seqStringList* _p = (seqStringList*)_v;
  *_p >>= _s;
}
static void _0RL_seqStringList_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqStringList* _p = new seqStringList;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqStringList_destructor_fn(void* _v)
{
  seqStringList* _p = (seqStringList*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqStringList& _s)
{
  seqStringList* _p = new seqStringList(_s);
  _a.PR_insert(_0RL_tc_seqStringList,
               _0RL_seqStringList_marshal_fn,
               _0RL_seqStringList_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqStringList* _sp)
{
  _a.PR_insert(_0RL_tc_seqStringList,
               _0RL_seqStringList_marshal_fn,
               _0RL_seqStringList_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqStringList*& _sp)
{
  return _a >>= (const seqStringList*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqStringList*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqStringList,
                    _0RL_seqStringList_unmarshal_fn,
                    _0RL_seqStringList_marshal_fn,
                    _0RL_seqStringList_destructor_fn,
                    _v)) {
    _sp = (const seqStringList*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sGasData_marshal_fn(cdrStream& _s, void* _v)
{
  sGasData* _p = (sGasData*)_v;
  *_p >>= _s;
}
static void _0RL_sGasData_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sGasData* _p = new sGasData;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sGasData_destructor_fn(void* _v)
{
  sGasData* _p = (sGasData*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sGasData& _s)
{
  sGasData* _p = new sGasData(_s);
  _a.PR_insert(_0RL_tc_sGasData,
               _0RL_sGasData_marshal_fn,
               _0RL_sGasData_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sGasData* _sp)
{
  _a.PR_insert(_0RL_tc_sGasData,
               _0RL_sGasData_marshal_fn,
               _0RL_sGasData_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sGasData*& _sp)
{
  return _a >>= (const sGasData*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sGasData*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sGasData,
                    _0RL_sGasData_unmarshal_fn,
                    _0RL_sGasData_marshal_fn,
                    _0RL_sGasData_destructor_fn,
                    _v)) {
    _sp = (const sGasData*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqGasData_marshal_fn(cdrStream& _s, void* _v)
{
  seqGasData* _p = (seqGasData*)_v;
  *_p >>= _s;
}
static void _0RL_seqGasData_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqGasData* _p = new seqGasData;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqGasData_destructor_fn(void* _v)
{
  seqGasData* _p = (seqGasData*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqGasData& _s)
{
  seqGasData* _p = new seqGasData(_s);
  _a.PR_insert(_0RL_tc_seqGasData,
               _0RL_seqGasData_marshal_fn,
               _0RL_seqGasData_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqGasData* _sp)
{
  _a.PR_insert(_0RL_tc_seqGasData,
               _0RL_seqGasData_marshal_fn,
               _0RL_seqGasData_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqGasData*& _sp)
{
  return _a >>= (const seqGasData*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqGasData*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqGasData,
                    _0RL_seqGasData_unmarshal_fn,
                    _0RL_seqGasData_marshal_fn,
                    _0RL_seqGasData_destructor_fn,
                    _v)) {
    _sp = (const seqGasData*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sGasLanceData_marshal_fn(cdrStream& _s, void* _v)
{
  sGasLanceData* _p = (sGasLanceData*)_v;
  *_p >>= _s;
}
static void _0RL_sGasLanceData_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sGasLanceData* _p = new sGasLanceData;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sGasLanceData_destructor_fn(void* _v)
{
  sGasLanceData* _p = (sGasLanceData*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sGasLanceData& _s)
{
  sGasLanceData* _p = new sGasLanceData(_s);
  _a.PR_insert(_0RL_tc_sGasLanceData,
               _0RL_sGasLanceData_marshal_fn,
               _0RL_sGasLanceData_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sGasLanceData* _sp)
{
  _a.PR_insert(_0RL_tc_sGasLanceData,
               _0RL_sGasLanceData_marshal_fn,
               _0RL_sGasLanceData_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sGasLanceData*& _sp)
{
  return _a >>= (const sGasLanceData*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sGasLanceData*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sGasLanceData,
                    _0RL_sGasLanceData_unmarshal_fn,
                    _0RL_sGasLanceData_marshal_fn,
                    _0RL_sGasLanceData_destructor_fn,
                    _v)) {
    _sp = (const sGasLanceData*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqGasLanceData_marshal_fn(cdrStream& _s, void* _v)
{
  seqGasLanceData* _p = (seqGasLanceData*)_v;
  *_p >>= _s;
}
static void _0RL_seqGasLanceData_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqGasLanceData* _p = new seqGasLanceData;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqGasLanceData_destructor_fn(void* _v)
{
  seqGasLanceData* _p = (seqGasLanceData*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqGasLanceData& _s)
{
  seqGasLanceData* _p = new seqGasLanceData(_s);
  _a.PR_insert(_0RL_tc_seqGasLanceData,
               _0RL_seqGasLanceData_marshal_fn,
               _0RL_seqGasLanceData_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqGasLanceData* _sp)
{
  _a.PR_insert(_0RL_tc_seqGasLanceData,
               _0RL_seqGasLanceData_marshal_fn,
               _0RL_seqGasLanceData_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqGasLanceData*& _sp)
{
  return _a >>= (const seqGasLanceData*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqGasLanceData*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqGasLanceData,
                    _0RL_seqGasLanceData_unmarshal_fn,
                    _0RL_seqGasLanceData_marshal_fn,
                    _0RL_seqGasLanceData_destructor_fn,
                    _v)) {
    _sp = (const seqGasLanceData*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sDeviceGasData_marshal_fn(cdrStream& _s, void* _v)
{
  sDeviceGasData* _p = (sDeviceGasData*)_v;
  *_p >>= _s;
}
static void _0RL_sDeviceGasData_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sDeviceGasData* _p = new sDeviceGasData;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sDeviceGasData_destructor_fn(void* _v)
{
  sDeviceGasData* _p = (sDeviceGasData*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sDeviceGasData& _s)
{
  sDeviceGasData* _p = new sDeviceGasData(_s);
  _a.PR_insert(_0RL_tc_sDeviceGasData,
               _0RL_sDeviceGasData_marshal_fn,
               _0RL_sDeviceGasData_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sDeviceGasData* _sp)
{
  _a.PR_insert(_0RL_tc_sDeviceGasData,
               _0RL_sDeviceGasData_marshal_fn,
               _0RL_sDeviceGasData_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sDeviceGasData*& _sp)
{
  return _a >>= (const sDeviceGasData*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sDeviceGasData*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sDeviceGasData,
                    _0RL_sDeviceGasData_unmarshal_fn,
                    _0RL_sDeviceGasData_marshal_fn,
                    _0RL_sDeviceGasData_destructor_fn,
                    _v)) {
    _sp = (const sDeviceGasData*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqDeviceGasData_marshal_fn(cdrStream& _s, void* _v)
{
  seqDeviceGasData* _p = (seqDeviceGasData*)_v;
  *_p >>= _s;
}
static void _0RL_seqDeviceGasData_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqDeviceGasData* _p = new seqDeviceGasData;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqDeviceGasData_destructor_fn(void* _v)
{
  seqDeviceGasData* _p = (seqDeviceGasData*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqDeviceGasData& _s)
{
  seqDeviceGasData* _p = new seqDeviceGasData(_s);
  _a.PR_insert(_0RL_tc_seqDeviceGasData,
               _0RL_seqDeviceGasData_marshal_fn,
               _0RL_seqDeviceGasData_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqDeviceGasData* _sp)
{
  _a.PR_insert(_0RL_tc_seqDeviceGasData,
               _0RL_seqDeviceGasData_marshal_fn,
               _0RL_seqDeviceGasData_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqDeviceGasData*& _sp)
{
  return _a >>= (const seqDeviceGasData*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqDeviceGasData*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqDeviceGasData,
                    _0RL_seqDeviceGasData_unmarshal_fn,
                    _0RL_seqDeviceGasData_marshal_fn,
                    _0RL_seqDeviceGasData_destructor_fn,
                    _v)) {
    _sp = (const seqDeviceGasData*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sEAFGasLancePredRes_marshal_fn(cdrStream& _s, void* _v)
{
  sEAFGasLancePredRes* _p = (sEAFGasLancePredRes*)_v;
  *_p >>= _s;
}
static void _0RL_sEAFGasLancePredRes_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sEAFGasLancePredRes* _p = new sEAFGasLancePredRes;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sEAFGasLancePredRes_destructor_fn(void* _v)
{
  sEAFGasLancePredRes* _p = (sEAFGasLancePredRes*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sEAFGasLancePredRes& _s)
{
  sEAFGasLancePredRes* _p = new sEAFGasLancePredRes(_s);
  _a.PR_insert(_0RL_tc_sEAFGasLancePredRes,
               _0RL_sEAFGasLancePredRes_marshal_fn,
               _0RL_sEAFGasLancePredRes_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sEAFGasLancePredRes* _sp)
{
  _a.PR_insert(_0RL_tc_sEAFGasLancePredRes,
               _0RL_sEAFGasLancePredRes_marshal_fn,
               _0RL_sEAFGasLancePredRes_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sEAFGasLancePredRes*& _sp)
{
  return _a >>= (const sEAFGasLancePredRes*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sEAFGasLancePredRes*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sEAFGasLancePredRes,
                    _0RL_sEAFGasLancePredRes_unmarshal_fn,
                    _0RL_sEAFGasLancePredRes_marshal_fn,
                    _0RL_sEAFGasLancePredRes_destructor_fn,
                    _v)) {
    _sp = (const sEAFGasLancePredRes*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqEAFGasLancePredRes_marshal_fn(cdrStream& _s, void* _v)
{
  seqEAFGasLancePredRes* _p = (seqEAFGasLancePredRes*)_v;
  *_p >>= _s;
}
static void _0RL_seqEAFGasLancePredRes_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqEAFGasLancePredRes* _p = new seqEAFGasLancePredRes;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqEAFGasLancePredRes_destructor_fn(void* _v)
{
  seqEAFGasLancePredRes* _p = (seqEAFGasLancePredRes*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqEAFGasLancePredRes& _s)
{
  seqEAFGasLancePredRes* _p = new seqEAFGasLancePredRes(_s);
  _a.PR_insert(_0RL_tc_seqEAFGasLancePredRes,
               _0RL_seqEAFGasLancePredRes_marshal_fn,
               _0RL_seqEAFGasLancePredRes_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqEAFGasLancePredRes* _sp)
{
  _a.PR_insert(_0RL_tc_seqEAFGasLancePredRes,
               _0RL_seqEAFGasLancePredRes_marshal_fn,
               _0RL_seqEAFGasLancePredRes_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqEAFGasLancePredRes*& _sp)
{
  return _a >>= (const seqEAFGasLancePredRes*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqEAFGasLancePredRes*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqEAFGasLancePredRes,
                    _0RL_seqEAFGasLancePredRes_unmarshal_fn,
                    _0RL_seqEAFGasLancePredRes_marshal_fn,
                    _0RL_seqEAFGasLancePredRes_destructor_fn,
                    _v)) {
    _sp = (const seqEAFGasLancePredRes*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sGasAvail_marshal_fn(cdrStream& _s, void* _v)
{
  sGasAvail* _p = (sGasAvail*)_v;
  *_p >>= _s;
}
static void _0RL_sGasAvail_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sGasAvail* _p = new sGasAvail;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sGasAvail_destructor_fn(void* _v)
{
  sGasAvail* _p = (sGasAvail*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sGasAvail& _s)
{
  sGasAvail* _p = new sGasAvail(_s);
  _a.PR_insert(_0RL_tc_sGasAvail,
               _0RL_sGasAvail_marshal_fn,
               _0RL_sGasAvail_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sGasAvail* _sp)
{
  _a.PR_insert(_0RL_tc_sGasAvail,
               _0RL_sGasAvail_marshal_fn,
               _0RL_sGasAvail_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sGasAvail*& _sp)
{
  return _a >>= (const sGasAvail*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sGasAvail*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sGasAvail,
                    _0RL_sGasAvail_unmarshal_fn,
                    _0RL_sGasAvail_marshal_fn,
                    _0RL_sGasAvail_destructor_fn,
                    _v)) {
    _sp = (const sGasAvail*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqGasAvail_marshal_fn(cdrStream& _s, void* _v)
{
  seqGasAvail* _p = (seqGasAvail*)_v;
  *_p >>= _s;
}
static void _0RL_seqGasAvail_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqGasAvail* _p = new seqGasAvail;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqGasAvail_destructor_fn(void* _v)
{
  seqGasAvail* _p = (seqGasAvail*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqGasAvail& _s)
{
  seqGasAvail* _p = new seqGasAvail(_s);
  _a.PR_insert(_0RL_tc_seqGasAvail,
               _0RL_seqGasAvail_marshal_fn,
               _0RL_seqGasAvail_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqGasAvail* _sp)
{
  _a.PR_insert(_0RL_tc_seqGasAvail,
               _0RL_seqGasAvail_marshal_fn,
               _0RL_seqGasAvail_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqGasAvail*& _sp)
{
  return _a >>= (const seqGasAvail*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqGasAvail*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqGasAvail,
                    _0RL_seqGasAvail_unmarshal_fn,
                    _0RL_seqGasAvail_marshal_fn,
                    _0RL_seqGasAvail_destructor_fn,
                    _v)) {
    _sp = (const seqGasAvail*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sWasteGas_marshal_fn(cdrStream& _s, void* _v)
{
  sWasteGas* _p = (sWasteGas*)_v;
  *_p >>= _s;
}
static void _0RL_sWasteGas_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sWasteGas* _p = new sWasteGas;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sWasteGas_destructor_fn(void* _v)
{
  sWasteGas* _p = (sWasteGas*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sWasteGas& _s)
{
  sWasteGas* _p = new sWasteGas(_s);
  _a.PR_insert(_0RL_tc_sWasteGas,
               _0RL_sWasteGas_marshal_fn,
               _0RL_sWasteGas_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sWasteGas* _sp)
{
  _a.PR_insert(_0RL_tc_sWasteGas,
               _0RL_sWasteGas_marshal_fn,
               _0RL_sWasteGas_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sWasteGas*& _sp)
{
  return _a >>= (const sWasteGas*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sWasteGas*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sWasteGas,
                    _0RL_sWasteGas_unmarshal_fn,
                    _0RL_sWasteGas_marshal_fn,
                    _0RL_sWasteGas_destructor_fn,
                    _v)) {
    _sp = (const sWasteGas*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqWasteGas_marshal_fn(cdrStream& _s, void* _v)
{
  seqWasteGas* _p = (seqWasteGas*)_v;
  *_p >>= _s;
}
static void _0RL_seqWasteGas_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqWasteGas* _p = new seqWasteGas;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqWasteGas_destructor_fn(void* _v)
{
  seqWasteGas* _p = (seqWasteGas*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqWasteGas& _s)
{
  seqWasteGas* _p = new seqWasteGas(_s);
  _a.PR_insert(_0RL_tc_seqWasteGas,
               _0RL_seqWasteGas_marshal_fn,
               _0RL_seqWasteGas_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqWasteGas* _sp)
{
  _a.PR_insert(_0RL_tc_seqWasteGas,
               _0RL_seqWasteGas_marshal_fn,
               _0RL_seqWasteGas_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqWasteGas*& _sp)
{
  return _a >>= (const seqWasteGas*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqWasteGas*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqWasteGas,
                    _0RL_seqWasteGas_unmarshal_fn,
                    _0RL_seqWasteGas_marshal_fn,
                    _0RL_seqWasteGas_destructor_fn,
                    _v)) {
    _sp = (const seqWasteGas*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sBlowStatus_marshal_fn(cdrStream& _s, void* _v)
{
  sBlowStatus* _p = (sBlowStatus*)_v;
  *_p >>= _s;
}
static void _0RL_sBlowStatus_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sBlowStatus* _p = new sBlowStatus;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sBlowStatus_destructor_fn(void* _v)
{
  sBlowStatus* _p = (sBlowStatus*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sBlowStatus& _s)
{
  sBlowStatus* _p = new sBlowStatus(_s);
  _a.PR_insert(_0RL_tc_sBlowStatus,
               _0RL_sBlowStatus_marshal_fn,
               _0RL_sBlowStatus_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sBlowStatus* _sp)
{
  _a.PR_insert(_0RL_tc_sBlowStatus,
               _0RL_sBlowStatus_marshal_fn,
               _0RL_sBlowStatus_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sBlowStatus*& _sp)
{
  return _a >>= (const sBlowStatus*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sBlowStatus*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sBlowStatus,
                    _0RL_sBlowStatus_unmarshal_fn,
                    _0RL_sBlowStatus_marshal_fn,
                    _0RL_sBlowStatus_destructor_fn,
                    _v)) {
    _sp = (const sBlowStatus*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqBlowStatus_marshal_fn(cdrStream& _s, void* _v)
{
  seqBlowStatus* _p = (seqBlowStatus*)_v;
  *_p >>= _s;
}
static void _0RL_seqBlowStatus_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqBlowStatus* _p = new seqBlowStatus;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqBlowStatus_destructor_fn(void* _v)
{
  seqBlowStatus* _p = (seqBlowStatus*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqBlowStatus& _s)
{
  seqBlowStatus* _p = new seqBlowStatus(_s);
  _a.PR_insert(_0RL_tc_seqBlowStatus,
               _0RL_seqBlowStatus_marshal_fn,
               _0RL_seqBlowStatus_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqBlowStatus* _sp)
{
  _a.PR_insert(_0RL_tc_seqBlowStatus,
               _0RL_seqBlowStatus_marshal_fn,
               _0RL_seqBlowStatus_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqBlowStatus*& _sp)
{
  return _a >>= (const seqBlowStatus*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqBlowStatus*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqBlowStatus,
                    _0RL_seqBlowStatus_unmarshal_fn,
                    _0RL_seqBlowStatus_marshal_fn,
                    _0RL_seqBlowStatus_destructor_fn,
                    _v)) {
    _sp = (const seqBlowStatus*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sStatus_marshal_fn(cdrStream& _s, void* _v)
{
  sStatus* _p = (sStatus*)_v;
  *_p >>= _s;
}
static void _0RL_sStatus_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sStatus* _p = new sStatus;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sStatus_destructor_fn(void* _v)
{
  sStatus* _p = (sStatus*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sStatus& _s)
{
  sStatus* _p = new sStatus(_s);
  _a.PR_insert(_0RL_tc_sStatus,
               _0RL_sStatus_marshal_fn,
               _0RL_sStatus_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sStatus* _sp)
{
  _a.PR_insert(_0RL_tc_sStatus,
               _0RL_sStatus_marshal_fn,
               _0RL_sStatus_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sStatus*& _sp)
{
  return _a >>= (const sStatus*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sStatus*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sStatus,
                    _0RL_sStatus_unmarshal_fn,
                    _0RL_sStatus_marshal_fn,
                    _0RL_sStatus_destructor_fn,
                    _v)) {
    _sp = (const sStatus*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqStatus_marshal_fn(cdrStream& _s, void* _v)
{
  seqStatus* _p = (seqStatus*)_v;
  *_p >>= _s;
}
static void _0RL_seqStatus_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqStatus* _p = new seqStatus;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqStatus_destructor_fn(void* _v)
{
  seqStatus* _p = (seqStatus*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqStatus& _s)
{
  seqStatus* _p = new seqStatus(_s);
  _a.PR_insert(_0RL_tc_seqStatus,
               _0RL_seqStatus_marshal_fn,
               _0RL_seqStatus_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqStatus* _sp)
{
  _a.PR_insert(_0RL_tc_seqStatus,
               _0RL_seqStatus_marshal_fn,
               _0RL_seqStatus_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqStatus*& _sp)
{
  return _a >>= (const seqStatus*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqStatus*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqStatus,
                    _0RL_seqStatus_unmarshal_fn,
                    _0RL_seqStatus_marshal_fn,
                    _0RL_seqStatus_destructor_fn,
                    _v)) {
    _sp = (const seqStatus*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sHeatSchedulePlant_marshal_fn(cdrStream& _s, void* _v)
{
  sHeatSchedulePlant* _p = (sHeatSchedulePlant*)_v;
  *_p >>= _s;
}
static void _0RL_sHeatSchedulePlant_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sHeatSchedulePlant* _p = new sHeatSchedulePlant;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sHeatSchedulePlant_destructor_fn(void* _v)
{
  sHeatSchedulePlant* _p = (sHeatSchedulePlant*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sHeatSchedulePlant& _s)
{
  sHeatSchedulePlant* _p = new sHeatSchedulePlant(_s);
  _a.PR_insert(_0RL_tc_sHeatSchedulePlant,
               _0RL_sHeatSchedulePlant_marshal_fn,
               _0RL_sHeatSchedulePlant_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sHeatSchedulePlant* _sp)
{
  _a.PR_insert(_0RL_tc_sHeatSchedulePlant,
               _0RL_sHeatSchedulePlant_marshal_fn,
               _0RL_sHeatSchedulePlant_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sHeatSchedulePlant*& _sp)
{
  return _a >>= (const sHeatSchedulePlant*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sHeatSchedulePlant*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sHeatSchedulePlant,
                    _0RL_sHeatSchedulePlant_unmarshal_fn,
                    _0RL_sHeatSchedulePlant_marshal_fn,
                    _0RL_sHeatSchedulePlant_destructor_fn,
                    _v)) {
    _sp = (const sHeatSchedulePlant*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqHeatSchedulePlant_marshal_fn(cdrStream& _s, void* _v)
{
  seqHeatSchedulePlant* _p = (seqHeatSchedulePlant*)_v;
  *_p >>= _s;
}
static void _0RL_seqHeatSchedulePlant_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqHeatSchedulePlant* _p = new seqHeatSchedulePlant;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqHeatSchedulePlant_destructor_fn(void* _v)
{
  seqHeatSchedulePlant* _p = (seqHeatSchedulePlant*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqHeatSchedulePlant& _s)
{
  seqHeatSchedulePlant* _p = new seqHeatSchedulePlant(_s);
  _a.PR_insert(_0RL_tc_seqHeatSchedulePlant,
               _0RL_seqHeatSchedulePlant_marshal_fn,
               _0RL_seqHeatSchedulePlant_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqHeatSchedulePlant* _sp)
{
  _a.PR_insert(_0RL_tc_seqHeatSchedulePlant,
               _0RL_seqHeatSchedulePlant_marshal_fn,
               _0RL_seqHeatSchedulePlant_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqHeatSchedulePlant*& _sp)
{
  return _a >>= (const seqHeatSchedulePlant*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqHeatSchedulePlant*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqHeatSchedulePlant,
                    _0RL_seqHeatSchedulePlant_unmarshal_fn,
                    _0RL_seqHeatSchedulePlant_marshal_fn,
                    _0RL_seqHeatSchedulePlant_destructor_fn,
                    _v)) {
    _sp = (const seqHeatSchedulePlant*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sHeatSchedule_marshal_fn(cdrStream& _s, void* _v)
{
  sHeatSchedule* _p = (sHeatSchedule*)_v;
  *_p >>= _s;
}
static void _0RL_sHeatSchedule_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sHeatSchedule* _p = new sHeatSchedule;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sHeatSchedule_destructor_fn(void* _v)
{
  sHeatSchedule* _p = (sHeatSchedule*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sHeatSchedule& _s)
{
  sHeatSchedule* _p = new sHeatSchedule(_s);
  _a.PR_insert(_0RL_tc_sHeatSchedule,
               _0RL_sHeatSchedule_marshal_fn,
               _0RL_sHeatSchedule_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sHeatSchedule* _sp)
{
  _a.PR_insert(_0RL_tc_sHeatSchedule,
               _0RL_sHeatSchedule_marshal_fn,
               _0RL_sHeatSchedule_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sHeatSchedule*& _sp)
{
  return _a >>= (const sHeatSchedule*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sHeatSchedule*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sHeatSchedule,
                    _0RL_sHeatSchedule_unmarshal_fn,
                    _0RL_sHeatSchedule_marshal_fn,
                    _0RL_sHeatSchedule_destructor_fn,
                    _v)) {
    _sp = (const sHeatSchedule*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqHeatSchedule_marshal_fn(cdrStream& _s, void* _v)
{
  seqHeatSchedule* _p = (seqHeatSchedule*)_v;
  *_p >>= _s;
}
static void _0RL_seqHeatSchedule_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqHeatSchedule* _p = new seqHeatSchedule;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqHeatSchedule_destructor_fn(void* _v)
{
  seqHeatSchedule* _p = (seqHeatSchedule*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqHeatSchedule& _s)
{
  seqHeatSchedule* _p = new seqHeatSchedule(_s);
  _a.PR_insert(_0RL_tc_seqHeatSchedule,
               _0RL_seqHeatSchedule_marshal_fn,
               _0RL_seqHeatSchedule_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqHeatSchedule* _sp)
{
  _a.PR_insert(_0RL_tc_seqHeatSchedule,
               _0RL_seqHeatSchedule_marshal_fn,
               _0RL_seqHeatSchedule_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqHeatSchedule*& _sp)
{
  return _a >>= (const seqHeatSchedule*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqHeatSchedule*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqHeatSchedule,
                    _0RL_seqHeatSchedule_unmarshal_fn,
                    _0RL_seqHeatSchedule_marshal_fn,
                    _0RL_seqHeatSchedule_destructor_fn,
                    _v)) {
    _sp = (const seqHeatSchedule*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sOrderData_marshal_fn(cdrStream& _s, void* _v)
{
  sOrderData* _p = (sOrderData*)_v;
  *_p >>= _s;
}
static void _0RL_sOrderData_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sOrderData* _p = new sOrderData;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sOrderData_destructor_fn(void* _v)
{
  sOrderData* _p = (sOrderData*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sOrderData& _s)
{
  sOrderData* _p = new sOrderData(_s);
  _a.PR_insert(_0RL_tc_sOrderData,
               _0RL_sOrderData_marshal_fn,
               _0RL_sOrderData_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sOrderData* _sp)
{
  _a.PR_insert(_0RL_tc_sOrderData,
               _0RL_sOrderData_marshal_fn,
               _0RL_sOrderData_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sOrderData*& _sp)
{
  return _a >>= (const sOrderData*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sOrderData*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sOrderData,
                    _0RL_sOrderData_unmarshal_fn,
                    _0RL_sOrderData_marshal_fn,
                    _0RL_sOrderData_destructor_fn,
                    _v)) {
    _sp = (const sOrderData*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqOrderData_marshal_fn(cdrStream& _s, void* _v)
{
  seqOrderData* _p = (seqOrderData*)_v;
  *_p >>= _s;
}
static void _0RL_seqOrderData_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqOrderData* _p = new seqOrderData;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqOrderData_destructor_fn(void* _v)
{
  seqOrderData* _p = (seqOrderData*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqOrderData& _s)
{
  seqOrderData* _p = new seqOrderData(_s);
  _a.PR_insert(_0RL_tc_seqOrderData,
               _0RL_seqOrderData_marshal_fn,
               _0RL_seqOrderData_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqOrderData* _sp)
{
  _a.PR_insert(_0RL_tc_seqOrderData,
               _0RL_seqOrderData_marshal_fn,
               _0RL_seqOrderData_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqOrderData*& _sp)
{
  return _a >>= (const seqOrderData*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqOrderData*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqOrderData,
                    _0RL_seqOrderData_unmarshal_fn,
                    _0RL_seqOrderData_marshal_fn,
                    _0RL_seqOrderData_destructor_fn,
                    _v)) {
    _sp = (const seqOrderData*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sSampleData_marshal_fn(cdrStream& _s, void* _v)
{
  sSampleData* _p = (sSampleData*)_v;
  *_p >>= _s;
}
static void _0RL_sSampleData_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sSampleData* _p = new sSampleData;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sSampleData_destructor_fn(void* _v)
{
  sSampleData* _p = (sSampleData*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sSampleData& _s)
{
  sSampleData* _p = new sSampleData(_s);
  _a.PR_insert(_0RL_tc_sSampleData,
               _0RL_sSampleData_marshal_fn,
               _0RL_sSampleData_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sSampleData* _sp)
{
  _a.PR_insert(_0RL_tc_sSampleData,
               _0RL_sSampleData_marshal_fn,
               _0RL_sSampleData_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sSampleData*& _sp)
{
  return _a >>= (const sSampleData*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sSampleData*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sSampleData,
                    _0RL_sSampleData_unmarshal_fn,
                    _0RL_sSampleData_marshal_fn,
                    _0RL_sSampleData_destructor_fn,
                    _v)) {
    _sp = (const sSampleData*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqSampleData_marshal_fn(cdrStream& _s, void* _v)
{
  seqSampleData* _p = (seqSampleData*)_v;
  *_p >>= _s;
}
static void _0RL_seqSampleData_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqSampleData* _p = new seqSampleData;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqSampleData_destructor_fn(void* _v)
{
  seqSampleData* _p = (seqSampleData*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqSampleData& _s)
{
  seqSampleData* _p = new seqSampleData(_s);
  _a.PR_insert(_0RL_tc_seqSampleData,
               _0RL_seqSampleData_marshal_fn,
               _0RL_seqSampleData_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqSampleData* _sp)
{
  _a.PR_insert(_0RL_tc_seqSampleData,
               _0RL_seqSampleData_marshal_fn,
               _0RL_seqSampleData_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqSampleData*& _sp)
{
  return _a >>= (const seqSampleData*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqSampleData*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqSampleData,
                    _0RL_seqSampleData_unmarshal_fn,
                    _0RL_seqSampleData_marshal_fn,
                    _0RL_seqSampleData_destructor_fn,
                    _v)) {
    _sp = (const seqSampleData*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sAnalysisData_marshal_fn(cdrStream& _s, void* _v)
{
  sAnalysisData* _p = (sAnalysisData*)_v;
  *_p >>= _s;
}
static void _0RL_sAnalysisData_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sAnalysisData* _p = new sAnalysisData;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sAnalysisData_destructor_fn(void* _v)
{
  sAnalysisData* _p = (sAnalysisData*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sAnalysisData& _s)
{
  sAnalysisData* _p = new sAnalysisData(_s);
  _a.PR_insert(_0RL_tc_sAnalysisData,
               _0RL_sAnalysisData_marshal_fn,
               _0RL_sAnalysisData_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sAnalysisData* _sp)
{
  _a.PR_insert(_0RL_tc_sAnalysisData,
               _0RL_sAnalysisData_marshal_fn,
               _0RL_sAnalysisData_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sAnalysisData*& _sp)
{
  return _a >>= (const sAnalysisData*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sAnalysisData*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sAnalysisData,
                    _0RL_sAnalysisData_unmarshal_fn,
                    _0RL_sAnalysisData_marshal_fn,
                    _0RL_sAnalysisData_destructor_fn,
                    _v)) {
    _sp = (const sAnalysisData*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sHeatData_marshal_fn(cdrStream& _s, void* _v)
{
  sHeatData* _p = (sHeatData*)_v;
  *_p >>= _s;
}
static void _0RL_sHeatData_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sHeatData* _p = new sHeatData;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sHeatData_destructor_fn(void* _v)
{
  sHeatData* _p = (sHeatData*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sHeatData& _s)
{
  sHeatData* _p = new sHeatData(_s);
  _a.PR_insert(_0RL_tc_sHeatData,
               _0RL_sHeatData_marshal_fn,
               _0RL_sHeatData_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sHeatData* _sp)
{
  _a.PR_insert(_0RL_tc_sHeatData,
               _0RL_sHeatData_marshal_fn,
               _0RL_sHeatData_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sHeatData*& _sp)
{
  return _a >>= (const sHeatData*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sHeatData*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sHeatData,
                    _0RL_sHeatData_unmarshal_fn,
                    _0RL_sHeatData_marshal_fn,
                    _0RL_sHeatData_destructor_fn,
                    _v)) {
    _sp = (const sHeatData*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqHeatData_marshal_fn(cdrStream& _s, void* _v)
{
  seqHeatData* _p = (seqHeatData*)_v;
  *_p >>= _s;
}
static void _0RL_seqHeatData_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqHeatData* _p = new seqHeatData;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqHeatData_destructor_fn(void* _v)
{
  seqHeatData* _p = (seqHeatData*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqHeatData& _s)
{
  seqHeatData* _p = new seqHeatData(_s);
  _a.PR_insert(_0RL_tc_seqHeatData,
               _0RL_seqHeatData_marshal_fn,
               _0RL_seqHeatData_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqHeatData* _sp)
{
  _a.PR_insert(_0RL_tc_seqHeatData,
               _0RL_seqHeatData_marshal_fn,
               _0RL_seqHeatData_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqHeatData*& _sp)
{
  return _a >>= (const seqHeatData*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqHeatData*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqHeatData,
                    _0RL_seqHeatData_unmarshal_fn,
                    _0RL_seqHeatData_marshal_fn,
                    _0RL_seqHeatData_destructor_fn,
                    _v)) {
    _sp = (const seqHeatData*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sInjectLanceData_marshal_fn(cdrStream& _s, void* _v)
{
  sInjectLanceData* _p = (sInjectLanceData*)_v;
  *_p >>= _s;
}
static void _0RL_sInjectLanceData_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sInjectLanceData* _p = new sInjectLanceData;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sInjectLanceData_destructor_fn(void* _v)
{
  sInjectLanceData* _p = (sInjectLanceData*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sInjectLanceData& _s)
{
  sInjectLanceData* _p = new sInjectLanceData(_s);
  _a.PR_insert(_0RL_tc_sInjectLanceData,
               _0RL_sInjectLanceData_marshal_fn,
               _0RL_sInjectLanceData_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sInjectLanceData* _sp)
{
  _a.PR_insert(_0RL_tc_sInjectLanceData,
               _0RL_sInjectLanceData_marshal_fn,
               _0RL_sInjectLanceData_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sInjectLanceData*& _sp)
{
  return _a >>= (const sInjectLanceData*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sInjectLanceData*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sInjectLanceData,
                    _0RL_sInjectLanceData_unmarshal_fn,
                    _0RL_sInjectLanceData_marshal_fn,
                    _0RL_sInjectLanceData_destructor_fn,
                    _v)) {
    _sp = (const sInjectLanceData*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqInjectLanceData_marshal_fn(cdrStream& _s, void* _v)
{
  seqInjectLanceData* _p = (seqInjectLanceData*)_v;
  *_p >>= _s;
}
static void _0RL_seqInjectLanceData_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqInjectLanceData* _p = new seqInjectLanceData;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqInjectLanceData_destructor_fn(void* _v)
{
  seqInjectLanceData* _p = (seqInjectLanceData*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqInjectLanceData& _s)
{
  seqInjectLanceData* _p = new seqInjectLanceData(_s);
  _a.PR_insert(_0RL_tc_seqInjectLanceData,
               _0RL_seqInjectLanceData_marshal_fn,
               _0RL_seqInjectLanceData_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqInjectLanceData* _sp)
{
  _a.PR_insert(_0RL_tc_seqInjectLanceData,
               _0RL_seqInjectLanceData_marshal_fn,
               _0RL_seqInjectLanceData_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqInjectLanceData*& _sp)
{
  return _a >>= (const seqInjectLanceData*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqInjectLanceData*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqInjectLanceData,
                    _0RL_seqInjectLanceData_unmarshal_fn,
                    _0RL_seqInjectLanceData_marshal_fn,
                    _0RL_seqInjectLanceData_destructor_fn,
                    _v)) {
    _sp = (const seqInjectLanceData*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sGasLanceGasAvail_marshal_fn(cdrStream& _s, void* _v)
{
  sGasLanceGasAvail* _p = (sGasLanceGasAvail*)_v;
  *_p >>= _s;
}
static void _0RL_sGasLanceGasAvail_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sGasLanceGasAvail* _p = new sGasLanceGasAvail;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sGasLanceGasAvail_destructor_fn(void* _v)
{
  sGasLanceGasAvail* _p = (sGasLanceGasAvail*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sGasLanceGasAvail& _s)
{
  sGasLanceGasAvail* _p = new sGasLanceGasAvail(_s);
  _a.PR_insert(_0RL_tc_sGasLanceGasAvail,
               _0RL_sGasLanceGasAvail_marshal_fn,
               _0RL_sGasLanceGasAvail_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sGasLanceGasAvail* _sp)
{
  _a.PR_insert(_0RL_tc_sGasLanceGasAvail,
               _0RL_sGasLanceGasAvail_marshal_fn,
               _0RL_sGasLanceGasAvail_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sGasLanceGasAvail*& _sp)
{
  return _a >>= (const sGasLanceGasAvail*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sGasLanceGasAvail*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sGasLanceGasAvail,
                    _0RL_sGasLanceGasAvail_unmarshal_fn,
                    _0RL_sGasLanceGasAvail_marshal_fn,
                    _0RL_sGasLanceGasAvail_destructor_fn,
                    _v)) {
    _sp = (const sGasLanceGasAvail*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqGasLanceGasAvail_marshal_fn(cdrStream& _s, void* _v)
{
  seqGasLanceGasAvail* _p = (seqGasLanceGasAvail*)_v;
  *_p >>= _s;
}
static void _0RL_seqGasLanceGasAvail_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqGasLanceGasAvail* _p = new seqGasLanceGasAvail;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqGasLanceGasAvail_destructor_fn(void* _v)
{
  seqGasLanceGasAvail* _p = (seqGasLanceGasAvail*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqGasLanceGasAvail& _s)
{
  seqGasLanceGasAvail* _p = new seqGasLanceGasAvail(_s);
  _a.PR_insert(_0RL_tc_seqGasLanceGasAvail,
               _0RL_seqGasLanceGasAvail_marshal_fn,
               _0RL_seqGasLanceGasAvail_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqGasLanceGasAvail* _sp)
{
  _a.PR_insert(_0RL_tc_seqGasLanceGasAvail,
               _0RL_seqGasLanceGasAvail_marshal_fn,
               _0RL_seqGasLanceGasAvail_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqGasLanceGasAvail*& _sp)
{
  return _a >>= (const seqGasLanceGasAvail*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqGasLanceGasAvail*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqGasLanceGasAvail,
                    _0RL_seqGasLanceGasAvail_unmarshal_fn,
                    _0RL_seqGasLanceGasAvail_marshal_fn,
                    _0RL_seqGasLanceGasAvail_destructor_fn,
                    _v)) {
    _sp = (const seqGasLanceGasAvail*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sBatchPrio_marshal_fn(cdrStream& _s, void* _v)
{
  sBatchPrio* _p = (sBatchPrio*)_v;
  *_p >>= _s;
}
static void _0RL_sBatchPrio_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sBatchPrio* _p = new sBatchPrio;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sBatchPrio_destructor_fn(void* _v)
{
  sBatchPrio* _p = (sBatchPrio*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sBatchPrio& _s)
{
  sBatchPrio* _p = new sBatchPrio(_s);
  _a.PR_insert(_0RL_tc_sBatchPrio,
               _0RL_sBatchPrio_marshal_fn,
               _0RL_sBatchPrio_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sBatchPrio* _sp)
{
  _a.PR_insert(_0RL_tc_sBatchPrio,
               _0RL_sBatchPrio_marshal_fn,
               _0RL_sBatchPrio_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sBatchPrio*& _sp)
{
  return _a >>= (const sBatchPrio*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sBatchPrio*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sBatchPrio,
                    _0RL_sBatchPrio_unmarshal_fn,
                    _0RL_sBatchPrio_marshal_fn,
                    _0RL_sBatchPrio_destructor_fn,
                    _v)) {
    _sp = (const sBatchPrio*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqBatchPrio_marshal_fn(cdrStream& _s, void* _v)
{
  seqBatchPrio* _p = (seqBatchPrio*)_v;
  *_p >>= _s;
}
static void _0RL_seqBatchPrio_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqBatchPrio* _p = new seqBatchPrio;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqBatchPrio_destructor_fn(void* _v)
{
  seqBatchPrio* _p = (seqBatchPrio*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqBatchPrio& _s)
{
  seqBatchPrio* _p = new seqBatchPrio(_s);
  _a.PR_insert(_0RL_tc_seqBatchPrio,
               _0RL_seqBatchPrio_marshal_fn,
               _0RL_seqBatchPrio_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqBatchPrio* _sp)
{
  _a.PR_insert(_0RL_tc_seqBatchPrio,
               _0RL_seqBatchPrio_marshal_fn,
               _0RL_seqBatchPrio_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqBatchPrio*& _sp)
{
  return _a >>= (const seqBatchPrio*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqBatchPrio*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqBatchPrio,
                    _0RL_seqBatchPrio_unmarshal_fn,
                    _0RL_seqBatchPrio_marshal_fn,
                    _0RL_seqBatchPrio_destructor_fn,
                    _v)) {
    _sp = (const seqBatchPrio*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqAnalysisData_marshal_fn(cdrStream& _s, void* _v)
{
  seqAnalysisData* _p = (seqAnalysisData*)_v;
  *_p >>= _s;
}
static void _0RL_seqAnalysisData_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqAnalysisData* _p = new seqAnalysisData;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqAnalysisData_destructor_fn(void* _v)
{
  seqAnalysisData* _p = (seqAnalysisData*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqAnalysisData& _s)
{
  seqAnalysisData* _p = new seqAnalysisData(_s);
  _a.PR_insert(_0RL_tc_seqAnalysisData,
               _0RL_seqAnalysisData_marshal_fn,
               _0RL_seqAnalysisData_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqAnalysisData* _sp)
{
  _a.PR_insert(_0RL_tc_seqAnalysisData,
               _0RL_seqAnalysisData_marshal_fn,
               _0RL_seqAnalysisData_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqAnalysisData*& _sp)
{
  return _a >>= (const seqAnalysisData*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqAnalysisData*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqAnalysisData,
                    _0RL_seqAnalysisData_unmarshal_fn,
                    _0RL_seqAnalysisData_marshal_fn,
                    _0RL_seqAnalysisData_destructor_fn,
                    _v)) {
    _sp = (const seqAnalysisData*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_LFGlobalSetpoints_marshal_fn(cdrStream& _s, void* _v)
{
  LFGlobalSetpoints* _p = (LFGlobalSetpoints*)_v;
  *_p >>= _s;
}
static void _0RL_LFGlobalSetpoints_unmarshal_fn(cdrStream& _s, void*& _v)
{
  LFGlobalSetpoints* _p = new LFGlobalSetpoints;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_LFGlobalSetpoints_destructor_fn(void* _v)
{
  LFGlobalSetpoints* _p = (LFGlobalSetpoints*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const LFGlobalSetpoints& _s)
{
  LFGlobalSetpoints* _p = new LFGlobalSetpoints(_s);
  _a.PR_insert(_0RL_tc_LFGlobalSetpoints,
               _0RL_LFGlobalSetpoints_marshal_fn,
               _0RL_LFGlobalSetpoints_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, LFGlobalSetpoints* _sp)
{
  _a.PR_insert(_0RL_tc_LFGlobalSetpoints,
               _0RL_LFGlobalSetpoints_marshal_fn,
               _0RL_LFGlobalSetpoints_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, LFGlobalSetpoints*& _sp)
{
  return _a >>= (const LFGlobalSetpoints*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const LFGlobalSetpoints*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_LFGlobalSetpoints,
                    _0RL_LFGlobalSetpoints_unmarshal_fn,
                    _0RL_LFGlobalSetpoints_marshal_fn,
                    _0RL_LFGlobalSetpoints_destructor_fn,
                    _v)) {
    _sp = (const LFGlobalSetpoints*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sLiqMatReport_marshal_fn(cdrStream& _s, void* _v)
{
  sLiqMatReport* _p = (sLiqMatReport*)_v;
  *_p >>= _s;
}
static void _0RL_sLiqMatReport_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sLiqMatReport* _p = new sLiqMatReport;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sLiqMatReport_destructor_fn(void* _v)
{
  sLiqMatReport* _p = (sLiqMatReport*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sLiqMatReport& _s)
{
  sLiqMatReport* _p = new sLiqMatReport(_s);
  _a.PR_insert(_0RL_tc_sLiqMatReport,
               _0RL_sLiqMatReport_marshal_fn,
               _0RL_sLiqMatReport_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sLiqMatReport* _sp)
{
  _a.PR_insert(_0RL_tc_sLiqMatReport,
               _0RL_sLiqMatReport_marshal_fn,
               _0RL_sLiqMatReport_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sLiqMatReport*& _sp)
{
  return _a >>= (const sLiqMatReport*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sLiqMatReport*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sLiqMatReport,
                    _0RL_sLiqMatReport_unmarshal_fn,
                    _0RL_sLiqMatReport_marshal_fn,
                    _0RL_sLiqMatReport_destructor_fn,
                    _v)) {
    _sp = (const sLiqMatReport*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqLiqMatReport_marshal_fn(cdrStream& _s, void* _v)
{
  seqLiqMatReport* _p = (seqLiqMatReport*)_v;
  *_p >>= _s;
}
static void _0RL_seqLiqMatReport_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqLiqMatReport* _p = new seqLiqMatReport;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqLiqMatReport_destructor_fn(void* _v)
{
  seqLiqMatReport* _p = (seqLiqMatReport*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqLiqMatReport& _s)
{
  seqLiqMatReport* _p = new seqLiqMatReport(_s);
  _a.PR_insert(_0RL_tc_seqLiqMatReport,
               _0RL_seqLiqMatReport_marshal_fn,
               _0RL_seqLiqMatReport_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqLiqMatReport* _sp)
{
  _a.PR_insert(_0RL_tc_seqLiqMatReport,
               _0RL_seqLiqMatReport_marshal_fn,
               _0RL_seqLiqMatReport_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqLiqMatReport*& _sp)
{
  return _a >>= (const seqLiqMatReport*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqLiqMatReport*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqLiqMatReport,
                    _0RL_seqLiqMatReport_unmarshal_fn,
                    _0RL_seqLiqMatReport_marshal_fn,
                    _0RL_seqLiqMatReport_destructor_fn,
                    _v)) {
    _sp = (const seqLiqMatReport*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sBOFPredBlowRes_marshal_fn(cdrStream& _s, void* _v)
{
  sBOFPredBlowRes* _p = (sBOFPredBlowRes*)_v;
  *_p >>= _s;
}
static void _0RL_sBOFPredBlowRes_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sBOFPredBlowRes* _p = new sBOFPredBlowRes;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sBOFPredBlowRes_destructor_fn(void* _v)
{
  sBOFPredBlowRes* _p = (sBOFPredBlowRes*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sBOFPredBlowRes& _s)
{
  sBOFPredBlowRes* _p = new sBOFPredBlowRes(_s);
  _a.PR_insert(_0RL_tc_sBOFPredBlowRes,
               _0RL_sBOFPredBlowRes_marshal_fn,
               _0RL_sBOFPredBlowRes_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sBOFPredBlowRes* _sp)
{
  _a.PR_insert(_0RL_tc_sBOFPredBlowRes,
               _0RL_sBOFPredBlowRes_marshal_fn,
               _0RL_sBOFPredBlowRes_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sBOFPredBlowRes*& _sp)
{
  return _a >>= (const sBOFPredBlowRes*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sBOFPredBlowRes*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sBOFPredBlowRes,
                    _0RL_sBOFPredBlowRes_unmarshal_fn,
                    _0RL_sBOFPredBlowRes_marshal_fn,
                    _0RL_sBOFPredBlowRes_destructor_fn,
                    _v)) {
    _sp = (const sBOFPredBlowRes*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqBOFBlowPredRes_marshal_fn(cdrStream& _s, void* _v)
{
  seqBOFBlowPredRes* _p = (seqBOFBlowPredRes*)_v;
  *_p >>= _s;
}
static void _0RL_seqBOFBlowPredRes_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqBOFBlowPredRes* _p = new seqBOFBlowPredRes;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqBOFBlowPredRes_destructor_fn(void* _v)
{
  seqBOFBlowPredRes* _p = (seqBOFBlowPredRes*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqBOFBlowPredRes& _s)
{
  seqBOFBlowPredRes* _p = new seqBOFBlowPredRes(_s);
  _a.PR_insert(_0RL_tc_seqBOFBlowPredRes,
               _0RL_seqBOFBlowPredRes_marshal_fn,
               _0RL_seqBOFBlowPredRes_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqBOFBlowPredRes* _sp)
{
  _a.PR_insert(_0RL_tc_seqBOFBlowPredRes,
               _0RL_seqBOFBlowPredRes_marshal_fn,
               _0RL_seqBOFBlowPredRes_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqBOFBlowPredRes*& _sp)
{
  return _a >>= (const seqBOFBlowPredRes*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqBOFBlowPredRes*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqBOFBlowPredRes,
                    _0RL_seqBOFBlowPredRes_unmarshal_fn,
                    _0RL_seqBOFBlowPredRes_marshal_fn,
                    _0RL_seqBOFBlowPredRes_destructor_fn,
                    _v)) {
    _sp = (const seqBOFBlowPredRes*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sInjectData_marshal_fn(cdrStream& _s, void* _v)
{
  sInjectData* _p = (sInjectData*)_v;
  *_p >>= _s;
}
static void _0RL_sInjectData_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sInjectData* _p = new sInjectData;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sInjectData_destructor_fn(void* _v)
{
  sInjectData* _p = (sInjectData*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sInjectData& _s)
{
  sInjectData* _p = new sInjectData(_s);
  _a.PR_insert(_0RL_tc_sInjectData,
               _0RL_sInjectData_marshal_fn,
               _0RL_sInjectData_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sInjectData* _sp)
{
  _a.PR_insert(_0RL_tc_sInjectData,
               _0RL_sInjectData_marshal_fn,
               _0RL_sInjectData_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sInjectData*& _sp)
{
  return _a >>= (const sInjectData*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sInjectData*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sInjectData,
                    _0RL_sInjectData_unmarshal_fn,
                    _0RL_sInjectData_marshal_fn,
                    _0RL_sInjectData_destructor_fn,
                    _v)) {
    _sp = (const sInjectData*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqInjectData_marshal_fn(cdrStream& _s, void* _v)
{
  seqInjectData* _p = (seqInjectData*)_v;
  *_p >>= _s;
}
static void _0RL_seqInjectData_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqInjectData* _p = new seqInjectData;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqInjectData_destructor_fn(void* _v)
{
  seqInjectData* _p = (seqInjectData*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqInjectData& _s)
{
  seqInjectData* _p = new seqInjectData(_s);
  _a.PR_insert(_0RL_tc_seqInjectData,
               _0RL_seqInjectData_marshal_fn,
               _0RL_seqInjectData_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqInjectData* _sp)
{
  _a.PR_insert(_0RL_tc_seqInjectData,
               _0RL_seqInjectData_marshal_fn,
               _0RL_seqInjectData_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqInjectData*& _sp)
{
  return _a >>= (const seqInjectData*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqInjectData*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqInjectData,
                    _0RL_seqInjectData_unmarshal_fn,
                    _0RL_seqInjectData_marshal_fn,
                    _0RL_seqInjectData_destructor_fn,
                    _v)) {
    _sp = (const seqInjectData*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sEAFInjectLance_marshal_fn(cdrStream& _s, void* _v)
{
  sEAFInjectLance* _p = (sEAFInjectLance*)_v;
  *_p >>= _s;
}
static void _0RL_sEAFInjectLance_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sEAFInjectLance* _p = new sEAFInjectLance;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sEAFInjectLance_destructor_fn(void* _v)
{
  sEAFInjectLance* _p = (sEAFInjectLance*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sEAFInjectLance& _s)
{
  sEAFInjectLance* _p = new sEAFInjectLance(_s);
  _a.PR_insert(_0RL_tc_sEAFInjectLance,
               _0RL_sEAFInjectLance_marshal_fn,
               _0RL_sEAFInjectLance_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sEAFInjectLance* _sp)
{
  _a.PR_insert(_0RL_tc_sEAFInjectLance,
               _0RL_sEAFInjectLance_marshal_fn,
               _0RL_sEAFInjectLance_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sEAFInjectLance*& _sp)
{
  return _a >>= (const sEAFInjectLance*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sEAFInjectLance*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sEAFInjectLance,
                    _0RL_sEAFInjectLance_unmarshal_fn,
                    _0RL_sEAFInjectLance_marshal_fn,
                    _0RL_sEAFInjectLance_destructor_fn,
                    _v)) {
    _sp = (const sEAFInjectLance*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqEAFInjectLance_marshal_fn(cdrStream& _s, void* _v)
{
  seqEAFInjectLance* _p = (seqEAFInjectLance*)_v;
  *_p >>= _s;
}
static void _0RL_seqEAFInjectLance_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqEAFInjectLance* _p = new seqEAFInjectLance;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqEAFInjectLance_destructor_fn(void* _v)
{
  seqEAFInjectLance* _p = (seqEAFInjectLance*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqEAFInjectLance& _s)
{
  seqEAFInjectLance* _p = new seqEAFInjectLance(_s);
  _a.PR_insert(_0RL_tc_seqEAFInjectLance,
               _0RL_seqEAFInjectLance_marshal_fn,
               _0RL_seqEAFInjectLance_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqEAFInjectLance* _sp)
{
  _a.PR_insert(_0RL_tc_seqEAFInjectLance,
               _0RL_seqEAFInjectLance_marshal_fn,
               _0RL_seqEAFInjectLance_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqEAFInjectLance*& _sp)
{
  return _a >>= (const seqEAFInjectLance*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqEAFInjectLance*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqEAFInjectLance,
                    _0RL_seqEAFInjectLance_unmarshal_fn,
                    _0RL_seqEAFInjectLance_marshal_fn,
                    _0RL_seqEAFInjectLance_destructor_fn,
                    _v)) {
    _sp = (const seqEAFInjectLance*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sHMDCalc_marshal_fn(cdrStream& _s, void* _v)
{
  sHMDCalc* _p = (sHMDCalc*)_v;
  *_p >>= _s;
}
static void _0RL_sHMDCalc_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sHMDCalc* _p = new sHMDCalc;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sHMDCalc_destructor_fn(void* _v)
{
  sHMDCalc* _p = (sHMDCalc*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sHMDCalc& _s)
{
  sHMDCalc* _p = new sHMDCalc(_s);
  _a.PR_insert(_0RL_tc_sHMDCalc,
               _0RL_sHMDCalc_marshal_fn,
               _0RL_sHMDCalc_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sHMDCalc* _sp)
{
  _a.PR_insert(_0RL_tc_sHMDCalc,
               _0RL_sHMDCalc_marshal_fn,
               _0RL_sHMDCalc_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sHMDCalc*& _sp)
{
  return _a >>= (const sHMDCalc*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sHMDCalc*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sHMDCalc,
                    _0RL_sHMDCalc_unmarshal_fn,
                    _0RL_sHMDCalc_marshal_fn,
                    _0RL_sHMDCalc_destructor_fn,
                    _v)) {
    _sp = (const sHMDCalc*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sConArcElecData_marshal_fn(cdrStream& _s, void* _v)
{
  sConArcElecData* _p = (sConArcElecData*)_v;
  *_p >>= _s;
}
static void _0RL_sConArcElecData_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sConArcElecData* _p = new sConArcElecData;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sConArcElecData_destructor_fn(void* _v)
{
  sConArcElecData* _p = (sConArcElecData*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sConArcElecData& _s)
{
  sConArcElecData* _p = new sConArcElecData(_s);
  _a.PR_insert(_0RL_tc_sConArcElecData,
               _0RL_sConArcElecData_marshal_fn,
               _0RL_sConArcElecData_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sConArcElecData* _sp)
{
  _a.PR_insert(_0RL_tc_sConArcElecData,
               _0RL_sConArcElecData_marshal_fn,
               _0RL_sConArcElecData_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sConArcElecData*& _sp)
{
  return _a >>= (const sConArcElecData*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sConArcElecData*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sConArcElecData,
                    _0RL_sConArcElecData_unmarshal_fn,
                    _0RL_sConArcElecData_marshal_fn,
                    _0RL_sConArcElecData_destructor_fn,
                    _v)) {
    _sp = (const sConArcElecData*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sConArcMediaData_marshal_fn(cdrStream& _s, void* _v)
{
  sConArcMediaData* _p = (sConArcMediaData*)_v;
  *_p >>= _s;
}
static void _0RL_sConArcMediaData_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sConArcMediaData* _p = new sConArcMediaData;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sConArcMediaData_destructor_fn(void* _v)
{
  sConArcMediaData* _p = (sConArcMediaData*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sConArcMediaData& _s)
{
  sConArcMediaData* _p = new sConArcMediaData(_s);
  _a.PR_insert(_0RL_tc_sConArcMediaData,
               _0RL_sConArcMediaData_marshal_fn,
               _0RL_sConArcMediaData_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sConArcMediaData* _sp)
{
  _a.PR_insert(_0RL_tc_sConArcMediaData,
               _0RL_sConArcMediaData_marshal_fn,
               _0RL_sConArcMediaData_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sConArcMediaData*& _sp)
{
  return _a >>= (const sConArcMediaData*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sConArcMediaData*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sConArcMediaData,
                    _0RL_sConArcMediaData_unmarshal_fn,
                    _0RL_sConArcMediaData_marshal_fn,
                    _0RL_sConArcMediaData_destructor_fn,
                    _v)) {
    _sp = (const sConArcMediaData*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqConArcElecData_marshal_fn(cdrStream& _s, void* _v)
{
  seqConArcElecData* _p = (seqConArcElecData*)_v;
  *_p >>= _s;
}
static void _0RL_seqConArcElecData_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqConArcElecData* _p = new seqConArcElecData;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqConArcElecData_destructor_fn(void* _v)
{
  seqConArcElecData* _p = (seqConArcElecData*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqConArcElecData& _s)
{
  seqConArcElecData* _p = new seqConArcElecData(_s);
  _a.PR_insert(_0RL_tc_seqConArcElecData,
               _0RL_seqConArcElecData_marshal_fn,
               _0RL_seqConArcElecData_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqConArcElecData* _sp)
{
  _a.PR_insert(_0RL_tc_seqConArcElecData,
               _0RL_seqConArcElecData_marshal_fn,
               _0RL_seqConArcElecData_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqConArcElecData*& _sp)
{
  return _a >>= (const seqConArcElecData*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqConArcElecData*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqConArcElecData,
                    _0RL_seqConArcElecData_unmarshal_fn,
                    _0RL_seqConArcElecData_marshal_fn,
                    _0RL_seqConArcElecData_destructor_fn,
                    _v)) {
    _sp = (const seqConArcElecData*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqConArcMediaData_marshal_fn(cdrStream& _s, void* _v)
{
  seqConArcMediaData* _p = (seqConArcMediaData*)_v;
  *_p >>= _s;
}
static void _0RL_seqConArcMediaData_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqConArcMediaData* _p = new seqConArcMediaData;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqConArcMediaData_destructor_fn(void* _v)
{
  seqConArcMediaData* _p = (seqConArcMediaData*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqConArcMediaData& _s)
{
  seqConArcMediaData* _p = new seqConArcMediaData(_s);
  _a.PR_insert(_0RL_tc_seqConArcMediaData,
               _0RL_seqConArcMediaData_marshal_fn,
               _0RL_seqConArcMediaData_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqConArcMediaData* _sp)
{
  _a.PR_insert(_0RL_tc_seqConArcMediaData,
               _0RL_seqConArcMediaData_marshal_fn,
               _0RL_seqConArcMediaData_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqConArcMediaData*& _sp)
{
  return _a >>= (const seqConArcMediaData*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqConArcMediaData*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqConArcMediaData,
                    _0RL_seqConArcMediaData_unmarshal_fn,
                    _0RL_seqConArcMediaData_marshal_fn,
                    _0RL_seqConArcMediaData_destructor_fn,
                    _v)) {
    _sp = (const seqConArcMediaData*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sConArcSetptData_marshal_fn(cdrStream& _s, void* _v)
{
  sConArcSetptData* _p = (sConArcSetptData*)_v;
  *_p >>= _s;
}
static void _0RL_sConArcSetptData_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sConArcSetptData* _p = new sConArcSetptData;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sConArcSetptData_destructor_fn(void* _v)
{
  sConArcSetptData* _p = (sConArcSetptData*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sConArcSetptData& _s)
{
  sConArcSetptData* _p = new sConArcSetptData(_s);
  _a.PR_insert(_0RL_tc_sConArcSetptData,
               _0RL_sConArcSetptData_marshal_fn,
               _0RL_sConArcSetptData_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sConArcSetptData* _sp)
{
  _a.PR_insert(_0RL_tc_sConArcSetptData,
               _0RL_sConArcSetptData_marshal_fn,
               _0RL_sConArcSetptData_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sConArcSetptData*& _sp)
{
  return _a >>= (const sConArcSetptData*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sConArcSetptData*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sConArcSetptData,
                    _0RL_sConArcSetptData_unmarshal_fn,
                    _0RL_sConArcSetptData_marshal_fn,
                    _0RL_sConArcSetptData_destructor_fn,
                    _v)) {
    _sp = (const sConArcSetptData*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sConArcMeasData_marshal_fn(cdrStream& _s, void* _v)
{
  sConArcMeasData* _p = (sConArcMeasData*)_v;
  *_p >>= _s;
}
static void _0RL_sConArcMeasData_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sConArcMeasData* _p = new sConArcMeasData;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sConArcMeasData_destructor_fn(void* _v)
{
  sConArcMeasData* _p = (sConArcMeasData*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sConArcMeasData& _s)
{
  sConArcMeasData* _p = new sConArcMeasData(_s);
  _a.PR_insert(_0RL_tc_sConArcMeasData,
               _0RL_sConArcMeasData_marshal_fn,
               _0RL_sConArcMeasData_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sConArcMeasData* _sp)
{
  _a.PR_insert(_0RL_tc_sConArcMeasData,
               _0RL_sConArcMeasData_marshal_fn,
               _0RL_sConArcMeasData_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sConArcMeasData*& _sp)
{
  return _a >>= (const sConArcMeasData*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sConArcMeasData*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sConArcMeasData,
                    _0RL_sConArcMeasData_unmarshal_fn,
                    _0RL_sConArcMeasData_marshal_fn,
                    _0RL_sConArcMeasData_destructor_fn,
                    _v)) {
    _sp = (const sConArcMeasData*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqConArcSetptData_marshal_fn(cdrStream& _s, void* _v)
{
  seqConArcSetptData* _p = (seqConArcSetptData*)_v;
  *_p >>= _s;
}
static void _0RL_seqConArcSetptData_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqConArcSetptData* _p = new seqConArcSetptData;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqConArcSetptData_destructor_fn(void* _v)
{
  seqConArcSetptData* _p = (seqConArcSetptData*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqConArcSetptData& _s)
{
  seqConArcSetptData* _p = new seqConArcSetptData(_s);
  _a.PR_insert(_0RL_tc_seqConArcSetptData,
               _0RL_seqConArcSetptData_marshal_fn,
               _0RL_seqConArcSetptData_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqConArcSetptData* _sp)
{
  _a.PR_insert(_0RL_tc_seqConArcSetptData,
               _0RL_seqConArcSetptData_marshal_fn,
               _0RL_seqConArcSetptData_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqConArcSetptData*& _sp)
{
  return _a >>= (const seqConArcSetptData*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqConArcSetptData*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqConArcSetptData,
                    _0RL_seqConArcSetptData_unmarshal_fn,
                    _0RL_seqConArcSetptData_marshal_fn,
                    _0RL_seqConArcSetptData_destructor_fn,
                    _v)) {
    _sp = (const seqConArcSetptData*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqConArcMeasData_marshal_fn(cdrStream& _s, void* _v)
{
  seqConArcMeasData* _p = (seqConArcMeasData*)_v;
  *_p >>= _s;
}
static void _0RL_seqConArcMeasData_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqConArcMeasData* _p = new seqConArcMeasData;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqConArcMeasData_destructor_fn(void* _v)
{
  seqConArcMeasData* _p = (seqConArcMeasData*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqConArcMeasData& _s)
{
  seqConArcMeasData* _p = new seqConArcMeasData(_s);
  _a.PR_insert(_0RL_tc_seqConArcMeasData,
               _0RL_seqConArcMeasData_marshal_fn,
               _0RL_seqConArcMeasData_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqConArcMeasData* _sp)
{
  _a.PR_insert(_0RL_tc_seqConArcMeasData,
               _0RL_seqConArcMeasData_marshal_fn,
               _0RL_seqConArcMeasData_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqConArcMeasData*& _sp)
{
  return _a >>= (const seqConArcMeasData*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqConArcMeasData*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqConArcMeasData,
                    _0RL_seqConArcMeasData_unmarshal_fn,
                    _0RL_seqConArcMeasData_marshal_fn,
                    _0RL_seqConArcMeasData_destructor_fn,
                    _v)) {
    _sp = (const seqConArcMeasData*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sEAFMatFeedPredRes_marshal_fn(cdrStream& _s, void* _v)
{
  sEAFMatFeedPredRes* _p = (sEAFMatFeedPredRes*)_v;
  *_p >>= _s;
}
static void _0RL_sEAFMatFeedPredRes_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sEAFMatFeedPredRes* _p = new sEAFMatFeedPredRes;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sEAFMatFeedPredRes_destructor_fn(void* _v)
{
  sEAFMatFeedPredRes* _p = (sEAFMatFeedPredRes*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sEAFMatFeedPredRes& _s)
{
  sEAFMatFeedPredRes* _p = new sEAFMatFeedPredRes(_s);
  _a.PR_insert(_0RL_tc_sEAFMatFeedPredRes,
               _0RL_sEAFMatFeedPredRes_marshal_fn,
               _0RL_sEAFMatFeedPredRes_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sEAFMatFeedPredRes* _sp)
{
  _a.PR_insert(_0RL_tc_sEAFMatFeedPredRes,
               _0RL_sEAFMatFeedPredRes_marshal_fn,
               _0RL_sEAFMatFeedPredRes_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sEAFMatFeedPredRes*& _sp)
{
  return _a >>= (const sEAFMatFeedPredRes*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sEAFMatFeedPredRes*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sEAFMatFeedPredRes,
                    _0RL_sEAFMatFeedPredRes_unmarshal_fn,
                    _0RL_sEAFMatFeedPredRes_marshal_fn,
                    _0RL_sEAFMatFeedPredRes_destructor_fn,
                    _v)) {
    _sp = (const sEAFMatFeedPredRes*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqEAFMatFeedPredRes_marshal_fn(cdrStream& _s, void* _v)
{
  seqEAFMatFeedPredRes* _p = (seqEAFMatFeedPredRes*)_v;
  *_p >>= _s;
}
static void _0RL_seqEAFMatFeedPredRes_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqEAFMatFeedPredRes* _p = new seqEAFMatFeedPredRes;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqEAFMatFeedPredRes_destructor_fn(void* _v)
{
  seqEAFMatFeedPredRes* _p = (seqEAFMatFeedPredRes*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqEAFMatFeedPredRes& _s)
{
  seqEAFMatFeedPredRes* _p = new seqEAFMatFeedPredRes(_s);
  _a.PR_insert(_0RL_tc_seqEAFMatFeedPredRes,
               _0RL_seqEAFMatFeedPredRes_marshal_fn,
               _0RL_seqEAFMatFeedPredRes_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqEAFMatFeedPredRes* _sp)
{
  _a.PR_insert(_0RL_tc_seqEAFMatFeedPredRes,
               _0RL_seqEAFMatFeedPredRes_marshal_fn,
               _0RL_seqEAFMatFeedPredRes_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqEAFMatFeedPredRes*& _sp)
{
  return _a >>= (const seqEAFMatFeedPredRes*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqEAFMatFeedPredRes*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqEAFMatFeedPredRes,
                    _0RL_seqEAFMatFeedPredRes_unmarshal_fn,
                    _0RL_seqEAFMatFeedPredRes_marshal_fn,
                    _0RL_seqEAFMatFeedPredRes_destructor_fn,
                    _v)) {
    _sp = (const seqEAFMatFeedPredRes*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sPhaseStatus_marshal_fn(cdrStream& _s, void* _v)
{
  sPhaseStatus* _p = (sPhaseStatus*)_v;
  *_p >>= _s;
}
static void _0RL_sPhaseStatus_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sPhaseStatus* _p = new sPhaseStatus;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sPhaseStatus_destructor_fn(void* _v)
{
  sPhaseStatus* _p = (sPhaseStatus*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sPhaseStatus& _s)
{
  sPhaseStatus* _p = new sPhaseStatus(_s);
  _a.PR_insert(_0RL_tc_sPhaseStatus,
               _0RL_sPhaseStatus_marshal_fn,
               _0RL_sPhaseStatus_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sPhaseStatus* _sp)
{
  _a.PR_insert(_0RL_tc_sPhaseStatus,
               _0RL_sPhaseStatus_marshal_fn,
               _0RL_sPhaseStatus_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sPhaseStatus*& _sp)
{
  return _a >>= (const sPhaseStatus*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sPhaseStatus*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sPhaseStatus,
                    _0RL_sPhaseStatus_unmarshal_fn,
                    _0RL_sPhaseStatus_marshal_fn,
                    _0RL_sPhaseStatus_destructor_fn,
                    _v)) {
    _sp = (const sPhaseStatus*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqPhaseStatus_marshal_fn(cdrStream& _s, void* _v)
{
  seqPhaseStatus* _p = (seqPhaseStatus*)_v;
  *_p >>= _s;
}
static void _0RL_seqPhaseStatus_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqPhaseStatus* _p = new seqPhaseStatus;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqPhaseStatus_destructor_fn(void* _v)
{
  seqPhaseStatus* _p = (seqPhaseStatus*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqPhaseStatus& _s)
{
  seqPhaseStatus* _p = new seqPhaseStatus(_s);
  _a.PR_insert(_0RL_tc_seqPhaseStatus,
               _0RL_seqPhaseStatus_marshal_fn,
               _0RL_seqPhaseStatus_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqPhaseStatus* _sp)
{
  _a.PR_insert(_0RL_tc_seqPhaseStatus,
               _0RL_seqPhaseStatus_marshal_fn,
               _0RL_seqPhaseStatus_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqPhaseStatus*& _sp)
{
  return _a >>= (const seqPhaseStatus*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqPhaseStatus*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqPhaseStatus,
                    _0RL_seqPhaseStatus_unmarshal_fn,
                    _0RL_seqPhaseStatus_marshal_fn,
                    _0RL_seqPhaseStatus_destructor_fn,
                    _v)) {
    _sp = (const seqPhaseStatus*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sMaterial_marshal_fn(cdrStream& _s, void* _v)
{
  sMaterial* _p = (sMaterial*)_v;
  *_p >>= _s;
}
static void _0RL_sMaterial_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sMaterial* _p = new sMaterial;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sMaterial_destructor_fn(void* _v)
{
  sMaterial* _p = (sMaterial*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sMaterial& _s)
{
  sMaterial* _p = new sMaterial(_s);
  _a.PR_insert(_0RL_tc_sMaterial,
               _0RL_sMaterial_marshal_fn,
               _0RL_sMaterial_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sMaterial* _sp)
{
  _a.PR_insert(_0RL_tc_sMaterial,
               _0RL_sMaterial_marshal_fn,
               _0RL_sMaterial_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sMaterial*& _sp)
{
  return _a >>= (const sMaterial*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sMaterial*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sMaterial,
                    _0RL_sMaterial_unmarshal_fn,
                    _0RL_sMaterial_marshal_fn,
                    _0RL_sMaterial_destructor_fn,
                    _v)) {
    _sp = (const sMaterial*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqMaterials_marshal_fn(cdrStream& _s, void* _v)
{
  seqMaterials* _p = (seqMaterials*)_v;
  *_p >>= _s;
}
static void _0RL_seqMaterials_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqMaterials* _p = new seqMaterials;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqMaterials_destructor_fn(void* _v)
{
  seqMaterials* _p = (seqMaterials*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqMaterials& _s)
{
  seqMaterials* _p = new seqMaterials(_s);
  _a.PR_insert(_0RL_tc_seqMaterials,
               _0RL_seqMaterials_marshal_fn,
               _0RL_seqMaterials_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqMaterials* _sp)
{
  _a.PR_insert(_0RL_tc_seqMaterials,
               _0RL_seqMaterials_marshal_fn,
               _0RL_seqMaterials_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqMaterials*& _sp)
{
  return _a >>= (const seqMaterials*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqMaterials*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqMaterials,
                    _0RL_seqMaterials_unmarshal_fn,
                    _0RL_seqMaterials_marshal_fn,
                    _0RL_seqMaterials_destructor_fn,
                    _v)) {
    _sp = (const seqMaterials*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sStirringData_marshal_fn(cdrStream& _s, void* _v)
{
  sStirringData* _p = (sStirringData*)_v;
  *_p >>= _s;
}
static void _0RL_sStirringData_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sStirringData* _p = new sStirringData;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sStirringData_destructor_fn(void* _v)
{
  sStirringData* _p = (sStirringData*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sStirringData& _s)
{
  sStirringData* _p = new sStirringData(_s);
  _a.PR_insert(_0RL_tc_sStirringData,
               _0RL_sStirringData_marshal_fn,
               _0RL_sStirringData_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sStirringData* _sp)
{
  _a.PR_insert(_0RL_tc_sStirringData,
               _0RL_sStirringData_marshal_fn,
               _0RL_sStirringData_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sStirringData*& _sp)
{
  return _a >>= (const sStirringData*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sStirringData*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sStirringData,
                    _0RL_sStirringData_unmarshal_fn,
                    _0RL_sStirringData_marshal_fn,
                    _0RL_sStirringData_destructor_fn,
                    _v)) {
    _sp = (const sStirringData*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqStirringData_marshal_fn(cdrStream& _s, void* _v)
{
  seqStirringData* _p = (seqStirringData*)_v;
  *_p >>= _s;
}
static void _0RL_seqStirringData_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqStirringData* _p = new seqStirringData;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqStirringData_destructor_fn(void* _v)
{
  seqStirringData* _p = (seqStirringData*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqStirringData& _s)
{
  seqStirringData* _p = new seqStirringData(_s);
  _a.PR_insert(_0RL_tc_seqStirringData,
               _0RL_seqStirringData_marshal_fn,
               _0RL_seqStirringData_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqStirringData* _sp)
{
  _a.PR_insert(_0RL_tc_seqStirringData,
               _0RL_seqStirringData_marshal_fn,
               _0RL_seqStirringData_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqStirringData*& _sp)
{
  return _a >>= (const seqStirringData*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqStirringData*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqStirringData,
                    _0RL_seqStirringData_unmarshal_fn,
                    _0RL_seqStirringData_marshal_fn,
                    _0RL_seqStirringData_destructor_fn,
                    _v)) {
    _sp = (const seqStirringData*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sProductIdentification_marshal_fn(cdrStream& _s, void* _v)
{
  sProductIdentification* _p = (sProductIdentification*)_v;
  *_p >>= _s;
}
static void _0RL_sProductIdentification_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sProductIdentification* _p = new sProductIdentification;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sProductIdentification_destructor_fn(void* _v)
{
  sProductIdentification* _p = (sProductIdentification*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sProductIdentification& _s)
{
  sProductIdentification* _p = new sProductIdentification(_s);
  _a.PR_insert(_0RL_tc_sProductIdentification,
               _0RL_sProductIdentification_marshal_fn,
               _0RL_sProductIdentification_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sProductIdentification* _sp)
{
  _a.PR_insert(_0RL_tc_sProductIdentification,
               _0RL_sProductIdentification_marshal_fn,
               _0RL_sProductIdentification_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sProductIdentification*& _sp)
{
  return _a >>= (const sProductIdentification*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sProductIdentification*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sProductIdentification,
                    _0RL_sProductIdentification_unmarshal_fn,
                    _0RL_sProductIdentification_marshal_fn,
                    _0RL_sProductIdentification_destructor_fn,
                    _v)) {
    _sp = (const sProductIdentification*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sRecipe_marshal_fn(cdrStream& _s, void* _v)
{
  sRecipe* _p = (sRecipe*)_v;
  *_p >>= _s;
}
static void _0RL_sRecipe_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sRecipe* _p = new sRecipe;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sRecipe_destructor_fn(void* _v)
{
  sRecipe* _p = (sRecipe*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sRecipe& _s)
{
  sRecipe* _p = new sRecipe(_s);
  _a.PR_insert(_0RL_tc_sRecipe,
               _0RL_sRecipe_marshal_fn,
               _0RL_sRecipe_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sRecipe* _sp)
{
  _a.PR_insert(_0RL_tc_sRecipe,
               _0RL_sRecipe_marshal_fn,
               _0RL_sRecipe_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sRecipe*& _sp)
{
  return _a >>= (const sRecipe*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sRecipe*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sRecipe,
                    _0RL_sRecipe_unmarshal_fn,
                    _0RL_sRecipe_marshal_fn,
                    _0RL_sRecipe_destructor_fn,
                    _v)) {
    _sp = (const sRecipe*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqRecipeList_marshal_fn(cdrStream& _s, void* _v)
{
  seqRecipeList* _p = (seqRecipeList*)_v;
  *_p >>= _s;
}
static void _0RL_seqRecipeList_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqRecipeList* _p = new seqRecipeList;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqRecipeList_destructor_fn(void* _v)
{
  seqRecipeList* _p = (seqRecipeList*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqRecipeList& _s)
{
  seqRecipeList* _p = new seqRecipeList(_s);
  _a.PR_insert(_0RL_tc_seqRecipeList,
               _0RL_seqRecipeList_marshal_fn,
               _0RL_seqRecipeList_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqRecipeList* _sp)
{
  _a.PR_insert(_0RL_tc_seqRecipeList,
               _0RL_seqRecipeList_marshal_fn,
               _0RL_seqRecipeList_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqRecipeList*& _sp)
{
  return _a >>= (const seqRecipeList*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqRecipeList*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqRecipeList,
                    _0RL_seqRecipeList_unmarshal_fn,
                    _0RL_seqRecipeList_marshal_fn,
                    _0RL_seqRecipeList_destructor_fn,
                    _v)) {
    _sp = (const seqRecipeList*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqProductIdentification_marshal_fn(cdrStream& _s, void* _v)
{
  seqProductIdentification* _p = (seqProductIdentification*)_v;
  *_p >>= _s;
}
static void _0RL_seqProductIdentification_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqProductIdentification* _p = new seqProductIdentification;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqProductIdentification_destructor_fn(void* _v)
{
  seqProductIdentification* _p = (seqProductIdentification*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqProductIdentification& _s)
{
  seqProductIdentification* _p = new seqProductIdentification(_s);
  _a.PR_insert(_0RL_tc_seqProductIdentification,
               _0RL_seqProductIdentification_marshal_fn,
               _0RL_seqProductIdentification_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqProductIdentification* _sp)
{
  _a.PR_insert(_0RL_tc_seqProductIdentification,
               _0RL_seqProductIdentification_marshal_fn,
               _0RL_seqProductIdentification_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqProductIdentification*& _sp)
{
  return _a >>= (const seqProductIdentification*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqProductIdentification*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqProductIdentification,
                    _0RL_seqProductIdentification_unmarshal_fn,
                    _0RL_seqProductIdentification_marshal_fn,
                    _0RL_seqProductIdentification_destructor_fn,
                    _v)) {
    _sp = (const seqProductIdentification*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqHMDCalc_marshal_fn(cdrStream& _s, void* _v)
{
  seqHMDCalc* _p = (seqHMDCalc*)_v;
  *_p >>= _s;
}
static void _0RL_seqHMDCalc_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqHMDCalc* _p = new seqHMDCalc;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqHMDCalc_destructor_fn(void* _v)
{
  seqHMDCalc* _p = (seqHMDCalc*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqHMDCalc& _s)
{
  seqHMDCalc* _p = new seqHMDCalc(_s);
  _a.PR_insert(_0RL_tc_seqHMDCalc,
               _0RL_seqHMDCalc_marshal_fn,
               _0RL_seqHMDCalc_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqHMDCalc* _sp)
{
  _a.PR_insert(_0RL_tc_seqHMDCalc,
               _0RL_seqHMDCalc_marshal_fn,
               _0RL_seqHMDCalc_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqHMDCalc*& _sp)
{
  return _a >>= (const seqHMDCalc*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqHMDCalc*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqHMDCalc,
                    _0RL_seqHMDCalc_unmarshal_fn,
                    _0RL_seqHMDCalc_marshal_fn,
                    _0RL_seqHMDCalc_destructor_fn,
                    _v)) {
    _sp = (const seqHMDCalc*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sHMDModelResult_marshal_fn(cdrStream& _s, void* _v)
{
  sHMDModelResult* _p = (sHMDModelResult*)_v;
  *_p >>= _s;
}
static void _0RL_sHMDModelResult_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sHMDModelResult* _p = new sHMDModelResult;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sHMDModelResult_destructor_fn(void* _v)
{
  sHMDModelResult* _p = (sHMDModelResult*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sHMDModelResult& _s)
{
  sHMDModelResult* _p = new sHMDModelResult(_s);
  _a.PR_insert(_0RL_tc_sHMDModelResult,
               _0RL_sHMDModelResult_marshal_fn,
               _0RL_sHMDModelResult_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sHMDModelResult* _sp)
{
  _a.PR_insert(_0RL_tc_sHMDModelResult,
               _0RL_sHMDModelResult_marshal_fn,
               _0RL_sHMDModelResult_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sHMDModelResult*& _sp)
{
  return _a >>= (const sHMDModelResult*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sHMDModelResult*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sHMDModelResult,
                    _0RL_sHMDModelResult_unmarshal_fn,
                    _0RL_sHMDModelResult_marshal_fn,
                    _0RL_sHMDModelResult_destructor_fn,
                    _v)) {
    _sp = (const sHMDModelResult*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sRHModelResult_marshal_fn(cdrStream& _s, void* _v)
{
  sRHModelResult* _p = (sRHModelResult*)_v;
  *_p >>= _s;
}
static void _0RL_sRHModelResult_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sRHModelResult* _p = new sRHModelResult;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sRHModelResult_destructor_fn(void* _v)
{
  sRHModelResult* _p = (sRHModelResult*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sRHModelResult& _s)
{
  sRHModelResult* _p = new sRHModelResult(_s);
  _a.PR_insert(_0RL_tc_sRHModelResult,
               _0RL_sRHModelResult_marshal_fn,
               _0RL_sRHModelResult_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sRHModelResult* _sp)
{
  _a.PR_insert(_0RL_tc_sRHModelResult,
               _0RL_sRHModelResult_marshal_fn,
               _0RL_sRHModelResult_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sRHModelResult*& _sp)
{
  return _a >>= (const sRHModelResult*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sRHModelResult*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sRHModelResult,
                    _0RL_sRHModelResult_unmarshal_fn,
                    _0RL_sRHModelResult_marshal_fn,
                    _0RL_sRHModelResult_destructor_fn,
                    _v)) {
    _sp = (const sRHModelResult*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqRHModelResult_marshal_fn(cdrStream& _s, void* _v)
{
  seqRHModelResult* _p = (seqRHModelResult*)_v;
  *_p >>= _s;
}
static void _0RL_seqRHModelResult_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqRHModelResult* _p = new seqRHModelResult;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqRHModelResult_destructor_fn(void* _v)
{
  seqRHModelResult* _p = (seqRHModelResult*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqRHModelResult& _s)
{
  seqRHModelResult* _p = new seqRHModelResult(_s);
  _a.PR_insert(_0RL_tc_seqRHModelResult,
               _0RL_seqRHModelResult_marshal_fn,
               _0RL_seqRHModelResult_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqRHModelResult* _sp)
{
  _a.PR_insert(_0RL_tc_seqRHModelResult,
               _0RL_seqRHModelResult_marshal_fn,
               _0RL_seqRHModelResult_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqRHModelResult*& _sp)
{
  return _a >>= (const seqRHModelResult*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqRHModelResult*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqRHModelResult,
                    _0RL_seqRHModelResult_unmarshal_fn,
                    _0RL_seqRHModelResult_marshal_fn,
                    _0RL_seqRHModelResult_destructor_fn,
                    _v)) {
    _sp = (const seqRHModelResult*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqHMDModelResult_marshal_fn(cdrStream& _s, void* _v)
{
  seqHMDModelResult* _p = (seqHMDModelResult*)_v;
  *_p >>= _s;
}
static void _0RL_seqHMDModelResult_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqHMDModelResult* _p = new seqHMDModelResult;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqHMDModelResult_destructor_fn(void* _v)
{
  seqHMDModelResult* _p = (seqHMDModelResult*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqHMDModelResult& _s)
{
  seqHMDModelResult* _p = new seqHMDModelResult(_s);
  _a.PR_insert(_0RL_tc_seqHMDModelResult,
               _0RL_seqHMDModelResult_marshal_fn,
               _0RL_seqHMDModelResult_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqHMDModelResult* _sp)
{
  _a.PR_insert(_0RL_tc_seqHMDModelResult,
               _0RL_seqHMDModelResult_marshal_fn,
               _0RL_seqHMDModelResult_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqHMDModelResult*& _sp)
{
  return _a >>= (const seqHMDModelResult*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqHMDModelResult*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqHMDModelResult,
                    _0RL_seqHMDModelResult_unmarshal_fn,
                    _0RL_seqHMDModelResult_marshal_fn,
                    _0RL_seqHMDModelResult_destructor_fn,
                    _v)) {
    _sp = (const seqHMDModelResult*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sElecPhaseData_marshal_fn(cdrStream& _s, void* _v)
{
  sElecPhaseData* _p = (sElecPhaseData*)_v;
  *_p >>= _s;
}
static void _0RL_sElecPhaseData_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sElecPhaseData* _p = new sElecPhaseData;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sElecPhaseData_destructor_fn(void* _v)
{
  sElecPhaseData* _p = (sElecPhaseData*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sElecPhaseData& _s)
{
  sElecPhaseData* _p = new sElecPhaseData(_s);
  _a.PR_insert(_0RL_tc_sElecPhaseData,
               _0RL_sElecPhaseData_marshal_fn,
               _0RL_sElecPhaseData_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sElecPhaseData* _sp)
{
  _a.PR_insert(_0RL_tc_sElecPhaseData,
               _0RL_sElecPhaseData_marshal_fn,
               _0RL_sElecPhaseData_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sElecPhaseData*& _sp)
{
  return _a >>= (const sElecPhaseData*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sElecPhaseData*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sElecPhaseData,
                    _0RL_sElecPhaseData_unmarshal_fn,
                    _0RL_sElecPhaseData_marshal_fn,
                    _0RL_sElecPhaseData_destructor_fn,
                    _v)) {
    _sp = (const sElecPhaseData*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqElecPhaseData_marshal_fn(cdrStream& _s, void* _v)
{
  seqElecPhaseData* _p = (seqElecPhaseData*)_v;
  *_p >>= _s;
}
static void _0RL_seqElecPhaseData_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqElecPhaseData* _p = new seqElecPhaseData;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqElecPhaseData_destructor_fn(void* _v)
{
  seqElecPhaseData* _p = (seqElecPhaseData*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqElecPhaseData& _s)
{
  seqElecPhaseData* _p = new seqElecPhaseData(_s);
  _a.PR_insert(_0RL_tc_seqElecPhaseData,
               _0RL_seqElecPhaseData_marshal_fn,
               _0RL_seqElecPhaseData_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqElecPhaseData* _sp)
{
  _a.PR_insert(_0RL_tc_seqElecPhaseData,
               _0RL_seqElecPhaseData_marshal_fn,
               _0RL_seqElecPhaseData_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqElecPhaseData*& _sp)
{
  return _a >>= (const seqElecPhaseData*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqElecPhaseData*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqElecPhaseData,
                    _0RL_seqElecPhaseData_unmarshal_fn,
                    _0RL_seqElecPhaseData_marshal_fn,
                    _0RL_seqElecPhaseData_destructor_fn,
                    _v)) {
    _sp = (const seqElecPhaseData*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sVDModelResult_marshal_fn(cdrStream& _s, void* _v)
{
  sVDModelResult* _p = (sVDModelResult*)_v;
  *_p >>= _s;
}
static void _0RL_sVDModelResult_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sVDModelResult* _p = new sVDModelResult;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sVDModelResult_destructor_fn(void* _v)
{
  sVDModelResult* _p = (sVDModelResult*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sVDModelResult& _s)
{
  sVDModelResult* _p = new sVDModelResult(_s);
  _a.PR_insert(_0RL_tc_sVDModelResult,
               _0RL_sVDModelResult_marshal_fn,
               _0RL_sVDModelResult_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sVDModelResult* _sp)
{
  _a.PR_insert(_0RL_tc_sVDModelResult,
               _0RL_sVDModelResult_marshal_fn,
               _0RL_sVDModelResult_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sVDModelResult*& _sp)
{
  return _a >>= (const sVDModelResult*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sVDModelResult*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sVDModelResult,
                    _0RL_sVDModelResult_unmarshal_fn,
                    _0RL_sVDModelResult_marshal_fn,
                    _0RL_sVDModelResult_destructor_fn,
                    _v)) {
    _sp = (const sVDModelResult*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqVDModelResult_marshal_fn(cdrStream& _s, void* _v)
{
  seqVDModelResult* _p = (seqVDModelResult*)_v;
  *_p >>= _s;
}
static void _0RL_seqVDModelResult_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqVDModelResult* _p = new seqVDModelResult;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqVDModelResult_destructor_fn(void* _v)
{
  seqVDModelResult* _p = (seqVDModelResult*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqVDModelResult& _s)
{
  seqVDModelResult* _p = new seqVDModelResult(_s);
  _a.PR_insert(_0RL_tc_seqVDModelResult,
               _0RL_seqVDModelResult_marshal_fn,
               _0RL_seqVDModelResult_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqVDModelResult* _sp)
{
  _a.PR_insert(_0RL_tc_seqVDModelResult,
               _0RL_seqVDModelResult_marshal_fn,
               _0RL_seqVDModelResult_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqVDModelResult*& _sp)
{
  return _a >>= (const seqVDModelResult*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqVDModelResult*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqVDModelResult,
                    _0RL_seqVDModelResult_unmarshal_fn,
                    _0RL_seqVDModelResult_marshal_fn,
                    _0RL_seqVDModelResult_destructor_fn,
                    _v)) {
    _sp = (const seqVDModelResult*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sConArcBlowData_marshal_fn(cdrStream& _s, void* _v)
{
  sConArcBlowData* _p = (sConArcBlowData*)_v;
  *_p >>= _s;
}
static void _0RL_sConArcBlowData_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sConArcBlowData* _p = new sConArcBlowData;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sConArcBlowData_destructor_fn(void* _v)
{
  sConArcBlowData* _p = (sConArcBlowData*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sConArcBlowData& _s)
{
  sConArcBlowData* _p = new sConArcBlowData(_s);
  _a.PR_insert(_0RL_tc_sConArcBlowData,
               _0RL_sConArcBlowData_marshal_fn,
               _0RL_sConArcBlowData_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sConArcBlowData* _sp)
{
  _a.PR_insert(_0RL_tc_sConArcBlowData,
               _0RL_sConArcBlowData_marshal_fn,
               _0RL_sConArcBlowData_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sConArcBlowData*& _sp)
{
  return _a >>= (const sConArcBlowData*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sConArcBlowData*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sConArcBlowData,
                    _0RL_sConArcBlowData_unmarshal_fn,
                    _0RL_sConArcBlowData_marshal_fn,
                    _0RL_sConArcBlowData_destructor_fn,
                    _v)) {
    _sp = (const sConArcBlowData*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sConArcModelResult_marshal_fn(cdrStream& _s, void* _v)
{
  sConArcModelResult* _p = (sConArcModelResult*)_v;
  *_p >>= _s;
}
static void _0RL_sConArcModelResult_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sConArcModelResult* _p = new sConArcModelResult;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sConArcModelResult_destructor_fn(void* _v)
{
  sConArcModelResult* _p = (sConArcModelResult*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sConArcModelResult& _s)
{
  sConArcModelResult* _p = new sConArcModelResult(_s);
  _a.PR_insert(_0RL_tc_sConArcModelResult,
               _0RL_sConArcModelResult_marshal_fn,
               _0RL_sConArcModelResult_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sConArcModelResult* _sp)
{
  _a.PR_insert(_0RL_tc_sConArcModelResult,
               _0RL_sConArcModelResult_marshal_fn,
               _0RL_sConArcModelResult_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sConArcModelResult*& _sp)
{
  return _a >>= (const sConArcModelResult*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sConArcModelResult*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sConArcModelResult,
                    _0RL_sConArcModelResult_unmarshal_fn,
                    _0RL_sConArcModelResult_marshal_fn,
                    _0RL_sConArcModelResult_destructor_fn,
                    _v)) {
    _sp = (const sConArcModelResult*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sConArcMediaPredRes_marshal_fn(cdrStream& _s, void* _v)
{
  sConArcMediaPredRes* _p = (sConArcMediaPredRes*)_v;
  *_p >>= _s;
}
static void _0RL_sConArcMediaPredRes_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sConArcMediaPredRes* _p = new sConArcMediaPredRes;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sConArcMediaPredRes_destructor_fn(void* _v)
{
  sConArcMediaPredRes* _p = (sConArcMediaPredRes*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sConArcMediaPredRes& _s)
{
  sConArcMediaPredRes* _p = new sConArcMediaPredRes(_s);
  _a.PR_insert(_0RL_tc_sConArcMediaPredRes,
               _0RL_sConArcMediaPredRes_marshal_fn,
               _0RL_sConArcMediaPredRes_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sConArcMediaPredRes* _sp)
{
  _a.PR_insert(_0RL_tc_sConArcMediaPredRes,
               _0RL_sConArcMediaPredRes_marshal_fn,
               _0RL_sConArcMediaPredRes_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sConArcMediaPredRes*& _sp)
{
  return _a >>= (const sConArcMediaPredRes*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sConArcMediaPredRes*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sConArcMediaPredRes,
                    _0RL_sConArcMediaPredRes_unmarshal_fn,
                    _0RL_sConArcMediaPredRes_marshal_fn,
                    _0RL_sConArcMediaPredRes_destructor_fn,
                    _v)) {
    _sp = (const sConArcMediaPredRes*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqConArcMediaPredRes_marshal_fn(cdrStream& _s, void* _v)
{
  seqConArcMediaPredRes* _p = (seqConArcMediaPredRes*)_v;
  *_p >>= _s;
}
static void _0RL_seqConArcMediaPredRes_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqConArcMediaPredRes* _p = new seqConArcMediaPredRes;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqConArcMediaPredRes_destructor_fn(void* _v)
{
  seqConArcMediaPredRes* _p = (seqConArcMediaPredRes*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqConArcMediaPredRes& _s)
{
  seqConArcMediaPredRes* _p = new seqConArcMediaPredRes(_s);
  _a.PR_insert(_0RL_tc_seqConArcMediaPredRes,
               _0RL_seqConArcMediaPredRes_marshal_fn,
               _0RL_seqConArcMediaPredRes_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqConArcMediaPredRes* _sp)
{
  _a.PR_insert(_0RL_tc_seqConArcMediaPredRes,
               _0RL_seqConArcMediaPredRes_marshal_fn,
               _0RL_seqConArcMediaPredRes_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqConArcMediaPredRes*& _sp)
{
  return _a >>= (const seqConArcMediaPredRes*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqConArcMediaPredRes*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqConArcMediaPredRes,
                    _0RL_seqConArcMediaPredRes_unmarshal_fn,
                    _0RL_seqConArcMediaPredRes_marshal_fn,
                    _0RL_seqConArcMediaPredRes_destructor_fn,
                    _v)) {
    _sp = (const seqConArcMediaPredRes*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqConArcBlowData_marshal_fn(cdrStream& _s, void* _v)
{
  seqConArcBlowData* _p = (seqConArcBlowData*)_v;
  *_p >>= _s;
}
static void _0RL_seqConArcBlowData_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqConArcBlowData* _p = new seqConArcBlowData;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqConArcBlowData_destructor_fn(void* _v)
{
  seqConArcBlowData* _p = (seqConArcBlowData*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqConArcBlowData& _s)
{
  seqConArcBlowData* _p = new seqConArcBlowData(_s);
  _a.PR_insert(_0RL_tc_seqConArcBlowData,
               _0RL_seqConArcBlowData_marshal_fn,
               _0RL_seqConArcBlowData_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqConArcBlowData* _sp)
{
  _a.PR_insert(_0RL_tc_seqConArcBlowData,
               _0RL_seqConArcBlowData_marshal_fn,
               _0RL_seqConArcBlowData_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqConArcBlowData*& _sp)
{
  return _a >>= (const seqConArcBlowData*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqConArcBlowData*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqConArcBlowData,
                    _0RL_seqConArcBlowData_unmarshal_fn,
                    _0RL_seqConArcBlowData_marshal_fn,
                    _0RL_seqConArcBlowData_destructor_fn,
                    _v)) {
    _sp = (const seqConArcBlowData*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqConArcModelResult_marshal_fn(cdrStream& _s, void* _v)
{
  seqConArcModelResult* _p = (seqConArcModelResult*)_v;
  *_p >>= _s;
}
static void _0RL_seqConArcModelResult_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqConArcModelResult* _p = new seqConArcModelResult;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqConArcModelResult_destructor_fn(void* _v)
{
  seqConArcModelResult* _p = (seqConArcModelResult*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqConArcModelResult& _s)
{
  seqConArcModelResult* _p = new seqConArcModelResult(_s);
  _a.PR_insert(_0RL_tc_seqConArcModelResult,
               _0RL_seqConArcModelResult_marshal_fn,
               _0RL_seqConArcModelResult_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqConArcModelResult* _sp)
{
  _a.PR_insert(_0RL_tc_seqConArcModelResult,
               _0RL_seqConArcModelResult_marshal_fn,
               _0RL_seqConArcModelResult_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqConArcModelResult*& _sp)
{
  return _a >>= (const seqConArcModelResult*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqConArcModelResult*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqConArcModelResult,
                    _0RL_seqConArcModelResult_unmarshal_fn,
                    _0RL_seqConArcModelResult_marshal_fn,
                    _0RL_seqConArcModelResult_destructor_fn,
                    _v)) {
    _sp = (const seqConArcModelResult*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sLTSStirrPredRes_marshal_fn(cdrStream& _s, void* _v)
{
  sLTSStirrPredRes* _p = (sLTSStirrPredRes*)_v;
  *_p >>= _s;
}
static void _0RL_sLTSStirrPredRes_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sLTSStirrPredRes* _p = new sLTSStirrPredRes;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sLTSStirrPredRes_destructor_fn(void* _v)
{
  sLTSStirrPredRes* _p = (sLTSStirrPredRes*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sLTSStirrPredRes& _s)
{
  sLTSStirrPredRes* _p = new sLTSStirrPredRes(_s);
  _a.PR_insert(_0RL_tc_sLTSStirrPredRes,
               _0RL_sLTSStirrPredRes_marshal_fn,
               _0RL_sLTSStirrPredRes_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sLTSStirrPredRes* _sp)
{
  _a.PR_insert(_0RL_tc_sLTSStirrPredRes,
               _0RL_sLTSStirrPredRes_marshal_fn,
               _0RL_sLTSStirrPredRes_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sLTSStirrPredRes*& _sp)
{
  return _a >>= (const sLTSStirrPredRes*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sLTSStirrPredRes*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sLTSStirrPredRes,
                    _0RL_sLTSStirrPredRes_unmarshal_fn,
                    _0RL_sLTSStirrPredRes_marshal_fn,
                    _0RL_sLTSStirrPredRes_destructor_fn,
                    _v)) {
    _sp = (const sLTSStirrPredRes*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqLTSStirrPredRes_marshal_fn(cdrStream& _s, void* _v)
{
  seqLTSStirrPredRes* _p = (seqLTSStirrPredRes*)_v;
  *_p >>= _s;
}
static void _0RL_seqLTSStirrPredRes_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqLTSStirrPredRes* _p = new seqLTSStirrPredRes;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqLTSStirrPredRes_destructor_fn(void* _v)
{
  seqLTSStirrPredRes* _p = (seqLTSStirrPredRes*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqLTSStirrPredRes& _s)
{
  seqLTSStirrPredRes* _p = new seqLTSStirrPredRes(_s);
  _a.PR_insert(_0RL_tc_seqLTSStirrPredRes,
               _0RL_seqLTSStirrPredRes_marshal_fn,
               _0RL_seqLTSStirrPredRes_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqLTSStirrPredRes* _sp)
{
  _a.PR_insert(_0RL_tc_seqLTSStirrPredRes,
               _0RL_seqLTSStirrPredRes_marshal_fn,
               _0RL_seqLTSStirrPredRes_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqLTSStirrPredRes*& _sp)
{
  return _a >>= (const seqLTSStirrPredRes*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqLTSStirrPredRes*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqLTSStirrPredRes,
                    _0RL_seqLTSStirrPredRes_unmarshal_fn,
                    _0RL_seqLTSStirrPredRes_marshal_fn,
                    _0RL_seqLTSStirrPredRes_destructor_fn,
                    _v)) {
    _sp = (const seqLTSStirrPredRes*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sBOFGlobalSetpoints_marshal_fn(cdrStream& _s, void* _v)
{
  sBOFGlobalSetpoints* _p = (sBOFGlobalSetpoints*)_v;
  *_p >>= _s;
}
static void _0RL_sBOFGlobalSetpoints_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sBOFGlobalSetpoints* _p = new sBOFGlobalSetpoints;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sBOFGlobalSetpoints_destructor_fn(void* _v)
{
  sBOFGlobalSetpoints* _p = (sBOFGlobalSetpoints*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sBOFGlobalSetpoints& _s)
{
  sBOFGlobalSetpoints* _p = new sBOFGlobalSetpoints(_s);
  _a.PR_insert(_0RL_tc_sBOFGlobalSetpoints,
               _0RL_sBOFGlobalSetpoints_marshal_fn,
               _0RL_sBOFGlobalSetpoints_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sBOFGlobalSetpoints* _sp)
{
  _a.PR_insert(_0RL_tc_sBOFGlobalSetpoints,
               _0RL_sBOFGlobalSetpoints_marshal_fn,
               _0RL_sBOFGlobalSetpoints_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sBOFGlobalSetpoints*& _sp)
{
  return _a >>= (const sBOFGlobalSetpoints*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sBOFGlobalSetpoints*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sBOFGlobalSetpoints,
                    _0RL_sBOFGlobalSetpoints_unmarshal_fn,
                    _0RL_sBOFGlobalSetpoints_marshal_fn,
                    _0RL_sBOFGlobalSetpoints_destructor_fn,
                    _v)) {
    _sp = (const sBOFGlobalSetpoints*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqBOFGlobalSetpoints_marshal_fn(cdrStream& _s, void* _v)
{
  seqBOFGlobalSetpoints* _p = (seqBOFGlobalSetpoints*)_v;
  *_p >>= _s;
}
static void _0RL_seqBOFGlobalSetpoints_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqBOFGlobalSetpoints* _p = new seqBOFGlobalSetpoints;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqBOFGlobalSetpoints_destructor_fn(void* _v)
{
  seqBOFGlobalSetpoints* _p = (seqBOFGlobalSetpoints*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqBOFGlobalSetpoints& _s)
{
  seqBOFGlobalSetpoints* _p = new seqBOFGlobalSetpoints(_s);
  _a.PR_insert(_0RL_tc_seqBOFGlobalSetpoints,
               _0RL_seqBOFGlobalSetpoints_marshal_fn,
               _0RL_seqBOFGlobalSetpoints_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqBOFGlobalSetpoints* _sp)
{
  _a.PR_insert(_0RL_tc_seqBOFGlobalSetpoints,
               _0RL_seqBOFGlobalSetpoints_marshal_fn,
               _0RL_seqBOFGlobalSetpoints_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqBOFGlobalSetpoints*& _sp)
{
  return _a >>= (const seqBOFGlobalSetpoints*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqBOFGlobalSetpoints*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqBOFGlobalSetpoints,
                    _0RL_seqBOFGlobalSetpoints_unmarshal_fn,
                    _0RL_seqBOFGlobalSetpoints_marshal_fn,
                    _0RL_seqBOFGlobalSetpoints_destructor_fn,
                    _v)) {
    _sp = (const seqBOFGlobalSetpoints*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sConArcGlobalSetpoints_marshal_fn(cdrStream& _s, void* _v)
{
  sConArcGlobalSetpoints* _p = (sConArcGlobalSetpoints*)_v;
  *_p >>= _s;
}
static void _0RL_sConArcGlobalSetpoints_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sConArcGlobalSetpoints* _p = new sConArcGlobalSetpoints;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sConArcGlobalSetpoints_destructor_fn(void* _v)
{
  sConArcGlobalSetpoints* _p = (sConArcGlobalSetpoints*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sConArcGlobalSetpoints& _s)
{
  sConArcGlobalSetpoints* _p = new sConArcGlobalSetpoints(_s);
  _a.PR_insert(_0RL_tc_sConArcGlobalSetpoints,
               _0RL_sConArcGlobalSetpoints_marshal_fn,
               _0RL_sConArcGlobalSetpoints_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sConArcGlobalSetpoints* _sp)
{
  _a.PR_insert(_0RL_tc_sConArcGlobalSetpoints,
               _0RL_sConArcGlobalSetpoints_marshal_fn,
               _0RL_sConArcGlobalSetpoints_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sConArcGlobalSetpoints*& _sp)
{
  return _a >>= (const sConArcGlobalSetpoints*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sConArcGlobalSetpoints*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sConArcGlobalSetpoints,
                    _0RL_sConArcGlobalSetpoints_unmarshal_fn,
                    _0RL_sConArcGlobalSetpoints_marshal_fn,
                    _0RL_sConArcGlobalSetpoints_destructor_fn,
                    _v)) {
    _sp = (const sConArcGlobalSetpoints*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqConArcGlobalSetpoints_marshal_fn(cdrStream& _s, void* _v)
{
  seqConArcGlobalSetpoints* _p = (seqConArcGlobalSetpoints*)_v;
  *_p >>= _s;
}
static void _0RL_seqConArcGlobalSetpoints_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqConArcGlobalSetpoints* _p = new seqConArcGlobalSetpoints;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqConArcGlobalSetpoints_destructor_fn(void* _v)
{
  seqConArcGlobalSetpoints* _p = (seqConArcGlobalSetpoints*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqConArcGlobalSetpoints& _s)
{
  seqConArcGlobalSetpoints* _p = new seqConArcGlobalSetpoints(_s);
  _a.PR_insert(_0RL_tc_seqConArcGlobalSetpoints,
               _0RL_seqConArcGlobalSetpoints_marshal_fn,
               _0RL_seqConArcGlobalSetpoints_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqConArcGlobalSetpoints* _sp)
{
  _a.PR_insert(_0RL_tc_seqConArcGlobalSetpoints,
               _0RL_seqConArcGlobalSetpoints_marshal_fn,
               _0RL_seqConArcGlobalSetpoints_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqConArcGlobalSetpoints*& _sp)
{
  return _a >>= (const seqConArcGlobalSetpoints*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqConArcGlobalSetpoints*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqConArcGlobalSetpoints,
                    _0RL_seqConArcGlobalSetpoints_unmarshal_fn,
                    _0RL_seqConArcGlobalSetpoints_marshal_fn,
                    _0RL_seqConArcGlobalSetpoints_destructor_fn,
                    _v)) {
    _sp = (const seqConArcGlobalSetpoints*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sSample_marshal_fn(cdrStream& _s, void* _v)
{
  sSample* _p = (sSample*)_v;
  *_p >>= _s;
}
static void _0RL_sSample_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sSample* _p = new sSample;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sSample_destructor_fn(void* _v)
{
  sSample* _p = (sSample*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sSample& _s)
{
  sSample* _p = new sSample(_s);
  _a.PR_insert(_0RL_tc_sSample,
               _0RL_sSample_marshal_fn,
               _0RL_sSample_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sSample* _sp)
{
  _a.PR_insert(_0RL_tc_sSample,
               _0RL_sSample_marshal_fn,
               _0RL_sSample_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sSample*& _sp)
{
  return _a >>= (const sSample*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sSample*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sSample,
                    _0RL_sSample_unmarshal_fn,
                    _0RL_sSample_marshal_fn,
                    _0RL_sSample_destructor_fn,
                    _v)) {
    _sp = (const sSample*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqSample_marshal_fn(cdrStream& _s, void* _v)
{
  seqSample* _p = (seqSample*)_v;
  *_p >>= _s;
}
static void _0RL_seqSample_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqSample* _p = new seqSample;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqSample_destructor_fn(void* _v)
{
  seqSample* _p = (seqSample*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqSample& _s)
{
  seqSample* _p = new seqSample(_s);
  _a.PR_insert(_0RL_tc_seqSample,
               _0RL_seqSample_marshal_fn,
               _0RL_seqSample_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqSample* _sp)
{
  _a.PR_insert(_0RL_tc_seqSample,
               _0RL_seqSample_marshal_fn,
               _0RL_seqSample_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqSample*& _sp)
{
  return _a >>= (const seqSample*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqSample*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqSample,
                    _0RL_seqSample_unmarshal_fn,
                    _0RL_seqSample_marshal_fn,
                    _0RL_seqSample_destructor_fn,
                    _v)) {
    _sp = (const seqSample*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sTorpedoData_marshal_fn(cdrStream& _s, void* _v)
{
  sTorpedoData* _p = (sTorpedoData*)_v;
  *_p >>= _s;
}
static void _0RL_sTorpedoData_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sTorpedoData* _p = new sTorpedoData;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sTorpedoData_destructor_fn(void* _v)
{
  sTorpedoData* _p = (sTorpedoData*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sTorpedoData& _s)
{
  sTorpedoData* _p = new sTorpedoData(_s);
  _a.PR_insert(_0RL_tc_sTorpedoData,
               _0RL_sTorpedoData_marshal_fn,
               _0RL_sTorpedoData_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sTorpedoData* _sp)
{
  _a.PR_insert(_0RL_tc_sTorpedoData,
               _0RL_sTorpedoData_marshal_fn,
               _0RL_sTorpedoData_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sTorpedoData*& _sp)
{
  return _a >>= (const sTorpedoData*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sTorpedoData*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sTorpedoData,
                    _0RL_sTorpedoData_unmarshal_fn,
                    _0RL_sTorpedoData_marshal_fn,
                    _0RL_sTorpedoData_destructor_fn,
                    _v)) {
    _sp = (const sTorpedoData*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqTorpedoData_marshal_fn(cdrStream& _s, void* _v)
{
  seqTorpedoData* _p = (seqTorpedoData*)_v;
  *_p >>= _s;
}
static void _0RL_seqTorpedoData_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqTorpedoData* _p = new seqTorpedoData;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqTorpedoData_destructor_fn(void* _v)
{
  seqTorpedoData* _p = (seqTorpedoData*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqTorpedoData& _s)
{
  seqTorpedoData* _p = new seqTorpedoData(_s);
  _a.PR_insert(_0RL_tc_seqTorpedoData,
               _0RL_seqTorpedoData_marshal_fn,
               _0RL_seqTorpedoData_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqTorpedoData* _sp)
{
  _a.PR_insert(_0RL_tc_seqTorpedoData,
               _0RL_seqTorpedoData_marshal_fn,
               _0RL_seqTorpedoData_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqTorpedoData*& _sp)
{
  return _a >>= (const seqTorpedoData*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqTorpedoData*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqTorpedoData,
                    _0RL_seqTorpedoData_unmarshal_fn,
                    _0RL_seqTorpedoData_marshal_fn,
                    _0RL_seqTorpedoData_destructor_fn,
                    _v)) {
    _sp = (const seqTorpedoData*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_strSampleRef_marshal_fn(cdrStream& _s, void* _v)
{
  strSampleRef* _p = (strSampleRef*)_v;
  *_p >>= _s;
}
static void _0RL_strSampleRef_unmarshal_fn(cdrStream& _s, void*& _v)
{
  strSampleRef* _p = new strSampleRef;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_strSampleRef_destructor_fn(void* _v)
{
  strSampleRef* _p = (strSampleRef*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const strSampleRef& _s)
{
  strSampleRef* _p = new strSampleRef(_s);
  _a.PR_insert(_0RL_tc_strSampleRef,
               _0RL_strSampleRef_marshal_fn,
               _0RL_strSampleRef_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, strSampleRef* _sp)
{
  _a.PR_insert(_0RL_tc_strSampleRef,
               _0RL_strSampleRef_marshal_fn,
               _0RL_strSampleRef_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, strSampleRef*& _sp)
{
  return _a >>= (const strSampleRef*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const strSampleRef*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_strSampleRef,
                    _0RL_strSampleRef_unmarshal_fn,
                    _0RL_strSampleRef_marshal_fn,
                    _0RL_strSampleRef_destructor_fn,
                    _v)) {
    _sp = (const strSampleRef*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sPhaseDataReport_marshal_fn(cdrStream& _s, void* _v)
{
  sPhaseDataReport* _p = (sPhaseDataReport*)_v;
  *_p >>= _s;
}
static void _0RL_sPhaseDataReport_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sPhaseDataReport* _p = new sPhaseDataReport;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sPhaseDataReport_destructor_fn(void* _v)
{
  sPhaseDataReport* _p = (sPhaseDataReport*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sPhaseDataReport& _s)
{
  sPhaseDataReport* _p = new sPhaseDataReport(_s);
  _a.PR_insert(_0RL_tc_sPhaseDataReport,
               _0RL_sPhaseDataReport_marshal_fn,
               _0RL_sPhaseDataReport_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sPhaseDataReport* _sp)
{
  _a.PR_insert(_0RL_tc_sPhaseDataReport,
               _0RL_sPhaseDataReport_marshal_fn,
               _0RL_sPhaseDataReport_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sPhaseDataReport*& _sp)
{
  return _a >>= (const sPhaseDataReport*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sPhaseDataReport*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sPhaseDataReport,
                    _0RL_sPhaseDataReport_unmarshal_fn,
                    _0RL_sPhaseDataReport_marshal_fn,
                    _0RL_sPhaseDataReport_destructor_fn,
                    _v)) {
    _sp = (const sPhaseDataReport*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqPhaseDataReport_marshal_fn(cdrStream& _s, void* _v)
{
  seqPhaseDataReport* _p = (seqPhaseDataReport*)_v;
  *_p >>= _s;
}
static void _0RL_seqPhaseDataReport_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqPhaseDataReport* _p = new seqPhaseDataReport;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqPhaseDataReport_destructor_fn(void* _v)
{
  seqPhaseDataReport* _p = (seqPhaseDataReport*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqPhaseDataReport& _s)
{
  seqPhaseDataReport* _p = new seqPhaseDataReport(_s);
  _a.PR_insert(_0RL_tc_seqPhaseDataReport,
               _0RL_seqPhaseDataReport_marshal_fn,
               _0RL_seqPhaseDataReport_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqPhaseDataReport* _sp)
{
  _a.PR_insert(_0RL_tc_seqPhaseDataReport,
               _0RL_seqPhaseDataReport_marshal_fn,
               _0RL_seqPhaseDataReport_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqPhaseDataReport*& _sp)
{
  return _a >>= (const seqPhaseDataReport*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqPhaseDataReport*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqPhaseDataReport,
                    _0RL_seqPhaseDataReport_unmarshal_fn,
                    _0RL_seqPhaseDataReport_marshal_fn,
                    _0RL_seqPhaseDataReport_destructor_fn,
                    _v)) {
    _sp = (const seqPhaseDataReport*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sEquipmentLifeData_marshal_fn(cdrStream& _s, void* _v)
{
  sEquipmentLifeData* _p = (sEquipmentLifeData*)_v;
  *_p >>= _s;
}
static void _0RL_sEquipmentLifeData_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sEquipmentLifeData* _p = new sEquipmentLifeData;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sEquipmentLifeData_destructor_fn(void* _v)
{
  sEquipmentLifeData* _p = (sEquipmentLifeData*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sEquipmentLifeData& _s)
{
  sEquipmentLifeData* _p = new sEquipmentLifeData(_s);
  _a.PR_insert(_0RL_tc_sEquipmentLifeData,
               _0RL_sEquipmentLifeData_marshal_fn,
               _0RL_sEquipmentLifeData_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sEquipmentLifeData* _sp)
{
  _a.PR_insert(_0RL_tc_sEquipmentLifeData,
               _0RL_sEquipmentLifeData_marshal_fn,
               _0RL_sEquipmentLifeData_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sEquipmentLifeData*& _sp)
{
  return _a >>= (const sEquipmentLifeData*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sEquipmentLifeData*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sEquipmentLifeData,
                    _0RL_sEquipmentLifeData_unmarshal_fn,
                    _0RL_sEquipmentLifeData_marshal_fn,
                    _0RL_sEquipmentLifeData_destructor_fn,
                    _v)) {
    _sp = (const sEquipmentLifeData*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqEquipmentLifeData_marshal_fn(cdrStream& _s, void* _v)
{
  seqEquipmentLifeData* _p = (seqEquipmentLifeData*)_v;
  *_p >>= _s;
}
static void _0RL_seqEquipmentLifeData_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqEquipmentLifeData* _p = new seqEquipmentLifeData;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqEquipmentLifeData_destructor_fn(void* _v)
{
  seqEquipmentLifeData* _p = (seqEquipmentLifeData*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqEquipmentLifeData& _s)
{
  seqEquipmentLifeData* _p = new seqEquipmentLifeData(_s);
  _a.PR_insert(_0RL_tc_seqEquipmentLifeData,
               _0RL_seqEquipmentLifeData_marshal_fn,
               _0RL_seqEquipmentLifeData_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqEquipmentLifeData* _sp)
{
  _a.PR_insert(_0RL_tc_seqEquipmentLifeData,
               _0RL_seqEquipmentLifeData_marshal_fn,
               _0RL_seqEquipmentLifeData_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqEquipmentLifeData*& _sp)
{
  return _a >>= (const seqEquipmentLifeData*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqEquipmentLifeData*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqEquipmentLifeData,
                    _0RL_seqEquipmentLifeData_unmarshal_fn,
                    _0RL_seqEquipmentLifeData_marshal_fn,
                    _0RL_seqEquipmentLifeData_destructor_fn,
                    _v)) {
    _sp = (const seqEquipmentLifeData*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sPPRestriction_marshal_fn(cdrStream& _s, void* _v)
{
  sPPRestriction* _p = (sPPRestriction*)_v;
  *_p >>= _s;
}
static void _0RL_sPPRestriction_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sPPRestriction* _p = new sPPRestriction;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sPPRestriction_destructor_fn(void* _v)
{
  sPPRestriction* _p = (sPPRestriction*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sPPRestriction& _s)
{
  sPPRestriction* _p = new sPPRestriction(_s);
  _a.PR_insert(_0RL_tc_sPPRestriction,
               _0RL_sPPRestriction_marshal_fn,
               _0RL_sPPRestriction_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sPPRestriction* _sp)
{
  _a.PR_insert(_0RL_tc_sPPRestriction,
               _0RL_sPPRestriction_marshal_fn,
               _0RL_sPPRestriction_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sPPRestriction*& _sp)
{
  return _a >>= (const sPPRestriction*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sPPRestriction*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sPPRestriction,
                    _0RL_sPPRestriction_unmarshal_fn,
                    _0RL_sPPRestriction_marshal_fn,
                    _0RL_sPPRestriction_destructor_fn,
                    _v)) {
    _sp = (const sPPRestriction*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqPPRestriction_marshal_fn(cdrStream& _s, void* _v)
{
  seqPPRestriction* _p = (seqPPRestriction*)_v;
  *_p >>= _s;
}
static void _0RL_seqPPRestriction_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqPPRestriction* _p = new seqPPRestriction;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqPPRestriction_destructor_fn(void* _v)
{
  seqPPRestriction* _p = (seqPPRestriction*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqPPRestriction& _s)
{
  seqPPRestriction* _p = new seqPPRestriction(_s);
  _a.PR_insert(_0RL_tc_seqPPRestriction,
               _0RL_seqPPRestriction_marshal_fn,
               _0RL_seqPPRestriction_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqPPRestriction* _sp)
{
  _a.PR_insert(_0RL_tc_seqPPRestriction,
               _0RL_seqPPRestriction_marshal_fn,
               _0RL_seqPPRestriction_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqPPRestriction*& _sp)
{
  return _a >>= (const seqPPRestriction*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqPPRestriction*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqPPRestriction,
                    _0RL_seqPPRestriction_unmarshal_fn,
                    _0RL_seqPPRestriction_marshal_fn,
                    _0RL_seqPPRestriction_destructor_fn,
                    _v)) {
    _sp = (const seqPPRestriction*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sHeatStack_marshal_fn(cdrStream& _s, void* _v)
{
  sHeatStack* _p = (sHeatStack*)_v;
  *_p >>= _s;
}
static void _0RL_sHeatStack_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sHeatStack* _p = new sHeatStack;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sHeatStack_destructor_fn(void* _v)
{
  sHeatStack* _p = (sHeatStack*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sHeatStack& _s)
{
  sHeatStack* _p = new sHeatStack(_s);
  _a.PR_insert(_0RL_tc_sHeatStack,
               _0RL_sHeatStack_marshal_fn,
               _0RL_sHeatStack_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sHeatStack* _sp)
{
  _a.PR_insert(_0RL_tc_sHeatStack,
               _0RL_sHeatStack_marshal_fn,
               _0RL_sHeatStack_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sHeatStack*& _sp)
{
  return _a >>= (const sHeatStack*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sHeatStack*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sHeatStack,
                    _0RL_sHeatStack_unmarshal_fn,
                    _0RL_sHeatStack_marshal_fn,
                    _0RL_sHeatStack_destructor_fn,
                    _v)) {
    _sp = (const sHeatStack*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqHeatStack_marshal_fn(cdrStream& _s, void* _v)
{
  seqHeatStack* _p = (seqHeatStack*)_v;
  *_p >>= _s;
}
static void _0RL_seqHeatStack_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqHeatStack* _p = new seqHeatStack;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqHeatStack_destructor_fn(void* _v)
{
  seqHeatStack* _p = (seqHeatStack*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqHeatStack& _s)
{
  seqHeatStack* _p = new seqHeatStack(_s);
  _a.PR_insert(_0RL_tc_seqHeatStack,
               _0RL_seqHeatStack_marshal_fn,
               _0RL_seqHeatStack_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqHeatStack* _sp)
{
  _a.PR_insert(_0RL_tc_seqHeatStack,
               _0RL_seqHeatStack_marshal_fn,
               _0RL_seqHeatStack_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqHeatStack*& _sp)
{
  return _a >>= (const seqHeatStack*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqHeatStack*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqHeatStack,
                    _0RL_seqHeatStack_unmarshal_fn,
                    _0RL_seqHeatStack_marshal_fn,
                    _0RL_seqHeatStack_destructor_fn,
                    _v)) {
    _sp = (const seqHeatStack*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sMediaConsumed_marshal_fn(cdrStream& _s, void* _v)
{
  sMediaConsumed* _p = (sMediaConsumed*)_v;
  *_p >>= _s;
}
static void _0RL_sMediaConsumed_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sMediaConsumed* _p = new sMediaConsumed;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sMediaConsumed_destructor_fn(void* _v)
{
  sMediaConsumed* _p = (sMediaConsumed*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sMediaConsumed& _s)
{
  sMediaConsumed* _p = new sMediaConsumed(_s);
  _a.PR_insert(_0RL_tc_sMediaConsumed,
               _0RL_sMediaConsumed_marshal_fn,
               _0RL_sMediaConsumed_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sMediaConsumed* _sp)
{
  _a.PR_insert(_0RL_tc_sMediaConsumed,
               _0RL_sMediaConsumed_marshal_fn,
               _0RL_sMediaConsumed_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sMediaConsumed*& _sp)
{
  return _a >>= (const sMediaConsumed*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sMediaConsumed*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sMediaConsumed,
                    _0RL_sMediaConsumed_unmarshal_fn,
                    _0RL_sMediaConsumed_marshal_fn,
                    _0RL_sMediaConsumed_destructor_fn,
                    _v)) {
    _sp = (const sMediaConsumed*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqMediaConsumed_marshal_fn(cdrStream& _s, void* _v)
{
  seqMediaConsumed* _p = (seqMediaConsumed*)_v;
  *_p >>= _s;
}
static void _0RL_seqMediaConsumed_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqMediaConsumed* _p = new seqMediaConsumed;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqMediaConsumed_destructor_fn(void* _v)
{
  seqMediaConsumed* _p = (seqMediaConsumed*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqMediaConsumed& _s)
{
  seqMediaConsumed* _p = new seqMediaConsumed(_s);
  _a.PR_insert(_0RL_tc_seqMediaConsumed,
               _0RL_seqMediaConsumed_marshal_fn,
               _0RL_seqMediaConsumed_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqMediaConsumed* _sp)
{
  _a.PR_insert(_0RL_tc_seqMediaConsumed,
               _0RL_seqMediaConsumed_marshal_fn,
               _0RL_seqMediaConsumed_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqMediaConsumed*& _sp)
{
  return _a >>= (const seqMediaConsumed*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqMediaConsumed*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqMediaConsumed,
                    _0RL_seqMediaConsumed_unmarshal_fn,
                    _0RL_seqMediaConsumed_marshal_fn,
                    _0RL_seqMediaConsumed_destructor_fn,
                    _v)) {
    _sp = (const seqMediaConsumed*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sEnergyConsumed_marshal_fn(cdrStream& _s, void* _v)
{
  sEnergyConsumed* _p = (sEnergyConsumed*)_v;
  *_p >>= _s;
}
static void _0RL_sEnergyConsumed_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sEnergyConsumed* _p = new sEnergyConsumed;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sEnergyConsumed_destructor_fn(void* _v)
{
  sEnergyConsumed* _p = (sEnergyConsumed*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sEnergyConsumed& _s)
{
  sEnergyConsumed* _p = new sEnergyConsumed(_s);
  _a.PR_insert(_0RL_tc_sEnergyConsumed,
               _0RL_sEnergyConsumed_marshal_fn,
               _0RL_sEnergyConsumed_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sEnergyConsumed* _sp)
{
  _a.PR_insert(_0RL_tc_sEnergyConsumed,
               _0RL_sEnergyConsumed_marshal_fn,
               _0RL_sEnergyConsumed_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sEnergyConsumed*& _sp)
{
  return _a >>= (const sEnergyConsumed*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sEnergyConsumed*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sEnergyConsumed,
                    _0RL_sEnergyConsumed_unmarshal_fn,
                    _0RL_sEnergyConsumed_marshal_fn,
                    _0RL_sEnergyConsumed_destructor_fn,
                    _v)) {
    _sp = (const sEnergyConsumed*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqEnergyConsumed_marshal_fn(cdrStream& _s, void* _v)
{
  seqEnergyConsumed* _p = (seqEnergyConsumed*)_v;
  *_p >>= _s;
}
static void _0RL_seqEnergyConsumed_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqEnergyConsumed* _p = new seqEnergyConsumed;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqEnergyConsumed_destructor_fn(void* _v)
{
  seqEnergyConsumed* _p = (seqEnergyConsumed*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqEnergyConsumed& _s)
{
  seqEnergyConsumed* _p = new seqEnergyConsumed(_s);
  _a.PR_insert(_0RL_tc_seqEnergyConsumed,
               _0RL_seqEnergyConsumed_marshal_fn,
               _0RL_seqEnergyConsumed_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqEnergyConsumed* _sp)
{
  _a.PR_insert(_0RL_tc_seqEnergyConsumed,
               _0RL_seqEnergyConsumed_marshal_fn,
               _0RL_seqEnergyConsumed_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqEnergyConsumed*& _sp)
{
  return _a >>= (const seqEnergyConsumed*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqEnergyConsumed*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqEnergyConsumed,
                    _0RL_seqEnergyConsumed_unmarshal_fn,
                    _0RL_seqEnergyConsumed_marshal_fn,
                    _0RL_seqEnergyConsumed_destructor_fn,
                    _v)) {
    _sp = (const seqEnergyConsumed*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sSAF__Bin_marshal_fn(cdrStream& _s, void* _v)
{
  sSAF_Bin* _p = (sSAF_Bin*)_v;
  *_p >>= _s;
}
static void _0RL_sSAF__Bin_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sSAF_Bin* _p = new sSAF_Bin;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sSAF__Bin_destructor_fn(void* _v)
{
  sSAF_Bin* _p = (sSAF_Bin*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sSAF_Bin& _s)
{
  sSAF_Bin* _p = new sSAF_Bin(_s);
  _a.PR_insert(_0RL_tc_sSAF__Bin,
               _0RL_sSAF__Bin_marshal_fn,
               _0RL_sSAF__Bin_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sSAF_Bin* _sp)
{
  _a.PR_insert(_0RL_tc_sSAF__Bin,
               _0RL_sSAF__Bin_marshal_fn,
               _0RL_sSAF__Bin_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sSAF_Bin*& _sp)
{
  return _a >>= (const sSAF_Bin*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sSAF_Bin*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sSAF__Bin,
                    _0RL_sSAF__Bin_unmarshal_fn,
                    _0RL_sSAF__Bin_marshal_fn,
                    _0RL_sSAF__Bin_destructor_fn,
                    _v)) {
    _sp = (const sSAF_Bin*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqSAF__Bin_marshal_fn(cdrStream& _s, void* _v)
{
  seqSAF_Bin* _p = (seqSAF_Bin*)_v;
  *_p >>= _s;
}
static void _0RL_seqSAF__Bin_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqSAF_Bin* _p = new seqSAF_Bin;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqSAF__Bin_destructor_fn(void* _v)
{
  seqSAF_Bin* _p = (seqSAF_Bin*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqSAF_Bin& _s)
{
  seqSAF_Bin* _p = new seqSAF_Bin(_s);
  _a.PR_insert(_0RL_tc_seqSAF__Bin,
               _0RL_seqSAF__Bin_marshal_fn,
               _0RL_seqSAF__Bin_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqSAF_Bin* _sp)
{
  _a.PR_insert(_0RL_tc_seqSAF__Bin,
               _0RL_seqSAF__Bin_marshal_fn,
               _0RL_seqSAF__Bin_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqSAF_Bin*& _sp)
{
  return _a >>= (const seqSAF_Bin*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqSAF_Bin*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqSAF__Bin,
                    _0RL_seqSAF__Bin_unmarshal_fn,
                    _0RL_seqSAF__Bin_marshal_fn,
                    _0RL_seqSAF__Bin_destructor_fn,
                    _v)) {
    _sp = (const seqSAF_Bin*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sHarmonics_marshal_fn(cdrStream& _s, void* _v)
{
  sHarmonics* _p = (sHarmonics*)_v;
  *_p >>= _s;
}
static void _0RL_sHarmonics_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sHarmonics* _p = new sHarmonics;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sHarmonics_destructor_fn(void* _v)
{
  sHarmonics* _p = (sHarmonics*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sHarmonics& _s)
{
  sHarmonics* _p = new sHarmonics(_s);
  _a.PR_insert(_0RL_tc_sHarmonics,
               _0RL_sHarmonics_marshal_fn,
               _0RL_sHarmonics_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sHarmonics* _sp)
{
  _a.PR_insert(_0RL_tc_sHarmonics,
               _0RL_sHarmonics_marshal_fn,
               _0RL_sHarmonics_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sHarmonics*& _sp)
{
  return _a >>= (const sHarmonics*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sHarmonics*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sHarmonics,
                    _0RL_sHarmonics_unmarshal_fn,
                    _0RL_sHarmonics_marshal_fn,
                    _0RL_sHarmonics_destructor_fn,
                    _v)) {
    _sp = (const sHarmonics*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqHarmonics_marshal_fn(cdrStream& _s, void* _v)
{
  seqHarmonics* _p = (seqHarmonics*)_v;
  *_p >>= _s;
}
static void _0RL_seqHarmonics_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqHarmonics* _p = new seqHarmonics;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqHarmonics_destructor_fn(void* _v)
{
  seqHarmonics* _p = (seqHarmonics*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqHarmonics& _s)
{
  seqHarmonics* _p = new seqHarmonics(_s);
  _a.PR_insert(_0RL_tc_seqHarmonics,
               _0RL_seqHarmonics_marshal_fn,
               _0RL_seqHarmonics_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqHarmonics* _sp)
{
  _a.PR_insert(_0RL_tc_seqHarmonics,
               _0RL_seqHarmonics_marshal_fn,
               _0RL_seqHarmonics_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqHarmonics*& _sp)
{
  return _a >>= (const seqHarmonics*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqHarmonics*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqHarmonics,
                    _0RL_seqHarmonics_unmarshal_fn,
                    _0RL_seqHarmonics_marshal_fn,
                    _0RL_seqHarmonics_destructor_fn,
                    _v)) {
    _sp = (const seqHarmonics*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sWallTemp_marshal_fn(cdrStream& _s, void* _v)
{
  sWallTemp* _p = (sWallTemp*)_v;
  *_p >>= _s;
}
static void _0RL_sWallTemp_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sWallTemp* _p = new sWallTemp;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sWallTemp_destructor_fn(void* _v)
{
  sWallTemp* _p = (sWallTemp*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sWallTemp& _s)
{
  sWallTemp* _p = new sWallTemp(_s);
  _a.PR_insert(_0RL_tc_sWallTemp,
               _0RL_sWallTemp_marshal_fn,
               _0RL_sWallTemp_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sWallTemp* _sp)
{
  _a.PR_insert(_0RL_tc_sWallTemp,
               _0RL_sWallTemp_marshal_fn,
               _0RL_sWallTemp_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sWallTemp*& _sp)
{
  return _a >>= (const sWallTemp*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sWallTemp*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sWallTemp,
                    _0RL_sWallTemp_unmarshal_fn,
                    _0RL_sWallTemp_marshal_fn,
                    _0RL_sWallTemp_destructor_fn,
                    _v)) {
    _sp = (const sWallTemp*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqWallTemp_marshal_fn(cdrStream& _s, void* _v)
{
  seqWallTemp* _p = (seqWallTemp*)_v;
  *_p >>= _s;
}
static void _0RL_seqWallTemp_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqWallTemp* _p = new seqWallTemp;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqWallTemp_destructor_fn(void* _v)
{
  seqWallTemp* _p = (seqWallTemp*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqWallTemp& _s)
{
  seqWallTemp* _p = new seqWallTemp(_s);
  _a.PR_insert(_0RL_tc_seqWallTemp,
               _0RL_seqWallTemp_marshal_fn,
               _0RL_seqWallTemp_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqWallTemp* _sp)
{
  _a.PR_insert(_0RL_tc_seqWallTemp,
               _0RL_seqWallTemp_marshal_fn,
               _0RL_seqWallTemp_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqWallTemp*& _sp)
{
  return _a >>= (const seqWallTemp*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqWallTemp*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqWallTemp,
                    _0RL_seqWallTemp_unmarshal_fn,
                    _0RL_seqWallTemp_marshal_fn,
                    _0RL_seqWallTemp_destructor_fn,
                    _v)) {
    _sp = (const seqWallTemp*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_sHMPouringData_marshal_fn(cdrStream& _s, void* _v)
{
  sHMPouringData* _p = (sHMPouringData*)_v;
  *_p >>= _s;
}
static void _0RL_sHMPouringData_unmarshal_fn(cdrStream& _s, void*& _v)
{
  sHMPouringData* _p = new sHMPouringData;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_sHMPouringData_destructor_fn(void* _v)
{
  sHMPouringData* _p = (sHMPouringData*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const sHMPouringData& _s)
{
  sHMPouringData* _p = new sHMPouringData(_s);
  _a.PR_insert(_0RL_tc_sHMPouringData,
               _0RL_sHMPouringData_marshal_fn,
               _0RL_sHMPouringData_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, sHMPouringData* _sp)
{
  _a.PR_insert(_0RL_tc_sHMPouringData,
               _0RL_sHMPouringData_marshal_fn,
               _0RL_sHMPouringData_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, sHMPouringData*& _sp)
{
  return _a >>= (const sHMPouringData*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const sHMPouringData*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_sHMPouringData,
                    _0RL_sHMPouringData_unmarshal_fn,
                    _0RL_sHMPouringData_marshal_fn,
                    _0RL_sHMPouringData_destructor_fn,
                    _v)) {
    _sp = (const sHMPouringData*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_seqHMPouringData_marshal_fn(cdrStream& _s, void* _v)
{
  seqHMPouringData* _p = (seqHMPouringData*)_v;
  *_p >>= _s;
}
static void _0RL_seqHMPouringData_unmarshal_fn(cdrStream& _s, void*& _v)
{
  seqHMPouringData* _p = new seqHMPouringData;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_seqHMPouringData_destructor_fn(void* _v)
{
  seqHMPouringData* _p = (seqHMPouringData*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const seqHMPouringData& _s)
{
  seqHMPouringData* _p = new seqHMPouringData(_s);
  _a.PR_insert(_0RL_tc_seqHMPouringData,
               _0RL_seqHMPouringData_marshal_fn,
               _0RL_seqHMPouringData_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, seqHMPouringData* _sp)
{
  _a.PR_insert(_0RL_tc_seqHMPouringData,
               _0RL_seqHMPouringData_marshal_fn,
               _0RL_seqHMPouringData_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, seqHMPouringData*& _sp)
{
  return _a >>= (const seqHMPouringData*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const seqHMPouringData*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_seqHMPouringData,
                    _0RL_seqHMPouringData_unmarshal_fn,
                    _0RL_seqHMPouringData_marshal_fn,
                    _0RL_seqHMPouringData_destructor_fn,
                    _v)) {
    _sp = (const seqHMPouringData*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_iSMC__DataProvider_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_iSMC__DataProvider_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(iSMC_DataProvider::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_iSMC__DataProvider_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, iSMC_DataProvider_ptr _o)
{
  iSMC_DataProvider_ptr _no = iSMC_DataProvider::_duplicate(_o);
  _a.PR_insert(_tc_iSMC_DataProvider,
               _0RL_iSMC__DataProvider_marshal_fn,
               _0RL_iSMC__DataProvider_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, iSMC_DataProvider_ptr* _op)
{
  _a.PR_insert(_tc_iSMC_DataProvider,
               _0RL_iSMC__DataProvider_marshal_fn,
               _0RL_iSMC__DataProvider_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = iSMC_DataProvider::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, iSMC_DataProvider_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(_tc_iSMC_DataProvider,
                    _0RL_iSMC__DataProvider_unmarshal_fn,
                    _0RL_iSMC__DataProvider_marshal_fn,
                    _0RL_iSMC__DataProvider_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (iSMC_DataProvider_ptr)_r->_ptrToObjRef(iSMC_DataProvider::_PD_repoId);
    else
      _o = iSMC_DataProvider::_nil();
    return 1;
  }
  return 0;
}

