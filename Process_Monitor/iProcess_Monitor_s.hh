// This file is generated by omniidl (C++ backend)- omniORB_4_2. Do not edit.
#ifndef __iProcess__Monitor_hh__
#define __iProcess__Monitor_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_iProcess__Monitor
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_iProcess__Monitor
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_iProcess__Monitor
#endif



#ifndef __iData__Provider_hh_EXTERNAL_GUARD__
#define __iData__Provider_hh_EXTERNAL_GUARD__
#include <iData_Provider_s.hh>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif



_CORBA_MODULE PM

_CORBA_MODULE_BEG

  enum LOG_ { NOTHING, ERROR_LEVEL, WARNING_LEVEL, INFO_LEVEL, ELSE_LEVEL /*, __max_LOG_=0xffffffff */ };
  typedef LOG_& LOG__out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_LOG_;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_LOG;

  typedef LOG_ LOG;
  typedef LOG__out LOG_out;

  _CORBA_MODULE_VAR _core_attr const char * HeatID;

  _CORBA_MODULE_VAR _core_attr const char * TreatID;

  _CORBA_MODULE_VAR _core_attr const char * CustHeatID;

  _CORBA_MODULE_VAR _core_attr const char * CustTreatID;

  _CORBA_MODULE_VAR _core_attr const char * OrderId;

  _CORBA_MODULE_VAR _core_attr const char * PlantID;

  _CORBA_MODULE_VAR _core_attr const char * ActModel;

  _CORBA_MODULE_VAR _core_attr const char * Destination;

  _CORBA_MODULE_VAR _core_attr const char * Sender;

  _CORBA_MODULE_VAR _core_attr const char * PlantUnit;

  _CORBA_MODULE_VAR _core_attr const char * PlantNo;

  _CORBA_MODULE_VAR _core_attr const char * NotValidValue;

  _CORBA_MODULE_VAR _core_attr const char * TelegramName;

  _CORBA_MODULE_VAR _core_attr const char * ProductID;

  _CORBA_MODULE_VAR _core_attr const char * PlantList;

  _CORBA_MODULE_VAR _core_attr const char * Monitor;

  _CORBA_MODULE_VAR _core_attr const char * Control;

  _CORBA_MODULE_VAR _core_attr const char * ErrorsMax;

  _CORBA_MODULE_VAR _core_attr const char * ErrorCount;

  _CORBA_MODULE_VAR _core_attr const char * Tracking;

  _CORBA_MODULE_VAR _core_attr const char * EventTracking;

  _CORBA_MODULE_VAR _core_attr const char * EventIsSent;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_seqPlantList;

  class seqPlantList_var;

  class seqPlantList : public _CORBA_Unbounded_Sequence_String {
  public:
    typedef seqPlantList_var _var_type;
    inline seqPlantList() {}
    inline seqPlantList(const seqPlantList& _s)
      : _CORBA_Unbounded_Sequence_String(_s) {}

    inline seqPlantList(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence_String(_max) {}
    inline seqPlantList(_CORBA_ULong _max, _CORBA_ULong _len, char** _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence_String(_max, _len, _val, _rel) {}

  

    inline seqPlantList& operator = (const seqPlantList& _s) {
      _CORBA_Unbounded_Sequence_String::operator=(_s);
      return *this;
    }
  };

  class seqPlantList_out;

  class seqPlantList_var {
  public:
    inline seqPlantList_var() : _pd_seq(0) {}
    inline seqPlantList_var(seqPlantList* _s) : _pd_seq(_s) {}
    inline seqPlantList_var(const seqPlantList_var& _s) {
      if (_s._pd_seq)  _pd_seq = new seqPlantList(*_s._pd_seq);
      else             _pd_seq = 0;
    }
    inline ~seqPlantList_var() { if (_pd_seq)  delete _pd_seq; }
      
    inline seqPlantList_var& operator = (seqPlantList* _s) {
      if (_pd_seq)  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline seqPlantList_var& operator = (const seqPlantList_var& _s) {
      if (&_s != this) {
        if (_s._pd_seq) {
          if (!_pd_seq)  _pd_seq = new seqPlantList;
          *_pd_seq = *_s._pd_seq;
        }
        else if (_pd_seq) {
          delete _pd_seq;
          _pd_seq = 0;
        }
      }
      return *this;
    }
    inline _CORBA_String_element operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline seqPlantList* operator -> () { return _pd_seq; }
    inline const seqPlantList* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator seqPlantList& () const { return *_pd_seq; }
#else
    inline operator const seqPlantList& () const { return *_pd_seq; }
    inline operator seqPlantList& () { return *_pd_seq; }
#endif
      
    inline const seqPlantList& in() const { return *_pd_seq; }
    inline seqPlantList&       inout()    { return *_pd_seq; }
    inline seqPlantList*&      out() {
      if (_pd_seq) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline seqPlantList* _retn() { seqPlantList* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class seqPlantList_out;
    
  private:
    seqPlantList* _pd_seq;
  };

  class seqPlantList_out {
  public:
    inline seqPlantList_out(seqPlantList*& _s) : _data(_s) { _data = 0; }
    inline seqPlantList_out(seqPlantList_var& _s)
      : _data(_s._pd_seq) { _s = (seqPlantList*) 0; }
    inline seqPlantList_out(const seqPlantList_out& _s) : _data(_s._data) {}
    inline seqPlantList_out& operator = (const seqPlantList_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline seqPlantList_out& operator = (seqPlantList* _s) {
      _data = _s;
      return *this;
    }
    inline operator seqPlantList*&()  { return _data; }
    inline seqPlantList*& ptr()       { return _data; }
    inline seqPlantList* operator->() { return _data; }

    inline _CORBA_String_element operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    seqPlantList*& _data;

  private:
    seqPlantList_out();
    seqPlantList_out& operator=(const seqPlantList_var&);
  };

#ifndef __PM_miProcess__Monitor__
#define __PM_miProcess__Monitor__
  class iProcess_Monitor;
  class _objref_iProcess_Monitor;
  class _impl_iProcess_Monitor;
  
  typedef _objref_iProcess_Monitor* iProcess_Monitor_ptr;
  typedef iProcess_Monitor_ptr iProcess_MonitorRef;

  class iProcess_Monitor_Helper {
  public:
    typedef iProcess_Monitor_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_iProcess_Monitor, iProcess_Monitor_Helper> iProcess_Monitor_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_iProcess_Monitor,iProcess_Monitor_Helper > iProcess_Monitor_out;

#endif

  // interface iProcess_Monitor
  class iProcess_Monitor {
  public:
    // Declarations for this interface type.
    typedef iProcess_Monitor_ptr _ptr_type;
    typedef iProcess_Monitor_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static inline _ptr_type _fromObjRef(omniObjRef* o) {
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_iProcess_Monitor :
    public virtual _objref_iData_Provider
  {
  public:
    // IDL operations
    

    // Constructors
    inline _objref_iProcess_Monitor()  { _PR_setobj(0); }  // nil
    _objref_iProcess_Monitor(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_iProcess_Monitor();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_iProcess_Monitor(const _objref_iProcess_Monitor&);
    _objref_iProcess_Monitor& operator = (const _objref_iProcess_Monitor&);
    // not implemented

    friend class iProcess_Monitor;
  };

  class _pof_iProcess_Monitor : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_iProcess_Monitor() : _OMNI_NS(proxyObjectFactory)(iProcess_Monitor::_PD_repoId) {}
    virtual ~_pof_iProcess_Monitor();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_iProcess_Monitor :
    public virtual _impl_iData_Provider
  {
  public:
    virtual ~_impl_iProcess_Monitor();

    
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_iProcess_Monitor;

_CORBA_MODULE_END



_CORBA_MODULE POA_PM
_CORBA_MODULE_BEG

  class iProcess_Monitor :
    public virtual PM::_impl_iProcess_Monitor,
    public virtual POA_iData_Provider
  {
  public:
    virtual ~iProcess_Monitor();

    inline ::PM::iProcess_Monitor_ptr _this() {
      return (::PM::iProcess_Monitor_ptr) _do_this(::PM::iProcess_Monitor::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_PM
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

inline void operator >>=(PM::LOG_ _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (PM::LOG_& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= PM::ELSE_LEVEL) {
    _e = (PM::LOG_) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, PM::LOG_ _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, PM::LOG_& _s);

void operator<<=(::CORBA::Any& _a, const PM::seqPlantList& _s);
void operator<<=(::CORBA::Any& _a, PM::seqPlantList* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, PM::seqPlantList*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const PM::seqPlantList*& _sp);

void operator<<=(::CORBA::Any& _a, PM::iProcess_Monitor_ptr _s);
void operator<<=(::CORBA::Any& _a, PM::iProcess_Monitor_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, PM::iProcess_Monitor_ptr& _s);



inline void
PM::iProcess_Monitor::_marshalObjRef(::PM::iProcess_Monitor_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}



#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_iProcess__Monitor
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_iProcess__Monitor
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_iProcess__Monitor
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_iProcess__Monitor
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_iProcess__Monitor
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_iProcess__Monitor
#endif

#endif  // __iProcess__Monitor_hh__

