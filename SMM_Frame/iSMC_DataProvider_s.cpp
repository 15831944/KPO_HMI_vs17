// This file is generated by omniidl (C++ backend)- omniORB_4_2. Do not edit.

#include "iSMC_DataProvider_s.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_2;



void
sTlgRecordElem::operator>>= (cdrStream &_n) const
{
  _n.marshalString(Name,0);
  Type >>= _n;
  (const ::CORBA::Any&) Value >>= _n;

}

void
sTlgRecordElem::operator<<= (cdrStream &_n)
{
  Name = _n.unmarshalString(0);
  (::CORBA::Long&)Type <<= _n;
  (::CORBA::Any&)Value <<= _n;

}

void
sTlgRecord::operator>>= (cdrStream &_n) const
{
  _n.marshalString(Name,0);
  (const seqTlgRecordElem&) TlgRecordElem >>= _n;

}

void
sTlgRecord::operator<<= (cdrStream &_n)
{
  Name = _n.unmarshalString(0);
  (seqTlgRecordElem&)TlgRecordElem <<= _n;

}

void
sAnalysisString::operator>>= (cdrStream &_n) const
{
  _n.marshalString(Element,0);
  _n.marshalString(Concentration,0);

}

void
sAnalysisString::operator<<= (cdrStream &_n)
{
  Element = _n.unmarshalString(0);
  Concentration = _n.unmarshalString(0);

}

void
sAnalysis::operator>>= (cdrStream &_n) const
{
  _n.marshalString(Element,0);
  Concentration >>= _n;

}

void
sAnalysis::operator<<= (cdrStream &_n)
{
  Element = _n.unmarshalString(0);
  (::CORBA::Double&)Concentration <<= _n;

}

void
sBatch::operator>>= (cdrStream &_n) const
{
  _n.marshalString(MatCode,0);
  Mass >>= _n;
  MatFeedSpeed >>= _n;
  Source >>= _n;
  FeedingRateRel2Energy >>= _n;
  MatLoadingSequence >>= _n;

}

void
sBatch::operator<<= (cdrStream &_n)
{
  MatCode = _n.unmarshalString(0);
  (::CORBA::Double&)Mass <<= _n;
  (::CORBA::Double&)MatFeedSpeed <<= _n;
  (::CORBA::Long&)Source <<= _n;
  (::CORBA::Double&)FeedingRateRel2Energy <<= _n;
  (::CORBA::Long&)MatLoadingSequence <<= _n;

}

void
sEAFBurnerPredRes::operator>>= (cdrStream &_n) const
{
  _n.marshalString(Phase,0);
  PhaseNo >>= _n;
  Step >>= _n;
  _n.marshalString(BurnerName,0);
  BaseMass >>= _n;
  DurStep >>= _n;
  SpecEgy >>= _n;
  ElecEgy >>= _n;
  _n.marshalString(Gastype,0);
  GasFlow >>= _n;
  O2Flow >>= _n;
  ElecEgyStep >>= _n;
  DurUntilEndOfStep >>= _n;
  DurUntilStartOfStep >>= _n;
  SpecEgyStep >>= _n;
  FlameProfile_Burner >>= _n;

}

void
sEAFBurnerPredRes::operator<<= (cdrStream &_n)
{
  Phase = _n.unmarshalString(0);
  (::CORBA::Long&)PhaseNo <<= _n;
  (::CORBA::Long&)Step <<= _n;
  BurnerName = _n.unmarshalString(0);
  (::CORBA::Double&)BaseMass <<= _n;
  (::CORBA::Double&)DurStep <<= _n;
  (::CORBA::Double&)SpecEgy <<= _n;
  (::CORBA::Double&)ElecEgy <<= _n;
  Gastype = _n.unmarshalString(0);
  (::CORBA::Double&)GasFlow <<= _n;
  (::CORBA::Double&)O2Flow <<= _n;
  (::CORBA::Double&)ElecEgyStep <<= _n;
  (::CORBA::Double&)DurUntilEndOfStep <<= _n;
  (::CORBA::Double&)DurUntilStartOfStep <<= _n;
  (::CORBA::Double&)SpecEgyStep <<= _n;
  (::CORBA::Long&)FlameProfile_Burner <<= _n;

}

void
sEAFProcessPredRes::operator>>= (cdrStream &_n) const
{
  _n.marshalString(Phase,0);
  PhaseNo >>= _n;
  DeviceNo >>= _n;
  Step >>= _n;
  VoltTap >>= _n;
  ImpCurve >>= _n;
  ReactorTap >>= _n;
  DurStep >>= _n;
  Temp >>= _n;
  DurUntilEndOfStep >>= _n;
  DurUntilStartOfStep >>= _n;
  SpecEgyStep >>= _n;
  SpecEgy >>= _n;
  ElecEgyStep >>= _n;
  ElecEgy >>= _n;
  O2Flow >>= _n;
  O2Amount >>= _n;
  BaseMass >>= _n;

}

void
sEAFProcessPredRes::operator<<= (cdrStream &_n)
{
  Phase = _n.unmarshalString(0);
  (::CORBA::Long&)PhaseNo <<= _n;
  (::CORBA::Long&)DeviceNo <<= _n;
  (::CORBA::Long&)Step <<= _n;
  (::CORBA::Long&)VoltTap <<= _n;
  (::CORBA::Long&)ImpCurve <<= _n;
  (::CORBA::Long&)ReactorTap <<= _n;
  (::CORBA::Double&)DurStep <<= _n;
  (::CORBA::Double&)Temp <<= _n;
  (::CORBA::Double&)DurUntilEndOfStep <<= _n;
  (::CORBA::Double&)DurUntilStartOfStep <<= _n;
  (::CORBA::Double&)SpecEgyStep <<= _n;
  (::CORBA::Double&)SpecEgy <<= _n;
  (::CORBA::Double&)ElecEgyStep <<= _n;
  (::CORBA::Double&)ElecEgy <<= _n;
  (::CORBA::Double&)O2Flow <<= _n;
  (::CORBA::Double&)O2Amount <<= _n;
  (::CORBA::Double&)BaseMass <<= _n;

}

void
sLFElecPredRes::operator>>= (cdrStream &_n) const
{
  Step >>= _n;
  VoltTap >>= _n;
  ImpCurve >>= _n;
  ElecEgy >>= _n;
  SpecEgy >>= _n;
  StirrIntensity >>= _n;
  StirrFlow >>= _n;
  _n.marshalString(GasType,0);
  Priority >>= _n;
  DurStep >>= _n;
  Enable >>= _n;
  Order >>= _n;
  (const sDate&) RevDate >>= _n;
  _n.marshalString(StirrIntensityCode,0);
  _n.marshalString(ElecPhase,0);
  ElecEgyStep >>= _n;
  DurUntilEndOfStep >>= _n;
  DurUntilStartOfStep >>= _n;
  BaseMass >>= _n;

}

void
sLFElecPredRes::operator<<= (cdrStream &_n)
{
  (::CORBA::Long&)Step <<= _n;
  (::CORBA::Long&)VoltTap <<= _n;
  (::CORBA::Long&)ImpCurve <<= _n;
  (::CORBA::Double&)ElecEgy <<= _n;
  (::CORBA::Double&)SpecEgy <<= _n;
  (::CORBA::Long&)StirrIntensity <<= _n;
  (::CORBA::Double&)StirrFlow <<= _n;
  GasType = _n.unmarshalString(0);
  (::CORBA::Long&)Priority <<= _n;
  (::CORBA::Double&)DurStep <<= _n;
  (::CORBA::Long&)Enable <<= _n;
  (::CORBA::Long&)Order <<= _n;
  (sDate&)RevDate <<= _n;
  StirrIntensityCode = _n.unmarshalString(0);
  ElecPhase = _n.unmarshalString(0);
  (::CORBA::Double&)ElecEgyStep <<= _n;
  (::CORBA::Double&)DurUntilEndOfStep <<= _n;
  (::CORBA::Double&)DurUntilStartOfStep <<= _n;
  (::CORBA::Double&)BaseMass <<= _n;

}

void
sLFStirrPredRes::operator>>= (cdrStream &_n) const
{
  _n.marshalString(StirrPhase,0);
  StirrIntensity >>= _n;
  StirrFlow >>= _n;
  _n.marshalString(GasType,0);
  Priority >>= _n;
  DurStep >>= _n;
  _n.marshalString(StirrIntensityCode,0);
  Enable >>= _n;
  Order >>= _n;
  isPatternOrActivity >>= _n;
  DurUntilEndOfStep >>= _n;
  DurUntilStartOfStep >>= _n;
  VoltTap >>= _n;
  ImpCurve >>= _n;
  ElecEgy >>= _n;
  SteelMass >>= _n;
  SlagMass >>= _n;
  Temp >>= _n;

}

void
sLFStirrPredRes::operator<<= (cdrStream &_n)
{
  StirrPhase = _n.unmarshalString(0);
  (::CORBA::Long&)StirrIntensity <<= _n;
  (::CORBA::Double&)StirrFlow <<= _n;
  GasType = _n.unmarshalString(0);
  (::CORBA::Long&)Priority <<= _n;
  (::CORBA::Double&)DurStep <<= _n;
  StirrIntensityCode = _n.unmarshalString(0);
  (::CORBA::Long&)Enable <<= _n;
  (::CORBA::Long&)Order <<= _n;
  (::CORBA::Long&)isPatternOrActivity <<= _n;
  (::CORBA::Double&)DurUntilEndOfStep <<= _n;
  (::CORBA::Double&)DurUntilStartOfStep <<= _n;
  (::CORBA::Long&)VoltTap <<= _n;
  (::CORBA::Long&)ImpCurve <<= _n;
  (::CORBA::Double&)ElecEgy <<= _n;
  (::CORBA::Double&)SteelMass <<= _n;
  (::CORBA::Double&)SlagMass <<= _n;
  (::CORBA::Double&)Temp <<= _n;

}

void
sMetTimeStamp::operator>>= (cdrStream &_n) const
{
  O2_Moment >>= _n;
  Ar_Moment >>= _n;
  N2_Moment >>= _n;
  Elec_Moment >>= _n;
  DurSinceHeatAnnouncement >>= _n;
  DurSinceStartOfHeat >>= _n;
  (const sDate&) RevDate >>= _n;
  (const sDate&) ActionDate >>= _n;

}

void
sMetTimeStamp::operator<<= (cdrStream &_n)
{
  (::CORBA::Double&)O2_Moment <<= _n;
  (::CORBA::Double&)Ar_Moment <<= _n;
  (::CORBA::Double&)N2_Moment <<= _n;
  (::CORBA::Double&)Elec_Moment <<= _n;
  (::CORBA::Double&)DurSinceHeatAnnouncement <<= _n;
  (::CORBA::Double&)DurSinceStartOfHeat <<= _n;
  (sDate&)RevDate <<= _n;
  (sDate&)ActionDate <<= _n;

}

void
sRecipeProperties::operator>>= (cdrStream &_n) const
{
  RecipeStatus >>= _n;
  HomogDuration >>= _n;
  TotalMass >>= _n;
  BulkVolume >>= _n;

}

void
sRecipeProperties::operator<<= (cdrStream &_n)
{
  (::CORBA::Long&)RecipeStatus <<= _n;
  (::CORBA::Double&)HomogDuration <<= _n;
  (::CORBA::Double&)TotalMass <<= _n;
  (::CORBA::Double&)BulkVolume <<= _n;

}

void
sEAFMatFeed::operator>>= (cdrStream &_n) const
{
  _n.marshalString(Phase,0);
  PhaseNo >>= _n;
  Step >>= _n;
  DurStep >>= _n;
  SpecEgy >>= _n;
  (const seqBatch&) MatFeed >>= _n;

}

void
sEAFMatFeed::operator<<= (cdrStream &_n)
{
  Phase = _n.unmarshalString(0);
  (::CORBA::Long&)PhaseNo <<= _n;
  (::CORBA::Long&)Step <<= _n;
  (::CORBA::Double&)DurStep <<= _n;
  (::CORBA::Double&)SpecEgy <<= _n;
  (seqBatch&)MatFeed <<= _n;

}

void
sAODGlobalSetpoints::operator>>= (cdrStream &_n) const
{
  O2VolStartMatAddn >>= _n;
  O2VolStartScrapChute >>= _n;
  O2VolSubLance >>= _n;
  O2VolTotal >>= _n;
  O2VolTotalLance >>= _n;
  N2VolTotal >>= _n;
  MatFeedRate >>= _n;
  MatDynFeedRate >>= _n;
  O2VolStartMatDynAddn >>= _n;
  AimTapWeightCalc >>= _n;
  DurStartMatAddn >>= _n;
  DurStartMatDynAddn >>= _n;
  DurStartScrapChute >>= _n;
  DurSubLance >>= _n;
  O2VolStartMat2ndAddn >>= _n;
  DurStartMat2ndAddn >>= _n;
  MatFeedRate2ndAdd >>= _n;
  O2VolSwN2toAr >>= _n;
  DurUntilN2ToAr >>= _n;
  N2VolSwN2toAr >>= _n;
  AimSteelMassCalc >>= _n;
  Duration >>= _n;
  LanceO2Flow >>= _n;
  LanceN2Flow >>= _n;
  LanceArFlow >>= _n;
  TuyereO2Flow >>= _n;
  TuyereN2Flow >>= _n;
  TuyereArFlow >>= _n;
  LanceDepth >>= _n;
  CalcSteelWeight >>= _n;
  CalcSlagWeight >>= _n;
  CalcTemp >>= _n;
  DecarbDelta >>= _n;

}

void
sAODGlobalSetpoints::operator<<= (cdrStream &_n)
{
  (::CORBA::Double&)O2VolStartMatAddn <<= _n;
  (::CORBA::Double&)O2VolStartScrapChute <<= _n;
  (::CORBA::Double&)O2VolSubLance <<= _n;
  (::CORBA::Double&)O2VolTotal <<= _n;
  (::CORBA::Double&)O2VolTotalLance <<= _n;
  (::CORBA::Double&)N2VolTotal <<= _n;
  (::CORBA::Double&)MatFeedRate <<= _n;
  (::CORBA::Double&)MatDynFeedRate <<= _n;
  (::CORBA::Double&)O2VolStartMatDynAddn <<= _n;
  (::CORBA::Double&)AimTapWeightCalc <<= _n;
  (::CORBA::Double&)DurStartMatAddn <<= _n;
  (::CORBA::Double&)DurStartMatDynAddn <<= _n;
  (::CORBA::Double&)DurStartScrapChute <<= _n;
  (::CORBA::Double&)DurSubLance <<= _n;
  (::CORBA::Double&)O2VolStartMat2ndAddn <<= _n;
  (::CORBA::Double&)DurStartMat2ndAddn <<= _n;
  (::CORBA::Double&)MatFeedRate2ndAdd <<= _n;
  (::CORBA::Double&)O2VolSwN2toAr <<= _n;
  (::CORBA::Double&)DurUntilN2ToAr <<= _n;
  (::CORBA::Double&)N2VolSwN2toAr <<= _n;
  (::CORBA::Double&)AimSteelMassCalc <<= _n;
  (::CORBA::Double&)Duration <<= _n;
  (::CORBA::Double&)LanceO2Flow <<= _n;
  (::CORBA::Double&)LanceN2Flow <<= _n;
  (::CORBA::Double&)LanceArFlow <<= _n;
  (::CORBA::Double&)TuyereO2Flow <<= _n;
  (::CORBA::Double&)TuyereN2Flow <<= _n;
  (::CORBA::Double&)TuyereArFlow <<= _n;
  (::CORBA::Double&)LanceDepth <<= _n;
  (::CORBA::Double&)CalcSteelWeight <<= _n;
  (::CORBA::Double&)CalcSlagWeight <<= _n;
  (::CORBA::Double&)CalcTemp <<= _n;
  (::CORBA::Double&)DecarbDelta <<= _n;

}

void
sGenRes::operator>>= (cdrStream &_n) const
{
  (const seqAnalysis&) Analysis >>= _n;
  SteelWeight >>= _n;
  SlagWeight >>= _n;
  Temp >>= _n;
  DurPhase >>= _n;
  (const sMetTimeStamp&) MetTimeStamp >>= _n;

}

void
sGenRes::operator<<= (cdrStream &_n)
{
  (seqAnalysis&)Analysis <<= _n;
  (::CORBA::Double&)SteelWeight <<= _n;
  (::CORBA::Double&)SlagWeight <<= _n;
  (::CORBA::Double&)Temp <<= _n;
  (::CORBA::Double&)DurPhase <<= _n;
  (sMetTimeStamp&)MetTimeStamp <<= _n;

}

void
sAODPredBlowRes::operator>>= (cdrStream &_n) const
{
  _n.marshalString(Phase,0);
  PhaseNo >>= _n;
  O2Vol >>= _n;
  TopLanceO2Flow >>= _n;
  TopLanceN2Flow >>= _n;
  TopLanceArFlow >>= _n;
  TopLanceO2Cons >>= _n;
  TopLanceArCons >>= _n;
  TopLanceN2Cons >>= _n;
  TuyerO2Flow >>= _n;
  TuyerN2Flow >>= _n;
  TuyerArFlow >>= _n;
  TuyerO2Cons >>= _n;
  TuyerArCons >>= _n;
  TuyerN2Cons >>= _n;
  DecarbRate >>= _n;
  ChromDeslagRate >>= _n;
  TopLanceHeight >>= _n;
  PhaseActive >>= _n;
  (const sGenRes&) GenRes >>= _n;

}

void
sAODPredBlowRes::operator<<= (cdrStream &_n)
{
  Phase = _n.unmarshalString(0);
  (::CORBA::Long&)PhaseNo <<= _n;
  (::CORBA::Double&)O2Vol <<= _n;
  (::CORBA::Double&)TopLanceO2Flow <<= _n;
  (::CORBA::Double&)TopLanceN2Flow <<= _n;
  (::CORBA::Double&)TopLanceArFlow <<= _n;
  (::CORBA::Double&)TopLanceO2Cons <<= _n;
  (::CORBA::Double&)TopLanceArCons <<= _n;
  (::CORBA::Double&)TopLanceN2Cons <<= _n;
  (::CORBA::Double&)TuyerO2Flow <<= _n;
  (::CORBA::Double&)TuyerN2Flow <<= _n;
  (::CORBA::Double&)TuyerArFlow <<= _n;
  (::CORBA::Double&)TuyerO2Cons <<= _n;
  (::CORBA::Double&)TuyerArCons <<= _n;
  (::CORBA::Double&)TuyerN2Cons <<= _n;
  (::CORBA::Double&)DecarbRate <<= _n;
  (::CORBA::Double&)ChromDeslagRate <<= _n;
  (::CORBA::Double&)TopLanceHeight <<= _n;
  (::CORBA::Long&)PhaseActive <<= _n;
  (sGenRes&)GenRes <<= _n;

}

void
sPredRes::operator>>= (cdrStream &_n) const
{
  _n.marshalString(Phase,0);
  PhaseNo >>= _n;
  (const sGenRes&) GenRes >>= _n;
  PhaseActive >>= _n;

}

void
sPredRes::operator<<= (cdrStream &_n)
{
  Phase = _n.unmarshalString(0);
  (::CORBA::Long&)PhaseNo <<= _n;
  (sGenRes&)GenRes <<= _n;
  (::CORBA::Long&)PhaseActive <<= _n;

}

void
sCoolWater::operator>>= (cdrStream &_n) const
{
  _n.marshalString(CircuitName,0);
  WaterFlow >>= _n;
  OutletTemp >>= _n;
  InletTemp >>= _n;

}

void
sCoolWater::operator<<= (cdrStream &_n)
{
  CircuitName = _n.unmarshalString(0);
  (::CORBA::Double&)WaterFlow <<= _n;
  (::CORBA::Double&)OutletTemp <<= _n;
  (::CORBA::Double&)InletTemp <<= _n;

}

void
sComputerMode::operator>>= (cdrStream &_n) const
{
  _n.marshalString(Device,0);
  Status >>= _n;

}

void
sComputerMode::operator<<= (cdrStream &_n)
{
  Device = _n.unmarshalString(0);
  (::CORBA::Long&)Status <<= _n;

}

void
sCoolWaterDevice::operator>>= (cdrStream &_n) const
{
  CoolWaterDeviceNo >>= _n;
  _n.marshalString(CoolWaterDevice,0);
  (const sCoolWater&) CoolWaterData >>= _n;

}

void
sCoolWaterDevice::operator<<= (cdrStream &_n)
{
  (::CORBA::Long&)CoolWaterDeviceNo <<= _n;
  CoolWaterDevice = _n.unmarshalString(0);
  (sCoolWater&)CoolWaterData <<= _n;

}

void
sWireFeeder::operator>>= (cdrStream &_n) const
{
  WireFeederLineNo >>= _n;
  _n.marshalString(WireFeederMatCode,0);
  WireFeedSpeed >>= _n;
  WireFeederAmount >>= _n;

}

void
sWireFeeder::operator<<= (cdrStream &_n)
{
  (::CORBA::Long&)WireFeederLineNo <<= _n;
  WireFeederMatCode = _n.unmarshalString(0);
  (::CORBA::Double&)WireFeedSpeed <<= _n;
  (::CORBA::Double&)WireFeederAmount <<= _n;

}

void
sGasData::operator>>= (cdrStream &_n) const
{
  _n.marshalString(GasType,0);
  GasValue >>= _n;

}

void
sGasData::operator<<= (cdrStream &_n)
{
  GasType = _n.unmarshalString(0);
  (::CORBA::Double&)GasValue <<= _n;

}

void
sGasLanceData::operator>>= (cdrStream &_n) const
{
  (const seqGasData&) LanceData >>= _n;
  _n.marshalString(Device,0);

}

void
sGasLanceData::operator<<= (cdrStream &_n)
{
  (seqGasData&)LanceData <<= _n;
  Device = _n.unmarshalString(0);

}

void
sDeviceGasData::operator>>= (cdrStream &_n) const
{
  _n.marshalString(Device,0);
  (const seqGasData&) GasData >>= _n;

}

void
sDeviceGasData::operator<<= (cdrStream &_n)
{
  Device = _n.unmarshalString(0);
  (seqGasData&)GasData <<= _n;

}

void
sEAFGasLancePredRes::operator>>= (cdrStream &_n) const
{
  _n.marshalString(Phase,0);
  PhaseNo >>= _n;
  Step >>= _n;
  DurStep >>= _n;
  (const seqDeviceGasData&) GasFlow >>= _n;
  ElecEgy >>= _n;
  DurUntilEndOfStep >>= _n;
  DurUntilStartOfStep >>= _n;
  SpecEgyStep >>= _n;
  ElecEgyStep >>= _n;
  SpecEgy >>= _n;
  BaseMass >>= _n;
  (const seqDeviceGasData&) GasAmount >>= _n;

}

void
sEAFGasLancePredRes::operator<<= (cdrStream &_n)
{
  Phase = _n.unmarshalString(0);
  (::CORBA::Long&)PhaseNo <<= _n;
  (::CORBA::Long&)Step <<= _n;
  (::CORBA::Double&)DurStep <<= _n;
  (seqDeviceGasData&)GasFlow <<= _n;
  (::CORBA::Double&)ElecEgy <<= _n;
  (::CORBA::Double&)DurUntilEndOfStep <<= _n;
  (::CORBA::Double&)DurUntilStartOfStep <<= _n;
  (::CORBA::Double&)SpecEgyStep <<= _n;
  (::CORBA::Double&)ElecEgyStep <<= _n;
  (::CORBA::Double&)SpecEgy <<= _n;
  (::CORBA::Double&)BaseMass <<= _n;
  (seqDeviceGasData&)GasAmount <<= _n;

}

void
sGasAvail::operator>>= (cdrStream &_n) const
{
  _n.marshalString(GasType,0);
  GasAvail >>= _n;

}

void
sGasAvail::operator<<= (cdrStream &_n)
{
  GasType = _n.unmarshalString(0);
  (::CORBA::Long&)GasAvail <<= _n;

}

void
sWasteGas::operator>>= (cdrStream &_n) const
{
  _n.marshalString(WasteGasType,0);
  WasteGasConc >>= _n;

}

void
sWasteGas::operator<<= (cdrStream &_n)
{
  WasteGasType = _n.unmarshalString(0);
  (::CORBA::Double&)WasteGasConc <<= _n;

}

void
sBlowStatus::operator>>= (cdrStream &_n) const
{
  _n.marshalString(BlowDevice,0);
  BlowStatus >>= _n;
  (const sDate&) BlowTime >>= _n;

}

void
sBlowStatus::operator<<= (cdrStream &_n)
{
  BlowDevice = _n.unmarshalString(0);
  (::CORBA::Long&)BlowStatus <<= _n;
  (sDate&)BlowTime <<= _n;

}

void
sStatus::operator>>= (cdrStream &_n) const
{
  _n.marshalString(Device,0);
  Status >>= _n;
  _n.marshalString(StatusName,0);
  (const sDate&) EndTime >>= _n;
  (const sDate&) StartTime >>= _n;

}

void
sStatus::operator<<= (cdrStream &_n)
{
  Device = _n.unmarshalString(0);
  (::CORBA::Long&)Status <<= _n;
  StatusName = _n.unmarshalString(0);
  (sDate&)EndTime <<= _n;
  (sDate&)StartTime <<= _n;

}

void
sHeatSchedulePlant::operator>>= (cdrStream &_n) const
{
  _n.marshalString(Plant,0);
  _n.marshalString(TreatID,0);
  (const sDate&) TreatStartPlan >>= _n;
  (const sDate&) TreatEndPlan >>= _n;
  PlantNo >>= _n;

}

void
sHeatSchedulePlant::operator<<= (cdrStream &_n)
{
  Plant = _n.unmarshalString(0);
  TreatID = _n.unmarshalString(0);
  (sDate&)TreatStartPlan <<= _n;
  (sDate&)TreatEndPlan <<= _n;
  (::CORBA::Long&)PlantNo <<= _n;

}

void
sHeatSchedule::operator>>= (cdrStream &_n) const
{
  _n.marshalString(HeatId,0);
  _n.marshalString(OrderId,0);
  _n.marshalString(RouteCode,0);
  _n.marshalString(CasterSeqId,0);
  CasterSeqNo >>= _n;
  ActionFlag >>= _n;
  (const seqHeatSchedulePlant&) HeatPlant >>= _n;

}

void
sHeatSchedule::operator<<= (cdrStream &_n)
{
  HeatId = _n.unmarshalString(0);
  OrderId = _n.unmarshalString(0);
  RouteCode = _n.unmarshalString(0);
  CasterSeqId = _n.unmarshalString(0);
  (::CORBA::Long&)CasterSeqNo <<= _n;
  (::CORBA::Long&)ActionFlag <<= _n;
  (seqHeatSchedulePlant&)HeatPlant <<= _n;

}

void
sOrderData::operator>>= (cdrStream &_n) const
{
  _n.marshalString(SteelGradeCode,0);
  _n.marshalString(OrderId,0);
  AimSteelEAF >>= _n;
  ActionFlag >>= _n;
  AimSteelCCS >>= _n;
  _n.marshalString(SlabDimension,0);

}

void
sOrderData::operator<<= (cdrStream &_n)
{
  SteelGradeCode = _n.unmarshalString(0);
  OrderId = _n.unmarshalString(0);
  (::CORBA::Double&)AimSteelEAF <<= _n;
  (::CORBA::Long&)ActionFlag <<= _n;
  (::CORBA::Double&)AimSteelCCS <<= _n;
  SlabDimension = _n.unmarshalString(0);

}

void
sSampleData::operator>>= (cdrStream &_n) const
{
  _n.marshalString(SampleCode,0);
  (const sDate&) SampleTime >>= _n;
  SampleNo >>= _n;
  SampleType >>= _n;
  _n.marshalString(PlantID,0);
  _n.marshalString(ProcessStage,0);
  _n.marshalString(SampleId,0);
  SampleMode >>= _n;
  _n.marshalString(SampleLocation,0);
  SampleOrigin >>= _n;
  SampleUsable >>= _n;

}

void
sSampleData::operator<<= (cdrStream &_n)
{
  SampleCode = _n.unmarshalString(0);
  (sDate&)SampleTime <<= _n;
  (::CORBA::Long&)SampleNo <<= _n;
  (::CORBA::Long&)SampleType <<= _n;
  PlantID = _n.unmarshalString(0);
  ProcessStage = _n.unmarshalString(0);
  SampleId = _n.unmarshalString(0);
  (::CORBA::Long&)SampleMode <<= _n;
  SampleLocation = _n.unmarshalString(0);
  (::CORBA::Long&)SampleOrigin <<= _n;
  (::CORBA::Long&)SampleUsable <<= _n;

}

void
sAnalysisData::operator>>= (cdrStream &_n) const
{
  (const sSampleData&) SampleData >>= _n;
  (const seqAnalysis&) Analysis >>= _n;

}

void
sAnalysisData::operator<<= (cdrStream &_n)
{
  (sSampleData&)SampleData <<= _n;
  (seqAnalysis&)Analysis <<= _n;

}

void
sHeatData::operator>>= (cdrStream &_n) const
{
  _n.marshalString(Plant,0);
  _n.marshalString(HeatId,0);
  _n.marshalString(Device,0);
  _n.marshalString(TreatId,0);

}

void
sHeatData::operator<<= (cdrStream &_n)
{
  Plant = _n.unmarshalString(0);
  HeatId = _n.unmarshalString(0);
  Device = _n.unmarshalString(0);
  TreatId = _n.unmarshalString(0);

}

void
sInjectLanceData::operator>>= (cdrStream &_n) const
{
  _n.marshalString(Device,0);
  Value >>= _n;
  _n.marshalString(MatCode,0);
  _n.marshalString(InjectionType,0);
  _n.marshalString(ModuleName,0);

}

void
sInjectLanceData::operator<<= (cdrStream &_n)
{
  Device = _n.unmarshalString(0);
  (::CORBA::Double&)Value <<= _n;
  MatCode = _n.unmarshalString(0);
  InjectionType = _n.unmarshalString(0);
  ModuleName = _n.unmarshalString(0);

}

void
sGasLanceGasAvail::operator>>= (cdrStream &_n) const
{
  _n.marshalString(Device,0);
  (const seqGasAvail&) GasAvail >>= _n;

}

void
sGasLanceGasAvail::operator<<= (cdrStream &_n)
{
  Device = _n.unmarshalString(0);
  (seqGasAvail&)GasAvail <<= _n;

}

void
sBatchPrio::operator>>= (cdrStream &_n) const
{
  (const sBatch&) BatchData >>= _n;
  ChargPrio >>= _n;

}

void
sBatchPrio::operator<<= (cdrStream &_n)
{
  (sBatch&)BatchData <<= _n;
  (::CORBA::Long&)ChargPrio <<= _n;

}

void
LFGlobalSetpoints::operator>>= (cdrStream &_n) const
{
  _n.marshalString(GasType,0);

}

void
LFGlobalSetpoints::operator<<= (cdrStream &_n)
{
  GasType = _n.unmarshalString(0);

}

void
sLiqMatReport::operator>>= (cdrStream &_n) const
{
  WeighingType >>= _n;
  _n.marshalString(LiqMatType,0);
  LiqMatWeight >>= _n;

}

void
sLiqMatReport::operator<<= (cdrStream &_n)
{
  (::CORBA::Long&)WeighingType <<= _n;
  LiqMatType = _n.unmarshalString(0);
  (::CORBA::Double&)LiqMatWeight <<= _n;

}

void
sBOFPredBlowRes::operator>>= (cdrStream &_n) const
{
  _n.marshalString(Phase,0);
  PhaseNo >>= _n;
  PhaseActive >>= _n;
  O2Vol >>= _n;
  TopLanceO2Flow >>= _n;
  TopLanceHeight >>= _n;
  PorousPlugN2Flow >>= _n;
  PorousPlugArFlow >>= _n;
  O2MomentPorPlugs >>= _n;
  DecarbRate >>= _n;
  O2MomentTopLance >>= _n;
  (const sGenRes&) GenRes >>= _n;

}

void
sBOFPredBlowRes::operator<<= (cdrStream &_n)
{
  Phase = _n.unmarshalString(0);
  (::CORBA::Long&)PhaseNo <<= _n;
  (::CORBA::Long&)PhaseActive <<= _n;
  (::CORBA::Double&)O2Vol <<= _n;
  (::CORBA::Double&)TopLanceO2Flow <<= _n;
  (::CORBA::Double&)TopLanceHeight <<= _n;
  (::CORBA::Double&)PorousPlugN2Flow <<= _n;
  (::CORBA::Double&)PorousPlugArFlow <<= _n;
  (::CORBA::Double&)O2MomentPorPlugs <<= _n;
  (::CORBA::Double&)DecarbRate <<= _n;
  (::CORBA::Double&)O2MomentTopLance <<= _n;
  (sGenRes&)GenRes <<= _n;

}

void
sInjectData::operator>>= (cdrStream &_n) const
{
  _n.marshalString(InjectMatCode,0);
  InjectMatValue >>= _n;
  _n.marshalString(InjectType,0);

}

void
sInjectData::operator<<= (cdrStream &_n)
{
  InjectMatCode = _n.unmarshalString(0);
  (::CORBA::Double&)InjectMatValue <<= _n;
  InjectType = _n.unmarshalString(0);

}

void
sEAFInjectLance::operator>>= (cdrStream &_n) const
{
  _n.marshalString(Phase,0);
  PhaseNo >>= _n;
  Step >>= _n;
  DurStep >>= _n;
  Egy >>= _n;
  RemEgy >>= _n;
  DurUntilEndOfStep >>= _n;
  DurUntilStartOfStep >>= _n;
  SpecEgyStep >>= _n;
  ElecEgyStep >>= _n;
  SpecEgy >>= _n;
  BaseMass >>= _n;
  (const seqInjectLanceData&) InjectFlow >>= _n;
  (const seqInjectLanceData&) InjectAmount >>= _n;

}

void
sEAFInjectLance::operator<<= (cdrStream &_n)
{
  Phase = _n.unmarshalString(0);
  (::CORBA::Long&)PhaseNo <<= _n;
  (::CORBA::Long&)Step <<= _n;
  (::CORBA::Double&)DurStep <<= _n;
  (::CORBA::Double&)Egy <<= _n;
  (::CORBA::Double&)RemEgy <<= _n;
  (::CORBA::Double&)DurUntilEndOfStep <<= _n;
  (::CORBA::Double&)DurUntilStartOfStep <<= _n;
  (::CORBA::Double&)SpecEgyStep <<= _n;
  (::CORBA::Double&)ElecEgyStep <<= _n;
  (::CORBA::Double&)SpecEgy <<= _n;
  (::CORBA::Double&)BaseMass <<= _n;
  (seqInjectLanceData&)InjectFlow <<= _n;
  (seqInjectLanceData&)InjectAmount <<= _n;

}

void
sHMDCalc::operator>>= (cdrStream &_n) const
{
  (const DEF::seqDouble&) Lime >>= _n;
  (const seqBatchPrio&) Material >>= _n;
  (const seqAnalysis&) Analysis >>= _n;
  (const DEF::seqDouble&) Carbide >>= _n;
  (const DEF::seqDouble&) Magnesium >>= _n;

}

void
sHMDCalc::operator<<= (cdrStream &_n)
{
  (DEF::seqDouble&)Lime <<= _n;
  (seqBatchPrio&)Material <<= _n;
  (seqAnalysis&)Analysis <<= _n;
  (DEF::seqDouble&)Carbide <<= _n;
  (DEF::seqDouble&)Magnesium <<= _n;

}

void
sConArcElecData::operator>>= (cdrStream &_n) const
{
  BasketNo >>= _n;
  ReactTapNo >>= _n;
  TransfTapNo >>= _n;
  ArcLenNo >>= _n;
  DurUntilEndOfStep >>= _n;
  DurUntilStartOfStep >>= _n;
  SpecEgyStep >>= _n;
  SpecEgy >>= _n;
  ElecEgyStep >>= _n;
  ElecEgy >>= _n;
  EnergyStart >>= _n;

}

void
sConArcElecData::operator<<= (cdrStream &_n)
{
  (::CORBA::Long&)BasketNo <<= _n;
  (::CORBA::Long&)ReactTapNo <<= _n;
  (::CORBA::Long&)TransfTapNo <<= _n;
  (::CORBA::Long&)ArcLenNo <<= _n;
  (::CORBA::Double&)DurUntilEndOfStep <<= _n;
  (::CORBA::Double&)DurUntilStartOfStep <<= _n;
  (::CORBA::Double&)SpecEgyStep <<= _n;
  (::CORBA::Double&)SpecEgy <<= _n;
  (::CORBA::Double&)ElecEgyStep <<= _n;
  (::CORBA::Double&)ElecEgy <<= _n;
  (::CORBA::Double&)EnergyStart <<= _n;

}

void
sConArcMediaData::operator>>= (cdrStream &_n) const
{
  _n.marshalString(DeviceName,0);
  DeviceNo >>= _n;
  MediaTypeSelect >>= _n;
  _n.marshalString(MediaType,0);
  Flow >>= _n;
  Cons >>= _n;

}

void
sConArcMediaData::operator<<= (cdrStream &_n)
{
  DeviceName = _n.unmarshalString(0);
  (::CORBA::Long&)DeviceNo <<= _n;
  (::CORBA::Long&)MediaTypeSelect <<= _n;
  MediaType = _n.unmarshalString(0);
  (::CORBA::Double&)Flow <<= _n;
  (::CORBA::Double&)Cons <<= _n;

}

void
sConArcSetptData::operator>>= (cdrStream &_n) const
{
  EgyTotal >>= _n;
  (const seqConArcMediaData&) MediaData >>= _n;
  (const sConArcElecData&) ElecData >>= _n;
  (const seqConArcMediaData&) MatFeedTotalMass >>= _n;

}

void
sConArcSetptData::operator<<= (cdrStream &_n)
{
  (::CORBA::Double&)EgyTotal <<= _n;
  (seqConArcMediaData&)MediaData <<= _n;
  (sConArcElecData&)ElecData <<= _n;
  (seqConArcMediaData&)MatFeedTotalMass <<= _n;

}

void
sConArcMeasData::operator>>= (cdrStream &_n) const
{
  SlagQuality >>= _n;
  (const seqConArcMediaData&) MediaData >>= _n;
  (const sConArcElecData&) ElecData >>= _n;

}

void
sConArcMeasData::operator<<= (cdrStream &_n)
{
  (::CORBA::Double&)SlagQuality <<= _n;
  (seqConArcMediaData&)MediaData <<= _n;
  (sConArcElecData&)ElecData <<= _n;

}

void
sEAFMatFeedPredRes::operator>>= (cdrStream &_n) const
{
  BasketNo >>= _n;
  Step >>= _n;
  DurStep >>= _n;
  DurUntilStartOfStep >>= _n;
  DurUntilEndOfStep >>= _n;
  Egy >>= _n;
  SpecEgy >>= _n;
  ElecEgyStep >>= _n;
  BaseMass >>= _n;
  (const seqBatch&) MatFeedData >>= _n;
  _n.marshalString(PhaseName,0);
  SpecEgyStep >>= _n;

}

void
sEAFMatFeedPredRes::operator<<= (cdrStream &_n)
{
  (::CORBA::Long&)BasketNo <<= _n;
  (::CORBA::Long&)Step <<= _n;
  (::CORBA::Double&)DurStep <<= _n;
  (::CORBA::Double&)DurUntilStartOfStep <<= _n;
  (::CORBA::Double&)DurUntilEndOfStep <<= _n;
  (::CORBA::Double&)Egy <<= _n;
  (::CORBA::Double&)SpecEgy <<= _n;
  (::CORBA::Double&)ElecEgyStep <<= _n;
  (::CORBA::Double&)BaseMass <<= _n;
  (seqBatch&)MatFeedData <<= _n;
  PhaseName = _n.unmarshalString(0);
  (::CORBA::Double&)SpecEgyStep <<= _n;

}

void
sPhaseStatus::operator>>= (cdrStream &_n) const
{
  _n.marshalString(PhaseName,0);
  Status >>= _n;

}

void
sPhaseStatus::operator<<= (cdrStream &_n)
{
  PhaseName = _n.unmarshalString(0);
  (::CORBA::Long&)Status <<= _n;

}

void
sMaterial::operator>>= (cdrStream &_n) const
{
  _n.marshalString(MatCode,0);
  MatWeight >>= _n;
  _n.marshalString(Purpose,0);
  SourceNo >>= _n;
  Source >>= _n;

}

void
sMaterial::operator<<= (cdrStream &_n)
{
  MatCode = _n.unmarshalString(0);
  (::CORBA::Double&)MatWeight <<= _n;
  Purpose = _n.unmarshalString(0);
  (::CORBA::Long&)SourceNo <<= _n;
  (::CORBA::Long&)Source <<= _n;

}

void
sStirringData::operator>>= (cdrStream &_n) const
{
  _n.marshalString(Device,0);
  (const seqGasData&) GasData >>= _n;

}

void
sStirringData::operator<<= (cdrStream &_n)
{
  Device = _n.unmarshalString(0);
  (seqGasData&)GasData <<= _n;

}

void
sProductIdentification::operator>>= (cdrStream &_n) const
{
  _n.marshalString(HeatId,0);
  _n.marshalString(TreatId,0);
  _n.marshalString(OrderId,0);
  _n.marshalString(Plant,0);

}

void
sProductIdentification::operator<<= (cdrStream &_n)
{
  HeatId = _n.unmarshalString(0);
  TreatId = _n.unmarshalString(0);
  OrderId = _n.unmarshalString(0);
  Plant = _n.unmarshalString(0);

}

void
sRecipe::operator>>= (cdrStream &_n) const
{
  _n.marshalString(RecipeName,0);
  RecipeNo >>= _n;
  _n.marshalString(RecipeSource,0);
  (const seqBatchPrio&) RecipeContent >>= _n;
  (const sMetTimeStamp&) TimeStamp >>= _n;
  (const sProductIdentification&) Product >>= _n;
  (const sRecipeProperties&) RecipeData >>= _n;
  MatFeedRate >>= _n;
  ChargeMoment >>= _n;
  _n.marshalString(RecipeName_Model,0);
  RecipeNo_Model >>= _n;

}

void
sRecipe::operator<<= (cdrStream &_n)
{
  RecipeName = _n.unmarshalString(0);
  (::CORBA::Long&)RecipeNo <<= _n;
  RecipeSource = _n.unmarshalString(0);
  (seqBatchPrio&)RecipeContent <<= _n;
  (sMetTimeStamp&)TimeStamp <<= _n;
  (sProductIdentification&)Product <<= _n;
  (sRecipeProperties&)RecipeData <<= _n;
  (::CORBA::Double&)MatFeedRate <<= _n;
  (::CORBA::Double&)ChargeMoment <<= _n;
  RecipeName_Model = _n.unmarshalString(0);
  (::CORBA::Long&)RecipeNo_Model <<= _n;

}

void
sHMDModelResult::operator>>= (cdrStream &_n) const
{
  TreatmentKind >>= _n;
  (const seqHMDCalc&) CalcAmount >>= _n;
  (const seqHMDCalc&) CalcFlow >>= _n;
  (const DEF::seqDouble&) SlagAmount >>= _n;
  (const DEF::seqDouble&) DurationDeslagging >>= _n;
  (const DEF::seqDouble&) TemperatureAfter >>= _n;
  (const DEF::seqDouble&) Cost >>= _n;
  (const DEF::seqDouble&) Duration >>= _n;
  IWarn >>= _n;

}

void
sHMDModelResult::operator<<= (cdrStream &_n)
{
  (::CORBA::Long&)TreatmentKind <<= _n;
  (seqHMDCalc&)CalcAmount <<= _n;
  (seqHMDCalc&)CalcFlow <<= _n;
  (DEF::seqDouble&)SlagAmount <<= _n;
  (DEF::seqDouble&)DurationDeslagging <<= _n;
  (DEF::seqDouble&)TemperatureAfter <<= _n;
  (DEF::seqDouble&)Cost <<= _n;
  (DEF::seqDouble&)Duration <<= _n;
  (::CORBA::Long&)IWarn <<= _n;

}

void
sRHModelResult::operator>>= (cdrStream &_n) const
{
  PhaseNo >>= _n;
  Res_PhaseNoModel >>= _n;
  TotDurPhase >>= _n;
  (const seqRecipeList&) Alloy >>= _n;
  TempDiffAlloy >>= _n;
  (const seqAnalysis&) Analysis >>= _n;
  SlagWeight >>= _n;
  SteelWeight >>= _n;
  _n.marshalString(PhaseCodeModel,0);
  _n.marshalString(PhaseName,0);
  HeatTemp >>= _n;
  TempDiffPassive >>= _n;
  OxygenAmount >>= _n;
  OxygenFlow >>= _n;
  PowderFlow >>= _n;
  LanceDist >>= _n;
  DurSinceHeatAnnouncement >>= _n;
  RemDur >>= _n;
  AlHeat >>= _n;
  AlAlloy >>= _n;
  AlDeox >>= _n;
  VacuumPressure >>= _n;
  DNTime >>= _n;
  DHTime >>= _n;
  TempDiffStep >>= _n;
  LiftGasFlow >>= _n;
  VacCurve >>= _n;
  StirrIntensity >>= _n;
  StirrGasFlow >>= _n;
  _n.marshalString(StirrGasType,0);

}

void
sRHModelResult::operator<<= (cdrStream &_n)
{
  (::CORBA::Long&)PhaseNo <<= _n;
  (::CORBA::Long&)Res_PhaseNoModel <<= _n;
  (::CORBA::Double&)TotDurPhase <<= _n;
  (seqRecipeList&)Alloy <<= _n;
  (::CORBA::Double&)TempDiffAlloy <<= _n;
  (seqAnalysis&)Analysis <<= _n;
  (::CORBA::Double&)SlagWeight <<= _n;
  (::CORBA::Double&)SteelWeight <<= _n;
  PhaseCodeModel = _n.unmarshalString(0);
  PhaseName = _n.unmarshalString(0);
  (::CORBA::Double&)HeatTemp <<= _n;
  (::CORBA::Double&)TempDiffPassive <<= _n;
  (::CORBA::Double&)OxygenAmount <<= _n;
  (::CORBA::Double&)OxygenFlow <<= _n;
  (::CORBA::Double&)PowderFlow <<= _n;
  (::CORBA::Double&)LanceDist <<= _n;
  (::CORBA::Double&)DurSinceHeatAnnouncement <<= _n;
  (::CORBA::Double&)RemDur <<= _n;
  (::CORBA::Double&)AlHeat <<= _n;
  (::CORBA::Double&)AlAlloy <<= _n;
  (::CORBA::Double&)AlDeox <<= _n;
  (::CORBA::Double&)VacuumPressure <<= _n;
  (::CORBA::Double&)DNTime <<= _n;
  (::CORBA::Double&)DHTime <<= _n;
  (::CORBA::Double&)TempDiffStep <<= _n;
  (::CORBA::Double&)LiftGasFlow <<= _n;
  (::CORBA::Long&)VacCurve <<= _n;
  (::CORBA::Long&)StirrIntensity <<= _n;
  (::CORBA::Double&)StirrGasFlow <<= _n;
  StirrGasType = _n.unmarshalString(0);

}

void
sElecPhaseData::operator>>= (cdrStream &_n) const
{
  PhaseNo >>= _n;
  _n.marshalString(PhaseName,0);
  PhaseType >>= _n;
  (const sDate&) StartTime >>= _n;
  (const sDate&) EndTime >>= _n;
  Duration >>= _n;
  ElecCons >>= _n;
  ElecConsStart >>= _n;
  (const seqGasData&) GasData >>= _n;
  (const seqGasData&) GasDataStart >>= _n;

}

void
sElecPhaseData::operator<<= (cdrStream &_n)
{
  (::CORBA::Long&)PhaseNo <<= _n;
  PhaseName = _n.unmarshalString(0);
  (::CORBA::Long&)PhaseType <<= _n;
  (sDate&)StartTime <<= _n;
  (sDate&)EndTime <<= _n;
  (::CORBA::Double&)Duration <<= _n;
  (::CORBA::Double&)ElecCons <<= _n;
  (::CORBA::Double&)ElecConsStart <<= _n;
  (seqGasData&)GasData <<= _n;
  (seqGasData&)GasDataStart <<= _n;

}

void
sVDModelResult::operator>>= (cdrStream &_n) const
{
  PhaseNo >>= _n;
  _n.marshalString(PhaseName,0);
  (const seqAnalysis&) Analysis >>= _n;
  SteelWeight >>= _n;
  SlagWeight >>= _n;
  HeatTemp >>= _n;
  TotDurPhase >>= _n;
  (const seqRecipeList&) Alloy >>= _n;
  TempDiffAlloy >>= _n;
  TempDiffStep >>= _n;
  TempDiffPassive >>= _n;
  RemDur >>= _n;
  AlHeat >>= _n;
  AlAlloy >>= _n;
  AlDeox >>= _n;
  DCTime >>= _n;
  VacuumPressure >>= _n;
  DNTime >>= _n;
  DHTime >>= _n;
  StirringFlow >>= _n;

}

void
sVDModelResult::operator<<= (cdrStream &_n)
{
  (::CORBA::Long&)PhaseNo <<= _n;
  PhaseName = _n.unmarshalString(0);
  (seqAnalysis&)Analysis <<= _n;
  (::CORBA::Double&)SteelWeight <<= _n;
  (::CORBA::Double&)SlagWeight <<= _n;
  (::CORBA::Double&)HeatTemp <<= _n;
  (::CORBA::Double&)TotDurPhase <<= _n;
  (seqRecipeList&)Alloy <<= _n;
  (::CORBA::Double&)TempDiffAlloy <<= _n;
  (::CORBA::Double&)TempDiffStep <<= _n;
  (::CORBA::Double&)TempDiffPassive <<= _n;
  (::CORBA::Double&)RemDur <<= _n;
  (::CORBA::Double&)AlHeat <<= _n;
  (::CORBA::Double&)AlAlloy <<= _n;
  (::CORBA::Double&)AlDeox <<= _n;
  (::CORBA::Double&)DCTime <<= _n;
  (::CORBA::Double&)VacuumPressure <<= _n;
  (::CORBA::Double&)DNTime <<= _n;
  (::CORBA::Double&)DHTime <<= _n;
  (::CORBA::Double&)StirringFlow <<= _n;

}

void
sConArcBlowData::operator>>= (cdrStream &_n) const
{
  O2MomentEndStep >>= _n;
  O2Flow >>= _n;
  O2Cons >>= _n;
  TopLanceHeight >>= _n;
  PorousPlugN2Flow >>= _n;
  PorousPlugArFlow >>= _n;
  O2Start >>= _n;

}

void
sConArcBlowData::operator<<= (cdrStream &_n)
{
  (::CORBA::Double&)O2MomentEndStep <<= _n;
  (::CORBA::Double&)O2Flow <<= _n;
  (::CORBA::Double&)O2Cons <<= _n;
  (::CORBA::Long&)TopLanceHeight <<= _n;
  (::CORBA::Double&)PorousPlugN2Flow <<= _n;
  (::CORBA::Double&)PorousPlugArFlow <<= _n;
  (::CORBA::Double&)O2Start <<= _n;

}

void
sConArcModelResult::operator>>= (cdrStream &_n) const
{
  _n.marshalString(Phase,0);
  PhaseNo >>= _n;
  (const sGenRes&) GenRes >>= _n;
  BaseMass >>= _n;
  PhaseActive >>= _n;
  (const sConArcElecData&) ElectricalData >>= _n;
  (const sConArcBlowData&) BlowingData >>= _n;
  (const seqConArcMediaData&) MaterialData >>= _n;
  StepNo >>= _n;
  DecarbRate >>= _n;

}

void
sConArcModelResult::operator<<= (cdrStream &_n)
{
  Phase = _n.unmarshalString(0);
  (::CORBA::Long&)PhaseNo <<= _n;
  (sGenRes&)GenRes <<= _n;
  (::CORBA::Double&)BaseMass <<= _n;
  (::CORBA::Long&)PhaseActive <<= _n;
  (sConArcElecData&)ElectricalData <<= _n;
  (sConArcBlowData&)BlowingData <<= _n;
  (seqConArcMediaData&)MaterialData <<= _n;
  (::CORBA::Long&)StepNo <<= _n;
  (::CORBA::Double&)DecarbRate <<= _n;

}

void
sConArcMediaPredRes::operator>>= (cdrStream &_n) const
{
  StepNo >>= _n;
  (const seqConArcMediaData&) MediaData >>= _n;

}

void
sConArcMediaPredRes::operator<<= (cdrStream &_n)
{
  (::CORBA::Long&)StepNo <<= _n;
  (seqConArcMediaData&)MediaData <<= _n;

}

void
sLTSStirrPredRes::operator>>= (cdrStream &_n) const
{
  _n.marshalString(StirrPhase,0);
  StirrIntensity >>= _n;
  StirrFlow >>= _n;
  _n.marshalString(GasType,0);
  Priority >>= _n;
  DurStep >>= _n;
  _n.marshalString(StirrIntensityCode,0);
  Enable >>= _n;
  Order >>= _n;
  isPatternOrActivity >>= _n;
  DurUntilEndOfStep >>= _n;
  DurUntilStartOfStep >>= _n;
  VoltTap >>= _n;
  ImpCurve >>= _n;
  ElecEgy >>= _n;
  SteelMass >>= _n;
  SlagMass >>= _n;
  Temp >>= _n;

}

void
sLTSStirrPredRes::operator<<= (cdrStream &_n)
{
  StirrPhase = _n.unmarshalString(0);
  (::CORBA::Long&)StirrIntensity <<= _n;
  (::CORBA::Double&)StirrFlow <<= _n;
  GasType = _n.unmarshalString(0);
  (::CORBA::Long&)Priority <<= _n;
  (::CORBA::Double&)DurStep <<= _n;
  StirrIntensityCode = _n.unmarshalString(0);
  (::CORBA::Long&)Enable <<= _n;
  (::CORBA::Long&)Order <<= _n;
  (::CORBA::Long&)isPatternOrActivity <<= _n;
  (::CORBA::Double&)DurUntilEndOfStep <<= _n;
  (::CORBA::Double&)DurUntilStartOfStep <<= _n;
  (::CORBA::Long&)VoltTap <<= _n;
  (::CORBA::Long&)ImpCurve <<= _n;
  (::CORBA::Double&)ElecEgy <<= _n;
  (::CORBA::Double&)SteelMass <<= _n;
  (::CORBA::Double&)SlagMass <<= _n;
  (::CORBA::Double&)Temp <<= _n;

}

void
sBOFGlobalSetpoints::operator>>= (cdrStream &_n) const
{
  O2VolStartMatAddn >>= _n;
  O2VolSartMatDynAddn >>= _n;
  O2VolStartScrapChute >>= _n;
  O2VolSubLance >>= _n;
  O2VolTotal >>= _n;
  O2VolTotalLance >>= _n;
  N2VolTotal >>= _n;
  MatFeedRate >>= _n;
  MatDynFeedRate >>= _n;
  AimTapWeightCalc >>= _n;
  DurStartMatAddn >>= _n;
  DurStartMatDynAddn >>= _n;
  DurStartScrapChute >>= _n;
  DurSubLance >>= _n;
  O2VolStartMat2ndAddn >>= _n;
  DurStartMat2ndAddn >>= _n;
  MatFeedRate2ndAdd >>= _n;
  AimSteelMassCalc >>= _n;
  ReblowCode >>= _n;

}

void
sBOFGlobalSetpoints::operator<<= (cdrStream &_n)
{
  (::CORBA::Double&)O2VolStartMatAddn <<= _n;
  (::CORBA::Double&)O2VolSartMatDynAddn <<= _n;
  (::CORBA::Double&)O2VolStartScrapChute <<= _n;
  (::CORBA::Double&)O2VolSubLance <<= _n;
  (::CORBA::Double&)O2VolTotal <<= _n;
  (::CORBA::Double&)O2VolTotalLance <<= _n;
  (::CORBA::Double&)N2VolTotal <<= _n;
  (::CORBA::Double&)MatFeedRate <<= _n;
  (::CORBA::Double&)MatDynFeedRate <<= _n;
  (::CORBA::Double&)AimTapWeightCalc <<= _n;
  (::CORBA::Double&)DurStartMatAddn <<= _n;
  (::CORBA::Double&)DurStartMatDynAddn <<= _n;
  (::CORBA::Double&)DurStartScrapChute <<= _n;
  (::CORBA::Double&)DurSubLance <<= _n;
  (::CORBA::Double&)O2VolStartMat2ndAddn <<= _n;
  (::CORBA::Double&)DurStartMat2ndAddn <<= _n;
  (::CORBA::Double&)MatFeedRate2ndAdd <<= _n;
  (::CORBA::Double&)AimSteelMassCalc <<= _n;
  (::CORBA::Long&)ReblowCode <<= _n;

}

void
sConArcGlobalSetpoints::operator>>= (cdrStream &_n) const
{
  O2VolStartMatAddn >>= _n;
  O2VolSartMatDynAddn >>= _n;
  O2VolStartScrapChute >>= _n;
  O2VolSubLance >>= _n;
  O2VolTotal >>= _n;
  O2VolTotalLance >>= _n;
  N2VolTotal >>= _n;
  ArVolTotal >>= _n;
  MatFeedRate >>= _n;
  MatDynFeedRate >>= _n;
  AimTapWeightCalc >>= _n;
  AimSteelMassCalc >>= _n;
  DurStartMatAddn >>= _n;
  DurStartMatDynAddn >>= _n;
  DurStartScrapChute >>= _n;
  DurSubLance >>= _n;
  O2VolStartMat2ndAddn >>= _n;
  DurStartMat2ndAddn >>= _n;
  MatFeedRate2ndAdd >>= _n;
  ReblowCode >>= _n;
  DRICons >>= _n;
  LimeCons >>= _n;
  DoloCons >>= _n;
  CoalCons >>= _n;
  EgyTotal >>= _n;

}

void
sConArcGlobalSetpoints::operator<<= (cdrStream &_n)
{
  (::CORBA::Double&)O2VolStartMatAddn <<= _n;
  (::CORBA::Double&)O2VolSartMatDynAddn <<= _n;
  (::CORBA::Double&)O2VolStartScrapChute <<= _n;
  (::CORBA::Double&)O2VolSubLance <<= _n;
  (::CORBA::Double&)O2VolTotal <<= _n;
  (::CORBA::Double&)O2VolTotalLance <<= _n;
  (::CORBA::Double&)N2VolTotal <<= _n;
  (::CORBA::Double&)ArVolTotal <<= _n;
  (::CORBA::Double&)MatFeedRate <<= _n;
  (::CORBA::Double&)MatDynFeedRate <<= _n;
  (::CORBA::Double&)AimTapWeightCalc <<= _n;
  (::CORBA::Double&)AimSteelMassCalc <<= _n;
  (::CORBA::Double&)DurStartMatAddn <<= _n;
  (::CORBA::Double&)DurStartMatDynAddn <<= _n;
  (::CORBA::Double&)DurStartScrapChute <<= _n;
  (::CORBA::Double&)DurSubLance <<= _n;
  (::CORBA::Double&)O2VolStartMat2ndAddn <<= _n;
  (::CORBA::Double&)DurStartMat2ndAddn <<= _n;
  (::CORBA::Double&)MatFeedRate2ndAdd <<= _n;
  (::CORBA::Long&)ReblowCode <<= _n;
  (::CORBA::Double&)DRICons <<= _n;
  (::CORBA::Double&)LimeCons <<= _n;
  (::CORBA::Double&)DoloCons <<= _n;
  (::CORBA::Double&)CoalCons <<= _n;
  (::CORBA::Double&)EgyTotal <<= _n;

}

void
sSample::operator>>= (cdrStream &_n) const
{
  _n.marshalString(MeasName,0);
  MeasValue >>= _n;

}

void
sSample::operator<<= (cdrStream &_n)
{
  MeasName = _n.unmarshalString(0);
  (::CORBA::Double&)MeasValue <<= _n;

}

void
sTorpedoData::operator>>= (cdrStream &_n) const
{
  TorpedoNo >>= _n;
  Weight >>= _n;

}

void
sTorpedoData::operator<<= (cdrStream &_n)
{
  (::CORBA::Long&)TorpedoNo <<= _n;
  (::CORBA::Double&)Weight <<= _n;

}

void
strSampleRef::operator>>= (cdrStream &_n) const
{
  mSteel >>= _n;
  mSteelCalc >>= _n;
  mSlag >>= _n;
  mSlagCalc >>= _n;
  mCarbon >>= _n;
  mOxygen >>= _n;
  mHydrogen >>= _n;
  mCelogSlag >>= _n;
  mAluminium >>= _n;
  mEMF >>= _n;
  mTemp >>= _n;
  mTempCalc >>= _n;

}

void
strSampleRef::operator<<= (cdrStream &_n)
{
  (::CORBA::Long&)mSteel <<= _n;
  (::CORBA::Long&)mSteelCalc <<= _n;
  (::CORBA::Long&)mSlag <<= _n;
  (::CORBA::Long&)mSlagCalc <<= _n;
  (::CORBA::Long&)mCarbon <<= _n;
  (::CORBA::Long&)mOxygen <<= _n;
  (::CORBA::Long&)mHydrogen <<= _n;
  (::CORBA::Long&)mCelogSlag <<= _n;
  (::CORBA::Long&)mAluminium <<= _n;
  (::CORBA::Long&)mEMF <<= _n;
  (::CORBA::Long&)mTemp <<= _n;
  (::CORBA::Long&)mTempCalc <<= _n;

}

void
sPhaseDataReport::operator>>= (cdrStream &_n) const
{
  _n.marshalString(PhaseName,0);
  PhaseNo >>= _n;
  (const sDate&) StartTime >>= _n;
  (const sDate&) EndTime >>= _n;
  Duration >>= _n;
  ElecCons >>= _n;
  ElecConsStart >>= _n;
  (const seqDeviceGasData&) GasCons >>= _n;
  (const seqDeviceGasData&) GasConsStart >>= _n;

}

void
sPhaseDataReport::operator<<= (cdrStream &_n)
{
  PhaseName = _n.unmarshalString(0);
  (::CORBA::Long&)PhaseNo <<= _n;
  (sDate&)StartTime <<= _n;
  (sDate&)EndTime <<= _n;
  (::CORBA::Double&)Duration <<= _n;
  (::CORBA::Double&)ElecCons <<= _n;
  (::CORBA::Double&)ElecConsStart <<= _n;
  (seqDeviceGasData&)GasCons <<= _n;
  (seqDeviceGasData&)GasConsStart <<= _n;

}

void
sEquipmentLifeData::operator>>= (cdrStream &_n) const
{
  EquipID >>= _n;
  EquipPartID >>= _n;
  EquipCounter1Life >>= _n;
  EquipCounter2Life >>= _n;
  (const sDate&) ChangeTime >>= _n;
  Weight >>= _n;

}

void
sEquipmentLifeData::operator<<= (cdrStream &_n)
{
  (::CORBA::Long&)EquipID <<= _n;
  (::CORBA::Long&)EquipPartID <<= _n;
  (::CORBA::Long&)EquipCounter1Life <<= _n;
  (::CORBA::Long&)EquipCounter2Life <<= _n;
  (sDate&)ChangeTime <<= _n;
  (::CORBA::Double&)Weight <<= _n;

}

void
sPPRestriction::operator>>= (cdrStream &_n) const
{
  _n.marshalString(PPDescription,0);
  PPNumber >>= _n;

}

void
sPPRestriction::operator<<= (cdrStream &_n)
{
  PPDescription = _n.unmarshalString(0);
  (::CORBA::Long&)PPNumber <<= _n;

}

void
sHeatStack::operator>>= (cdrStream &_n) const
{
  _n.marshalString(ExternalHeatID,0);
  _n.marshalString(ExternalTreatID,0);
  _n.marshalString(HeatId,0);
  _n.marshalString(TreatId,0);
  _n.marshalString(OrderId,0);
  _n.marshalString(Plant,0);
  PlantNo >>= _n;
  HeatStatus >>= _n;
  ScrapOrderStatus >>= _n;
  HotMetalOrderStatus >>= _n;

}

void
sHeatStack::operator<<= (cdrStream &_n)
{
  ExternalHeatID = _n.unmarshalString(0);
  ExternalTreatID = _n.unmarshalString(0);
  HeatId = _n.unmarshalString(0);
  TreatId = _n.unmarshalString(0);
  OrderId = _n.unmarshalString(0);
  Plant = _n.unmarshalString(0);
  (::CORBA::Long&)PlantNo <<= _n;
  (::CORBA::Long&)HeatStatus <<= _n;
  (::CORBA::Long&)ScrapOrderStatus <<= _n;
  (::CORBA::Long&)HotMetalOrderStatus <<= _n;

}

void
sMediaConsumed::operator>>= (cdrStream &_n) const
{
  _n.marshalString(ConsumerUnit,0);
  N2Cons >>= _n;
  O2Cons >>= _n;
  WaterCons >>= _n;
  AirCons >>= _n;
  N2Flow >>= _n;
  O2Flow >>= _n;
  WaterFlow >>= _n;
  AirFlow >>= _n;

}

void
sMediaConsumed::operator<<= (cdrStream &_n)
{
  ConsumerUnit = _n.unmarshalString(0);
  (::CORBA::Double&)N2Cons <<= _n;
  (::CORBA::Double&)O2Cons <<= _n;
  (::CORBA::Double&)WaterCons <<= _n;
  (::CORBA::Double&)AirCons <<= _n;
  (::CORBA::Double&)N2Flow <<= _n;
  (::CORBA::Double&)O2Flow <<= _n;
  (::CORBA::Double&)WaterFlow <<= _n;
  (::CORBA::Double&)AirFlow <<= _n;

}

void
sEnergyConsumed::operator>>= (cdrStream &_n) const
{
  _n.marshalString(ConsumerUnit,0);
  Voltage >>= _n;
  ElecCurrent >>= _n;
  ActivePower >>= _n;
  ReactivePower >>= _n;
  ApparentPower >>= _n;
  ActiveEnergy >>= _n;

}

void
sEnergyConsumed::operator<<= (cdrStream &_n)
{
  ConsumerUnit = _n.unmarshalString(0);
  (::CORBA::Double&)Voltage <<= _n;
  (::CORBA::Double&)ElecCurrent <<= _n;
  (::CORBA::Double&)ActivePower <<= _n;
  (::CORBA::Double&)ReactivePower <<= _n;
  (::CORBA::Double&)ApparentPower <<= _n;
  (::CORBA::Double&)ActiveEnergy <<= _n;

}

void
sSAF_Bin::operator>>= (cdrStream &_n) const
{
  _n.marshalString(FurnaceBinID,0);
  _n.marshalString(RecipeCode,0);
  Amount >>= _n;

}

void
sSAF_Bin::operator<<= (cdrStream &_n)
{
  FurnaceBinID = _n.unmarshalString(0);
  RecipeCode = _n.unmarshalString(0);
  (::CORBA::Double&)Amount <<= _n;

}

void
sHarmonics::operator>>= (cdrStream &_n) const
{
  Harmonics >>= _n;

}

void
sHarmonics::operator<<= (cdrStream &_n)
{
  (::CORBA::Double&)Harmonics <<= _n;

}

void
sWallTemp::operator>>= (cdrStream &_n) const
{
  _n.marshalString(Name,0);
  Temp >>= _n;

}

void
sWallTemp::operator<<= (cdrStream &_n)
{
  Name = _n.unmarshalString(0);
  (::CORBA::Double&)Temp <<= _n;

}

void
sHMPouringData::operator>>= (cdrStream &_n) const
{
  SourceNo >>= _n;
  Weight >>= _n;
  Temperature >>= _n;
  (const sDate&) TempTime >>= _n;
  (const seqAnalysis&) Analysis >>= _n;
  (const sDate&) SampleTime >>= _n;

}

void
sHMPouringData::operator<<= (cdrStream &_n)
{
  (::CORBA::Long&)SourceNo <<= _n;
  (::CORBA::Double&)Weight <<= _n;
  (::CORBA::Double&)Temperature <<= _n;
  (sDate&)TempTime <<= _n;
  (seqAnalysis&)Analysis <<= _n;
  (sDate&)SampleTime <<= _n;

}

iSMC_DataProvider_ptr iSMC_DataProvider_Helper::_nil() {
  return ::iSMC_DataProvider::_nil();
}

::CORBA::Boolean iSMC_DataProvider_Helper::is_nil(::iSMC_DataProvider_ptr p) {
  return ::CORBA::is_nil(p);

}

void iSMC_DataProvider_Helper::release(::iSMC_DataProvider_ptr p) {
  ::CORBA::release(p);
}

void iSMC_DataProvider_Helper::marshalObjRef(::iSMC_DataProvider_ptr obj, cdrStream& s) {
  ::iSMC_DataProvider::_marshalObjRef(obj, s);
}

iSMC_DataProvider_ptr iSMC_DataProvider_Helper::unmarshalObjRef(cdrStream& s) {
  return ::iSMC_DataProvider::_unmarshalObjRef(s);
}

void iSMC_DataProvider_Helper::duplicate(::iSMC_DataProvider_ptr obj) {
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
}

iSMC_DataProvider_ptr
iSMC_DataProvider::_duplicate(::iSMC_DataProvider_ptr obj)
{
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
  return obj;
}

iSMC_DataProvider_ptr
iSMC_DataProvider::_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


iSMC_DataProvider_ptr
iSMC_DataProvider::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

iSMC_DataProvider_ptr
iSMC_DataProvider::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_iSMC_DataProvider _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_iSMC_DataProvider* _the_nil_ptr = 0;
  if (!_the_nil_ptr) {
    omni::nilRefLock().lock();
    if (!_the_nil_ptr) {
      _the_nil_ptr = new _objref_iSMC_DataProvider;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* iSMC_DataProvider::_PD_repoId = "IDL:iSMC_DataProvider:1.0";


_objref_iSMC_DataProvider::~_objref_iSMC_DataProvider() {
  
}


_objref_iSMC_DataProvider::_objref_iSMC_DataProvider(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::iSMC_DataProvider::_PD_repoId, ior, id, 1),
   _objref_iData_Provider(ior, id)
   
{
  _PR_setobj(this);
}

void*
_objref_iSMC_DataProvider::_ptrToObjRef(const char* id)
{
  if (id == ::iSMC_DataProvider::_PD_repoId)
    return (::iSMC_DataProvider_ptr) this;
  if (id == ::iData_Provider::_PD_repoId)
    return (::iData_Provider_ptr) this;


  if (id == ::CORBA::Object::_PD_repoId)
    return (::CORBA::Object_ptr) this;

  if (omni::strMatch(id, ::iSMC_DataProvider::_PD_repoId))
    return (::iSMC_DataProvider_ptr) this;
  if (omni::strMatch(id, ::iData_Provider::_PD_repoId))
    return (::iData_Provider_ptr) this;


  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (::CORBA::Object_ptr) this;

  return 0;
}


//
// Code for iSMC_DataProvider::getAnalysis

// Proxy call descriptor class. Mangled signature:
//  _cseqAnalysis_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_00000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqAnalysis_var result;
};

void _0RL_cd_a56b508728fda688_00000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_00000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_00000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqAnalysis&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_00000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqAnalysis;
  (seqAnalysis&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_00000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_00000000* tcd = (_0RL_cd_a56b508728fda688_00000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getAnalysis(tcd->arg_0, tcd->arg_1);


}

seqAnalysis* _objref_iSMC_DataProvider::getAnalysis(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_00000000 _call_desc(_0RL_lcfn_a56b508728fda688_10000000, "getAnalysis", 12);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::getAnalysisData

// Proxy call descriptor class. Mangled signature:
//  _cseqAnalysisData_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_20000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_20000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqAnalysisData_var result;
};

void _0RL_cd_a56b508728fda688_20000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_20000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_20000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqAnalysisData&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_20000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqAnalysisData;
  (seqAnalysisData&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_20000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_30000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_20000000* tcd = (_0RL_cd_a56b508728fda688_20000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getAnalysisData(tcd->arg_0, tcd->arg_1);


}

seqAnalysisData* _objref_iSMC_DataProvider::getAnalysisData(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_20000000 _call_desc(_0RL_lcfn_a56b508728fda688_30000000, "getAnalysisData", 16);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::getAODBlowPredRes

// Proxy call descriptor class. Mangled signature:
//  _cseqAODBlowPredRes_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_40000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_40000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqAODBlowPredRes_var result;
};

void _0RL_cd_a56b508728fda688_40000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_40000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_40000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqAODBlowPredRes&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_40000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqAODBlowPredRes;
  (seqAODBlowPredRes&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_40000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_50000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_40000000* tcd = (_0RL_cd_a56b508728fda688_40000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getAODBlowPredRes(tcd->arg_0, tcd->arg_1);


}

seqAODBlowPredRes* _objref_iSMC_DataProvider::getAODBlowPredRes(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_40000000 _call_desc(_0RL_lcfn_a56b508728fda688_50000000, "getAODBlowPredRes", 18);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::getAODGlobalSetpoints

// Proxy call descriptor class. Mangled signature:
//  _cseqAODGlobalSetpoints_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_60000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_60000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqAODGlobalSetpoints_var result;
};

void _0RL_cd_a56b508728fda688_60000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_60000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_60000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqAODGlobalSetpoints&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_60000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqAODGlobalSetpoints;
  (seqAODGlobalSetpoints&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_60000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_70000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_60000000* tcd = (_0RL_cd_a56b508728fda688_60000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getAODGlobalSetpoints(tcd->arg_0, tcd->arg_1);


}

seqAODGlobalSetpoints* _objref_iSMC_DataProvider::getAODGlobalSetpoints(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_60000000 _call_desc(_0RL_lcfn_a56b508728fda688_70000000, "getAODGlobalSetpoints", 22);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::getBatch

// Proxy call descriptor class. Mangled signature:
//  _cseqBatch_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_80000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_80000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqBatch_var result;
};

void _0RL_cd_a56b508728fda688_80000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_80000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_80000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqBatch&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_80000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqBatch;
  (seqBatch&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_80000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_90000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_80000000* tcd = (_0RL_cd_a56b508728fda688_80000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getBatch(tcd->arg_0, tcd->arg_1);


}

seqBatch* _objref_iSMC_DataProvider::getBatch(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_80000000 _call_desc(_0RL_lcfn_a56b508728fda688_90000000, "getBatch", 9);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::getBlowStatus

// Proxy call descriptor class. Mangled signature:
//  _cseqBlowStatus_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_a0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_a0000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqBlowStatus_var result;
};

void _0RL_cd_a56b508728fda688_a0000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_a0000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_a0000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqBlowStatus&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_a0000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqBlowStatus;
  (seqBlowStatus&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_a0000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_b0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_a0000000* tcd = (_0RL_cd_a56b508728fda688_a0000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getBlowStatus(tcd->arg_0, tcd->arg_1);


}

seqBlowStatus* _objref_iSMC_DataProvider::getBlowStatus(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_a0000000 _call_desc(_0RL_lcfn_a56b508728fda688_b0000000, "getBlowStatus", 14);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::getBOFBlowPredRes

// Proxy call descriptor class. Mangled signature:
//  _cseqBOFBlowPredRes_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_c0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_c0000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqBOFBlowPredRes_var result;
};

void _0RL_cd_a56b508728fda688_c0000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_c0000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_c0000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqBOFBlowPredRes&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_c0000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqBOFBlowPredRes;
  (seqBOFBlowPredRes&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_c0000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_d0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_c0000000* tcd = (_0RL_cd_a56b508728fda688_c0000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getBOFBlowPredRes(tcd->arg_0, tcd->arg_1);


}

seqBOFBlowPredRes* _objref_iSMC_DataProvider::getBOFBlowPredRes(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_c0000000 _call_desc(_0RL_lcfn_a56b508728fda688_d0000000, "getBOFBlowPredRes", 18);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::getBOFGlobalSetpoints

// Proxy call descriptor class. Mangled signature:
//  _cseqBOFGlobalSetpoints_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_e0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_e0000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqBOFGlobalSetpoints_var result;
};

void _0RL_cd_a56b508728fda688_e0000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_e0000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_e0000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqBOFGlobalSetpoints&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_e0000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqBOFGlobalSetpoints;
  (seqBOFGlobalSetpoints&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_e0000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_f0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_e0000000* tcd = (_0RL_cd_a56b508728fda688_e0000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getBOFGlobalSetpoints(tcd->arg_0, tcd->arg_1);


}

seqBOFGlobalSetpoints* _objref_iSMC_DataProvider::getBOFGlobalSetpoints(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_e0000000 _call_desc(_0RL_lcfn_a56b508728fda688_f0000000, "getBOFGlobalSetpoints", 22);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::getComputerModes

// Proxy call descriptor class. Mangled signature:
//  _cseqComputerModes_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_01000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_01000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqComputerModes_var result;
};

void _0RL_cd_a56b508728fda688_01000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_01000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_01000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqComputerModes&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_01000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqComputerModes;
  (seqComputerModes&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_01000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_11000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_01000000* tcd = (_0RL_cd_a56b508728fda688_01000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getComputerModes(tcd->arg_0, tcd->arg_1);


}

seqComputerModes* _objref_iSMC_DataProvider::getComputerModes(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_01000000 _call_desc(_0RL_lcfn_a56b508728fda688_11000000, "getComputerModes", 17);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::getConArcBlowData

// Proxy call descriptor class. Mangled signature:
//  _cseqConArcBlowData_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_21000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_21000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqConArcBlowData_var result;
};

void _0RL_cd_a56b508728fda688_21000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_21000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_21000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqConArcBlowData&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_21000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqConArcBlowData;
  (seqConArcBlowData&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_21000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_31000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_21000000* tcd = (_0RL_cd_a56b508728fda688_21000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getConArcBlowData(tcd->arg_0, tcd->arg_1);


}

seqConArcBlowData* _objref_iSMC_DataProvider::getConArcBlowData(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_21000000 _call_desc(_0RL_lcfn_a56b508728fda688_31000000, "getConArcBlowData", 18);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::getConArcElecData

// Proxy call descriptor class. Mangled signature:
//  _cseqConArcElecData_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_41000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_41000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqConArcElecData_var result;
};

void _0RL_cd_a56b508728fda688_41000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_41000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_41000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqConArcElecData&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_41000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqConArcElecData;
  (seqConArcElecData&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_41000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_51000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_41000000* tcd = (_0RL_cd_a56b508728fda688_41000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getConArcElecData(tcd->arg_0, tcd->arg_1);


}

seqConArcElecData* _objref_iSMC_DataProvider::getConArcElecData(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_41000000 _call_desc(_0RL_lcfn_a56b508728fda688_51000000, "getConArcElecData", 18);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::getConArcModelResult

// Proxy call descriptor class. Mangled signature:
//  _cseqConArcModelResult_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_61000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_61000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqConArcModelResult_var result;
};

void _0RL_cd_a56b508728fda688_61000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_61000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_61000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqConArcModelResult&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_61000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqConArcModelResult;
  (seqConArcModelResult&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_61000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_71000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_61000000* tcd = (_0RL_cd_a56b508728fda688_61000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getConArcModelResult(tcd->arg_0, tcd->arg_1);


}

seqConArcModelResult* _objref_iSMC_DataProvider::getConArcModelResult(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_61000000 _call_desc(_0RL_lcfn_a56b508728fda688_71000000, "getConArcModelResult", 21);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::getConArcMeasData

// Proxy call descriptor class. Mangled signature:
//  _cseqConArcMeasData_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_81000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_81000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqConArcMeasData_var result;
};

void _0RL_cd_a56b508728fda688_81000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_81000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_81000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqConArcMeasData&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_81000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqConArcMeasData;
  (seqConArcMeasData&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_81000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_91000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_81000000* tcd = (_0RL_cd_a56b508728fda688_81000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getConArcMeasData(tcd->arg_0, tcd->arg_1);


}

seqConArcMeasData* _objref_iSMC_DataProvider::getConArcMeasData(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_81000000 _call_desc(_0RL_lcfn_a56b508728fda688_91000000, "getConArcMeasData", 18);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::getConArcMediaData

// Proxy call descriptor class. Mangled signature:
//  _cseqConArcMediaData_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_a1000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_a1000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqConArcMediaData_var result;
};

void _0RL_cd_a56b508728fda688_a1000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_a1000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_a1000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqConArcMediaData&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_a1000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqConArcMediaData;
  (seqConArcMediaData&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_a1000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_b1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_a1000000* tcd = (_0RL_cd_a56b508728fda688_a1000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getConArcMediaData(tcd->arg_0, tcd->arg_1);


}

seqConArcMediaData* _objref_iSMC_DataProvider::getConArcMediaData(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_a1000000 _call_desc(_0RL_lcfn_a56b508728fda688_b1000000, "getConArcMediaData", 19);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::getConArcSetptData

// Proxy call descriptor class. Mangled signature:
//  _cseqConArcSetptData_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_c1000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_c1000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqConArcSetptData_var result;
};

void _0RL_cd_a56b508728fda688_c1000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_c1000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_c1000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqConArcSetptData&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_c1000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqConArcSetptData;
  (seqConArcSetptData&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_c1000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_d1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_c1000000* tcd = (_0RL_cd_a56b508728fda688_c1000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getConArcSetptData(tcd->arg_0, tcd->arg_1);


}

seqConArcSetptData* _objref_iSMC_DataProvider::getConArcSetptData(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_c1000000 _call_desc(_0RL_lcfn_a56b508728fda688_d1000000, "getConArcSetptData", 19);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::getCoolWaterData

// Proxy call descriptor class. Mangled signature:
//  _cseqCoolWaterData_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_e1000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_e1000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqCoolWaterData_var result;
};

void _0RL_cd_a56b508728fda688_e1000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_e1000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_e1000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqCoolWaterData&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_e1000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqCoolWaterData;
  (seqCoolWaterData&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_e1000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_f1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_e1000000* tcd = (_0RL_cd_a56b508728fda688_e1000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getCoolWaterData(tcd->arg_0, tcd->arg_1);


}

seqCoolWaterData* _objref_iSMC_DataProvider::getCoolWaterData(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_e1000000 _call_desc(_0RL_lcfn_a56b508728fda688_f1000000, "getCoolWaterData", 17);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::getDate

// Proxy call descriptor class. Mangled signature:
//  _cMCBS_mCBS__LocalTime_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_02000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_02000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  sDate result;
};

void _0RL_cd_a56b508728fda688_02000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_02000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_02000000::marshalReturnedValues(cdrStream& _n)
{
  (const sDate&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_02000000::unmarshalReturnedValues(cdrStream& _n)
{
  (sDate&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_02000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_12000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_02000000* tcd = (_0RL_cd_a56b508728fda688_02000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getDate(tcd->arg_0, tcd->arg_1);


}

sDate _objref_iSMC_DataProvider::getDate(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_02000000 _call_desc(_0RL_lcfn_a56b508728fda688_12000000, "getDate", 8);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result;


}


//
// Code for iSMC_DataProvider::getEAFBurnerPredRes

// Proxy call descriptor class. Mangled signature:
//  _cseqEAFBurnerPredRes_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_22000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_22000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqEAFBurnerPredRes_var result;
};

void _0RL_cd_a56b508728fda688_22000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_22000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_22000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqEAFBurnerPredRes&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_22000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqEAFBurnerPredRes;
  (seqEAFBurnerPredRes&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_22000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_32000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_22000000* tcd = (_0RL_cd_a56b508728fda688_22000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getEAFBurnerPredRes(tcd->arg_0, tcd->arg_1);


}

seqEAFBurnerPredRes* _objref_iSMC_DataProvider::getEAFBurnerPredRes(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_22000000 _call_desc(_0RL_lcfn_a56b508728fda688_32000000, "getEAFBurnerPredRes", 20);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::getEAFGasLancePredRes

// Proxy call descriptor class. Mangled signature:
//  _cseqEAFGasLancePredRes_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_42000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_42000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqEAFGasLancePredRes_var result;
};

void _0RL_cd_a56b508728fda688_42000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_42000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_42000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqEAFGasLancePredRes&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_42000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqEAFGasLancePredRes;
  (seqEAFGasLancePredRes&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_42000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_52000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_42000000* tcd = (_0RL_cd_a56b508728fda688_42000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getEAFGasLancePredRes(tcd->arg_0, tcd->arg_1);


}

seqEAFGasLancePredRes* _objref_iSMC_DataProvider::getEAFGasLancePredRes(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_42000000 _call_desc(_0RL_lcfn_a56b508728fda688_52000000, "getEAFGasLancePredRes", 22);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::getEAFProcessPredRes

// Proxy call descriptor class. Mangled signature:
//  _cseqEAFProcessPredRes_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_62000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_62000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqEAFProcessPredRes_var result;
};

void _0RL_cd_a56b508728fda688_62000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_62000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_62000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqEAFProcessPredRes&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_62000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqEAFProcessPredRes;
  (seqEAFProcessPredRes&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_62000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_72000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_62000000* tcd = (_0RL_cd_a56b508728fda688_62000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getEAFProcessPredRes(tcd->arg_0, tcd->arg_1);


}

seqEAFProcessPredRes* _objref_iSMC_DataProvider::getEAFProcessPredRes(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_62000000 _call_desc(_0RL_lcfn_a56b508728fda688_72000000, "getEAFProcessPredRes", 21);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::getEAFMatFeed

// Proxy call descriptor class. Mangled signature:
//  _cseqEAFMatFeed_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_82000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_82000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqEAFMatFeed_var result;
};

void _0RL_cd_a56b508728fda688_82000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_82000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_82000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqEAFMatFeed&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_82000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqEAFMatFeed;
  (seqEAFMatFeed&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_82000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_92000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_82000000* tcd = (_0RL_cd_a56b508728fda688_82000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getEAFMatFeed(tcd->arg_0, tcd->arg_1);


}

seqEAFMatFeed* _objref_iSMC_DataProvider::getEAFMatFeed(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_82000000 _call_desc(_0RL_lcfn_a56b508728fda688_92000000, "getEAFMatFeed", 14);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::getEAFMatFeedPredRes

// Proxy call descriptor class. Mangled signature:
//  _cseqEAFMatFeedPredRes_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_a2000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_a2000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqEAFMatFeedPredRes_var result;
};

void _0RL_cd_a56b508728fda688_a2000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_a2000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_a2000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqEAFMatFeedPredRes&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_a2000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqEAFMatFeedPredRes;
  (seqEAFMatFeedPredRes&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_a2000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_b2000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_a2000000* tcd = (_0RL_cd_a56b508728fda688_a2000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getEAFMatFeedPredRes(tcd->arg_0, tcd->arg_1);


}

seqEAFMatFeedPredRes* _objref_iSMC_DataProvider::getEAFMatFeedPredRes(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_a2000000 _call_desc(_0RL_lcfn_a56b508728fda688_b2000000, "getEAFMatFeedPredRes", 21);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::getElecPhaseData

// Proxy call descriptor class. Mangled signature:
//  _cseqElecPhaseData_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_c2000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_c2000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqElecPhaseData_var result;
};

void _0RL_cd_a56b508728fda688_c2000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_c2000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_c2000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqElecPhaseData&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_c2000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqElecPhaseData;
  (seqElecPhaseData&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_c2000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_d2000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_c2000000* tcd = (_0RL_cd_a56b508728fda688_c2000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getElecPhaseData(tcd->arg_0, tcd->arg_1);


}

seqElecPhaseData* _objref_iSMC_DataProvider::getElecPhaseData(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_c2000000 _call_desc(_0RL_lcfn_a56b508728fda688_d2000000, "getElecPhaseData", 17);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::getGasAvail

// Proxy call descriptor class. Mangled signature:
//  _cseqGasAvail_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_e2000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_e2000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqGasAvail_var result;
};

void _0RL_cd_a56b508728fda688_e2000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_e2000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_e2000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqGasAvail&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_e2000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqGasAvail;
  (seqGasAvail&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_e2000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_f2000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_e2000000* tcd = (_0RL_cd_a56b508728fda688_e2000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getGasAvail(tcd->arg_0, tcd->arg_1);


}

seqGasAvail* _objref_iSMC_DataProvider::getGasAvail(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_e2000000 _call_desc(_0RL_lcfn_a56b508728fda688_f2000000, "getGasAvail", 12);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::getGasData

// Proxy call descriptor class. Mangled signature:
//  _cseqGasData_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_03000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_03000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqGasData_var result;
};

void _0RL_cd_a56b508728fda688_03000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_03000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_03000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqGasData&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_03000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqGasData;
  (seqGasData&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_03000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_13000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_03000000* tcd = (_0RL_cd_a56b508728fda688_03000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getGasData(tcd->arg_0, tcd->arg_1);


}

seqGasData* _objref_iSMC_DataProvider::getGasData(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_03000000 _call_desc(_0RL_lcfn_a56b508728fda688_13000000, "getGasData", 11);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::getGasLanceData

// Proxy call descriptor class. Mangled signature:
//  _cseqGasLanceData_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_23000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_23000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqGasLanceData_var result;
};

void _0RL_cd_a56b508728fda688_23000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_23000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_23000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqGasLanceData&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_23000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqGasLanceData;
  (seqGasLanceData&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_23000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_33000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_23000000* tcd = (_0RL_cd_a56b508728fda688_23000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getGasLanceData(tcd->arg_0, tcd->arg_1);


}

seqGasLanceData* _objref_iSMC_DataProvider::getGasLanceData(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_23000000 _call_desc(_0RL_lcfn_a56b508728fda688_33000000, "getGasLanceData", 16);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::getGasLanceGasAvail

// Proxy call descriptor class. Mangled signature:
//  _cseqGasLanceGasAvail_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_43000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_43000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqGasLanceGasAvail_var result;
};

void _0RL_cd_a56b508728fda688_43000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_43000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_43000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqGasLanceGasAvail&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_43000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqGasLanceGasAvail;
  (seqGasLanceGasAvail&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_43000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_53000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_43000000* tcd = (_0RL_cd_a56b508728fda688_43000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getGasLanceGasAvail(tcd->arg_0, tcd->arg_1);


}

seqGasLanceGasAvail* _objref_iSMC_DataProvider::getGasLanceGasAvail(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_43000000 _call_desc(_0RL_lcfn_a56b508728fda688_53000000, "getGasLanceGasAvail", 20);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::getHeatData

// Proxy call descriptor class. Mangled signature:
//  _cseqHeatData_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_63000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_63000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqHeatData_var result;
};

void _0RL_cd_a56b508728fda688_63000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_63000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_63000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqHeatData&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_63000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqHeatData;
  (seqHeatData&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_63000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_73000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_63000000* tcd = (_0RL_cd_a56b508728fda688_63000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getHeatData(tcd->arg_0, tcd->arg_1);


}

seqHeatData* _objref_iSMC_DataProvider::getHeatData(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_63000000 _call_desc(_0RL_lcfn_a56b508728fda688_73000000, "getHeatData", 12);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::getHeatSchedule

// Proxy call descriptor class. Mangled signature:
//  _cseqHeatSchedule_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_83000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_83000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqHeatSchedule_var result;
};

void _0RL_cd_a56b508728fda688_83000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_83000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_83000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqHeatSchedule&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_83000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqHeatSchedule;
  (seqHeatSchedule&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_83000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_93000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_83000000* tcd = (_0RL_cd_a56b508728fda688_83000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getHeatSchedule(tcd->arg_0, tcd->arg_1);


}

seqHeatSchedule* _objref_iSMC_DataProvider::getHeatSchedule(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_83000000 _call_desc(_0RL_lcfn_a56b508728fda688_93000000, "getHeatSchedule", 16);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::getHeatSchedulePlant

// Proxy call descriptor class. Mangled signature:
//  _cseqHeatSchedulePlant_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_a3000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_a3000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqHeatSchedulePlant_var result;
};

void _0RL_cd_a56b508728fda688_a3000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_a3000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_a3000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqHeatSchedulePlant&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_a3000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqHeatSchedulePlant;
  (seqHeatSchedulePlant&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_a3000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_b3000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_a3000000* tcd = (_0RL_cd_a56b508728fda688_a3000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getHeatSchedulePlant(tcd->arg_0, tcd->arg_1);


}

seqHeatSchedulePlant* _objref_iSMC_DataProvider::getHeatSchedulePlant(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_a3000000 _call_desc(_0RL_lcfn_a56b508728fda688_b3000000, "getHeatSchedulePlant", 21);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::getHMDModelResult

// Proxy call descriptor class. Mangled signature:
//  _cseqHMDModelResult_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_c3000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_c3000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqHMDModelResult_var result;
};

void _0RL_cd_a56b508728fda688_c3000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_c3000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_c3000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqHMDModelResult&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_c3000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqHMDModelResult;
  (seqHMDModelResult&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_c3000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_d3000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_c3000000* tcd = (_0RL_cd_a56b508728fda688_c3000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getHMDModelResult(tcd->arg_0, tcd->arg_1);


}

seqHMDModelResult* _objref_iSMC_DataProvider::getHMDModelResult(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_c3000000 _call_desc(_0RL_lcfn_a56b508728fda688_d3000000, "getHMDModelResult", 18);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::getInjectData

// Proxy call descriptor class. Mangled signature:
//  _cseqInjectData_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_e3000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_e3000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqInjectData_var result;
};

void _0RL_cd_a56b508728fda688_e3000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_e3000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_e3000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqInjectData&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_e3000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqInjectData;
  (seqInjectData&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_e3000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_f3000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_e3000000* tcd = (_0RL_cd_a56b508728fda688_e3000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getInjectData(tcd->arg_0, tcd->arg_1);


}

seqInjectData* _objref_iSMC_DataProvider::getInjectData(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_e3000000 _call_desc(_0RL_lcfn_a56b508728fda688_f3000000, "getInjectData", 14);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::getInjectLanceData

// Proxy call descriptor class. Mangled signature:
//  _cseqInjectLanceData_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_04000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_04000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqInjectLanceData_var result;
};

void _0RL_cd_a56b508728fda688_04000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_04000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_04000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqInjectLanceData&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_04000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqInjectLanceData;
  (seqInjectLanceData&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_04000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_14000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_04000000* tcd = (_0RL_cd_a56b508728fda688_04000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getInjectLanceData(tcd->arg_0, tcd->arg_1);


}

seqInjectLanceData* _objref_iSMC_DataProvider::getInjectLanceData(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_04000000 _call_desc(_0RL_lcfn_a56b508728fda688_14000000, "getInjectLanceData", 19);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::getEAFInjectLance

// Proxy call descriptor class. Mangled signature:
//  _cseqEAFInjectLance_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_24000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_24000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqEAFInjectLance_var result;
};

void _0RL_cd_a56b508728fda688_24000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_24000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_24000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqEAFInjectLance&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_24000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqEAFInjectLance;
  (seqEAFInjectLance&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_24000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_34000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_24000000* tcd = (_0RL_cd_a56b508728fda688_24000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getEAFInjectLance(tcd->arg_0, tcd->arg_1);


}

seqEAFInjectLance* _objref_iSMC_DataProvider::getEAFInjectLance(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_24000000 _call_desc(_0RL_lcfn_a56b508728fda688_34000000, "getEAFInjectLance", 18);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::getLFElecPredRes

// Proxy call descriptor class. Mangled signature:
//  _cseqLFElecPredRes_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_44000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_44000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqLFElecPredRes_var result;
};

void _0RL_cd_a56b508728fda688_44000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_44000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_44000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqLFElecPredRes&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_44000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqLFElecPredRes;
  (seqLFElecPredRes&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_44000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_54000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_44000000* tcd = (_0RL_cd_a56b508728fda688_44000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getLFElecPredRes(tcd->arg_0, tcd->arg_1);


}

seqLFElecPredRes* _objref_iSMC_DataProvider::getLFElecPredRes(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_44000000 _call_desc(_0RL_lcfn_a56b508728fda688_54000000, "getLFElecPredRes", 17);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::getLFStirrPredRes

// Proxy call descriptor class. Mangled signature:
//  _cseqLFStirrPredRes_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_64000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_64000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqLFStirrPredRes_var result;
};

void _0RL_cd_a56b508728fda688_64000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_64000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_64000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqLFStirrPredRes&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_64000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqLFStirrPredRes;
  (seqLFStirrPredRes&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_64000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_74000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_64000000* tcd = (_0RL_cd_a56b508728fda688_64000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getLFStirrPredRes(tcd->arg_0, tcd->arg_1);


}

seqLFStirrPredRes* _objref_iSMC_DataProvider::getLFStirrPredRes(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_64000000 _call_desc(_0RL_lcfn_a56b508728fda688_74000000, "getLFStirrPredRes", 18);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::getLiqMatReport

// Proxy call descriptor class. Mangled signature:
//  _cseqLiqMatReport_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_84000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_84000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqLiqMatReport_var result;
};

void _0RL_cd_a56b508728fda688_84000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_84000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_84000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqLiqMatReport&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_84000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqLiqMatReport;
  (seqLiqMatReport&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_84000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_94000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_84000000* tcd = (_0RL_cd_a56b508728fda688_84000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getLiqMatReport(tcd->arg_0, tcd->arg_1);


}

seqLiqMatReport* _objref_iSMC_DataProvider::getLiqMatReport(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_84000000 _call_desc(_0RL_lcfn_a56b508728fda688_94000000, "getLiqMatReport", 16);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::getMaterials

// Proxy call descriptor class. Mangled signature:
//  _cseqMaterials_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_a4000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_a4000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqMaterials_var result;
};

void _0RL_cd_a56b508728fda688_a4000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_a4000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_a4000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqMaterials&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_a4000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqMaterials;
  (seqMaterials&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_a4000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_b4000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_a4000000* tcd = (_0RL_cd_a56b508728fda688_a4000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getMaterials(tcd->arg_0, tcd->arg_1);


}

seqMaterials* _objref_iSMC_DataProvider::getMaterials(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_a4000000 _call_desc(_0RL_lcfn_a56b508728fda688_b4000000, "getMaterials", 13);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::getOrderData

// Proxy call descriptor class. Mangled signature:
//  _cseqOrderData_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_c4000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_c4000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqOrderData_var result;
};

void _0RL_cd_a56b508728fda688_c4000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_c4000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_c4000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqOrderData&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_c4000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqOrderData;
  (seqOrderData&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_c4000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_d4000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_c4000000* tcd = (_0RL_cd_a56b508728fda688_c4000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getOrderData(tcd->arg_0, tcd->arg_1);


}

seqOrderData* _objref_iSMC_DataProvider::getOrderData(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_c4000000 _call_desc(_0RL_lcfn_a56b508728fda688_d4000000, "getOrderData", 13);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::getPhaseStatus

// Proxy call descriptor class. Mangled signature:
//  _cseqPhaseStatus_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_e4000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_e4000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqPhaseStatus_var result;
};

void _0RL_cd_a56b508728fda688_e4000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_e4000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_e4000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqPhaseStatus&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_e4000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqPhaseStatus;
  (seqPhaseStatus&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_e4000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_f4000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_e4000000* tcd = (_0RL_cd_a56b508728fda688_e4000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getPhaseStatus(tcd->arg_0, tcd->arg_1);


}

seqPhaseStatus* _objref_iSMC_DataProvider::getPhaseStatus(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_e4000000 _call_desc(_0RL_lcfn_a56b508728fda688_f4000000, "getPhaseStatus", 15);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::getPredRes

// Proxy call descriptor class. Mangled signature:
//  _cseqPredRes_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_05000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_05000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqPredRes_var result;
};

void _0RL_cd_a56b508728fda688_05000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_05000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_05000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqPredRes&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_05000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqPredRes;
  (seqPredRes&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_05000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_15000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_05000000* tcd = (_0RL_cd_a56b508728fda688_05000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getPredRes(tcd->arg_0, tcd->arg_1);


}

seqPredRes* _objref_iSMC_DataProvider::getPredRes(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_05000000 _call_desc(_0RL_lcfn_a56b508728fda688_15000000, "getPredRes", 11);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::getProductIdentification

// Proxy call descriptor class. Mangled signature:
//  _cseqProductIdentification_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_25000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_25000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqProductIdentification_var result;
};

void _0RL_cd_a56b508728fda688_25000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_25000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_25000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqProductIdentification&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_25000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqProductIdentification;
  (seqProductIdentification&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_25000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_35000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_25000000* tcd = (_0RL_cd_a56b508728fda688_25000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getProductIdentification(tcd->arg_0, tcd->arg_1);


}

seqProductIdentification* _objref_iSMC_DataProvider::getProductIdentification(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_25000000 _call_desc(_0RL_lcfn_a56b508728fda688_35000000, "getProductIdentification", 25);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::getRecipeList

// Proxy call descriptor class. Mangled signature:
//  _cseqRecipeList_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_45000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_45000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqRecipeList_var result;
};

void _0RL_cd_a56b508728fda688_45000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_45000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_45000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqRecipeList&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_45000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqRecipeList;
  (seqRecipeList&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_45000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_55000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_45000000* tcd = (_0RL_cd_a56b508728fda688_45000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getRecipeList(tcd->arg_0, tcd->arg_1);


}

seqRecipeList* _objref_iSMC_DataProvider::getRecipeList(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_45000000 _call_desc(_0RL_lcfn_a56b508728fda688_55000000, "getRecipeList", 14);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::getRHModelResult

// Proxy call descriptor class. Mangled signature:
//  _cseqRHModelResult_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_65000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_65000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqRHModelResult_var result;
};

void _0RL_cd_a56b508728fda688_65000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_65000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_65000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqRHModelResult&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_65000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqRHModelResult;
  (seqRHModelResult&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_65000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_75000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_65000000* tcd = (_0RL_cd_a56b508728fda688_65000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getRHModelResult(tcd->arg_0, tcd->arg_1);


}

seqRHModelResult* _objref_iSMC_DataProvider::getRHModelResult(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_65000000 _call_desc(_0RL_lcfn_a56b508728fda688_75000000, "getRHModelResult", 17);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::getVDModelResult

// Proxy call descriptor class. Mangled signature:
//  _cseqVDModelResult_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_85000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_85000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqVDModelResult_var result;
};

void _0RL_cd_a56b508728fda688_85000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_85000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_85000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqVDModelResult&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_85000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqVDModelResult;
  (seqVDModelResult&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_85000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_95000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_85000000* tcd = (_0RL_cd_a56b508728fda688_85000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getVDModelResult(tcd->arg_0, tcd->arg_1);


}

seqVDModelResult* _objref_iSMC_DataProvider::getVDModelResult(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_85000000 _call_desc(_0RL_lcfn_a56b508728fda688_95000000, "getVDModelResult", 17);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::getSampleData

// Proxy call descriptor class. Mangled signature:
//  _cseqSampleData_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_a5000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_a5000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqSampleData_var result;
};

void _0RL_cd_a56b508728fda688_a5000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_a5000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_a5000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqSampleData&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_a5000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqSampleData;
  (seqSampleData&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_a5000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_b5000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_a5000000* tcd = (_0RL_cd_a56b508728fda688_a5000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getSampleData(tcd->arg_0, tcd->arg_1);


}

seqSampleData* _objref_iSMC_DataProvider::getSampleData(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_a5000000 _call_desc(_0RL_lcfn_a56b508728fda688_b5000000, "getSampleData", 14);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::getStatus

// Proxy call descriptor class. Mangled signature:
//  _cseqStatus_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_c5000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_c5000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqStatus_var result;
};

void _0RL_cd_a56b508728fda688_c5000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_c5000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_c5000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqStatus&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_c5000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqStatus;
  (seqStatus&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_c5000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_d5000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_c5000000* tcd = (_0RL_cd_a56b508728fda688_c5000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getStatus(tcd->arg_0, tcd->arg_1);


}

seqStatus* _objref_iSMC_DataProvider::getStatus(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_c5000000 _call_desc(_0RL_lcfn_a56b508728fda688_d5000000, "getStatus", 10);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::getStirringData

// Proxy call descriptor class. Mangled signature:
//  _cseqStirringData_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_e5000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_e5000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqStirringData_var result;
};

void _0RL_cd_a56b508728fda688_e5000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_e5000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_e5000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqStirringData&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_e5000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqStirringData;
  (seqStirringData&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_e5000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_f5000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_e5000000* tcd = (_0RL_cd_a56b508728fda688_e5000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getStirringData(tcd->arg_0, tcd->arg_1);


}

seqStirringData* _objref_iSMC_DataProvider::getStirringData(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_e5000000 _call_desc(_0RL_lcfn_a56b508728fda688_f5000000, "getStirringData", 16);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::getStringList

// Proxy call descriptor class. Mangled signature:
//  _cseqStringList_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_06000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_06000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqStringList_var result;
};

void _0RL_cd_a56b508728fda688_06000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_06000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_06000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqStringList&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_06000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqStringList;
  (seqStringList&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_06000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_16000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_06000000* tcd = (_0RL_cd_a56b508728fda688_06000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getStringList(tcd->arg_0, tcd->arg_1);


}

seqStringList* _objref_iSMC_DataProvider::getStringList(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_06000000 _call_desc(_0RL_lcfn_a56b508728fda688_16000000, "getStringList", 14);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::getWasteGas

// Proxy call descriptor class. Mangled signature:
//  _cseqWasteGas_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_26000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_26000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqWasteGas_var result;
};

void _0RL_cd_a56b508728fda688_26000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_26000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_26000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqWasteGas&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_26000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqWasteGas;
  (seqWasteGas&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_26000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_36000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_26000000* tcd = (_0RL_cd_a56b508728fda688_26000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getWasteGas(tcd->arg_0, tcd->arg_1);


}

seqWasteGas* _objref_iSMC_DataProvider::getWasteGas(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_26000000 _call_desc(_0RL_lcfn_a56b508728fda688_36000000, "getWasteGas", 12);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::getWireFeeder

// Proxy call descriptor class. Mangled signature:
//  _cseqWireFeeder_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_46000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_46000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqWireFeeder_var result;
};

void _0RL_cd_a56b508728fda688_46000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_46000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_46000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqWireFeeder&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_46000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqWireFeeder;
  (seqWireFeeder&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_46000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_56000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_46000000* tcd = (_0RL_cd_a56b508728fda688_46000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getWireFeeder(tcd->arg_0, tcd->arg_1);


}

seqWireFeeder* _objref_iSMC_DataProvider::getWireFeeder(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_46000000 _call_desc(_0RL_lcfn_a56b508728fda688_56000000, "getWireFeeder", 14);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::setAnalysis

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqAnalysis
class _0RL_cd_a56b508728fda688_66000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_66000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqAnalysis_var arg_2_;
  const seqAnalysis* arg_2;
};

void _0RL_cd_a56b508728fda688_66000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqAnalysis&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_66000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqAnalysis;
  (seqAnalysis&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_66000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_76000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_66000000* tcd = (_0RL_cd_a56b508728fda688_66000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setAnalysis(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setAnalysis(const char* Key, const char* Name, const ::seqAnalysis& NewData)
{
  _0RL_cd_a56b508728fda688_66000000 _call_desc(_0RL_lcfn_a56b508728fda688_76000000, "setAnalysis", 12);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqAnalysis&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::setAnalysisData

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqAnalysisData
class _0RL_cd_a56b508728fda688_86000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_86000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqAnalysisData_var arg_2_;
  const seqAnalysisData* arg_2;
};

void _0RL_cd_a56b508728fda688_86000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqAnalysisData&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_86000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqAnalysisData;
  (seqAnalysisData&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_86000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_96000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_86000000* tcd = (_0RL_cd_a56b508728fda688_86000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setAnalysisData(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setAnalysisData(const char* Key, const char* Name, const ::seqAnalysisData& NewData)
{
  _0RL_cd_a56b508728fda688_86000000 _call_desc(_0RL_lcfn_a56b508728fda688_96000000, "setAnalysisData", 16);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqAnalysisData&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::setAODBlowPredRes

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqAODBlowPredRes
class _0RL_cd_a56b508728fda688_a6000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_a6000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqAODBlowPredRes_var arg_2_;
  const seqAODBlowPredRes* arg_2;
};

void _0RL_cd_a56b508728fda688_a6000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqAODBlowPredRes&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_a6000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqAODBlowPredRes;
  (seqAODBlowPredRes&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_a6000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_b6000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_a6000000* tcd = (_0RL_cd_a56b508728fda688_a6000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setAODBlowPredRes(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setAODBlowPredRes(const char* Key, const char* Name, const ::seqAODBlowPredRes& NewData)
{
  _0RL_cd_a56b508728fda688_a6000000 _call_desc(_0RL_lcfn_a56b508728fda688_b6000000, "setAODBlowPredRes", 18);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqAODBlowPredRes&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::setAODGlobalSetpoints

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqAODGlobalSetpoints
class _0RL_cd_a56b508728fda688_c6000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_c6000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqAODGlobalSetpoints_var arg_2_;
  const seqAODGlobalSetpoints* arg_2;
};

void _0RL_cd_a56b508728fda688_c6000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqAODGlobalSetpoints&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_c6000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqAODGlobalSetpoints;
  (seqAODGlobalSetpoints&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_c6000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_d6000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_c6000000* tcd = (_0RL_cd_a56b508728fda688_c6000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setAODGlobalSetpoints(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setAODGlobalSetpoints(const char* Key, const char* Name, const ::seqAODGlobalSetpoints& NewData)
{
  _0RL_cd_a56b508728fda688_c6000000 _call_desc(_0RL_lcfn_a56b508728fda688_d6000000, "setAODGlobalSetpoints", 22);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqAODGlobalSetpoints&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::setBatch

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqBatch
class _0RL_cd_a56b508728fda688_e6000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_e6000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqBatch_var arg_2_;
  const seqBatch* arg_2;
};

void _0RL_cd_a56b508728fda688_e6000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqBatch&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_e6000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqBatch;
  (seqBatch&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_e6000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_f6000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_e6000000* tcd = (_0RL_cd_a56b508728fda688_e6000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setBatch(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setBatch(const char* Key, const char* Name, const ::seqBatch& NewData)
{
  _0RL_cd_a56b508728fda688_e6000000 _call_desc(_0RL_lcfn_a56b508728fda688_f6000000, "setBatch", 9);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqBatch&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::setBlowStatus

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqBlowStatus
class _0RL_cd_a56b508728fda688_07000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_07000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqBlowStatus_var arg_2_;
  const seqBlowStatus* arg_2;
};

void _0RL_cd_a56b508728fda688_07000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqBlowStatus&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_07000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqBlowStatus;
  (seqBlowStatus&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_07000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_17000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_07000000* tcd = (_0RL_cd_a56b508728fda688_07000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setBlowStatus(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setBlowStatus(const char* Key, const char* Name, const ::seqBlowStatus& NewData)
{
  _0RL_cd_a56b508728fda688_07000000 _call_desc(_0RL_lcfn_a56b508728fda688_17000000, "setBlowStatus", 14);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqBlowStatus&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::setBOFBlowPredRes

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqBOFBlowPredRes
class _0RL_cd_a56b508728fda688_27000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_27000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqBOFBlowPredRes_var arg_2_;
  const seqBOFBlowPredRes* arg_2;
};

void _0RL_cd_a56b508728fda688_27000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqBOFBlowPredRes&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_27000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqBOFBlowPredRes;
  (seqBOFBlowPredRes&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_27000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_37000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_27000000* tcd = (_0RL_cd_a56b508728fda688_27000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setBOFBlowPredRes(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setBOFBlowPredRes(const char* Key, const char* Name, const ::seqBOFBlowPredRes& NewData)
{
  _0RL_cd_a56b508728fda688_27000000 _call_desc(_0RL_lcfn_a56b508728fda688_37000000, "setBOFBlowPredRes", 18);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqBOFBlowPredRes&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::setBOFGlobalSetpoints

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqBOFGlobalSetpoints
class _0RL_cd_a56b508728fda688_47000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_47000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqBOFGlobalSetpoints_var arg_2_;
  const seqBOFGlobalSetpoints* arg_2;
};

void _0RL_cd_a56b508728fda688_47000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqBOFGlobalSetpoints&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_47000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqBOFGlobalSetpoints;
  (seqBOFGlobalSetpoints&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_47000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_57000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_47000000* tcd = (_0RL_cd_a56b508728fda688_47000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setBOFGlobalSetpoints(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setBOFGlobalSetpoints(const char* Key, const char* Name, const ::seqBOFGlobalSetpoints& NewData)
{
  _0RL_cd_a56b508728fda688_47000000 _call_desc(_0RL_lcfn_a56b508728fda688_57000000, "setBOFGlobalSetpoints", 22);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqBOFGlobalSetpoints&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::setComputerModes

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqComputerModes
class _0RL_cd_a56b508728fda688_67000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_67000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqComputerModes_var arg_2_;
  const seqComputerModes* arg_2;
};

void _0RL_cd_a56b508728fda688_67000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqComputerModes&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_67000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqComputerModes;
  (seqComputerModes&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_67000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_77000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_67000000* tcd = (_0RL_cd_a56b508728fda688_67000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setComputerModes(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setComputerModes(const char* Key, const char* Name, const ::seqComputerModes& NewData)
{
  _0RL_cd_a56b508728fda688_67000000 _call_desc(_0RL_lcfn_a56b508728fda688_77000000, "setComputerModes", 17);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqComputerModes&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::setConArcBlowData

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqConArcBlowData
class _0RL_cd_a56b508728fda688_87000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_87000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqConArcBlowData_var arg_2_;
  const seqConArcBlowData* arg_2;
};

void _0RL_cd_a56b508728fda688_87000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqConArcBlowData&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_87000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqConArcBlowData;
  (seqConArcBlowData&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_87000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_97000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_87000000* tcd = (_0RL_cd_a56b508728fda688_87000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setConArcBlowData(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setConArcBlowData(const char* Key, const char* Name, const ::seqConArcBlowData& NewData)
{
  _0RL_cd_a56b508728fda688_87000000 _call_desc(_0RL_lcfn_a56b508728fda688_97000000, "setConArcBlowData", 18);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqConArcBlowData&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::setConArcElecData

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqConArcElecData
class _0RL_cd_a56b508728fda688_a7000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_a7000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqConArcElecData_var arg_2_;
  const seqConArcElecData* arg_2;
};

void _0RL_cd_a56b508728fda688_a7000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqConArcElecData&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_a7000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqConArcElecData;
  (seqConArcElecData&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_a7000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_b7000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_a7000000* tcd = (_0RL_cd_a56b508728fda688_a7000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setConArcElecData(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setConArcElecData(const char* Key, const char* Name, const ::seqConArcElecData& NewData)
{
  _0RL_cd_a56b508728fda688_a7000000 _call_desc(_0RL_lcfn_a56b508728fda688_b7000000, "setConArcElecData", 18);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqConArcElecData&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::setConArcModelResult

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqConArcModelResult
class _0RL_cd_a56b508728fda688_c7000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_c7000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqConArcModelResult_var arg_2_;
  const seqConArcModelResult* arg_2;
};

void _0RL_cd_a56b508728fda688_c7000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqConArcModelResult&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_c7000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqConArcModelResult;
  (seqConArcModelResult&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_c7000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_d7000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_c7000000* tcd = (_0RL_cd_a56b508728fda688_c7000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setConArcModelResult(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setConArcModelResult(const char* Key, const char* Name, const ::seqConArcModelResult& NewData)
{
  _0RL_cd_a56b508728fda688_c7000000 _call_desc(_0RL_lcfn_a56b508728fda688_d7000000, "setConArcModelResult", 21);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqConArcModelResult&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::setConArcMeasData

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqConArcMeasData
class _0RL_cd_a56b508728fda688_e7000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_e7000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqConArcMeasData_var arg_2_;
  const seqConArcMeasData* arg_2;
};

void _0RL_cd_a56b508728fda688_e7000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqConArcMeasData&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_e7000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqConArcMeasData;
  (seqConArcMeasData&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_e7000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_f7000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_e7000000* tcd = (_0RL_cd_a56b508728fda688_e7000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setConArcMeasData(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setConArcMeasData(const char* Key, const char* Name, const ::seqConArcMeasData& NewData)
{
  _0RL_cd_a56b508728fda688_e7000000 _call_desc(_0RL_lcfn_a56b508728fda688_f7000000, "setConArcMeasData", 18);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqConArcMeasData&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::setConArcMediaData

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqConArcMediaData
class _0RL_cd_a56b508728fda688_08000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_08000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqConArcMediaData_var arg_2_;
  const seqConArcMediaData* arg_2;
};

void _0RL_cd_a56b508728fda688_08000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqConArcMediaData&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_08000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqConArcMediaData;
  (seqConArcMediaData&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_08000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_18000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_08000000* tcd = (_0RL_cd_a56b508728fda688_08000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setConArcMediaData(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setConArcMediaData(const char* Key, const char* Name, const ::seqConArcMediaData& NewData)
{
  _0RL_cd_a56b508728fda688_08000000 _call_desc(_0RL_lcfn_a56b508728fda688_18000000, "setConArcMediaData", 19);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqConArcMediaData&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::setConArcSetptData

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqConArcSetptData
class _0RL_cd_a56b508728fda688_28000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_28000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqConArcSetptData_var arg_2_;
  const seqConArcSetptData* arg_2;
};

void _0RL_cd_a56b508728fda688_28000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqConArcSetptData&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_28000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqConArcSetptData;
  (seqConArcSetptData&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_28000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_38000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_28000000* tcd = (_0RL_cd_a56b508728fda688_28000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setConArcSetptData(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setConArcSetptData(const char* Key, const char* Name, const ::seqConArcSetptData& NewData)
{
  _0RL_cd_a56b508728fda688_28000000 _call_desc(_0RL_lcfn_a56b508728fda688_38000000, "setConArcSetptData", 19);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqConArcSetptData&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::setCoolWaterData

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqCoolWaterData
class _0RL_cd_a56b508728fda688_48000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_48000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqCoolWaterData_var arg_2_;
  const seqCoolWaterData* arg_2;
};

void _0RL_cd_a56b508728fda688_48000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqCoolWaterData&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_48000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqCoolWaterData;
  (seqCoolWaterData&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_48000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_58000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_48000000* tcd = (_0RL_cd_a56b508728fda688_48000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setCoolWaterData(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setCoolWaterData(const char* Key, const char* Name, const ::seqCoolWaterData& NewData)
{
  _0RL_cd_a56b508728fda688_48000000 _call_desc(_0RL_lcfn_a56b508728fda688_58000000, "setCoolWaterData", 17);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqCoolWaterData&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::setDate

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cMCBS_mCBS__LocalTime
class _0RL_cd_a56b508728fda688_68000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_68000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  sDate arg_2_;
  const sDate* arg_2;
};

void _0RL_cd_a56b508728fda688_68000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const sDate&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_68000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  (sDate&)arg_2_ <<= _n;
  arg_2 = &arg_2_;

}

const char* const _0RL_cd_a56b508728fda688_68000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_78000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_68000000* tcd = (_0RL_cd_a56b508728fda688_68000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setDate(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setDate(const char* Key, const char* Name, const ::sDate& NewData)
{
  _0RL_cd_a56b508728fda688_68000000 _call_desc(_0RL_lcfn_a56b508728fda688_78000000, "setDate", 8);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::sDate&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::setEAFBurnerPredRes

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqEAFBurnerPredRes
class _0RL_cd_a56b508728fda688_88000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_88000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqEAFBurnerPredRes_var arg_2_;
  const seqEAFBurnerPredRes* arg_2;
};

void _0RL_cd_a56b508728fda688_88000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqEAFBurnerPredRes&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_88000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqEAFBurnerPredRes;
  (seqEAFBurnerPredRes&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_88000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_98000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_88000000* tcd = (_0RL_cd_a56b508728fda688_88000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setEAFBurnerPredRes(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setEAFBurnerPredRes(const char* Key, const char* Name, const ::seqEAFBurnerPredRes& NewData)
{
  _0RL_cd_a56b508728fda688_88000000 _call_desc(_0RL_lcfn_a56b508728fda688_98000000, "setEAFBurnerPredRes", 20);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqEAFBurnerPredRes&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::setEAFGasLancePredRes

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqEAFGasLancePredRes
class _0RL_cd_a56b508728fda688_a8000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_a8000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqEAFGasLancePredRes_var arg_2_;
  const seqEAFGasLancePredRes* arg_2;
};

void _0RL_cd_a56b508728fda688_a8000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqEAFGasLancePredRes&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_a8000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqEAFGasLancePredRes;
  (seqEAFGasLancePredRes&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_a8000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_b8000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_a8000000* tcd = (_0RL_cd_a56b508728fda688_a8000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setEAFGasLancePredRes(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setEAFGasLancePredRes(const char* Key, const char* Name, const ::seqEAFGasLancePredRes& NewData)
{
  _0RL_cd_a56b508728fda688_a8000000 _call_desc(_0RL_lcfn_a56b508728fda688_b8000000, "setEAFGasLancePredRes", 22);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqEAFGasLancePredRes&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::setEAFProcessPredRes

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqEAFProcessPredRes
class _0RL_cd_a56b508728fda688_c8000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_c8000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqEAFProcessPredRes_var arg_2_;
  const seqEAFProcessPredRes* arg_2;
};

void _0RL_cd_a56b508728fda688_c8000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqEAFProcessPredRes&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_c8000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqEAFProcessPredRes;
  (seqEAFProcessPredRes&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_c8000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_d8000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_c8000000* tcd = (_0RL_cd_a56b508728fda688_c8000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setEAFProcessPredRes(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setEAFProcessPredRes(const char* Key, const char* Name, const ::seqEAFProcessPredRes& NewData)
{
  _0RL_cd_a56b508728fda688_c8000000 _call_desc(_0RL_lcfn_a56b508728fda688_d8000000, "setEAFProcessPredRes", 21);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqEAFProcessPredRes&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::setEAFInjectLance

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqEAFInjectLance
class _0RL_cd_a56b508728fda688_e8000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_e8000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqEAFInjectLance_var arg_2_;
  const seqEAFInjectLance* arg_2;
};

void _0RL_cd_a56b508728fda688_e8000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqEAFInjectLance&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_e8000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqEAFInjectLance;
  (seqEAFInjectLance&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_e8000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_f8000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_e8000000* tcd = (_0RL_cd_a56b508728fda688_e8000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setEAFInjectLance(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setEAFInjectLance(const char* Key, const char* Name, const ::seqEAFInjectLance& NewData)
{
  _0RL_cd_a56b508728fda688_e8000000 _call_desc(_0RL_lcfn_a56b508728fda688_f8000000, "setEAFInjectLance", 18);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqEAFInjectLance&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::setEAFMatFeed

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqEAFMatFeed
class _0RL_cd_a56b508728fda688_09000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_09000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqEAFMatFeed_var arg_2_;
  const seqEAFMatFeed* arg_2;
};

void _0RL_cd_a56b508728fda688_09000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqEAFMatFeed&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_09000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqEAFMatFeed;
  (seqEAFMatFeed&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_09000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_19000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_09000000* tcd = (_0RL_cd_a56b508728fda688_09000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setEAFMatFeed(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setEAFMatFeed(const char* Key, const char* Name, const ::seqEAFMatFeed& NewData)
{
  _0RL_cd_a56b508728fda688_09000000 _call_desc(_0RL_lcfn_a56b508728fda688_19000000, "setEAFMatFeed", 14);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqEAFMatFeed&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::setEAFMatFeedPredRes

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqEAFMatFeedPredRes
class _0RL_cd_a56b508728fda688_29000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_29000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqEAFMatFeedPredRes_var arg_2_;
  const seqEAFMatFeedPredRes* arg_2;
};

void _0RL_cd_a56b508728fda688_29000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqEAFMatFeedPredRes&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_29000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqEAFMatFeedPredRes;
  (seqEAFMatFeedPredRes&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_29000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_39000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_29000000* tcd = (_0RL_cd_a56b508728fda688_29000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setEAFMatFeedPredRes(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setEAFMatFeedPredRes(const char* Key, const char* Name, const ::seqEAFMatFeedPredRes& NewData)
{
  _0RL_cd_a56b508728fda688_29000000 _call_desc(_0RL_lcfn_a56b508728fda688_39000000, "setEAFMatFeedPredRes", 21);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqEAFMatFeedPredRes&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::setElecPhaseData

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqElecPhaseData
class _0RL_cd_a56b508728fda688_49000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_49000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqElecPhaseData_var arg_2_;
  const seqElecPhaseData* arg_2;
};

void _0RL_cd_a56b508728fda688_49000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqElecPhaseData&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_49000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqElecPhaseData;
  (seqElecPhaseData&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_49000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_59000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_49000000* tcd = (_0RL_cd_a56b508728fda688_49000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setElecPhaseData(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setElecPhaseData(const char* Key, const char* Name, const ::seqElecPhaseData& NewData)
{
  _0RL_cd_a56b508728fda688_49000000 _call_desc(_0RL_lcfn_a56b508728fda688_59000000, "setElecPhaseData", 17);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqElecPhaseData&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::setGasAvail

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqGasAvail
class _0RL_cd_a56b508728fda688_69000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_69000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqGasAvail_var arg_2_;
  const seqGasAvail* arg_2;
};

void _0RL_cd_a56b508728fda688_69000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqGasAvail&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_69000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqGasAvail;
  (seqGasAvail&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_69000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_79000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_69000000* tcd = (_0RL_cd_a56b508728fda688_69000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setGasAvail(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setGasAvail(const char* Key, const char* Name, const ::seqGasAvail& NewData)
{
  _0RL_cd_a56b508728fda688_69000000 _call_desc(_0RL_lcfn_a56b508728fda688_79000000, "setGasAvail", 12);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqGasAvail&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::setGasData

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqGasData
class _0RL_cd_a56b508728fda688_89000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_89000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqGasData_var arg_2_;
  const seqGasData* arg_2;
};

void _0RL_cd_a56b508728fda688_89000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqGasData&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_89000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqGasData;
  (seqGasData&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_89000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_99000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_89000000* tcd = (_0RL_cd_a56b508728fda688_89000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setGasData(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setGasData(const char* Key, const char* Name, const ::seqGasData& NewData)
{
  _0RL_cd_a56b508728fda688_89000000 _call_desc(_0RL_lcfn_a56b508728fda688_99000000, "setGasData", 11);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqGasData&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::setGasLanceData

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqGasLanceData
class _0RL_cd_a56b508728fda688_a9000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_a9000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqGasLanceData_var arg_2_;
  const seqGasLanceData* arg_2;
};

void _0RL_cd_a56b508728fda688_a9000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqGasLanceData&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_a9000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqGasLanceData;
  (seqGasLanceData&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_a9000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_b9000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_a9000000* tcd = (_0RL_cd_a56b508728fda688_a9000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setGasLanceData(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setGasLanceData(const char* Key, const char* Name, const ::seqGasLanceData& NewData)
{
  _0RL_cd_a56b508728fda688_a9000000 _call_desc(_0RL_lcfn_a56b508728fda688_b9000000, "setGasLanceData", 16);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqGasLanceData&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::setGasLanceGasAvail

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqGasLanceGasAvail
class _0RL_cd_a56b508728fda688_c9000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_c9000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqGasLanceGasAvail_var arg_2_;
  const seqGasLanceGasAvail* arg_2;
};

void _0RL_cd_a56b508728fda688_c9000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqGasLanceGasAvail&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_c9000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqGasLanceGasAvail;
  (seqGasLanceGasAvail&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_c9000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_d9000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_c9000000* tcd = (_0RL_cd_a56b508728fda688_c9000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setGasLanceGasAvail(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setGasLanceGasAvail(const char* Key, const char* Name, const ::seqGasLanceGasAvail& NewData)
{
  _0RL_cd_a56b508728fda688_c9000000 _call_desc(_0RL_lcfn_a56b508728fda688_d9000000, "setGasLanceGasAvail", 20);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqGasLanceGasAvail&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::setHeatData

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqHeatData
class _0RL_cd_a56b508728fda688_e9000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_e9000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqHeatData_var arg_2_;
  const seqHeatData* arg_2;
};

void _0RL_cd_a56b508728fda688_e9000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqHeatData&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_e9000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqHeatData;
  (seqHeatData&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_e9000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_f9000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_e9000000* tcd = (_0RL_cd_a56b508728fda688_e9000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setHeatData(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setHeatData(const char* Key, const char* Name, const ::seqHeatData& NewData)
{
  _0RL_cd_a56b508728fda688_e9000000 _call_desc(_0RL_lcfn_a56b508728fda688_f9000000, "setHeatData", 12);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqHeatData&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::setHeatSchedule

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqHeatSchedule
class _0RL_cd_a56b508728fda688_0a000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_0a000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqHeatSchedule_var arg_2_;
  const seqHeatSchedule* arg_2;
};

void _0RL_cd_a56b508728fda688_0a000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqHeatSchedule&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_0a000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqHeatSchedule;
  (seqHeatSchedule&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_0a000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_1a000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_0a000000* tcd = (_0RL_cd_a56b508728fda688_0a000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setHeatSchedule(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setHeatSchedule(const char* Key, const char* Name, const ::seqHeatSchedule& NewData)
{
  _0RL_cd_a56b508728fda688_0a000000 _call_desc(_0RL_lcfn_a56b508728fda688_1a000000, "setHeatSchedule", 16);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqHeatSchedule&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::setHeatSchedulePlant

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqHeatSchedulePlant
class _0RL_cd_a56b508728fda688_2a000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_2a000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqHeatSchedulePlant_var arg_2_;
  const seqHeatSchedulePlant* arg_2;
};

void _0RL_cd_a56b508728fda688_2a000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqHeatSchedulePlant&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_2a000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqHeatSchedulePlant;
  (seqHeatSchedulePlant&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_2a000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_3a000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_2a000000* tcd = (_0RL_cd_a56b508728fda688_2a000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setHeatSchedulePlant(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setHeatSchedulePlant(const char* Key, const char* Name, const ::seqHeatSchedulePlant& NewData)
{
  _0RL_cd_a56b508728fda688_2a000000 _call_desc(_0RL_lcfn_a56b508728fda688_3a000000, "setHeatSchedulePlant", 21);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqHeatSchedulePlant&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::setHMDModelResult

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqHMDModelResult
class _0RL_cd_a56b508728fda688_4a000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_4a000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqHMDModelResult_var arg_2_;
  const seqHMDModelResult* arg_2;
};

void _0RL_cd_a56b508728fda688_4a000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqHMDModelResult&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_4a000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqHMDModelResult;
  (seqHMDModelResult&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_4a000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_5a000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_4a000000* tcd = (_0RL_cd_a56b508728fda688_4a000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setHMDModelResult(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setHMDModelResult(const char* Key, const char* Name, const ::seqHMDModelResult& NewData)
{
  _0RL_cd_a56b508728fda688_4a000000 _call_desc(_0RL_lcfn_a56b508728fda688_5a000000, "setHMDModelResult", 18);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqHMDModelResult&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::setInjectData

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqInjectData
class _0RL_cd_a56b508728fda688_6a000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_6a000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqInjectData_var arg_2_;
  const seqInjectData* arg_2;
};

void _0RL_cd_a56b508728fda688_6a000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqInjectData&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_6a000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqInjectData;
  (seqInjectData&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_6a000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_7a000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_6a000000* tcd = (_0RL_cd_a56b508728fda688_6a000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setInjectData(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setInjectData(const char* Key, const char* Name, const ::seqInjectData& NewData)
{
  _0RL_cd_a56b508728fda688_6a000000 _call_desc(_0RL_lcfn_a56b508728fda688_7a000000, "setInjectData", 14);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqInjectData&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::setInjectLanceData

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqInjectLanceData
class _0RL_cd_a56b508728fda688_8a000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_8a000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqInjectLanceData_var arg_2_;
  const seqInjectLanceData* arg_2;
};

void _0RL_cd_a56b508728fda688_8a000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqInjectLanceData&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_8a000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqInjectLanceData;
  (seqInjectLanceData&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_8a000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_9a000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_8a000000* tcd = (_0RL_cd_a56b508728fda688_8a000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setInjectLanceData(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setInjectLanceData(const char* Key, const char* Name, const ::seqInjectLanceData& NewData)
{
  _0RL_cd_a56b508728fda688_8a000000 _call_desc(_0RL_lcfn_a56b508728fda688_9a000000, "setInjectLanceData", 19);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqInjectLanceData&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::setLFElecPredRes

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqLFElecPredRes
class _0RL_cd_a56b508728fda688_aa000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_aa000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqLFElecPredRes_var arg_2_;
  const seqLFElecPredRes* arg_2;
};

void _0RL_cd_a56b508728fda688_aa000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqLFElecPredRes&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_aa000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqLFElecPredRes;
  (seqLFElecPredRes&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_aa000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_ba000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_aa000000* tcd = (_0RL_cd_a56b508728fda688_aa000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setLFElecPredRes(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setLFElecPredRes(const char* Key, const char* Name, const ::seqLFElecPredRes& NewData)
{
  _0RL_cd_a56b508728fda688_aa000000 _call_desc(_0RL_lcfn_a56b508728fda688_ba000000, "setLFElecPredRes", 17);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqLFElecPredRes&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::setLFStirrPredRes

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqLFStirrPredRes
class _0RL_cd_a56b508728fda688_ca000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_ca000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqLFStirrPredRes_var arg_2_;
  const seqLFStirrPredRes* arg_2;
};

void _0RL_cd_a56b508728fda688_ca000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqLFStirrPredRes&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_ca000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqLFStirrPredRes;
  (seqLFStirrPredRes&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_ca000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_da000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_ca000000* tcd = (_0RL_cd_a56b508728fda688_ca000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setLFStirrPredRes(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setLFStirrPredRes(const char* Key, const char* Name, const ::seqLFStirrPredRes& NewData)
{
  _0RL_cd_a56b508728fda688_ca000000 _call_desc(_0RL_lcfn_a56b508728fda688_da000000, "setLFStirrPredRes", 18);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqLFStirrPredRes&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::setLiqMatReport

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqLiqMatReport
class _0RL_cd_a56b508728fda688_ea000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_ea000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqLiqMatReport_var arg_2_;
  const seqLiqMatReport* arg_2;
};

void _0RL_cd_a56b508728fda688_ea000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqLiqMatReport&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_ea000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqLiqMatReport;
  (seqLiqMatReport&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_ea000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_fa000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_ea000000* tcd = (_0RL_cd_a56b508728fda688_ea000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setLiqMatReport(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setLiqMatReport(const char* Key, const char* Name, const ::seqLiqMatReport& NewData)
{
  _0RL_cd_a56b508728fda688_ea000000 _call_desc(_0RL_lcfn_a56b508728fda688_fa000000, "setLiqMatReport", 16);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqLiqMatReport&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::setMaterials

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqMaterials
class _0RL_cd_a56b508728fda688_0b000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_0b000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqMaterials_var arg_2_;
  const seqMaterials* arg_2;
};

void _0RL_cd_a56b508728fda688_0b000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqMaterials&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_0b000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqMaterials;
  (seqMaterials&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_0b000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_1b000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_0b000000* tcd = (_0RL_cd_a56b508728fda688_0b000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setMaterials(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setMaterials(const char* Key, const char* Name, const ::seqMaterials& NewData)
{
  _0RL_cd_a56b508728fda688_0b000000 _call_desc(_0RL_lcfn_a56b508728fda688_1b000000, "setMaterials", 13);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqMaterials&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::setOrderData

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqOrderData
class _0RL_cd_a56b508728fda688_2b000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_2b000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqOrderData_var arg_2_;
  const seqOrderData* arg_2;
};

void _0RL_cd_a56b508728fda688_2b000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqOrderData&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_2b000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqOrderData;
  (seqOrderData&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_2b000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_3b000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_2b000000* tcd = (_0RL_cd_a56b508728fda688_2b000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setOrderData(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setOrderData(const char* Key, const char* Name, const ::seqOrderData& NewData)
{
  _0RL_cd_a56b508728fda688_2b000000 _call_desc(_0RL_lcfn_a56b508728fda688_3b000000, "setOrderData", 13);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqOrderData&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::setPhaseStatus

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqPhaseStatus
class _0RL_cd_a56b508728fda688_4b000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_4b000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqPhaseStatus_var arg_2_;
  const seqPhaseStatus* arg_2;
};

void _0RL_cd_a56b508728fda688_4b000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqPhaseStatus&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_4b000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqPhaseStatus;
  (seqPhaseStatus&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_4b000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_5b000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_4b000000* tcd = (_0RL_cd_a56b508728fda688_4b000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setPhaseStatus(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setPhaseStatus(const char* Key, const char* Name, const ::seqPhaseStatus& NewData)
{
  _0RL_cd_a56b508728fda688_4b000000 _call_desc(_0RL_lcfn_a56b508728fda688_5b000000, "setPhaseStatus", 15);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqPhaseStatus&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::setPredRes

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqPredRes
class _0RL_cd_a56b508728fda688_6b000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_6b000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqPredRes_var arg_2_;
  const seqPredRes* arg_2;
};

void _0RL_cd_a56b508728fda688_6b000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqPredRes&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_6b000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqPredRes;
  (seqPredRes&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_6b000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_7b000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_6b000000* tcd = (_0RL_cd_a56b508728fda688_6b000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setPredRes(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setPredRes(const char* Key, const char* Name, const ::seqPredRes& NewData)
{
  _0RL_cd_a56b508728fda688_6b000000 _call_desc(_0RL_lcfn_a56b508728fda688_7b000000, "setPredRes", 11);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqPredRes&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::setProductIdentification

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqProductIdentification
class _0RL_cd_a56b508728fda688_8b000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_8b000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqProductIdentification_var arg_2_;
  const seqProductIdentification* arg_2;
};

void _0RL_cd_a56b508728fda688_8b000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqProductIdentification&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_8b000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqProductIdentification;
  (seqProductIdentification&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_8b000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_9b000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_8b000000* tcd = (_0RL_cd_a56b508728fda688_8b000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setProductIdentification(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setProductIdentification(const char* Key, const char* Name, const ::seqProductIdentification& NewData)
{
  _0RL_cd_a56b508728fda688_8b000000 _call_desc(_0RL_lcfn_a56b508728fda688_9b000000, "setProductIdentification", 25);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqProductIdentification&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::setRecipeList

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqRecipeList
class _0RL_cd_a56b508728fda688_ab000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_ab000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqRecipeList_var arg_2_;
  const seqRecipeList* arg_2;
};

void _0RL_cd_a56b508728fda688_ab000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqRecipeList&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_ab000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqRecipeList;
  (seqRecipeList&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_ab000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_bb000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_ab000000* tcd = (_0RL_cd_a56b508728fda688_ab000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setRecipeList(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setRecipeList(const char* Key, const char* Name, const ::seqRecipeList& NewData)
{
  _0RL_cd_a56b508728fda688_ab000000 _call_desc(_0RL_lcfn_a56b508728fda688_bb000000, "setRecipeList", 14);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqRecipeList&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::setRHModelResult

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqRHModelResult
class _0RL_cd_a56b508728fda688_cb000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_cb000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqRHModelResult_var arg_2_;
  const seqRHModelResult* arg_2;
};

void _0RL_cd_a56b508728fda688_cb000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqRHModelResult&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_cb000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqRHModelResult;
  (seqRHModelResult&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_cb000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_db000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_cb000000* tcd = (_0RL_cd_a56b508728fda688_cb000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setRHModelResult(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setRHModelResult(const char* Key, const char* Name, const ::seqRHModelResult& NewData)
{
  _0RL_cd_a56b508728fda688_cb000000 _call_desc(_0RL_lcfn_a56b508728fda688_db000000, "setRHModelResult", 17);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqRHModelResult&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::setVDModelResult

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqVDModelResult
class _0RL_cd_a56b508728fda688_eb000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_eb000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqVDModelResult_var arg_2_;
  const seqVDModelResult* arg_2;
};

void _0RL_cd_a56b508728fda688_eb000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqVDModelResult&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_eb000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqVDModelResult;
  (seqVDModelResult&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_eb000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_fb000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_eb000000* tcd = (_0RL_cd_a56b508728fda688_eb000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setVDModelResult(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setVDModelResult(const char* Key, const char* Name, const ::seqVDModelResult& NewData)
{
  _0RL_cd_a56b508728fda688_eb000000 _call_desc(_0RL_lcfn_a56b508728fda688_fb000000, "setVDModelResult", 17);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqVDModelResult&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::setSampleData

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqSampleData
class _0RL_cd_a56b508728fda688_0c000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_0c000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqSampleData_var arg_2_;
  const seqSampleData* arg_2;
};

void _0RL_cd_a56b508728fda688_0c000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqSampleData&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_0c000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqSampleData;
  (seqSampleData&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_0c000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_1c000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_0c000000* tcd = (_0RL_cd_a56b508728fda688_0c000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setSampleData(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setSampleData(const char* Key, const char* Name, const ::seqSampleData& NewData)
{
  _0RL_cd_a56b508728fda688_0c000000 _call_desc(_0RL_lcfn_a56b508728fda688_1c000000, "setSampleData", 14);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqSampleData&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::setStatus

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqStatus
class _0RL_cd_a56b508728fda688_2c000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_2c000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqStatus_var arg_2_;
  const seqStatus* arg_2;
};

void _0RL_cd_a56b508728fda688_2c000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqStatus&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_2c000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqStatus;
  (seqStatus&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_2c000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_3c000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_2c000000* tcd = (_0RL_cd_a56b508728fda688_2c000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setStatus(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setStatus(const char* Key, const char* Name, const ::seqStatus& NewData)
{
  _0RL_cd_a56b508728fda688_2c000000 _call_desc(_0RL_lcfn_a56b508728fda688_3c000000, "setStatus", 10);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqStatus&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::setStirringData

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqStirringData
class _0RL_cd_a56b508728fda688_4c000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_4c000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqStirringData_var arg_2_;
  const seqStirringData* arg_2;
};

void _0RL_cd_a56b508728fda688_4c000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqStirringData&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_4c000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqStirringData;
  (seqStirringData&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_4c000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_5c000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_4c000000* tcd = (_0RL_cd_a56b508728fda688_4c000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setStirringData(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setStirringData(const char* Key, const char* Name, const ::seqStirringData& NewData)
{
  _0RL_cd_a56b508728fda688_4c000000 _call_desc(_0RL_lcfn_a56b508728fda688_5c000000, "setStirringData", 16);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqStirringData&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::setStringList

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqStringList
class _0RL_cd_a56b508728fda688_6c000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_6c000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqStringList_var arg_2_;
  const seqStringList* arg_2;
};

void _0RL_cd_a56b508728fda688_6c000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqStringList&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_6c000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqStringList;
  (seqStringList&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_6c000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_7c000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_6c000000* tcd = (_0RL_cd_a56b508728fda688_6c000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setStringList(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setStringList(const char* Key, const char* Name, const ::seqStringList& NewData)
{
  _0RL_cd_a56b508728fda688_6c000000 _call_desc(_0RL_lcfn_a56b508728fda688_7c000000, "setStringList", 14);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqStringList&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::setWasteGas

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqWasteGas
class _0RL_cd_a56b508728fda688_8c000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_8c000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqWasteGas_var arg_2_;
  const seqWasteGas* arg_2;
};

void _0RL_cd_a56b508728fda688_8c000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqWasteGas&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_8c000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqWasteGas;
  (seqWasteGas&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_8c000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_9c000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_8c000000* tcd = (_0RL_cd_a56b508728fda688_8c000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setWasteGas(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setWasteGas(const char* Key, const char* Name, const ::seqWasteGas& NewData)
{
  _0RL_cd_a56b508728fda688_8c000000 _call_desc(_0RL_lcfn_a56b508728fda688_9c000000, "setWasteGas", 12);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqWasteGas&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::setWireFeeder

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqWireFeeder
class _0RL_cd_a56b508728fda688_ac000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_ac000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqWireFeeder_var arg_2_;
  const seqWireFeeder* arg_2;
};

void _0RL_cd_a56b508728fda688_ac000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqWireFeeder&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_ac000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqWireFeeder;
  (seqWireFeeder&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_ac000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_bc000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_ac000000* tcd = (_0RL_cd_a56b508728fda688_ac000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setWireFeeder(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setWireFeeder(const char* Key, const char* Name, const ::seqWireFeeder& NewData)
{
  _0RL_cd_a56b508728fda688_ac000000 _call_desc(_0RL_lcfn_a56b508728fda688_bc000000, "setWireFeeder", 14);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqWireFeeder&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::getLTSStirrPredRes

// Proxy call descriptor class. Mangled signature:
//  _cseqLTSStirrPredRes_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_cc000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_cc000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqLTSStirrPredRes_var result;
};

void _0RL_cd_a56b508728fda688_cc000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_cc000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_cc000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqLTSStirrPredRes&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_cc000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqLTSStirrPredRes;
  (seqLTSStirrPredRes&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_cc000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_dc000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_cc000000* tcd = (_0RL_cd_a56b508728fda688_cc000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getLTSStirrPredRes(tcd->arg_0, tcd->arg_1);


}

seqLTSStirrPredRes* _objref_iSMC_DataProvider::getLTSStirrPredRes(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_cc000000 _call_desc(_0RL_lcfn_a56b508728fda688_dc000000, "getLTSStirrPredRes", 19);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::setLTSStirrPredRes

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqLTSStirrPredRes
class _0RL_cd_a56b508728fda688_ec000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_ec000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqLTSStirrPredRes_var arg_2_;
  const seqLTSStirrPredRes* arg_2;
};

void _0RL_cd_a56b508728fda688_ec000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqLTSStirrPredRes&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_ec000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqLTSStirrPredRes;
  (seqLTSStirrPredRes&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_ec000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_fc000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_ec000000* tcd = (_0RL_cd_a56b508728fda688_ec000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setLTSStirrPredRes(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setLTSStirrPredRes(const char* Key, const char* Name, const ::seqLTSStirrPredRes& NewData)
{
  _0RL_cd_a56b508728fda688_ec000000 _call_desc(_0RL_lcfn_a56b508728fda688_fc000000, "setLTSStirrPredRes", 19);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqLTSStirrPredRes&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::setConArcGlobalSetpoints

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqConArcGlobalSetpoints
class _0RL_cd_a56b508728fda688_0d000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_0d000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqConArcGlobalSetpoints_var arg_2_;
  const seqConArcGlobalSetpoints* arg_2;
};

void _0RL_cd_a56b508728fda688_0d000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqConArcGlobalSetpoints&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_0d000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqConArcGlobalSetpoints;
  (seqConArcGlobalSetpoints&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_0d000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_1d000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_0d000000* tcd = (_0RL_cd_a56b508728fda688_0d000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setConArcGlobalSetpoints(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setConArcGlobalSetpoints(const char* Key, const char* Name, const ::seqConArcGlobalSetpoints& NewData)
{
  _0RL_cd_a56b508728fda688_0d000000 _call_desc(_0RL_lcfn_a56b508728fda688_1d000000, "setConArcGlobalSetpoints", 25);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqConArcGlobalSetpoints&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::getConArcGlobalSetpoints

// Proxy call descriptor class. Mangled signature:
//  _cseqConArcGlobalSetpoints_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_2d000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_2d000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqConArcGlobalSetpoints_var result;
};

void _0RL_cd_a56b508728fda688_2d000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_2d000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_2d000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqConArcGlobalSetpoints&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_2d000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqConArcGlobalSetpoints;
  (seqConArcGlobalSetpoints&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_2d000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_3d000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_2d000000* tcd = (_0RL_cd_a56b508728fda688_2d000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getConArcGlobalSetpoints(tcd->arg_0, tcd->arg_1);


}

seqConArcGlobalSetpoints* _objref_iSMC_DataProvider::getConArcGlobalSetpoints(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_2d000000 _call_desc(_0RL_lcfn_a56b508728fda688_3d000000, "getConArcGlobalSetpoints", 25);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::setSample

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqSample
class _0RL_cd_a56b508728fda688_4d000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_4d000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqSample_var arg_2_;
  const seqSample* arg_2;
};

void _0RL_cd_a56b508728fda688_4d000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqSample&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_4d000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqSample;
  (seqSample&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_4d000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_5d000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_4d000000* tcd = (_0RL_cd_a56b508728fda688_4d000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setSample(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setSample(const char* Key, const char* Name, const ::seqSample& NewData)
{
  _0RL_cd_a56b508728fda688_4d000000 _call_desc(_0RL_lcfn_a56b508728fda688_5d000000, "setSample", 10);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqSample&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::getSample

// Proxy call descriptor class. Mangled signature:
//  _cseqSample_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_6d000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_6d000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqSample_var result;
};

void _0RL_cd_a56b508728fda688_6d000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_6d000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_6d000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqSample&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_6d000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqSample;
  (seqSample&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_6d000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_7d000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_6d000000* tcd = (_0RL_cd_a56b508728fda688_6d000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getSample(tcd->arg_0, tcd->arg_1);


}

seqSample* _objref_iSMC_DataProvider::getSample(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_6d000000 _call_desc(_0RL_lcfn_a56b508728fda688_7d000000, "getSample", 10);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::setPhaseDataReport

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqPhaseDataReport
class _0RL_cd_a56b508728fda688_8d000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_8d000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqPhaseDataReport_var arg_2_;
  const seqPhaseDataReport* arg_2;
};

void _0RL_cd_a56b508728fda688_8d000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqPhaseDataReport&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_8d000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqPhaseDataReport;
  (seqPhaseDataReport&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_8d000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_9d000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_8d000000* tcd = (_0RL_cd_a56b508728fda688_8d000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setPhaseDataReport(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setPhaseDataReport(const char* Key, const char* Name, const ::seqPhaseDataReport& NewData)
{
  _0RL_cd_a56b508728fda688_8d000000 _call_desc(_0RL_lcfn_a56b508728fda688_9d000000, "setPhaseDataReport", 19);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqPhaseDataReport&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::getPhaseDataReport

// Proxy call descriptor class. Mangled signature:
//  _cseqPhaseDataReport_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_ad000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_ad000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqPhaseDataReport_var result;
};

void _0RL_cd_a56b508728fda688_ad000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_ad000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_ad000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqPhaseDataReport&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_ad000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqPhaseDataReport;
  (seqPhaseDataReport&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_ad000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_bd000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_ad000000* tcd = (_0RL_cd_a56b508728fda688_ad000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getPhaseDataReport(tcd->arg_0, tcd->arg_1);


}

seqPhaseDataReport* _objref_iSMC_DataProvider::getPhaseDataReport(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_ad000000 _call_desc(_0RL_lcfn_a56b508728fda688_bd000000, "getPhaseDataReport", 19);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::setTorpedoData

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqTorpedoData
class _0RL_cd_a56b508728fda688_cd000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_cd000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqTorpedoData_var arg_2_;
  const seqTorpedoData* arg_2;
};

void _0RL_cd_a56b508728fda688_cd000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqTorpedoData&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_cd000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqTorpedoData;
  (seqTorpedoData&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_cd000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_dd000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_cd000000* tcd = (_0RL_cd_a56b508728fda688_cd000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setTorpedoData(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setTorpedoData(const char* Key, const char* Name, const ::seqTorpedoData& NewData)
{
  _0RL_cd_a56b508728fda688_cd000000 _call_desc(_0RL_lcfn_a56b508728fda688_dd000000, "setTorpedoData", 15);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqTorpedoData&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::getTorpedoData

// Proxy call descriptor class. Mangled signature:
//  _cseqTorpedoData_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_ed000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_ed000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqTorpedoData_var result;
};

void _0RL_cd_a56b508728fda688_ed000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_ed000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_ed000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqTorpedoData&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_ed000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqTorpedoData;
  (seqTorpedoData&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_ed000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_fd000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_ed000000* tcd = (_0RL_cd_a56b508728fda688_ed000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getTorpedoData(tcd->arg_0, tcd->arg_1);


}

seqTorpedoData* _objref_iSMC_DataProvider::getTorpedoData(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_ed000000 _call_desc(_0RL_lcfn_a56b508728fda688_fd000000, "getTorpedoData", 15);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::setMediaConsumed

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqMediaConsumed
class _0RL_cd_a56b508728fda688_0e000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_0e000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqMediaConsumed_var arg_2_;
  const seqMediaConsumed* arg_2;
};

void _0RL_cd_a56b508728fda688_0e000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqMediaConsumed&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_0e000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqMediaConsumed;
  (seqMediaConsumed&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_0e000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_1e000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_0e000000* tcd = (_0RL_cd_a56b508728fda688_0e000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setMediaConsumed(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setMediaConsumed(const char* Key, const char* Name, const ::seqMediaConsumed& NewData)
{
  _0RL_cd_a56b508728fda688_0e000000 _call_desc(_0RL_lcfn_a56b508728fda688_1e000000, "setMediaConsumed", 17);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqMediaConsumed&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::getMediaConsumed

// Proxy call descriptor class. Mangled signature:
//  _cseqMediaConsumed_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_2e000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_2e000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqMediaConsumed_var result;
};

void _0RL_cd_a56b508728fda688_2e000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_2e000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_2e000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqMediaConsumed&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_2e000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqMediaConsumed;
  (seqMediaConsumed&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_2e000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_3e000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_2e000000* tcd = (_0RL_cd_a56b508728fda688_2e000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getMediaConsumed(tcd->arg_0, tcd->arg_1);


}

seqMediaConsumed* _objref_iSMC_DataProvider::getMediaConsumed(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_2e000000 _call_desc(_0RL_lcfn_a56b508728fda688_3e000000, "getMediaConsumed", 17);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::setEnergyConsumed

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqEnergyConsumed
class _0RL_cd_a56b508728fda688_4e000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_4e000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqEnergyConsumed_var arg_2_;
  const seqEnergyConsumed* arg_2;
};

void _0RL_cd_a56b508728fda688_4e000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqEnergyConsumed&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_4e000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqEnergyConsumed;
  (seqEnergyConsumed&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_4e000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_5e000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_4e000000* tcd = (_0RL_cd_a56b508728fda688_4e000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setEnergyConsumed(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setEnergyConsumed(const char* Key, const char* Name, const ::seqEnergyConsumed& NewData)
{
  _0RL_cd_a56b508728fda688_4e000000 _call_desc(_0RL_lcfn_a56b508728fda688_5e000000, "setEnergyConsumed", 18);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqEnergyConsumed&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::getEnergyConsumed

// Proxy call descriptor class. Mangled signature:
//  _cseqEnergyConsumed_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_6e000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_6e000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqEnergyConsumed_var result;
};

void _0RL_cd_a56b508728fda688_6e000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_6e000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_6e000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqEnergyConsumed&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_6e000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqEnergyConsumed;
  (seqEnergyConsumed&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_6e000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_7e000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_6e000000* tcd = (_0RL_cd_a56b508728fda688_6e000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getEnergyConsumed(tcd->arg_0, tcd->arg_1);


}

seqEnergyConsumed* _objref_iSMC_DataProvider::getEnergyConsumed(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_6e000000 _call_desc(_0RL_lcfn_a56b508728fda688_7e000000, "getEnergyConsumed", 18);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::setSAFBinData

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqSAF__Bin
class _0RL_cd_a56b508728fda688_8e000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_8e000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqSAF_Bin_var arg_2_;
  const seqSAF_Bin* arg_2;
};

void _0RL_cd_a56b508728fda688_8e000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqSAF_Bin&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_8e000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqSAF_Bin;
  (seqSAF_Bin&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_8e000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_9e000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_8e000000* tcd = (_0RL_cd_a56b508728fda688_8e000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setSAFBinData(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setSAFBinData(const char* Key, const char* Name, const ::seqSAF_Bin& NewData)
{
  _0RL_cd_a56b508728fda688_8e000000 _call_desc(_0RL_lcfn_a56b508728fda688_9e000000, "setSAFBinData", 14);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqSAF_Bin&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::getSAFBinData

// Proxy call descriptor class. Mangled signature:
//  _cseqSAF__Bin_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_ae000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_ae000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqSAF_Bin_var result;
};

void _0RL_cd_a56b508728fda688_ae000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_ae000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_ae000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqSAF_Bin&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_ae000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqSAF_Bin;
  (seqSAF_Bin&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_ae000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_be000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_ae000000* tcd = (_0RL_cd_a56b508728fda688_ae000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getSAFBinData(tcd->arg_0, tcd->arg_1);


}

seqSAF_Bin* _objref_iSMC_DataProvider::getSAFBinData(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_ae000000 _call_desc(_0RL_lcfn_a56b508728fda688_be000000, "getSAFBinData", 14);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::setHarmonics

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqHarmonics
class _0RL_cd_a56b508728fda688_ce000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_ce000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqHarmonics_var arg_2_;
  const seqHarmonics* arg_2;
};

void _0RL_cd_a56b508728fda688_ce000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqHarmonics&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_ce000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqHarmonics;
  (seqHarmonics&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_ce000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_de000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_ce000000* tcd = (_0RL_cd_a56b508728fda688_ce000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setHarmonics(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setHarmonics(const char* Key, const char* Name, const ::seqHarmonics& NewData)
{
  _0RL_cd_a56b508728fda688_ce000000 _call_desc(_0RL_lcfn_a56b508728fda688_de000000, "setHarmonics", 13);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqHarmonics&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::getHarmonics

// Proxy call descriptor class. Mangled signature:
//  _cseqHarmonics_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_ee000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_ee000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqHarmonics_var result;
};

void _0RL_cd_a56b508728fda688_ee000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_ee000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_ee000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqHarmonics&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_ee000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqHarmonics;
  (seqHarmonics&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_ee000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_fe000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_ee000000* tcd = (_0RL_cd_a56b508728fda688_ee000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getHarmonics(tcd->arg_0, tcd->arg_1);


}

seqHarmonics* _objref_iSMC_DataProvider::getHarmonics(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_ee000000 _call_desc(_0RL_lcfn_a56b508728fda688_fe000000, "getHarmonics", 13);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::setWallTemp

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqWallTemp
class _0RL_cd_a56b508728fda688_0f000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_0f000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqWallTemp_var arg_2_;
  const seqWallTemp* arg_2;
};

void _0RL_cd_a56b508728fda688_0f000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqWallTemp&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_0f000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqWallTemp;
  (seqWallTemp&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_0f000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_1f000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_0f000000* tcd = (_0RL_cd_a56b508728fda688_0f000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setWallTemp(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setWallTemp(const char* Key, const char* Name, const ::seqWallTemp& NewData)
{
  _0RL_cd_a56b508728fda688_0f000000 _call_desc(_0RL_lcfn_a56b508728fda688_1f000000, "setWallTemp", 12);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqWallTemp&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::getWallTemp

// Proxy call descriptor class. Mangled signature:
//  _cseqWallTemp_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_2f000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_2f000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqWallTemp_var result;
};

void _0RL_cd_a56b508728fda688_2f000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_2f000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_2f000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqWallTemp&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_2f000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqWallTemp;
  (seqWallTemp&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_2f000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_3f000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_2f000000* tcd = (_0RL_cd_a56b508728fda688_2f000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getWallTemp(tcd->arg_0, tcd->arg_1);


}

seqWallTemp* _objref_iSMC_DataProvider::getWallTemp(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_2f000000 _call_desc(_0RL_lcfn_a56b508728fda688_3f000000, "getWallTemp", 12);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::setPPRestriction

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqPPRestriction
class _0RL_cd_a56b508728fda688_4f000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_4f000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqPPRestriction_var arg_2_;
  const seqPPRestriction* arg_2;
};

void _0RL_cd_a56b508728fda688_4f000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqPPRestriction&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_4f000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqPPRestriction;
  (seqPPRestriction&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_4f000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_5f000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_4f000000* tcd = (_0RL_cd_a56b508728fda688_4f000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setPPRestriction(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setPPRestriction(const char* Key, const char* Name, const ::seqPPRestriction& NewData)
{
  _0RL_cd_a56b508728fda688_4f000000 _call_desc(_0RL_lcfn_a56b508728fda688_5f000000, "setPPRestriction", 17);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqPPRestriction&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::getPPRestriction

// Proxy call descriptor class. Mangled signature:
//  _cseqPPRestriction_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_6f000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_6f000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqPPRestriction_var result;
};

void _0RL_cd_a56b508728fda688_6f000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_6f000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_6f000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqPPRestriction&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_6f000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqPPRestriction;
  (seqPPRestriction&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_6f000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_7f000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_6f000000* tcd = (_0RL_cd_a56b508728fda688_6f000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getPPRestriction(tcd->arg_0, tcd->arg_1);


}

seqPPRestriction* _objref_iSMC_DataProvider::getPPRestriction(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_6f000000 _call_desc(_0RL_lcfn_a56b508728fda688_7f000000, "getPPRestriction", 17);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::setHeatStack

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqHeatStack
class _0RL_cd_a56b508728fda688_8f000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_8f000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqHeatStack_var arg_2_;
  const seqHeatStack* arg_2;
};

void _0RL_cd_a56b508728fda688_8f000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqHeatStack&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_8f000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqHeatStack;
  (seqHeatStack&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_8f000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_9f000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_8f000000* tcd = (_0RL_cd_a56b508728fda688_8f000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setHeatStack(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setHeatStack(const char* Key, const char* Name, const ::seqHeatStack& NewData)
{
  _0RL_cd_a56b508728fda688_8f000000 _call_desc(_0RL_lcfn_a56b508728fda688_9f000000, "setHeatStack", 13);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqHeatStack&) NewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::getHeatStack

// Proxy call descriptor class. Mangled signature:
//  _cseqHeatStack_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_af000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_af000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqHeatStack_var result;
};

void _0RL_cd_a56b508728fda688_af000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_af000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_af000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqHeatStack&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_af000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqHeatStack;
  (seqHeatStack&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_af000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_bf000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_af000000* tcd = (_0RL_cd_a56b508728fda688_af000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getHeatStack(tcd->arg_0, tcd->arg_1);


}

seqHeatStack* _objref_iSMC_DataProvider::getHeatStack(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_af000000 _call_desc(_0RL_lcfn_a56b508728fda688_bf000000, "getHeatStack", 13);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}


//
// Code for iSMC_DataProvider::setHMPouringData

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring_i_cseqHMPouringData
class _0RL_cd_a56b508728fda688_cf000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_cf000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqHMPouringData_var arg_2_;
  const seqHMPouringData* arg_2;
};

void _0RL_cd_a56b508728fda688_cf000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  (const seqHMPouringData&) *arg_2 >>= _n;

}

void _0RL_cd_a56b508728fda688_cf000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = new seqHMPouringData;
  (seqHMPouringData&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();

}

const char* const _0RL_cd_a56b508728fda688_cf000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_df000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_cf000000* tcd = (_0RL_cd_a56b508728fda688_cf000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  impl->setHMPouringData(tcd->arg_0, tcd->arg_1, *tcd->arg_2);


}

void _objref_iSMC_DataProvider::setHMPouringData(const char* Key, const char* Name, const ::seqHMPouringData& MewData)
{
  _0RL_cd_a56b508728fda688_cf000000 _call_desc(_0RL_lcfn_a56b508728fda688_df000000, "setHMPouringData", 17);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;
  _call_desc.arg_2 = &(::seqHMPouringData&) MewData;

  _invoke(_call_desc);



}


//
// Code for iSMC_DataProvider::getHMPouringData

// Proxy call descriptor class. Mangled signature:
//  _cseqHMPouringData_i_cstring_i_cstring
class _0RL_cd_a56b508728fda688_ef000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a56b508728fda688_ef000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  seqHMPouringData_var result;
};

void _0RL_cd_a56b508728fda688_ef000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a56b508728fda688_ef000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_a56b508728fda688_ef000000::marshalReturnedValues(cdrStream& _n)
{
  (const seqHMPouringData&) result >>= _n;

}

void _0RL_cd_a56b508728fda688_ef000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new seqHMPouringData;
  (seqHMPouringData&)result <<= _n;

}

const char* const _0RL_cd_a56b508728fda688_ef000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a56b508728fda688_ff000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a56b508728fda688_ef000000* tcd = (_0RL_cd_a56b508728fda688_ef000000*)cd;
  _impl_iSMC_DataProvider* impl = (_impl_iSMC_DataProvider*) svnt->_ptrToInterface(iSMC_DataProvider::_PD_repoId);
  tcd->result = impl->getHMPouringData(tcd->arg_0, tcd->arg_1);


}

seqHMPouringData* _objref_iSMC_DataProvider::getHMPouringData(const char* Key, const char* Name)
{
  _0RL_cd_a56b508728fda688_ef000000 _call_desc(_0RL_lcfn_a56b508728fda688_ff000000, "getHMPouringData", 17);
  _call_desc.arg_0 = Key;
  _call_desc.arg_1 = Name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}

_pof_iSMC_DataProvider::~_pof_iSMC_DataProvider() {}


omniObjRef*
_pof_iSMC_DataProvider::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::_objref_iSMC_DataProvider(ior, id);
}


::CORBA::Boolean
_pof_iSMC_DataProvider::is_a(const char* id) const
{
  if (omni::ptrStrMatch(id, ::iSMC_DataProvider::_PD_repoId))
    return 1;
  if (omni::ptrStrMatch(id, iData_Provider::_PD_repoId))
    return 1;


  return 0;
}

const _pof_iSMC_DataProvider _the_pof_iSMC__DataProvider;

_impl_iSMC_DataProvider::~_impl_iSMC_DataProvider() {}


::CORBA::Boolean
_impl_iSMC_DataProvider::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if (omni::strMatch(op, "getAnalysis")) {

    _0RL_cd_a56b508728fda688_00000000 _call_desc(_0RL_lcfn_a56b508728fda688_10000000, "getAnalysis", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getAnalysisData")) {

    _0RL_cd_a56b508728fda688_20000000 _call_desc(_0RL_lcfn_a56b508728fda688_30000000, "getAnalysisData", 16, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getAODBlowPredRes")) {

    _0RL_cd_a56b508728fda688_40000000 _call_desc(_0RL_lcfn_a56b508728fda688_50000000, "getAODBlowPredRes", 18, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getAODGlobalSetpoints")) {

    _0RL_cd_a56b508728fda688_60000000 _call_desc(_0RL_lcfn_a56b508728fda688_70000000, "getAODGlobalSetpoints", 22, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getBatch")) {

    _0RL_cd_a56b508728fda688_80000000 _call_desc(_0RL_lcfn_a56b508728fda688_90000000, "getBatch", 9, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getBlowStatus")) {

    _0RL_cd_a56b508728fda688_a0000000 _call_desc(_0RL_lcfn_a56b508728fda688_b0000000, "getBlowStatus", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getBOFBlowPredRes")) {

    _0RL_cd_a56b508728fda688_c0000000 _call_desc(_0RL_lcfn_a56b508728fda688_d0000000, "getBOFBlowPredRes", 18, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getBOFGlobalSetpoints")) {

    _0RL_cd_a56b508728fda688_e0000000 _call_desc(_0RL_lcfn_a56b508728fda688_f0000000, "getBOFGlobalSetpoints", 22, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getComputerModes")) {

    _0RL_cd_a56b508728fda688_01000000 _call_desc(_0RL_lcfn_a56b508728fda688_11000000, "getComputerModes", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getConArcBlowData")) {

    _0RL_cd_a56b508728fda688_21000000 _call_desc(_0RL_lcfn_a56b508728fda688_31000000, "getConArcBlowData", 18, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getConArcElecData")) {

    _0RL_cd_a56b508728fda688_41000000 _call_desc(_0RL_lcfn_a56b508728fda688_51000000, "getConArcElecData", 18, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getConArcModelResult")) {

    _0RL_cd_a56b508728fda688_61000000 _call_desc(_0RL_lcfn_a56b508728fda688_71000000, "getConArcModelResult", 21, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getConArcMeasData")) {

    _0RL_cd_a56b508728fda688_81000000 _call_desc(_0RL_lcfn_a56b508728fda688_91000000, "getConArcMeasData", 18, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getConArcMediaData")) {

    _0RL_cd_a56b508728fda688_a1000000 _call_desc(_0RL_lcfn_a56b508728fda688_b1000000, "getConArcMediaData", 19, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getConArcSetptData")) {

    _0RL_cd_a56b508728fda688_c1000000 _call_desc(_0RL_lcfn_a56b508728fda688_d1000000, "getConArcSetptData", 19, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getCoolWaterData")) {

    _0RL_cd_a56b508728fda688_e1000000 _call_desc(_0RL_lcfn_a56b508728fda688_f1000000, "getCoolWaterData", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getDate")) {

    _0RL_cd_a56b508728fda688_02000000 _call_desc(_0RL_lcfn_a56b508728fda688_12000000, "getDate", 8, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getEAFBurnerPredRes")) {

    _0RL_cd_a56b508728fda688_22000000 _call_desc(_0RL_lcfn_a56b508728fda688_32000000, "getEAFBurnerPredRes", 20, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getEAFGasLancePredRes")) {

    _0RL_cd_a56b508728fda688_42000000 _call_desc(_0RL_lcfn_a56b508728fda688_52000000, "getEAFGasLancePredRes", 22, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getEAFProcessPredRes")) {

    _0RL_cd_a56b508728fda688_62000000 _call_desc(_0RL_lcfn_a56b508728fda688_72000000, "getEAFProcessPredRes", 21, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getEAFMatFeed")) {

    _0RL_cd_a56b508728fda688_82000000 _call_desc(_0RL_lcfn_a56b508728fda688_92000000, "getEAFMatFeed", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getEAFMatFeedPredRes")) {

    _0RL_cd_a56b508728fda688_a2000000 _call_desc(_0RL_lcfn_a56b508728fda688_b2000000, "getEAFMatFeedPredRes", 21, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getElecPhaseData")) {

    _0RL_cd_a56b508728fda688_c2000000 _call_desc(_0RL_lcfn_a56b508728fda688_d2000000, "getElecPhaseData", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getGasAvail")) {

    _0RL_cd_a56b508728fda688_e2000000 _call_desc(_0RL_lcfn_a56b508728fda688_f2000000, "getGasAvail", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getGasData")) {

    _0RL_cd_a56b508728fda688_03000000 _call_desc(_0RL_lcfn_a56b508728fda688_13000000, "getGasData", 11, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getGasLanceData")) {

    _0RL_cd_a56b508728fda688_23000000 _call_desc(_0RL_lcfn_a56b508728fda688_33000000, "getGasLanceData", 16, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getGasLanceGasAvail")) {

    _0RL_cd_a56b508728fda688_43000000 _call_desc(_0RL_lcfn_a56b508728fda688_53000000, "getGasLanceGasAvail", 20, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getHeatData")) {

    _0RL_cd_a56b508728fda688_63000000 _call_desc(_0RL_lcfn_a56b508728fda688_73000000, "getHeatData", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getHeatSchedule")) {

    _0RL_cd_a56b508728fda688_83000000 _call_desc(_0RL_lcfn_a56b508728fda688_93000000, "getHeatSchedule", 16, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getHeatSchedulePlant")) {

    _0RL_cd_a56b508728fda688_a3000000 _call_desc(_0RL_lcfn_a56b508728fda688_b3000000, "getHeatSchedulePlant", 21, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getHMDModelResult")) {

    _0RL_cd_a56b508728fda688_c3000000 _call_desc(_0RL_lcfn_a56b508728fda688_d3000000, "getHMDModelResult", 18, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getInjectData")) {

    _0RL_cd_a56b508728fda688_e3000000 _call_desc(_0RL_lcfn_a56b508728fda688_f3000000, "getInjectData", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getInjectLanceData")) {

    _0RL_cd_a56b508728fda688_04000000 _call_desc(_0RL_lcfn_a56b508728fda688_14000000, "getInjectLanceData", 19, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getEAFInjectLance")) {

    _0RL_cd_a56b508728fda688_24000000 _call_desc(_0RL_lcfn_a56b508728fda688_34000000, "getEAFInjectLance", 18, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getLFElecPredRes")) {

    _0RL_cd_a56b508728fda688_44000000 _call_desc(_0RL_lcfn_a56b508728fda688_54000000, "getLFElecPredRes", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getLFStirrPredRes")) {

    _0RL_cd_a56b508728fda688_64000000 _call_desc(_0RL_lcfn_a56b508728fda688_74000000, "getLFStirrPredRes", 18, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getLiqMatReport")) {

    _0RL_cd_a56b508728fda688_84000000 _call_desc(_0RL_lcfn_a56b508728fda688_94000000, "getLiqMatReport", 16, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getMaterials")) {

    _0RL_cd_a56b508728fda688_a4000000 _call_desc(_0RL_lcfn_a56b508728fda688_b4000000, "getMaterials", 13, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getOrderData")) {

    _0RL_cd_a56b508728fda688_c4000000 _call_desc(_0RL_lcfn_a56b508728fda688_d4000000, "getOrderData", 13, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getPhaseStatus")) {

    _0RL_cd_a56b508728fda688_e4000000 _call_desc(_0RL_lcfn_a56b508728fda688_f4000000, "getPhaseStatus", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getPredRes")) {

    _0RL_cd_a56b508728fda688_05000000 _call_desc(_0RL_lcfn_a56b508728fda688_15000000, "getPredRes", 11, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getProductIdentification")) {

    _0RL_cd_a56b508728fda688_25000000 _call_desc(_0RL_lcfn_a56b508728fda688_35000000, "getProductIdentification", 25, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getRecipeList")) {

    _0RL_cd_a56b508728fda688_45000000 _call_desc(_0RL_lcfn_a56b508728fda688_55000000, "getRecipeList", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getRHModelResult")) {

    _0RL_cd_a56b508728fda688_65000000 _call_desc(_0RL_lcfn_a56b508728fda688_75000000, "getRHModelResult", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getVDModelResult")) {

    _0RL_cd_a56b508728fda688_85000000 _call_desc(_0RL_lcfn_a56b508728fda688_95000000, "getVDModelResult", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getSampleData")) {

    _0RL_cd_a56b508728fda688_a5000000 _call_desc(_0RL_lcfn_a56b508728fda688_b5000000, "getSampleData", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getStatus")) {

    _0RL_cd_a56b508728fda688_c5000000 _call_desc(_0RL_lcfn_a56b508728fda688_d5000000, "getStatus", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getStirringData")) {

    _0RL_cd_a56b508728fda688_e5000000 _call_desc(_0RL_lcfn_a56b508728fda688_f5000000, "getStirringData", 16, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getStringList")) {

    _0RL_cd_a56b508728fda688_06000000 _call_desc(_0RL_lcfn_a56b508728fda688_16000000, "getStringList", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getWasteGas")) {

    _0RL_cd_a56b508728fda688_26000000 _call_desc(_0RL_lcfn_a56b508728fda688_36000000, "getWasteGas", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getWireFeeder")) {

    _0RL_cd_a56b508728fda688_46000000 _call_desc(_0RL_lcfn_a56b508728fda688_56000000, "getWireFeeder", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setAnalysis")) {

    _0RL_cd_a56b508728fda688_66000000 _call_desc(_0RL_lcfn_a56b508728fda688_76000000, "setAnalysis", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setAnalysisData")) {

    _0RL_cd_a56b508728fda688_86000000 _call_desc(_0RL_lcfn_a56b508728fda688_96000000, "setAnalysisData", 16, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setAODBlowPredRes")) {

    _0RL_cd_a56b508728fda688_a6000000 _call_desc(_0RL_lcfn_a56b508728fda688_b6000000, "setAODBlowPredRes", 18, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setAODGlobalSetpoints")) {

    _0RL_cd_a56b508728fda688_c6000000 _call_desc(_0RL_lcfn_a56b508728fda688_d6000000, "setAODGlobalSetpoints", 22, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setBatch")) {

    _0RL_cd_a56b508728fda688_e6000000 _call_desc(_0RL_lcfn_a56b508728fda688_f6000000, "setBatch", 9, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setBlowStatus")) {

    _0RL_cd_a56b508728fda688_07000000 _call_desc(_0RL_lcfn_a56b508728fda688_17000000, "setBlowStatus", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setBOFBlowPredRes")) {

    _0RL_cd_a56b508728fda688_27000000 _call_desc(_0RL_lcfn_a56b508728fda688_37000000, "setBOFBlowPredRes", 18, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setBOFGlobalSetpoints")) {

    _0RL_cd_a56b508728fda688_47000000 _call_desc(_0RL_lcfn_a56b508728fda688_57000000, "setBOFGlobalSetpoints", 22, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setComputerModes")) {

    _0RL_cd_a56b508728fda688_67000000 _call_desc(_0RL_lcfn_a56b508728fda688_77000000, "setComputerModes", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setConArcBlowData")) {

    _0RL_cd_a56b508728fda688_87000000 _call_desc(_0RL_lcfn_a56b508728fda688_97000000, "setConArcBlowData", 18, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setConArcElecData")) {

    _0RL_cd_a56b508728fda688_a7000000 _call_desc(_0RL_lcfn_a56b508728fda688_b7000000, "setConArcElecData", 18, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setConArcModelResult")) {

    _0RL_cd_a56b508728fda688_c7000000 _call_desc(_0RL_lcfn_a56b508728fda688_d7000000, "setConArcModelResult", 21, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setConArcMeasData")) {

    _0RL_cd_a56b508728fda688_e7000000 _call_desc(_0RL_lcfn_a56b508728fda688_f7000000, "setConArcMeasData", 18, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setConArcMediaData")) {

    _0RL_cd_a56b508728fda688_08000000 _call_desc(_0RL_lcfn_a56b508728fda688_18000000, "setConArcMediaData", 19, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setConArcSetptData")) {

    _0RL_cd_a56b508728fda688_28000000 _call_desc(_0RL_lcfn_a56b508728fda688_38000000, "setConArcSetptData", 19, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setCoolWaterData")) {

    _0RL_cd_a56b508728fda688_48000000 _call_desc(_0RL_lcfn_a56b508728fda688_58000000, "setCoolWaterData", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setDate")) {

    _0RL_cd_a56b508728fda688_68000000 _call_desc(_0RL_lcfn_a56b508728fda688_78000000, "setDate", 8, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setEAFBurnerPredRes")) {

    _0RL_cd_a56b508728fda688_88000000 _call_desc(_0RL_lcfn_a56b508728fda688_98000000, "setEAFBurnerPredRes", 20, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setEAFGasLancePredRes")) {

    _0RL_cd_a56b508728fda688_a8000000 _call_desc(_0RL_lcfn_a56b508728fda688_b8000000, "setEAFGasLancePredRes", 22, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setEAFProcessPredRes")) {

    _0RL_cd_a56b508728fda688_c8000000 _call_desc(_0RL_lcfn_a56b508728fda688_d8000000, "setEAFProcessPredRes", 21, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setEAFInjectLance")) {

    _0RL_cd_a56b508728fda688_e8000000 _call_desc(_0RL_lcfn_a56b508728fda688_f8000000, "setEAFInjectLance", 18, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setEAFMatFeed")) {

    _0RL_cd_a56b508728fda688_09000000 _call_desc(_0RL_lcfn_a56b508728fda688_19000000, "setEAFMatFeed", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setEAFMatFeedPredRes")) {

    _0RL_cd_a56b508728fda688_29000000 _call_desc(_0RL_lcfn_a56b508728fda688_39000000, "setEAFMatFeedPredRes", 21, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setElecPhaseData")) {

    _0RL_cd_a56b508728fda688_49000000 _call_desc(_0RL_lcfn_a56b508728fda688_59000000, "setElecPhaseData", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setGasAvail")) {

    _0RL_cd_a56b508728fda688_69000000 _call_desc(_0RL_lcfn_a56b508728fda688_79000000, "setGasAvail", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setGasData")) {

    _0RL_cd_a56b508728fda688_89000000 _call_desc(_0RL_lcfn_a56b508728fda688_99000000, "setGasData", 11, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setGasLanceData")) {

    _0RL_cd_a56b508728fda688_a9000000 _call_desc(_0RL_lcfn_a56b508728fda688_b9000000, "setGasLanceData", 16, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setGasLanceGasAvail")) {

    _0RL_cd_a56b508728fda688_c9000000 _call_desc(_0RL_lcfn_a56b508728fda688_d9000000, "setGasLanceGasAvail", 20, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setHeatData")) {

    _0RL_cd_a56b508728fda688_e9000000 _call_desc(_0RL_lcfn_a56b508728fda688_f9000000, "setHeatData", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setHeatSchedule")) {

    _0RL_cd_a56b508728fda688_0a000000 _call_desc(_0RL_lcfn_a56b508728fda688_1a000000, "setHeatSchedule", 16, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setHeatSchedulePlant")) {

    _0RL_cd_a56b508728fda688_2a000000 _call_desc(_0RL_lcfn_a56b508728fda688_3a000000, "setHeatSchedulePlant", 21, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setHMDModelResult")) {

    _0RL_cd_a56b508728fda688_4a000000 _call_desc(_0RL_lcfn_a56b508728fda688_5a000000, "setHMDModelResult", 18, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setInjectData")) {

    _0RL_cd_a56b508728fda688_6a000000 _call_desc(_0RL_lcfn_a56b508728fda688_7a000000, "setInjectData", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setInjectLanceData")) {

    _0RL_cd_a56b508728fda688_8a000000 _call_desc(_0RL_lcfn_a56b508728fda688_9a000000, "setInjectLanceData", 19, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setLFElecPredRes")) {

    _0RL_cd_a56b508728fda688_aa000000 _call_desc(_0RL_lcfn_a56b508728fda688_ba000000, "setLFElecPredRes", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setLFStirrPredRes")) {

    _0RL_cd_a56b508728fda688_ca000000 _call_desc(_0RL_lcfn_a56b508728fda688_da000000, "setLFStirrPredRes", 18, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setLiqMatReport")) {

    _0RL_cd_a56b508728fda688_ea000000 _call_desc(_0RL_lcfn_a56b508728fda688_fa000000, "setLiqMatReport", 16, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setMaterials")) {

    _0RL_cd_a56b508728fda688_0b000000 _call_desc(_0RL_lcfn_a56b508728fda688_1b000000, "setMaterials", 13, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setOrderData")) {

    _0RL_cd_a56b508728fda688_2b000000 _call_desc(_0RL_lcfn_a56b508728fda688_3b000000, "setOrderData", 13, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setPhaseStatus")) {

    _0RL_cd_a56b508728fda688_4b000000 _call_desc(_0RL_lcfn_a56b508728fda688_5b000000, "setPhaseStatus", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setPredRes")) {

    _0RL_cd_a56b508728fda688_6b000000 _call_desc(_0RL_lcfn_a56b508728fda688_7b000000, "setPredRes", 11, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setProductIdentification")) {

    _0RL_cd_a56b508728fda688_8b000000 _call_desc(_0RL_lcfn_a56b508728fda688_9b000000, "setProductIdentification", 25, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setRecipeList")) {

    _0RL_cd_a56b508728fda688_ab000000 _call_desc(_0RL_lcfn_a56b508728fda688_bb000000, "setRecipeList", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setRHModelResult")) {

    _0RL_cd_a56b508728fda688_cb000000 _call_desc(_0RL_lcfn_a56b508728fda688_db000000, "setRHModelResult", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setVDModelResult")) {

    _0RL_cd_a56b508728fda688_eb000000 _call_desc(_0RL_lcfn_a56b508728fda688_fb000000, "setVDModelResult", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setSampleData")) {

    _0RL_cd_a56b508728fda688_0c000000 _call_desc(_0RL_lcfn_a56b508728fda688_1c000000, "setSampleData", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setStatus")) {

    _0RL_cd_a56b508728fda688_2c000000 _call_desc(_0RL_lcfn_a56b508728fda688_3c000000, "setStatus", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setStirringData")) {

    _0RL_cd_a56b508728fda688_4c000000 _call_desc(_0RL_lcfn_a56b508728fda688_5c000000, "setStirringData", 16, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setStringList")) {

    _0RL_cd_a56b508728fda688_6c000000 _call_desc(_0RL_lcfn_a56b508728fda688_7c000000, "setStringList", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setWasteGas")) {

    _0RL_cd_a56b508728fda688_8c000000 _call_desc(_0RL_lcfn_a56b508728fda688_9c000000, "setWasteGas", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setWireFeeder")) {

    _0RL_cd_a56b508728fda688_ac000000 _call_desc(_0RL_lcfn_a56b508728fda688_bc000000, "setWireFeeder", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getLTSStirrPredRes")) {

    _0RL_cd_a56b508728fda688_cc000000 _call_desc(_0RL_lcfn_a56b508728fda688_dc000000, "getLTSStirrPredRes", 19, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setLTSStirrPredRes")) {

    _0RL_cd_a56b508728fda688_ec000000 _call_desc(_0RL_lcfn_a56b508728fda688_fc000000, "setLTSStirrPredRes", 19, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setConArcGlobalSetpoints")) {

    _0RL_cd_a56b508728fda688_0d000000 _call_desc(_0RL_lcfn_a56b508728fda688_1d000000, "setConArcGlobalSetpoints", 25, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getConArcGlobalSetpoints")) {

    _0RL_cd_a56b508728fda688_2d000000 _call_desc(_0RL_lcfn_a56b508728fda688_3d000000, "getConArcGlobalSetpoints", 25, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setSample")) {

    _0RL_cd_a56b508728fda688_4d000000 _call_desc(_0RL_lcfn_a56b508728fda688_5d000000, "setSample", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getSample")) {

    _0RL_cd_a56b508728fda688_6d000000 _call_desc(_0RL_lcfn_a56b508728fda688_7d000000, "getSample", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setPhaseDataReport")) {

    _0RL_cd_a56b508728fda688_8d000000 _call_desc(_0RL_lcfn_a56b508728fda688_9d000000, "setPhaseDataReport", 19, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getPhaseDataReport")) {

    _0RL_cd_a56b508728fda688_ad000000 _call_desc(_0RL_lcfn_a56b508728fda688_bd000000, "getPhaseDataReport", 19, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setTorpedoData")) {

    _0RL_cd_a56b508728fda688_cd000000 _call_desc(_0RL_lcfn_a56b508728fda688_dd000000, "setTorpedoData", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getTorpedoData")) {

    _0RL_cd_a56b508728fda688_ed000000 _call_desc(_0RL_lcfn_a56b508728fda688_fd000000, "getTorpedoData", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setMediaConsumed")) {

    _0RL_cd_a56b508728fda688_0e000000 _call_desc(_0RL_lcfn_a56b508728fda688_1e000000, "setMediaConsumed", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getMediaConsumed")) {

    _0RL_cd_a56b508728fda688_2e000000 _call_desc(_0RL_lcfn_a56b508728fda688_3e000000, "getMediaConsumed", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setEnergyConsumed")) {

    _0RL_cd_a56b508728fda688_4e000000 _call_desc(_0RL_lcfn_a56b508728fda688_5e000000, "setEnergyConsumed", 18, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getEnergyConsumed")) {

    _0RL_cd_a56b508728fda688_6e000000 _call_desc(_0RL_lcfn_a56b508728fda688_7e000000, "getEnergyConsumed", 18, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setSAFBinData")) {

    _0RL_cd_a56b508728fda688_8e000000 _call_desc(_0RL_lcfn_a56b508728fda688_9e000000, "setSAFBinData", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getSAFBinData")) {

    _0RL_cd_a56b508728fda688_ae000000 _call_desc(_0RL_lcfn_a56b508728fda688_be000000, "getSAFBinData", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setHarmonics")) {

    _0RL_cd_a56b508728fda688_ce000000 _call_desc(_0RL_lcfn_a56b508728fda688_de000000, "setHarmonics", 13, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getHarmonics")) {

    _0RL_cd_a56b508728fda688_ee000000 _call_desc(_0RL_lcfn_a56b508728fda688_fe000000, "getHarmonics", 13, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setWallTemp")) {

    _0RL_cd_a56b508728fda688_0f000000 _call_desc(_0RL_lcfn_a56b508728fda688_1f000000, "setWallTemp", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getWallTemp")) {

    _0RL_cd_a56b508728fda688_2f000000 _call_desc(_0RL_lcfn_a56b508728fda688_3f000000, "getWallTemp", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setPPRestriction")) {

    _0RL_cd_a56b508728fda688_4f000000 _call_desc(_0RL_lcfn_a56b508728fda688_5f000000, "setPPRestriction", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getPPRestriction")) {

    _0RL_cd_a56b508728fda688_6f000000 _call_desc(_0RL_lcfn_a56b508728fda688_7f000000, "getPPRestriction", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setHeatStack")) {

    _0RL_cd_a56b508728fda688_8f000000 _call_desc(_0RL_lcfn_a56b508728fda688_9f000000, "setHeatStack", 13, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getHeatStack")) {

    _0RL_cd_a56b508728fda688_af000000 _call_desc(_0RL_lcfn_a56b508728fda688_bf000000, "getHeatStack", 13, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setHMPouringData")) {

    _0RL_cd_a56b508728fda688_cf000000 _call_desc(_0RL_lcfn_a56b508728fda688_df000000, "setHMPouringData", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getHMPouringData")) {

    _0RL_cd_a56b508728fda688_ef000000 _call_desc(_0RL_lcfn_a56b508728fda688_ff000000, "getHMPouringData", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  
#ifndef _MSC_VER
  if (_impl_iData_Provider::_dispatch(_handle)) {
    return 1;
  }
#else
  // Work-around for incorrect MSVC code generation.
  if (((_impl_iData_Provider*)this)->
      _impl_iData_Provider::_dispatch(_handle)) {
    return 1;
  }
#endif


  return 0;
}

void*
_impl_iSMC_DataProvider::_ptrToInterface(const char* id)
{
  if (id == ::iSMC_DataProvider::_PD_repoId)
    return (::_impl_iSMC_DataProvider*) this;
  if (id == ::iData_Provider::_PD_repoId)
    return (::_impl_iData_Provider*) this;


  if (id == ::CORBA::Object::_PD_repoId)
    return (void*) 1;

  if (omni::strMatch(id, ::iSMC_DataProvider::_PD_repoId))
    return (::_impl_iSMC_DataProvider*) this;
  if (omni::strMatch(id, ::iData_Provider::_PD_repoId))
    return (::_impl_iData_Provider*) this;


  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (void*) 1;
  return 0;
}

const char*
_impl_iSMC_DataProvider::_mostDerivedRepoId()
{
  return ::iSMC_DataProvider::_PD_repoId;
}

POA_iSMC_DataProvider::~POA_iSMC_DataProvider() {}

