//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "iSMC_DataDefinitions_s.hh"
#include "cCBS_StdEventLogFrameController.h"
#include "CDataConversion.h"
#include "CPD_ELEC_TAPCH.h"
#include "CPD_TAPCH_DATA.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_TAPCH_DATA::HEATID("HEATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_TAPCH_DATA::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_TAPCH_DATA::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_TAPCH_DATA::STARTTIME("STARTTIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_TAPCH_DATA::ENDTIME("ENDTIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_TAPCH_DATA::VOLTTAP("VOLTTAP");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_TAPCH_DATA::IMPCURVE("IMPCURVE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_TAPCH_DATA::DURATION("DURATION");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_TAPCH_DATA::ELEC_EGY_TAP("ELEC_EGY_TAP");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_TAPCH_DATA::ELEC_EGYTOT("ELEC_EGYTOT");

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_TAPCH_DATA::CPD_TAPCH_DATA(cCBS_StdConnection* Connection)
:CSMC_DBData("PD_TAPCH_DATA",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_TAPCH_DATA::CPD_TAPCH_DATA(cCBS_Connection* Connection)
:CSMC_DBData("PD_TAPCH_DATA",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_TAPCH_DATA::CPD_TAPCH_DATA()
:CSMC_DBData("PD_TAPCH_DATA")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_TAPCH_DATA::~CPD_TAPCH_DATA()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Internal heat identifier
std::string CPD_TAPCH_DATA::getHEATID(long Row)
{
  return getString(CPD_TAPCH_DATA::HEATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_TAPCH_DATA::setHEATID(const std::string& value)
{
  setString(CPD_TAPCH_DATA::HEATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Treatment identifier
std::string CPD_TAPCH_DATA::getTREATID(long Row)
{
  return getString(CPD_TAPCH_DATA::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_TAPCH_DATA::setTREATID(const std::string& value)
{
  setString(CPD_TAPCH_DATA::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Plant identifier
std::string CPD_TAPCH_DATA::getPLANT(long Row)
{
  return getString(CPD_TAPCH_DATA::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_TAPCH_DATA::setPLANT(const std::string& value)
{
  setString(CPD_TAPCH_DATA::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Start time of either changed tap or imp-curve
CDateTime CPD_TAPCH_DATA::getSTARTTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CPD_TAPCH_DATA::STARTTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_TAPCH_DATA::setSTARTTIME(const CDateTime& value)
{
 setString(CPD_TAPCH_DATA::STARTTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##end time of either changed tap or imp-curve before to another tap or imp-curve
CDateTime CPD_TAPCH_DATA::getENDTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CPD_TAPCH_DATA::ENDTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_TAPCH_DATA::setENDTIME(const CDateTime& value)
{
 setString(CPD_TAPCH_DATA::ENDTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPD_TAPCH_DATA::getVOLTTAP(long Row)
{
  return getLong(CPD_TAPCH_DATA::VOLTTAP, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_TAPCH_DATA::setVOLTTAP(long value)
{
  setLong(CPD_TAPCH_DATA::VOLTTAP, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPD_TAPCH_DATA::getIMPCURVE(long Row)
{
  return getLong(CPD_TAPCH_DATA::IMPCURVE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_TAPCH_DATA::setIMPCURVE(long value)
{
  setLong(CPD_TAPCH_DATA::IMPCURVE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Duration the voltage step was active
double CPD_TAPCH_DATA::getDURATION(long Row)
{
  return getDouble(CPD_TAPCH_DATA::DURATION, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_TAPCH_DATA::setDURATION(double value)
{
  setDouble(CPD_TAPCH_DATA::DURATION, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Total electric energy consumption within this voltage tap, kWh
double CPD_TAPCH_DATA::getELEC_EGY_TAP(long Row)
{
  return getDouble(CPD_TAPCH_DATA::ELEC_EGY_TAP, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_TAPCH_DATA::setELEC_EGY_TAP(double value)
{
  setDouble(CPD_TAPCH_DATA::ELEC_EGY_TAP, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Total electric energy consumption in case of electric heating, kWh
double CPD_TAPCH_DATA::getELEC_EGYTOT(long Row)
{
  return getDouble(CPD_TAPCH_DATA::ELEC_EGYTOT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_TAPCH_DATA::setELEC_EGYTOT(double value)
{
  setDouble(CPD_TAPCH_DATA::ELEC_EGYTOT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CPD_TAPCH_DATA::select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const CDateTime& STARTTIME)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPD_TAPCH_DATA::HEATID,HEATID);
  addWhereClause(CPD_TAPCH_DATA::TREATID,TREATID);
  addWhereClause(CPD_TAPCH_DATA::PLANT,PLANT);
  addWhereClause(CPD_TAPCH_DATA::STARTTIME,STARTTIME);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CPD_TAPCH_DATA::selectByElecData(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long VOLTTAP, long IMPCURVE)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPD_TAPCH_DATA::HEATID,HEATID);
  addWhereClause(CPD_TAPCH_DATA::TREATID,TREATID);
  addWhereClause(CPD_TAPCH_DATA::PLANT,PLANT);
  addWhereClause(CPD_TAPCH_DATA::VOLTTAP,VOLTTAP);
  addWhereClause(CPD_TAPCH_DATA::IMPCURVE,IMPCURVE);

  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

bool CPD_TAPCH_DATA::selectByEmptyEndTime(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long VOLTTAP, long IMPCURVE)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPD_TAPCH_DATA::HEATID,HEATID);
  addWhereClause(CPD_TAPCH_DATA::TREATID,TREATID);
  addWhereClause(CPD_TAPCH_DATA::PLANT,PLANT);
  addWhereClause(CPD_TAPCH_DATA::VOLTTAP,VOLTTAP);
  addWhereClause(CPD_TAPCH_DATA::IMPCURVE,IMPCURVE);
  addWhereClause(CPD_TAPCH_DATA::ENDTIME + " IS NULL");

  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

bool CPD_TAPCH_DATA::selectByEndTime(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const CDateTime& ENDTIME, long VOLTTAP, long IMPCURVE)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPD_TAPCH_DATA::HEATID,HEATID);
  addWhereClause(CPD_TAPCH_DATA::TREATID,TREATID);
  addWhereClause(CPD_TAPCH_DATA::PLANT,PLANT);
  addWhereClause(CPD_TAPCH_DATA::ENDTIME,ENDTIME.toDBString());
  addWhereClause(CPD_TAPCH_DATA::VOLTTAP,VOLTTAP);
  addWhereClause(CPD_TAPCH_DATA::IMPCURVE,IMPCURVE);

  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

bool CPD_TAPCH_DATA::selectLatestByHeat(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;
  m_Statement += " where STARTTIME = ( select max(STARTTIME) STARTTIME from " + m_TableName;

  addWhereClause(CPD_TAPCH_DATA::PLANT,PLANT); 
  addWhereClause(CPD_TAPCH_DATA::HEATID, HEATID);
  addWhereClause(CPD_TAPCH_DATA::TREATID, TREATID);

  m_Statement += getWhereStatement() + ") ;";

  return CSMC_DBData::select();
}

bool CPD_TAPCH_DATA::doDeparture(const std::string& HeatID, const std::string& TreatID, const std::string& Plant, const double ElecCons, bool Commit, cCBS_ODBC_DBError &Error)
{
  bool RetValue = UpdateData(HeatID, TreatID, Plant, CSMC_DBData::unspecLong, CSMC_DBData::unspecLong, ElecCons);

  if (!RetValue)
		Error = getLastError();

	if (Commit)
	{
		if (RetValue)
			commit();
		else
			rollback();
	}

  return RetValue;
}

bool CPD_TAPCH_DATA::doHeatStart(const std::string& HeatID, const std::string& TreatID, const std::string& Plant, const long VoltTap, const long EltrdRegCurve, const double ElecCons, const long Status, bool Commit, cCBS_ODBC_DBError &Error)
{
  CDateTime Now;

  bool RetValue = WriteData(HeatID, TreatID, Plant, VoltTap, EltrdRegCurve, ElecCons, Now);

  if (!RetValue)
		Error = getLastError();

	if (Commit)
	{
		if (RetValue)
			commit();
		else
			rollback();
	}

  return RetValue;
}

void CPD_TAPCH_DATA::doOnConstruct()
{
  m_PD_ELEC_TAPCH = new CPD_ELEC_TAPCH(m_pCBS_StdConnection);
}

void CPD_TAPCH_DATA::doOnDestruct()
{
  if ( m_PD_ELEC_TAPCH )
  {
    delete m_PD_ELEC_TAPCH;
    m_PD_ELEC_TAPCH = 0;
  }
}

bool CPD_TAPCH_DATA::GetElectConsumption(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT,double&  dbELEC_EGYTOT )
{
  cleanWhereStatement();

  m_Statement = "Select sum(ELEC_EGYTOT) as ELEC_EGYTOT from " + m_TableName;

  addWhereClause(CPD_TAPCH_DATA::HEATID,HEATID);
  addWhereClause(CPD_TAPCH_DATA::TREATID,TREATID);
  addWhereClause(CPD_TAPCH_DATA::PLANT,PLANT);

  m_Statement += getWhereStatement() ;

  if( CSMC_DBData::select() )
  {
    dbELEC_EGYTOT = getDouble("ELEC_EGYTOT", 1);
    return true;
  }

  dbELEC_EGYTOT = 0.0;
  return false;

}

// storing data accoring to the usage of a certain VoltTap from starting the step until reaching the next step 
// first step data will be indicated at heat start
// last data will be closed at departure
bool CPD_TAPCH_DATA::handleTapChange(const std::string& HeatID, const std::string& TreatID, const std::string& Plant, const long VoltTap, const long EltrdRegCurve, const double ElecCons, const long Status, bool Commit, cCBS_ODBC_DBError &Error)
{
  bool RetValue = true;

  CDateTime StartTime;

  if( Status == DEF_GEN_STATES::Off )
  {
    RetValue = RetValue && UpdateData( HeatID, TreatID, Plant, VoltTap, EltrdRegCurve, ElecCons );      
    RetValue = RetValue && WriteData( HeatID, TreatID, Plant, VoltTap, EltrdRegCurve, ElecCons, StartTime );
  }

  //// ********************************************************************************************************************
  //// if we reach the tap changer end position and a dataset with unknwon endtime is available this must be "closed" first
  //// ********************************************************************************************************************
  //if( Status == DEF_GEN_STATES::Off )
  //{
  //  RetValue = RetValue && UpdateData( HeatID, TreatID, Plant, CSMC_DBData::unspecLong, CSMC_DBData::unspecLong, ElecCons );      
  //}


  //// **************************************************************************
  //// if we reach the tap changer end position this is the start of a new period 
  //// **************************************************************************
  //if( Status == DEF_GEN_STATES::Off )
  //{
  //  RetValue = RetValue && WriteData( HeatID, TreatID, Plant, VoltTap, EltrdRegCurve, ElecCons, StartTime );
  //}

  //// **************************************************************************************
  //// if we start moving the tap changer to a new position this is the end of the old period 
  //// **************************************************************************************
  //if( Status == DEF_GEN_STATES::On )
  //{
  //  RetValue = RetValue && UpdateData( HeatID, TreatID, Plant, CSMC_DBData::unspecLong, CSMC_DBData::unspecLong, ElecCons );      
  //}

  if( !RetValue )
  {
    std::stringstream Message;
    Message << "Insert data into PD_TAPCH_DATA failue.HeatID = " + HeatID + ",TreatID =" + TreatID;

		cCBS_StdEventLogFrame *pEventLog = cCBS_StdEventLogFrameController::getInstance()->getpEventLog();
		sEventLogMessage sMessage = cCBS_StdEventLogFrame::initMessage(__FILE__,__LINE__);
    pEventLog->EL_DBWriteError(sMessage,"", m_TableName.c_str(), Message.str().c_str());
  }

  return RetValue;
}

bool CPD_TAPCH_DATA::UpdateData( const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long VoltTap, long EltrdRegCurve, double ElecCons)
{	
  bool RetValue = true;

  CDateTime   now;

  if ( selectByEmptyEndTime(HEATID, TREATID, PLANT, CSMC_DBData::unspecLong, CSMC_DBData::unspecLong) )
  {
    setENDTIME(now);

    //calculate duration and elec consumption
    CDateTime StartTime = getSTARTTIME(1);

    CDeltaTime DurTime  = CDateTime::subTimes (now, StartTime); 

    setDURATION(DurTime.asSeconds()/60.);


    double LastElecEgyTotal = getELEC_EGYTOT(1);

    if ( LastElecEgyTotal != CSMC_DBData::unspecDouble && 
      ElecCons         != CSMC_DBData::unspecDouble )
    {
      setELEC_EGY_TAP( max(0.0, ElecCons - LastElecEgyTotal) );
    }
    else
    {
      setELEC_EGY_TAP(0.0);
    }

    // save actual elctrical consumption
    setELEC_EGYTOT(ElecCons);

    long DB_VOLTTAP = getVOLTTAP(1);
    long IMPCURVE   = getIMPCURVE(1);

    // we get no signal for tap change, keep last
    if ( (DB_VOLTTAP == CSMC_DBData::unspecLong || DB_VOLTTAP == 0.) && VoltTap != CSMC_DBData::unspecLong )
    {
      setVOLTTAP(VoltTap);
    }

    // we get no signal for curve change, keep last
    // can be changed be before the tap changer start
    if ( (IMPCURVE == CSMC_DBData::unspecLong || IMPCURVE == 0.) && EltrdRegCurve != CSMC_DBData::unspecLong)
    {
      setIMPCURVE(EltrdRegCurve);
    }

    /// not update same value !!! wait for the next
    if ( !(DB_VOLTTAP == VoltTap && IMPCURVE == EltrdRegCurve) )
    {
      RetValue = update();

      if( RetValue )
      {
        commit();
      }
      else
      {
        rollback();

        cCBS_StdEventLogFrame *pEventLog = cCBS_StdEventLogFrameController::getInstance()->getpEventLog();
        sEventLogMessage sMessage = cCBS_StdEventLogFrame::initMessage(__FILE__,__LINE__);
        pEventLog->EL_DBWriteError(sMessage,"", m_TableName.c_str(), getActStatement().c_str());
      }
    }
  }

  return RetValue;
}

bool CPD_TAPCH_DATA::WriteData( const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long VOLTTAP, long IMPCURVE ,double ELEC_EGYTOT,const CDateTime& STARTTIME)
{
  bool RetValue = true;

  if ( !selectByEmptyEndTime(HEATID, TREATID, PLANT, CSMC_DBData::unspecLong, CSMC_DBData::unspecLong) )
  {
    setHEATID(HEATID);
    setTREATID(TREATID);
    setPLANT(PLANT);
    setVOLTTAP(VOLTTAP);
    setIMPCURVE(IMPCURVE);
    setELEC_EGYTOT( ELEC_EGYTOT );
    setSTARTTIME( STARTTIME );

    RetValue = CSMC_DBData::insert();

    if( RetValue )
    {
      commit();
    }
    else
    {
      rollback();

      cCBS_StdEventLogFrame *pEventLog = cCBS_StdEventLogFrameController::getInstance()->getpEventLog();
      sEventLogMessage sMessage = cCBS_StdEventLogFrame::initMessage(__FILE__,__LINE__);
      pEventLog->EL_DBWriteError(sMessage,"", m_TableName.c_str(), getActStatement().c_str());
    }
  }

  return RetValue;
}


