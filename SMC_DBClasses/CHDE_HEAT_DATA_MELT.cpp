//## Copyright (C) 2010 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CPDE_HEAT_DATA_MELT.h"
#include "CHDE_HEAT_DATA_MELT.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA_MELT::HEATID("HEATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA_MELT::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA_MELT::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA_MELT::PHASE("PHASE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA_MELT::STARTTIME("STARTTIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA_MELT::ENDTIME("ENDTIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA_MELT::DURATION("DURATION");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA_MELT::ELEC_CONS("ELEC_CONS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA_MELT::LANCE_O2_CONS("LANCE_O2_CONS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA_MELT::LANCE_N2_CONS("LANCE_N2_CONS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA_MELT::STIRR_N2_CONS("STIRR_N2_CONS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA_MELT::STIRR_AR_CONS("STIRR_AR_CONS");

//##DBClassCodeUtility ! DO NOT EDIT !
CHDE_HEAT_DATA_MELT::CHDE_HEAT_DATA_MELT(cCBS_StdConnection* Connection)
:CSMC_DBData("HDE_HEAT_DATA_MELT",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHDE_HEAT_DATA_MELT::CHDE_HEAT_DATA_MELT(cCBS_Connection* Connection)
:CSMC_DBData("HDE_HEAT_DATA_MELT",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHDE_HEAT_DATA_MELT::CHDE_HEAT_DATA_MELT()
:CSMC_DBData("HDE_HEAT_DATA_MELT")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHDE_HEAT_DATA_MELT::~CHDE_HEAT_DATA_MELT()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDE_HEAT_DATA_MELT::getHEATID(long Row)
{
  return getString(CHDE_HEAT_DATA_MELT::HEATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA_MELT::setHEATID(const std::string& value)
{
  setString(CHDE_HEAT_DATA_MELT::HEATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDE_HEAT_DATA_MELT::getTREATID(long Row)
{
  return getString(CHDE_HEAT_DATA_MELT::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA_MELT::setTREATID(const std::string& value)
{
  setString(CHDE_HEAT_DATA_MELT::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDE_HEAT_DATA_MELT::getPLANT(long Row)
{
  return getString(CHDE_HEAT_DATA_MELT::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA_MELT::setPLANT(const std::string& value)
{
  setString(CHDE_HEAT_DATA_MELT::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDE_HEAT_DATA_MELT::getPHASE(long Row)
{
  return getString(CHDE_HEAT_DATA_MELT::PHASE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA_MELT::setPHASE(const std::string& value)
{
  setString(CHDE_HEAT_DATA_MELT::PHASE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CHDE_HEAT_DATA_MELT::getSTARTTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHDE_HEAT_DATA_MELT::STARTTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA_MELT::setSTARTTIME(const CDateTime& value)
{
 setString(CHDE_HEAT_DATA_MELT::STARTTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CHDE_HEAT_DATA_MELT::getENDTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHDE_HEAT_DATA_MELT::ENDTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA_MELT::setENDTIME(const CDateTime& value)
{
 setString(CHDE_HEAT_DATA_MELT::ENDTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_HEAT_DATA_MELT::getDURATION(long Row)
{
  return getDouble(CHDE_HEAT_DATA_MELT::DURATION, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA_MELT::setDURATION(double value)
{
  setDouble(CHDE_HEAT_DATA_MELT::DURATION, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_HEAT_DATA_MELT::getELEC_CONS(long Row)
{
  return getDouble(CHDE_HEAT_DATA_MELT::ELEC_CONS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA_MELT::setELEC_CONS(double value)
{
  setDouble(CHDE_HEAT_DATA_MELT::ELEC_CONS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_HEAT_DATA_MELT::getLANCE_O2_CONS(long Row)
{
  return getDouble(CHDE_HEAT_DATA_MELT::LANCE_O2_CONS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA_MELT::setLANCE_O2_CONS(double value)
{
  setDouble(CHDE_HEAT_DATA_MELT::LANCE_O2_CONS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_HEAT_DATA_MELT::getLANCE_N2_CONS(long Row)
{
  return getDouble(CHDE_HEAT_DATA_MELT::LANCE_N2_CONS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA_MELT::setLANCE_N2_CONS(double value)
{
  setDouble(CHDE_HEAT_DATA_MELT::LANCE_N2_CONS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_HEAT_DATA_MELT::getSTIRR_N2_CONS(long Row)
{
  return getDouble(CHDE_HEAT_DATA_MELT::STIRR_N2_CONS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA_MELT::setSTIRR_N2_CONS(double value)
{
  setDouble(CHDE_HEAT_DATA_MELT::STIRR_N2_CONS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_HEAT_DATA_MELT::getSTIRR_AR_CONS(long Row)
{
  return getDouble(CHDE_HEAT_DATA_MELT::STIRR_AR_CONS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA_MELT::setSTIRR_AR_CONS(double value)
{
  setDouble(CHDE_HEAT_DATA_MELT::STIRR_AR_CONS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CHDE_HEAT_DATA_MELT::select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const std::string& PHASE, const CDateTime& STARTTIME)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CHDE_HEAT_DATA_MELT::HEATID,HEATID);
  addWhereClause(CHDE_HEAT_DATA_MELT::TREATID,TREATID);
  addWhereClause(CHDE_HEAT_DATA_MELT::PLANT,PLANT);
  addWhereClause(CHDE_HEAT_DATA_MELT::PHASE,PHASE);
  addWhereClause(CHDE_HEAT_DATA_MELT::STARTTIME,STARTTIME);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CHDE_HEAT_DATA_MELT::copy(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, bool Commit, cCBS_ODBC_DBError &Error)
{
  bool result = !exists(HEATID, TREATID, PLANT);
  //some data found -> delete them
  if (!result)
  {
    result = deleteRows();
    if (!result)
      setLastError(std::string("ERROR_DELETE_DATA"), 0, getActStatement());
  }

  // preparing setting for source table
  CPDE_HEAT_DATA_MELT PDE_HEAT_DATA_MELT(m_pCBS_StdConnection);
  PDE_HEAT_DATA_MELT.addWhereClause(CPDE_HEAT_DATA_MELT::HEATID,HEATID);
  PDE_HEAT_DATA_MELT.addWhereClause(CPDE_HEAT_DATA_MELT::TREATID,TREATID);
  PDE_HEAT_DATA_MELT.addWhereClause(CPDE_HEAT_DATA_MELT::PLANT,PLANT);

  result = result && copyByInsert(&PDE_HEAT_DATA_MELT);

  if (!result)
    Error = getLastError();

  if(Commit)
  {
    if (result)
      this->commit();
    else
      rollback();
  }

  return result;
}

bool CHDE_HEAT_DATA_MELT::exists(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT)
{
  cleanWhereStatement();

  m_Statement = "Select HEATID from " + m_TableName;

  addWhereClause(CHDE_HEAT_DATA_MELT::HEATID,HEATID);
  addWhereClause(CHDE_HEAT_DATA_MELT::TREATID,TREATID);
  addWhereClause(CHDE_HEAT_DATA_MELT::PLANT,PLANT);
   
  std::string sWhereStatement = getWhereStatement();
  //to avoid the exception like 'Select HEATID from PP_HEAT AND ROWNUM = 1 '
  if(sWhereStatement.length() > 0 ) 
  {
    // do not use ROWNUM in "addWhereClause", ROWNUM is not a table column and where statement will be used for deletion at "deleteRows"
    m_Statement += sWhereStatement + " AND ROWNUM = 1 ;";
  }
  else
  {
    return false;
  }

  return CSMC_DBData::select();
}


