//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CDataConversion.h"
#include "DEF_GC_COUNTER_TYPE.h"
#include "CGD_EQUIP_STRUCT.h"
#include "CPD_EQUIP_COUNTER.h"
#include "CPD_EQUIP_MOUNT.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_EQUIP_MOUNT::EQUIP_ID("EQUIP_ID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_EQUIP_MOUNT::EQUIP_TYPE("EQUIP_TYPE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_EQUIP_MOUNT::STRUCT_ID("STRUCT_ID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_EQUIP_MOUNT::MOUNT_TIME("MOUNT_TIME");

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_EQUIP_MOUNT::CPD_EQUIP_MOUNT(cCBS_StdConnection* Connection)
:CSMC_DBData("PD_EQUIP_MOUNT",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_EQUIP_MOUNT::CPD_EQUIP_MOUNT(cCBS_Connection* Connection)
:CSMC_DBData("PD_EQUIP_MOUNT",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_EQUIP_MOUNT::CPD_EQUIP_MOUNT()
:CSMC_DBData("PD_EQUIP_MOUNT")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_EQUIP_MOUNT::~CPD_EQUIP_MOUNT()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Equipment Id
long CPD_EQUIP_MOUNT::getEQUIP_ID(long Row)
{
  return getLong(CPD_EQUIP_MOUNT::EQUIP_ID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_EQUIP_MOUNT::setEQUIP_ID(long value)
{
  setLong(CPD_EQUIP_MOUNT::EQUIP_ID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Equipment type 
std::string CPD_EQUIP_MOUNT::getEQUIP_TYPE(long Row)
{
  return getString(CPD_EQUIP_MOUNT::EQUIP_TYPE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_EQUIP_MOUNT::setEQUIP_TYPE(const std::string& value)
{
  setString(CPD_EQUIP_MOUNT::EQUIP_TYPE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Structure Id of equipment
long CPD_EQUIP_MOUNT::getSTRUCT_ID(long Row)
{
  return getLong(CPD_EQUIP_MOUNT::STRUCT_ID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_EQUIP_MOUNT::setSTRUCT_ID(long value)
{
  setLong(CPD_EQUIP_MOUNT::STRUCT_ID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Timestamp when equipment was mounted
CDateTime CPD_EQUIP_MOUNT::getMOUNT_TIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CPD_EQUIP_MOUNT::MOUNT_TIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_EQUIP_MOUNT::setMOUNT_TIME(const CDateTime& value)
{
 setString(CPD_EQUIP_MOUNT::MOUNT_TIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CPD_EQUIP_MOUNT::select(long EQUIP_ID, const std::string& EQUIP_TYPE)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPD_EQUIP_MOUNT::EQUIP_ID,EQUIP_ID);
  addWhereClause(CPD_EQUIP_MOUNT::EQUIP_TYPE,EQUIP_TYPE);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CPD_EQUIP_MOUNT::selectByEquipIdList(std::vector<long> EQUIP_ID_LIST)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPD_EQUIP_MOUNT::EQUIP_ID, EQUIP_ID_LIST, "IN");

  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

bool CPD_EQUIP_MOUNT::selectByEquipType(const std::string& EQUIP_TYPE, long STRUCT_ID)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPD_EQUIP_MOUNT::EQUIP_TYPE, EQUIP_TYPE);
  addWhereClause(CPD_EQUIP_MOUNT::STRUCT_ID,  STRUCT_ID);

  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

bool CPD_EQUIP_MOUNT::selectByStructId(long STRUCT_ID)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPD_EQUIP_MOUNT::STRUCT_ID, STRUCT_ID);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

bool CPD_EQUIP_MOUNT::selectByStructIdList(std::vector<long> STRUCT_ID_LIST)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPD_EQUIP_MOUNT::STRUCT_ID, STRUCT_ID_LIST, "IN");
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//sankar
bool CPD_EQUIP_MOUNT::InsertData(long EQUIP_ID,const std::string &EQUIP_TYPE, long STRUCT_ID, bool Commit, cCBS_ODBC_DBError &Error)
{
  bool RetValue = true;

  setEQUIP_ID           (EQUIP_ID);
  setEQUIP_TYPE         (EQUIP_TYPE);
  setSTRUCT_ID          (STRUCT_ID);
  setMOUNT_TIME         (CDateTime());

  RetValue = RetValue && insert();

  if (!RetValue)
    Error = getLastError();

  if (Commit)
  {
    if (RetValue)
      commit();
    else
      rollback();
  }

  return RetValue;
}
