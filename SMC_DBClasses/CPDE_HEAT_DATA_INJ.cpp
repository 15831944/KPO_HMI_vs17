//## Copyright (C) 2010 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CPDE_HEAT_DATA_INJ.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_HEAT_DATA_INJ::HEATID("HEATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_HEAT_DATA_INJ::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_HEAT_DATA_INJ::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_HEAT_DATA_INJ::DEVICENAME("DEVICENAME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_HEAT_DATA_INJ::INJ_MAT("INJ_MAT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_HEAT_DATA_INJ::STARTTIME("STARTTIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_HEAT_DATA_INJ::ENDTIME("ENDTIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_HEAT_DATA_INJ::DURATION("DURATION");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_HEAT_DATA_INJ::INJ_FLOW("INJ_FLOW");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_HEAT_DATA_INJ::INJ_AMOUNT("INJ_AMOUNT");

//##DBClassCodeUtility ! DO NOT EDIT !
CPDE_HEAT_DATA_INJ::CPDE_HEAT_DATA_INJ(cCBS_StdConnection* Connection)
:CSMC_DBData("PDE_HEAT_DATA_INJ",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPDE_HEAT_DATA_INJ::CPDE_HEAT_DATA_INJ(cCBS_Connection* Connection)
:CSMC_DBData("PDE_HEAT_DATA_INJ",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPDE_HEAT_DATA_INJ::CPDE_HEAT_DATA_INJ()
:CSMC_DBData("PDE_HEAT_DATA_INJ")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPDE_HEAT_DATA_INJ::~CPDE_HEAT_DATA_INJ()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDE_HEAT_DATA_INJ::getHEATID(long Row)
{
  return getString(CPDE_HEAT_DATA_INJ::HEATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_HEAT_DATA_INJ::setHEATID(const std::string& value)
{
  setString(CPDE_HEAT_DATA_INJ::HEATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDE_HEAT_DATA_INJ::getTREATID(long Row)
{
  return getString(CPDE_HEAT_DATA_INJ::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_HEAT_DATA_INJ::setTREATID(const std::string& value)
{
  setString(CPDE_HEAT_DATA_INJ::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDE_HEAT_DATA_INJ::getPLANT(long Row)
{
  return getString(CPDE_HEAT_DATA_INJ::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_HEAT_DATA_INJ::setPLANT(const std::string& value)
{
  setString(CPDE_HEAT_DATA_INJ::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDE_HEAT_DATA_INJ::getDEVICENAME(long Row)
{
  return getString(CPDE_HEAT_DATA_INJ::DEVICENAME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_HEAT_DATA_INJ::setDEVICENAME(const std::string& value)
{
  setString(CPDE_HEAT_DATA_INJ::DEVICENAME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDE_HEAT_DATA_INJ::getINJ_MAT(long Row)
{
  return getString(CPDE_HEAT_DATA_INJ::INJ_MAT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_HEAT_DATA_INJ::setINJ_MAT(const std::string& value)
{
  setString(CPDE_HEAT_DATA_INJ::INJ_MAT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CPDE_HEAT_DATA_INJ::getSTARTTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CPDE_HEAT_DATA_INJ::STARTTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_HEAT_DATA_INJ::setSTARTTIME(const CDateTime& value)
{
 setString(CPDE_HEAT_DATA_INJ::STARTTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CPDE_HEAT_DATA_INJ::getENDTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CPDE_HEAT_DATA_INJ::ENDTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_HEAT_DATA_INJ::setENDTIME(const CDateTime& value)
{
 setString(CPDE_HEAT_DATA_INJ::ENDTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDE_HEAT_DATA_INJ::getDURATION(long Row)
{
  return getDouble(CPDE_HEAT_DATA_INJ::DURATION, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_HEAT_DATA_INJ::setDURATION(double value)
{
  setDouble(CPDE_HEAT_DATA_INJ::DURATION, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDE_HEAT_DATA_INJ::getINJ_FLOW(long Row)
{
  return getDouble(CPDE_HEAT_DATA_INJ::INJ_FLOW, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_HEAT_DATA_INJ::setINJ_FLOW(double value)
{
  setDouble(CPDE_HEAT_DATA_INJ::INJ_FLOW, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDE_HEAT_DATA_INJ::getINJ_AMOUNT(long Row)
{
  return getDouble(CPDE_HEAT_DATA_INJ::INJ_AMOUNT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_HEAT_DATA_INJ::setINJ_AMOUNT(double value)
{
  setDouble(CPDE_HEAT_DATA_INJ::INJ_AMOUNT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CPDE_HEAT_DATA_INJ::select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const std::string& DEVICENAME, const std::string& INJ_MAT, const CDateTime& STARTTIME)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPDE_HEAT_DATA_INJ::HEATID,HEATID);
  addWhereClause(CPDE_HEAT_DATA_INJ::TREATID,TREATID);
  addWhereClause(CPDE_HEAT_DATA_INJ::PLANT,PLANT);
  addWhereClause(CPDE_HEAT_DATA_INJ::DEVICENAME,DEVICENAME);
  addWhereClause(CPDE_HEAT_DATA_INJ::INJ_MAT,INJ_MAT);
  addWhereClause(CPDE_HEAT_DATA_INJ::STARTTIME,STARTTIME);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CPDE_HEAT_DATA_INJ::selectActual(const string& HEATID, const string& TREATID, const string& PLANT, const string& DEVICENAME)
{
	cleanWhereStatement();

	m_Statement = "Select * from " + m_TableName;

	addWhereClause(CPDE_HEAT_DATA_INJ::HEATID,HEATID);
	addWhereClause(CPDE_HEAT_DATA_INJ::TREATID,TREATID);
	addWhereClause(CPDE_HEAT_DATA_INJ::PLANT,PLANT);
	addWhereClause(CPDE_HEAT_DATA_INJ::DEVICENAME,DEVICENAME);

  std::string MaxClause = CPDE_HEAT_DATA_INJ::STARTTIME + " = (select max(" + CPDE_HEAT_DATA_INJ::STARTTIME + ") from " + m_TableName + getWhereStatement() +")";
  addWhereClause(MaxClause);

  m_Statement += getWhereStatement() + ";";

	return CSMC_DBData::select();

}

bool CPDE_HEAT_DATA_INJ::selectNotStopInj(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const std::string& DEVICENAME, const std::string& INJ_MAT)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPDE_HEAT_DATA_INJ::HEATID,HEATID);
  addWhereClause(CPDE_HEAT_DATA_INJ::TREATID,TREATID);
  addWhereClause(CPDE_HEAT_DATA_INJ::PLANT,PLANT);
  addWhereClause("DEVICENAME",DEVICENAME);
  addWhereClause(CPDE_HEAT_DATA_INJ::INJ_MAT,INJ_MAT);
  addWhereClause(CPDE_HEAT_DATA_INJ::ENDTIME + " is NULL");

  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

bool CPDE_HEAT_DATA_INJ::selectBurnerConsDataByHeat(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT)
{
  cleanWhereStatement();

  std::stringstream sql;

  sql<< "select t.heatid,"
    << "       t.treatid,"
    << "       t.plant,"
    << "       t.DEVICENAME,"
    << "       max(t.INJ_AMOUNT) as INJ_AMOUNT"
    << "  from l2smc_eaf.PDE_HEAT_DATA_INJ t"
    << " where t.heatid = '"  << HEATID << "'"
    << "   and t.treatid = '" << TREATID << "'"
    << "   and t.plant = '"   << PLANT << "'"
    << "   group by t.heatid, t.treatid, t.plant, t.DEVICENAME";


    m_Statement = sql.str();

  bool result = CSMC_DBData::select();

  return result;
}