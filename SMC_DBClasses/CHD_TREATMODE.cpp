//## Copyright (C) 2010 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CGT_TREATMODE.h"
#include "CHD_TREATMODE.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_TREATMODE::HEATID("HEATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_TREATMODE::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_TREATMODE::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_TREATMODE::TREATMODENO("TREATMODENO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_TREATMODE::DESCRIPTION("DESCRIPTION");

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_TREATMODE::CHD_TREATMODE(cCBS_StdConnection* Connection)
:CSMC_DBData("HD_TREATMODE",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_TREATMODE::CHD_TREATMODE(cCBS_Connection* Connection)
:CSMC_DBData("HD_TREATMODE",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_TREATMODE::CHD_TREATMODE()
:CSMC_DBData("HD_TREATMODE")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_TREATMODE::~CHD_TREATMODE()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Internal heat identifier
std::string CHD_TREATMODE::getHEATID(long Row)
{
  return getString(CHD_TREATMODE::HEATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_TREATMODE::setHEATID(const std::string& value)
{
  setString(CHD_TREATMODE::HEATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Treatment identifier
std::string CHD_TREATMODE::getTREATID(long Row)
{
  return getString(CHD_TREATMODE::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_TREATMODE::setTREATID(const std::string& value)
{
  setString(CHD_TREATMODE::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Plant identifier
std::string CHD_TREATMODE::getPLANT(long Row)
{
  return getString(CHD_TREATMODE::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_TREATMODE::setPLANT(const std::string& value)
{
  setString(CHD_TREATMODE::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Treatment mode number
long CHD_TREATMODE::getTREATMODENO(long Row)
{
  return getLong(CHD_TREATMODE::TREATMODENO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_TREATMODE::setTREATMODENO(long value)
{
  setLong(CHD_TREATMODE::TREATMODENO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Description of treatment mode
std::string CHD_TREATMODE::getDESCRIPTION(long Row)
{
  return getString(CHD_TREATMODE::DESCRIPTION, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_TREATMODE::setDESCRIPTION(const std::string& value)
{
  setString(CHD_TREATMODE::DESCRIPTION, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CHD_TREATMODE::select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long TREATMODENO)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CHD_TREATMODE::HEATID,HEATID);
  addWhereClause(CHD_TREATMODE::TREATID,TREATID);
  addWhereClause(CHD_TREATMODE::PLANT,PLANT);
  addWhereClause(CHD_TREATMODE::TREATMODENO,TREATMODENO);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CHD_TREATMODE::copy(const std::string& HEATID,const std::string& TREATID, const std::string& PLANT, long PLANTNO,long TREATMODENO,bool Commit, cCBS_ODBC_DBError &Error)
{
	bool result = true;
	//some data found -> delete them
  if (exists(HEATID, TREATID, PLANT, CSMC_DBData::unspecLong ))
	{
		result = deleteRows();
		if (!result)
			setLastError(std::string("ERROR_DELETE_DATA"), 0, getActStatement());
	}

  // preparing setting for source table
  CGT_TREATMODE GT_TREATMODE(m_pCBS_StdConnection);
  GT_TREATMODE.addWhereClause(CGT_TREATMODE::PLANT,PLANT);
  GT_TREATMODE.addWhereClause(CGT_TREATMODE::PLANTNO,PLANTNO);
  GT_TREATMODE.addWhereClause(CGT_TREATMODE::TREATMODENO,TREATMODENO);

  // preparing setting for aim table
  setHEATID     (HEATID);
  setTREATID    (TREATID);
  setPLANT      (PLANT);

  result = result && copyByInsert(&GT_TREATMODE);

	if (!result)
		Error = getLastError();

	if(Commit)
  {
		if (result)
			commit();
		else
			rollback();
  }

	return result;
}

bool CHD_TREATMODE::exists(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long TREATMODENO )
{
	cleanWhereStatement();

	m_Statement = "Select HEATID from " + m_TableName;

	addWhereClause(CHD_TREATMODE::HEATID,HEATID);
	addWhereClause(CHD_TREATMODE::TREATID,TREATID);
	addWhereClause(CHD_TREATMODE::PLANT,PLANT);
  addWhereClause(CHD_TREATMODE::TREATMODENO,TREATMODENO);
   
  std::string sWhereStatement = getWhereStatement();
  //to avoid the exception like 'Select HEATID from PP_HEAT AND ROWNUM = 1 '
  if(sWhereStatement.length() > 0 ) 
  {
    // do not use ROWNUM in "addWhereClause", ROWNUM is not a table column and where statement will be used for deletion at "deleteRows"
    m_Statement += sWhereStatement + " AND ROWNUM = 1 ;";
  }
  else
  {
    return false;
  }

	return CSMC_DBData::select();
}


