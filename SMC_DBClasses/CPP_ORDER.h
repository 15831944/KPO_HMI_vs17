//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 

#if defined (_MSC_VER) && (_MSC_VER >= 1000)
#pragma once
#endif
#ifndef _INC_CPP_ORDER_INCLUDED
#define _INC_CPP_ORDER_INCLUDED

#include "CSMC_DBData.h"

class CPP_ORDER
: public CSMC_DBData
{

public:
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PRODORDERID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string STEELGRADECODE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string CCM_DIMENSION;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string ORDERSEQNO;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string ON_REQUEST;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string USERCODE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string REVTIME;

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPP_ORDER(cCBS_StdConnection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPP_ORDER(cCBS_Connection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPP_ORDER();

  //##DBClassCodeUtility ! DO NOT EDIT !
  ~CPP_ORDER();

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Production oder identification
  std::string getPRODORDERID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPRODORDERID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Steel grade code
  std::string getSTEELGRADECODE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSTEELGRADECODE(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##CCM product description, free text
  std::string getCCM_DIMENSION(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setCCM_DIMENSION(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Defines production order only in case of missing schedule information.
  long getORDERSEQNO(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setORDERSEQNO(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Manually (1) entered by operator. The entry is deleted in case of heat cancellation.
  long getON_REQUEST(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setON_REQUEST(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##User who entered/changed entry. User code <> L3 indicates manual entered.
  std::string getUSERCODE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setUSERCODE(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Date and time of last revision
  CDateTime getREVTIME(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setREVTIME(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  bool select(const std::string& PRODORDERID);

  //## ----------------------------------END-GENERATED-CODE--------------------- 

  //## ----------------------------------YOUR-CODE------------------------------ 

  bool selectByREVTIME(const CDateTime& REVTIME, const std::string& Operator);

  bool selectLastDefltOrd(const std::string& Orderprefix, const std::string& Operator);

  bool selectNextOrder(const std::string& PRODORDERID);

  bool selectPlanOrder(const std::string& PLANT);

  bool selectUseHeatId(const std::string& HEATID);

  bool copyOrder(const std::string& PRODORDERID_SOURCE, const std::string& PRODORDERID_AIM, bool Commit, cCBS_ODBC_DBError& Error);

  bool deletePP(const std::string& PRODORDERID, bool Commit, cCBS_ODBC_DBError &Error);

  bool doOrderChange(const std::string& PRODORDERID_1, const std::string& PRODORDERID_2, bool Commit, cCBS_ODBC_DBError& Error);

  bool doSteelGradeChange(const std::string& PRODORDERID, const std::string& STEELGRADECODE, const std::string& USERCODE, bool Commit, cCBS_ODBC_DBError& Error);

  bool exists(const std::string& PRODORDERID);

  bool updateInsertPP(const std::string &ORDER, const std::string &STEELGRADECODE, const std::string &USERCODE, bool Commit, cCBS_ODBC_DBError &Error);

  bool updateOrderData(const std::string &ORDER, const std::string &STEELGRADECODE, const std::string & CCM_DIMENSION, long ORDERSEQNO, long ON_REQUEST, bool Commit, cCBS_ODBC_DBError &Error);

};

#endif /* _INC_CPP_ORDER_INCLUDED */
