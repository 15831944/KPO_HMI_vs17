//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "iSMC_DataDefinitions_s.hh"
#include "CIntfData.h"
#include "DEF_GC_STIRR_GAS_TYPE.h"
#include "CPDL_CYCL_MEAS_DATA.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_CYCL_MEAS_DATA::HEATID("HEATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_CYCL_MEAS_DATA::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_CYCL_MEAS_DATA::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_CYCL_MEAS_DATA::REVTIME("REVTIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_CYCL_MEAS_DATA::DURSINCEHEATANNOUNCE("DURSINCEHEATANNOUNCE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_CYCL_MEAS_DATA::DURSINCESTARTOFHEAT("DURSINCESTARTOFHEAT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_CYCL_MEAS_DATA::ELEC_CONS("ELEC_CONS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_CYCL_MEAS_DATA::CURACTIYITY_L1("CURACTIYITY_L1");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_CYCL_MEAS_DATA::COMPMODE_ELEC("COMPMODE_ELEC");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_CYCL_MEAS_DATA::COMPMODE_MAT("COMPMODE_MAT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_CYCL_MEAS_DATA::COMPMODE_STIRR("COMPMODE_STIRR");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_CYCL_MEAS_DATA::VOLTTAP("VOLTTAP");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_CYCL_MEAS_DATA::IMPCURVE("IMPCURVE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_CYCL_MEAS_DATA::ELECTRODEPOS("ELECTRODEPOS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_CYCL_MEAS_DATA::FURNACEBRAKERSTATUS("FURNACEBRAKERSTATUS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_CYCL_MEAS_DATA::TAPCHANGERSTATUS("TAPCHANGERSTATUS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_CYCL_MEAS_DATA::POWERSTATUS("POWERSTATUS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_CYCL_MEAS_DATA::ROOFPOS("ROOFPOS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_CYCL_MEAS_DATA::GANTRYPOS("GANTRYPOS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_CYCL_MEAS_DATA::HOIST_AVAIL("HOIST_AVAIL");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_CYCL_MEAS_DATA::STIRRGASTYPE("STIRRGASTYPE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_CYCL_MEAS_DATA::STIRR_N2_FLOW("STIRR_N2_FLOW");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_CYCL_MEAS_DATA::STIRR_AR_FLOW("STIRR_AR_FLOW");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_CYCL_MEAS_DATA::STIRR_N2_CONS("STIRR_N2_CONS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_CYCL_MEAS_DATA::STIRR_AR_CONS("STIRR_AR_CONS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_CYCL_MEAS_DATA::STIRR_INT("STIRR_INT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_CYCL_MEAS_DATA::ACTIVITYNAME("ACTIVITYNAME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_CYCL_MEAS_DATA::CURPHASE_L1("CURPHASE_L1");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_CYCL_MEAS_DATA::TEMP_ACT("TEMP_ACT");

//##DBClassCodeUtility ! DO NOT EDIT !
CPDL_CYCL_MEAS_DATA::CPDL_CYCL_MEAS_DATA(cCBS_StdConnection* Connection)
:CSMC_DBData("PDL_CYCL_MEAS_DATA",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPDL_CYCL_MEAS_DATA::CPDL_CYCL_MEAS_DATA(cCBS_Connection* Connection)
:CSMC_DBData("PDL_CYCL_MEAS_DATA",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPDL_CYCL_MEAS_DATA::CPDL_CYCL_MEAS_DATA()
:CSMC_DBData("PDL_CYCL_MEAS_DATA")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPDL_CYCL_MEAS_DATA::~CPDL_CYCL_MEAS_DATA()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDL_CYCL_MEAS_DATA::getHEATID(long Row)
{
  return getString(CPDL_CYCL_MEAS_DATA::HEATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_CYCL_MEAS_DATA::setHEATID(const std::string& value)
{
  setString(CPDL_CYCL_MEAS_DATA::HEATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDL_CYCL_MEAS_DATA::getTREATID(long Row)
{
  return getString(CPDL_CYCL_MEAS_DATA::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_CYCL_MEAS_DATA::setTREATID(const std::string& value)
{
  setString(CPDL_CYCL_MEAS_DATA::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDL_CYCL_MEAS_DATA::getPLANT(long Row)
{
  return getString(CPDL_CYCL_MEAS_DATA::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_CYCL_MEAS_DATA::setPLANT(const std::string& value)
{
  setString(CPDL_CYCL_MEAS_DATA::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CPDL_CYCL_MEAS_DATA::getREVTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CPDL_CYCL_MEAS_DATA::REVTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_CYCL_MEAS_DATA::setREVTIME(const CDateTime& value)
{
 setString(CPDL_CYCL_MEAS_DATA::REVTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDL_CYCL_MEAS_DATA::getDURSINCEHEATANNOUNCE(long Row)
{
  return getDouble(CPDL_CYCL_MEAS_DATA::DURSINCEHEATANNOUNCE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_CYCL_MEAS_DATA::setDURSINCEHEATANNOUNCE(double value)
{
  setDouble(CPDL_CYCL_MEAS_DATA::DURSINCEHEATANNOUNCE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDL_CYCL_MEAS_DATA::getDURSINCESTARTOFHEAT(long Row)
{
  return getDouble(CPDL_CYCL_MEAS_DATA::DURSINCESTARTOFHEAT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_CYCL_MEAS_DATA::setDURSINCESTARTOFHEAT(double value)
{
  setDouble(CPDL_CYCL_MEAS_DATA::DURSINCESTARTOFHEAT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDL_CYCL_MEAS_DATA::getELEC_CONS(long Row)
{
  return getDouble(CPDL_CYCL_MEAS_DATA::ELEC_CONS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_CYCL_MEAS_DATA::setELEC_CONS(double value)
{
  setDouble(CPDL_CYCL_MEAS_DATA::ELEC_CONS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDL_CYCL_MEAS_DATA::getCURACTIYITY_L1(long Row)
{
  return getString(CPDL_CYCL_MEAS_DATA::CURACTIYITY_L1, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_CYCL_MEAS_DATA::setCURACTIYITY_L1(const std::string& value)
{
  setString(CPDL_CYCL_MEAS_DATA::CURACTIYITY_L1, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDL_CYCL_MEAS_DATA::getCOMPMODE_ELEC(long Row)
{
  return getLong(CPDL_CYCL_MEAS_DATA::COMPMODE_ELEC, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_CYCL_MEAS_DATA::setCOMPMODE_ELEC(long value)
{
  setLong(CPDL_CYCL_MEAS_DATA::COMPMODE_ELEC, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDL_CYCL_MEAS_DATA::getCOMPMODE_MAT(long Row)
{
  return getLong(CPDL_CYCL_MEAS_DATA::COMPMODE_MAT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_CYCL_MEAS_DATA::setCOMPMODE_MAT(long value)
{
  setLong(CPDL_CYCL_MEAS_DATA::COMPMODE_MAT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDL_CYCL_MEAS_DATA::getCOMPMODE_STIRR(long Row)
{
  return getLong(CPDL_CYCL_MEAS_DATA::COMPMODE_STIRR, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_CYCL_MEAS_DATA::setCOMPMODE_STIRR(long value)
{
  setLong(CPDL_CYCL_MEAS_DATA::COMPMODE_STIRR, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDL_CYCL_MEAS_DATA::getVOLTTAP(long Row)
{
  return getLong(CPDL_CYCL_MEAS_DATA::VOLTTAP, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_CYCL_MEAS_DATA::setVOLTTAP(long value)
{
  setLong(CPDL_CYCL_MEAS_DATA::VOLTTAP, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDL_CYCL_MEAS_DATA::getIMPCURVE(long Row)
{
  return getLong(CPDL_CYCL_MEAS_DATA::IMPCURVE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_CYCL_MEAS_DATA::setIMPCURVE(long value)
{
  setLong(CPDL_CYCL_MEAS_DATA::IMPCURVE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDL_CYCL_MEAS_DATA::getELECTRODEPOS(long Row)
{
  return getLong(CPDL_CYCL_MEAS_DATA::ELECTRODEPOS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_CYCL_MEAS_DATA::setELECTRODEPOS(long value)
{
  setLong(CPDL_CYCL_MEAS_DATA::ELECTRODEPOS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDL_CYCL_MEAS_DATA::getFURNACEBRAKERSTATUS(long Row)
{
  return getLong(CPDL_CYCL_MEAS_DATA::FURNACEBRAKERSTATUS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_CYCL_MEAS_DATA::setFURNACEBRAKERSTATUS(long value)
{
  setLong(CPDL_CYCL_MEAS_DATA::FURNACEBRAKERSTATUS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDL_CYCL_MEAS_DATA::getTAPCHANGERSTATUS(long Row)
{
  return getLong(CPDL_CYCL_MEAS_DATA::TAPCHANGERSTATUS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_CYCL_MEAS_DATA::setTAPCHANGERSTATUS(long value)
{
  setLong(CPDL_CYCL_MEAS_DATA::TAPCHANGERSTATUS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDL_CYCL_MEAS_DATA::getPOWERSTATUS(long Row)
{
  return getLong(CPDL_CYCL_MEAS_DATA::POWERSTATUS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_CYCL_MEAS_DATA::setPOWERSTATUS(long value)
{
  setLong(CPDL_CYCL_MEAS_DATA::POWERSTATUS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDL_CYCL_MEAS_DATA::getROOFPOS(long Row)
{
  return getLong(CPDL_CYCL_MEAS_DATA::ROOFPOS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_CYCL_MEAS_DATA::setROOFPOS(long value)
{
  setLong(CPDL_CYCL_MEAS_DATA::ROOFPOS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDL_CYCL_MEAS_DATA::getGANTRYPOS(long Row)
{
  return getLong(CPDL_CYCL_MEAS_DATA::GANTRYPOS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_CYCL_MEAS_DATA::setGANTRYPOS(long value)
{
  setLong(CPDL_CYCL_MEAS_DATA::GANTRYPOS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDL_CYCL_MEAS_DATA::getHOIST_AVAIL(long Row)
{
  return getLong(CPDL_CYCL_MEAS_DATA::HOIST_AVAIL, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_CYCL_MEAS_DATA::setHOIST_AVAIL(long value)
{
  setLong(CPDL_CYCL_MEAS_DATA::HOIST_AVAIL, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDL_CYCL_MEAS_DATA::getSTIRRGASTYPE(long Row)
{
  return getString(CPDL_CYCL_MEAS_DATA::STIRRGASTYPE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_CYCL_MEAS_DATA::setSTIRRGASTYPE(const std::string& value)
{
  setString(CPDL_CYCL_MEAS_DATA::STIRRGASTYPE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDL_CYCL_MEAS_DATA::getSTIRR_N2_FLOW(long Row)
{
  return getDouble(CPDL_CYCL_MEAS_DATA::STIRR_N2_FLOW, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_CYCL_MEAS_DATA::setSTIRR_N2_FLOW(double value)
{
  setDouble(CPDL_CYCL_MEAS_DATA::STIRR_N2_FLOW, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDL_CYCL_MEAS_DATA::getSTIRR_AR_FLOW(long Row)
{
  return getDouble(CPDL_CYCL_MEAS_DATA::STIRR_AR_FLOW, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_CYCL_MEAS_DATA::setSTIRR_AR_FLOW(double value)
{
  setDouble(CPDL_CYCL_MEAS_DATA::STIRR_AR_FLOW, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDL_CYCL_MEAS_DATA::getSTIRR_N2_CONS(long Row)
{
  return getDouble(CPDL_CYCL_MEAS_DATA::STIRR_N2_CONS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_CYCL_MEAS_DATA::setSTIRR_N2_CONS(double value)
{
  setDouble(CPDL_CYCL_MEAS_DATA::STIRR_N2_CONS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDL_CYCL_MEAS_DATA::getSTIRR_AR_CONS(long Row)
{
  return getDouble(CPDL_CYCL_MEAS_DATA::STIRR_AR_CONS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_CYCL_MEAS_DATA::setSTIRR_AR_CONS(double value)
{
  setDouble(CPDL_CYCL_MEAS_DATA::STIRR_AR_CONS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDL_CYCL_MEAS_DATA::getSTIRR_INT(long Row)
{
  return getLong(CPDL_CYCL_MEAS_DATA::STIRR_INT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_CYCL_MEAS_DATA::setSTIRR_INT(long value)
{
  setLong(CPDL_CYCL_MEAS_DATA::STIRR_INT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDL_CYCL_MEAS_DATA::getACTIVITYNAME(long Row)
{
  return getString(CPDL_CYCL_MEAS_DATA::ACTIVITYNAME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_CYCL_MEAS_DATA::setACTIVITYNAME(const std::string& value)
{
  setString(CPDL_CYCL_MEAS_DATA::ACTIVITYNAME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDL_CYCL_MEAS_DATA::getCURPHASE_L1(long Row)
{
  return getLong(CPDL_CYCL_MEAS_DATA::CURPHASE_L1, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_CYCL_MEAS_DATA::setCURPHASE_L1(long value)
{
  setLong(CPDL_CYCL_MEAS_DATA::CURPHASE_L1, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDL_CYCL_MEAS_DATA::getTEMP_ACT(long Row)
{
  return getDouble(CPDL_CYCL_MEAS_DATA::TEMP_ACT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_CYCL_MEAS_DATA::setTEMP_ACT(double value)
{
  setDouble(CPDL_CYCL_MEAS_DATA::TEMP_ACT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CPDL_CYCL_MEAS_DATA::select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const CDateTime& REVTIME)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPDL_CYCL_MEAS_DATA::HEATID,HEATID);
  addWhereClause(CPDL_CYCL_MEAS_DATA::TREATID,TREATID);
  addWhereClause(CPDL_CYCL_MEAS_DATA::PLANT,PLANT);
  addWhereClause(CPDL_CYCL_MEAS_DATA::REVTIME,REVTIME);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CPDL_CYCL_MEAS_DATA::selectByTime(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPDL_CYCL_MEAS_DATA::HEATID,HEATID);
  addWhereClause(CPDL_CYCL_MEAS_DATA::TREATID,TREATID);
  addWhereClause(CPDL_CYCL_MEAS_DATA::PLANT,PLANT);

  m_Statement += getWhereStatement() + " ORDER BY REVTIME;";

  return CSMC_DBData::select();
}

bool CPDL_CYCL_MEAS_DATA::selectMax(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const std::string& NumericColumnName)
{
	cleanWhereStatement();

	m_Statement = "Select MAX(" + NumericColumnName + ") AS " + NumericColumnName + " from " + m_TableName;

	addWhereClause(CPDL_CYCL_MEAS_DATA::HEATID,HEATID);
	addWhereClause(CPDL_CYCL_MEAS_DATA::TREATID,TREATID);
	addWhereClause(CPDL_CYCL_MEAS_DATA::PLANT,PLANT);

	m_Statement += getWhereStatement() + ";";

	return CSMC_DBData::select();

}

bool CPDL_CYCL_MEAS_DATA::writeData(const std::string& heatID, const std::string& treatID, const std::string& plant, long ActPhaseL1, std::string ElecPhaseName, double DurSinceHeatAnnounce, double DurSinceHeatStart,long VoltTap, long EltrdRegCurve, long ElecPos, long FurnBreakOn, long FurnTapChangOn, long PowerOn, double ElecCons,long RoofPos, long GantryPos, std::string GasType,const seqGasData & StirrFlow, long StirrIntensity,const seqComputerModes &seqCompModes, const seqGasData & StirrCons)
{
  bool        RetValue   = false;
  long        PredLength = 0;
  long        i;
  CDateTime   now;
  sGasData    GasData;
	string      Gas;
	string      Device;

  try
  {
    setHEATID(heatID);
    setTREATID(treatID);
    if ( plant != DEF::Inv_String ) 
    { 
      setPLANT(plant);
    }
    setREVTIME(now);

    setDURSINCEHEATANNOUNCE(DurSinceHeatAnnounce);
    setDURSINCESTARTOFHEAT(DurSinceHeatStart);

    setCURPHASE_L1(ActPhaseL1);
    setACTIVITYNAME(ElecPhaseName);

    setVOLTTAP(VoltTap);
    setIMPCURVE(EltrdRegCurve);
    setELECTRODEPOS(ElecPos);
    setFURNACEBRAKERSTATUS(FurnBreakOn);
    setTAPCHANGERSTATUS(FurnTapChangOn);
    setPOWERSTATUS(PowerOn);

    setELEC_CONS(ElecCons);

    setROOFPOS(RoofPos);
    setGANTRYPOS(GantryPos);

    PredLength = CIntfData::getLength(StirrCons);
    for (i = 0 ; i < PredLength ; ++i)
    {
      CIntfData::getAt(GasData,&StirrCons,i);

      Gas         = GasData.GasType;  
	    if (Gas == DEF_GC_STIRR_GAS_TYPE::Ar) setSTIRR_AR_CONS(GasData.GasValue);
	    if (Gas == DEF_GC_STIRR_GAS_TYPE::N2) setSTIRR_N2_CONS(GasData.GasValue);
    }

    PredLength = CIntfData::getLength(StirrFlow);
    setSTIRRGASTYPE(GasType);
    for (i = 0 ; i < PredLength ; ++i)
    {
      CIntfData::getAt(GasData,&StirrFlow,i);

      Gas         = GasData.GasType;  
	    if (Gas == DEF_GC_STIRR_GAS_TYPE::Ar) setSTIRR_AR_FLOW(GasData.GasValue);
	    if (Gas == DEF_GC_STIRR_GAS_TYPE::N2) setSTIRR_N2_FLOW(GasData.GasValue);
    }

    setSTIRR_INT(StirrIntensity);

    long CompModeLength = CIntfData::getLength(seqCompModes);
    for ( long i = 0 ; i < CompModeLength ; ++i)
    {
      sComputerMode ComputerMode;
      CIntfData::getAt(ComputerMode,&seqCompModes,i);

      if (DEF_COMP_MODES::MatHandle == ComputerMode.Device)
      {
        setCOMPMODE_MAT(ComputerMode.Status);
      }
      else if (DEF_COMP_MODES::Stirring == ComputerMode.Device)
      {
        setCOMPMODE_STIRR(ComputerMode.Status);
      }
      else if (DEF_COMP_MODES::Electric == ComputerMode.Device)
      {
        setCOMPMODE_ELEC(ComputerMode.Status);
      }
    }

    // TODO
    setCURACTIYITY_L1(std::string(""));

    RetValue = insert();

    // commit only if own values are successfully written
    if (RetValue)
    {
      commit();
    }
  }
  catch(...)
  {
    RetValue = false;
  }
  return RetValue;
}


