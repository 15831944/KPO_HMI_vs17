//## Copyright (C) 2013 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CHDH_HM_DATA.h"
#include "CShiftCrewData.h"
#include "CPD_HM_REF.h"
#include "DEF_GC_MEMBER_ROLE_CAT.h"

//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA::HM_ID("HM_ID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA::HOTMETAL_COUNTER("HOTMETAL_COUNTER");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA::CAST_ID("CAST_ID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA::HEATID_CUST("HEATID_CUST");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA::PRODORDERID_PLAN("PRODORDERID_PLAN");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA::PRODORDERID_ACT("PRODORDERID_ACT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA::STEELGRADECODE_PLAN("STEELGRADECODE_PLAN");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA::STEELGRADECODE_ACT("STEELGRADECODE_ACT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA::HM_ANNOUNCE_ACT("HM_ANNOUNCE_ACT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA::TREATSTART_PLAN("TREATSTART_PLAN");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA::TREATSTART_MOD("TREATSTART_MOD");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA::TREATSTART_ACT("TREATSTART_ACT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA::TREATEND_PLAN("TREATEND_PLAN");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA::TREATEND_MOD("TREATEND_MOD");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA::TREATEND_ACT("TREATEND_ACT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA::HEATDEPARTURE_ACT("HEATDEPARTURE_ACT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA::TREATEND_PREV("TREATEND_PREV");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA::MAT_CODE_CARBIDE("MAT_CODE_CARBIDE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA::MAT_CODE_LIME("MAT_CODE_LIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA::MAT_CODE_MG("MAT_CODE_MG");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA::SHIFT_CODE("SHIFT_CODE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA::CREW_CODE("CREW_CODE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA::USERCODE("USERCODE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA::LADLE_FREEBOARD_BF("LADLE_FREEBOARD_BF");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA::HM_WEIGHTSTART_MOD("HM_WEIGHTSTART_MOD");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA::HM_WEIGHT_END("HM_WEIGHT_END");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA::SLAG_WEIGHT_START("SLAG_WEIGHT_START");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA::SLAG_WEIGHT_START_OPER("SLAG_WEIGHT_START_OPER");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA::SLAG_WEIGHT_END("SLAG_WEIGHT_END");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA::DISCHARGE_TIME_ACT("DISCHARGE_TIME_ACT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA::DISCHARGE_TIME_PLAN("DISCHARGE_TIME_PLAN");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA::HM_TEMP_START("HM_TEMP_START");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA::AIM_S_GRADE("AIM_S_GRADE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA::AIM_S_OPER("AIM_S_OPER");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA::TEMP_INITIAL("TEMP_INITIAL");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA::HM_TEMP_END("HM_TEMP_END");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA::HM_WEIGHT_START("HM_WEIGHT_START");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA::CALC_MODE("CALC_MODE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA::TREAT_TYPE_OPER("TREAT_TYPE_OPER");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA::TREAT_TYPE_MODEL("TREAT_TYPE_MODEL");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA::INJECT_END_TIME("INJECT_END_TIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA::INJECT_START_TIME("INJECT_START_TIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA::REVTIME("REVTIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA::COMMENTS("COMMENTS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA::CREW_RESPONSIBILITY("CREW_RESPONSIBILITY");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA::HEAT_RESPONSIBILITY("HEAT_RESPONSIBILITY");


//##DBClassCodeUtility ! DO NOT EDIT !
CHDH_HM_DATA::CHDH_HM_DATA(cCBS_StdConnection* Connection)
:CSMC_DBData("HDH_HM_DATA",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHDH_HM_DATA::CHDH_HM_DATA(cCBS_Connection* Connection)
:CSMC_DBData("HDH_HM_DATA",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHDH_HM_DATA::CHDH_HM_DATA()
:CSMC_DBData("HDH_HM_DATA")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHDH_HM_DATA::~CHDH_HM_DATA()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_HM_DATA::getHM_ID(long Row)
{
  return getString(CHDH_HM_DATA::HM_ID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA::setHM_ID(const std::string& value)
{
  setString(CHDH_HM_DATA::HM_ID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_HM_DATA::getTREATID(long Row)
{
  return getString(CHDH_HM_DATA::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA::setTREATID(const std::string& value)
{
  setString(CHDH_HM_DATA::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_HM_DATA::getPLANT(long Row)
{
  return getString(CHDH_HM_DATA::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA::setPLANT(const std::string& value)
{
  setString(CHDH_HM_DATA::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDH_HM_DATA::getHOTMETAL_COUNTER(long Row)
{
  return getLong(CHDH_HM_DATA::HOTMETAL_COUNTER, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA::setHOTMETAL_COUNTER(long value)
{
  setLong(CHDH_HM_DATA::HOTMETAL_COUNTER, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_HM_DATA::getCAST_ID(long Row)
{
  return getString(CHDH_HM_DATA::CAST_ID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA::setCAST_ID(const std::string& value)
{
  setString(CHDH_HM_DATA::CAST_ID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_HM_DATA::getHEATID_CUST(long Row)
{
  return getString(CHDH_HM_DATA::HEATID_CUST, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA::setHEATID_CUST(const std::string& value)
{
  setString(CHDH_HM_DATA::HEATID_CUST, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_HM_DATA::getPRODORDERID_PLAN(long Row)
{
  return getString(CHDH_HM_DATA::PRODORDERID_PLAN, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA::setPRODORDERID_PLAN(const std::string& value)
{
  setString(CHDH_HM_DATA::PRODORDERID_PLAN, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_HM_DATA::getPRODORDERID_ACT(long Row)
{
  return getString(CHDH_HM_DATA::PRODORDERID_ACT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA::setPRODORDERID_ACT(const std::string& value)
{
  setString(CHDH_HM_DATA::PRODORDERID_ACT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_HM_DATA::getSTEELGRADECODE_PLAN(long Row)
{
  return getString(CHDH_HM_DATA::STEELGRADECODE_PLAN, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA::setSTEELGRADECODE_PLAN(const std::string& value)
{
  setString(CHDH_HM_DATA::STEELGRADECODE_PLAN, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_HM_DATA::getSTEELGRADECODE_ACT(long Row)
{
  return getString(CHDH_HM_DATA::STEELGRADECODE_ACT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA::setSTEELGRADECODE_ACT(const std::string& value)
{
  setString(CHDH_HM_DATA::STEELGRADECODE_ACT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CHDH_HM_DATA::getHM_ANNOUNCE_ACT(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHDH_HM_DATA::HM_ANNOUNCE_ACT, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA::setHM_ANNOUNCE_ACT(const CDateTime& value)
{
 setString(CHDH_HM_DATA::HM_ANNOUNCE_ACT, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CHDH_HM_DATA::getTREATSTART_PLAN(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHDH_HM_DATA::TREATSTART_PLAN, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA::setTREATSTART_PLAN(const CDateTime& value)
{
 setString(CHDH_HM_DATA::TREATSTART_PLAN, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CHDH_HM_DATA::getTREATSTART_MOD(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHDH_HM_DATA::TREATSTART_MOD, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA::setTREATSTART_MOD(const CDateTime& value)
{
 setString(CHDH_HM_DATA::TREATSTART_MOD, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CHDH_HM_DATA::getTREATSTART_ACT(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHDH_HM_DATA::TREATSTART_ACT, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA::setTREATSTART_ACT(const CDateTime& value)
{
 setString(CHDH_HM_DATA::TREATSTART_ACT, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CHDH_HM_DATA::getTREATEND_PLAN(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHDH_HM_DATA::TREATEND_PLAN, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA::setTREATEND_PLAN(const CDateTime& value)
{
 setString(CHDH_HM_DATA::TREATEND_PLAN, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CHDH_HM_DATA::getTREATEND_MOD(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHDH_HM_DATA::TREATEND_MOD, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA::setTREATEND_MOD(const CDateTime& value)
{
 setString(CHDH_HM_DATA::TREATEND_MOD, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CHDH_HM_DATA::getTREATEND_ACT(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHDH_HM_DATA::TREATEND_ACT, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA::setTREATEND_ACT(const CDateTime& value)
{
 setString(CHDH_HM_DATA::TREATEND_ACT, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CHDH_HM_DATA::getHEATDEPARTURE_ACT(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHDH_HM_DATA::HEATDEPARTURE_ACT, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA::setHEATDEPARTURE_ACT(const CDateTime& value)
{
 setString(CHDH_HM_DATA::HEATDEPARTURE_ACT, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CHDH_HM_DATA::getTREATEND_PREV(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHDH_HM_DATA::TREATEND_PREV, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA::setTREATEND_PREV(const CDateTime& value)
{
 setString(CHDH_HM_DATA::TREATEND_PREV, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_HM_DATA::getMAT_CODE_CARBIDE(long Row)
{
  return getString(CHDH_HM_DATA::MAT_CODE_CARBIDE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA::setMAT_CODE_CARBIDE(const std::string& value)
{
  setString(CHDH_HM_DATA::MAT_CODE_CARBIDE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_HM_DATA::getMAT_CODE_LIME(long Row)
{
  return getString(CHDH_HM_DATA::MAT_CODE_LIME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA::setMAT_CODE_LIME(const std::string& value)
{
  setString(CHDH_HM_DATA::MAT_CODE_LIME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_HM_DATA::getMAT_CODE_MG(long Row)
{
  return getString(CHDH_HM_DATA::MAT_CODE_MG, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA::setMAT_CODE_MG(const std::string& value)
{
  setString(CHDH_HM_DATA::MAT_CODE_MG, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_HM_DATA::getSHIFT_CODE(long Row)
{

  return getString(CHDH_HM_DATA::SHIFT_CODE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA::setSHIFT_CODE(const std::string& value)
{
  setString(CHDH_HM_DATA::SHIFT_CODE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_HM_DATA::getCREW_CODE(long Row)
{
  return getString(CHDH_HM_DATA::CREW_CODE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA::setCREW_CODE(const std::string& value)
{
  setString(CHDH_HM_DATA::CREW_CODE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_HM_DATA::getUSERCODE(long Row)
{
  return getString(CHDH_HM_DATA::USERCODE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA::setUSERCODE(const std::string& value)
{
  setString(CHDH_HM_DATA::USERCODE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDH_HM_DATA::getLADLE_FREEBOARD_BF(long Row)
{
  return getLong(CHDH_HM_DATA::LADLE_FREEBOARD_BF, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA::setLADLE_FREEBOARD_BF(long value)
{
  setLong(CHDH_HM_DATA::LADLE_FREEBOARD_BF, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_HM_DATA::getHM_WEIGHTSTART_MOD(long Row)
{
  return getDouble(CHDH_HM_DATA::HM_WEIGHTSTART_MOD, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA::setHM_WEIGHTSTART_MOD(double value)
{
  setDouble(CHDH_HM_DATA::HM_WEIGHTSTART_MOD, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_HM_DATA::getHM_WEIGHT_END(long Row)
{
  return getDouble(CHDH_HM_DATA::HM_WEIGHT_END, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA::setHM_WEIGHT_END(double value)
{
  setDouble(CHDH_HM_DATA::HM_WEIGHT_END, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_HM_DATA::getSLAG_WEIGHT_START(long Row)
{
  return getDouble(CHDH_HM_DATA::SLAG_WEIGHT_START, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA::setSLAG_WEIGHT_START(double value)
{
  setDouble(CHDH_HM_DATA::SLAG_WEIGHT_START, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_HM_DATA::getSLAG_WEIGHT_START_OPER(long Row)
{
  return getDouble(CHDH_HM_DATA::SLAG_WEIGHT_START_OPER, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA::setSLAG_WEIGHT_START_OPER(double value)
{
  setDouble(CHDH_HM_DATA::SLAG_WEIGHT_START_OPER, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_HM_DATA::getSLAG_WEIGHT_END(long Row)
{
  return getDouble(CHDH_HM_DATA::SLAG_WEIGHT_END, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA::setSLAG_WEIGHT_END(double value)
{
  setDouble(CHDH_HM_DATA::SLAG_WEIGHT_END, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CHDH_HM_DATA::getDISCHARGE_TIME_ACT(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHDH_HM_DATA::DISCHARGE_TIME_ACT, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA::setDISCHARGE_TIME_ACT(const CDateTime& value)
{
 setString(CHDH_HM_DATA::DISCHARGE_TIME_ACT, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CHDH_HM_DATA::getDISCHARGE_TIME_PLAN(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHDH_HM_DATA::DISCHARGE_TIME_PLAN, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA::setDISCHARGE_TIME_PLAN(const CDateTime& value)
{
 setString(CHDH_HM_DATA::DISCHARGE_TIME_PLAN, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_HM_DATA::getHM_TEMP_START(long Row)
{
  return getDouble(CHDH_HM_DATA::HM_TEMP_START, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA::setHM_TEMP_START(double value)
{
  setDouble(CHDH_HM_DATA::HM_TEMP_START, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_HM_DATA::getAIM_S_GRADE(long Row)
{
  return getDouble(CHDH_HM_DATA::AIM_S_GRADE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA::setAIM_S_GRADE(double value)
{
  setDouble(CHDH_HM_DATA::AIM_S_GRADE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_HM_DATA::getAIM_S_OPER(long Row)
{
  return getDouble(CHDH_HM_DATA::AIM_S_OPER, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA::setAIM_S_OPER(double value)
{
  setDouble(CHDH_HM_DATA::AIM_S_OPER, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_HM_DATA::getTEMP_INITIAL(long Row)
{
  return getDouble(CHDH_HM_DATA::TEMP_INITIAL, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA::setTEMP_INITIAL(double value)
{
  setDouble(CHDH_HM_DATA::TEMP_INITIAL, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_HM_DATA::getHM_TEMP_END(long Row)
{
  return getDouble(CHDH_HM_DATA::HM_TEMP_END, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA::setHM_TEMP_END(double value)
{
  setDouble(CHDH_HM_DATA::HM_TEMP_END, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_HM_DATA::getHM_WEIGHT_START(long Row)
{
  return getDouble(CHDH_HM_DATA::HM_WEIGHT_START, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA::setHM_WEIGHT_START(double value)
{
  setDouble(CHDH_HM_DATA::HM_WEIGHT_START, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDH_HM_DATA::getCALC_MODE(long Row)
{
  return getLong(CHDH_HM_DATA::CALC_MODE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA::setCALC_MODE(long value)
{
  setLong(CHDH_HM_DATA::CALC_MODE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDH_HM_DATA::getTREAT_TYPE_OPER(long Row)
{
  return getLong(CHDH_HM_DATA::TREAT_TYPE_OPER, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA::setTREAT_TYPE_OPER(long value)
{
  setLong(CHDH_HM_DATA::TREAT_TYPE_OPER, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDH_HM_DATA::getTREAT_TYPE_MODEL(long Row)
{
  return getLong(CHDH_HM_DATA::TREAT_TYPE_MODEL, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA::setTREAT_TYPE_MODEL(long value)
{
  setLong(CHDH_HM_DATA::TREAT_TYPE_MODEL, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CHDH_HM_DATA::getINJECT_END_TIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHDH_HM_DATA::INJECT_END_TIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA::setINJECT_END_TIME(const CDateTime& value)
{
 setString(CHDH_HM_DATA::INJECT_END_TIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CHDH_HM_DATA::getINJECT_START_TIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHDH_HM_DATA::INJECT_START_TIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA::setINJECT_START_TIME(const CDateTime& value)
{
 setString(CHDH_HM_DATA::INJECT_START_TIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CHDH_HM_DATA::getREVTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHDH_HM_DATA::REVTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA::setREVTIME(const CDateTime& value)
{
 setString(CHDH_HM_DATA::REVTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_HM_DATA::getCOMMENTS(long Row)
{
  return getString(CHDH_HM_DATA::COMMENTS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA::setCOMMENTS(const std::string& value)
{
  setString(CHDH_HM_DATA::COMMENTS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_HM_DATA::getCREW_RESPONSIBILITY(long Row)
{
  return getString(CHDH_HM_DATA::CREW_RESPONSIBILITY, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA::setCREW_RESPONSIBILITY(const std::string& value)
{
  setString(CHDH_HM_DATA::CREW_RESPONSIBILITY, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_HM_DATA::getHEAT_RESPONSIBILITY(long Row)
{
  return getString(CHDH_HM_DATA::HEAT_RESPONSIBILITY, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA::setHEAT_RESPONSIBILITY(const std::string& value)
{
  setString(CHDH_HM_DATA::HEAT_RESPONSIBILITY, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CHDH_HM_DATA::select(const std::string& HM_ID, const std::string& TREATID, const std::string& PLANT)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CHDH_HM_DATA::HM_ID,HM_ID);
  addWhereClause(CHDH_HM_DATA::TREATID,TREATID);
  addWhereClause(CHDH_HM_DATA::PLANT,PLANT);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CHDH_HM_DATA::copyHDH_HM_Data(const string& pHeatId, const string& pTreatId, const string& pPlant, bool pCommit)
{
	bool result = true;
	std::stringstream sql;
	//some data found -> delete them
	/*if (!result)
	{
		result = deleteRows();
		if (!result)
			setLastError(string("delete from HDH_HM_DATA faild"), 0, "delete from HDH_HM_DATA where " + getWhereStatement());
	}*/

	sql << "insert into HDH_HM_DATA (select * from PDH_HM_DATA"
		<< "  where HM_ID = '" << pHeatId << "'"
		<< "  and TREATID = '" << pTreatId << "'"
		<< "  and PLANT = '" << pPlant << "')";

	result = executeSQL(sql.str());
	//if (!result)
		//pError = getLastError();
 
	if(pCommit)
  {
		if (result)
			this->commit();
		else
			rollback();
  }

	return result;
}
bool CHDH_HM_DATA::update_HeatStart(const std::string& HM_ID, const std::string& TREATID, const std::string& PLANT, const std::string& TREATENDOPER)
{
	bool result;
	CDateTime now;
  std::stringstream sql;
	try
	{
	sql << "update HDH_HM_DATA set " 
			<< "TREATSTART_ACT = '" << now.toDBString() << "' ,"
			//<< "HM_STATUS = 2 ,"
			<< "REVTIME = '" << now.toDBString() << "' "
			<< "where HM_ID = '" << HM_ID << "' and TREATID = '" << TREATID << "' and PLANT = '" << PLANT << "'"  ;

	result = executeSQL(sql.str());
	if (result)
    {
      commit();
    }
    else
    {
      rollback();
      log("ERROR: CPDH_HM_DATA::doHeatStart failed",1);
    }
	}
	catch(...)
	{
		result=false;
	}

	return result;
}

bool CHDH_HM_DATA::delete_HDH_HM_DATA(const std::string& HM_ID, const std::string& TREATID, const std::string& PLANT)
{
	bool result;
  std::stringstream sql;
	try
	{
		addWhereClause("HM_ID",HM_ID);
		addWhereClause("TREATID",TREATID);
		addWhereClause("PLANT",PLANT);
		//sql += getWhereStatement() + ";";
		sql << "delete from HDH_HM_DATA" 
			  << getWhereStatement();
		/*<< "  where HEATID = '" << pHeatId << "'"
		<< "   and TREATID = '" << pTreatId << "'"
		<< "   and PLANT = '" << pPlant << "'";*/

	result = executeSQL(sql.str());
	if (result)
    {
      commit();
    }
    else
    {
      rollback();
      log("ERROR: CHDH_HM_DATA::delete_HDH_HM_DATA failed",1);
    }
	}
	catch(...)
	{
		result=false;
	}

	return result;
}

bool CHDH_HM_DATA::update_HeatDeparture(const std::string& HM_ID, const std::string& TREATID, const std::string& PLANT, const std::string& TREATENDOPER, double HMWEIGHT, double SLAGWEIGHT,double HMTEMP)
{
	bool result;
	CDateTime now;
  std::stringstream sql;
	try
	{
	sql << "update HDH_HM_DATA set " 
			<< "TREATEND_ACT = '" << now.toDBString() <<  "' ,"
			<< "HEATDEPARTURE_ACT = '" << now.toDBString() << "' ," 
			//<< "TREATEND_PREV = '" << TREATENDOPER << "' ,"		
			<< "HM_WEIGHT_END = " << HMWEIGHT << " ,"					
			<< "SLAG_WEIGHT_END = " << SLAGWEIGHT << " ,"			
			<< "HM_TEMP_END = " << HMTEMP << " ,"
			//<< "HM_STATUS = 3 ,"
			<< "REVTIME = '" << now.toDBString() << "' "
			<< "where HM_ID = '" << HM_ID << "' and TREATID = '" << TREATID << "' and PLANT = '" << PLANT << "'"  ;

	result = executeSQL(sql.str());
	if (result)
    {
      commit();
    }
    else
    {
      rollback();
      log("ERROR: CHDH_HM_DATA::update_HeatDeparture failed",1);
    }
	}
	catch(...)
	{
		result=false;
	}

	return result;
}


