//## Copyright (C) 2013 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CPDH_HM_DATA_PRODPRAC.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDH_HM_DATA_PRODPRAC::HM_ID("HM_ID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDH_HM_DATA_PRODPRAC::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDH_HM_DATA_PRODPRAC::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDH_HM_DATA_PRODPRAC::DESCR_PP("DESCR_PP");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDH_HM_DATA_PRODPRAC::STEELGRADECODE_ACT("STEELGRADECODE_ACT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDH_HM_DATA_PRODPRAC::PRODPRACID_PLAN("PRODPRACID_PLAN");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDH_HM_DATA_PRODPRAC::PRODPRACID_MOD("PRODPRACID_MOD");

//##DBClassCodeUtility ! DO NOT EDIT !
CPDH_HM_DATA_PRODPRAC::CPDH_HM_DATA_PRODPRAC(cCBS_StdConnection* Connection)
:CSMC_DBData("PDH_HM_DATA_PRODPRAC",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPDH_HM_DATA_PRODPRAC::CPDH_HM_DATA_PRODPRAC(cCBS_Connection* Connection)
:CSMC_DBData("PDH_HM_DATA_PRODPRAC",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPDH_HM_DATA_PRODPRAC::CPDH_HM_DATA_PRODPRAC()
:CSMC_DBData("PDH_HM_DATA_PRODPRAC")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPDH_HM_DATA_PRODPRAC::~CPDH_HM_DATA_PRODPRAC()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDH_HM_DATA_PRODPRAC::getHM_ID(long Row)
{
  return getString(CPDH_HM_DATA_PRODPRAC::HM_ID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDH_HM_DATA_PRODPRAC::setHM_ID(const std::string& value)
{
  setString(CPDH_HM_DATA_PRODPRAC::HM_ID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDH_HM_DATA_PRODPRAC::getTREATID(long Row)
{
  return getString(CPDH_HM_DATA_PRODPRAC::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDH_HM_DATA_PRODPRAC::setTREATID(const std::string& value)
{
  setString(CPDH_HM_DATA_PRODPRAC::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDH_HM_DATA_PRODPRAC::getPLANT(long Row)
{
  return getString(CPDH_HM_DATA_PRODPRAC::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDH_HM_DATA_PRODPRAC::setPLANT(const std::string& value)
{
  setString(CPDH_HM_DATA_PRODPRAC::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDH_HM_DATA_PRODPRAC::getDESCR_PP(long Row)
{
  return getString(CPDH_HM_DATA_PRODPRAC::DESCR_PP, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDH_HM_DATA_PRODPRAC::setDESCR_PP(const std::string& value)
{
  setString(CPDH_HM_DATA_PRODPRAC::DESCR_PP, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDH_HM_DATA_PRODPRAC::getSTEELGRADECODE_ACT(long Row)
{
  return getString(CPDH_HM_DATA_PRODPRAC::STEELGRADECODE_ACT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDH_HM_DATA_PRODPRAC::setSTEELGRADECODE_ACT(const std::string& value)
{
  setString(CPDH_HM_DATA_PRODPRAC::STEELGRADECODE_ACT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDH_HM_DATA_PRODPRAC::getPRODPRACID_PLAN(long Row)
{
  return getString(CPDH_HM_DATA_PRODPRAC::PRODPRACID_PLAN, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDH_HM_DATA_PRODPRAC::setPRODPRACID_PLAN(const std::string& value)
{
  setString(CPDH_HM_DATA_PRODPRAC::PRODPRACID_PLAN, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDH_HM_DATA_PRODPRAC::getPRODPRACID_MOD(long Row)
{
  return getString(CPDH_HM_DATA_PRODPRAC::PRODPRACID_MOD, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDH_HM_DATA_PRODPRAC::setPRODPRACID_MOD(const std::string& value)
{
  setString(CPDH_HM_DATA_PRODPRAC::PRODPRACID_MOD, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CPDH_HM_DATA_PRODPRAC::select(const std::string& HM_ID, const std::string& TREATID, const std::string& PLANT, const std::string& DESCR_PP)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPDH_HM_DATA_PRODPRAC::HM_ID,HM_ID);
  addWhereClause(CPDH_HM_DATA_PRODPRAC::TREATID,TREATID);
  addWhereClause(CPDH_HM_DATA_PRODPRAC::PLANT,PLANT);
  addWhereClause(CPDH_HM_DATA_PRODPRAC::DESCR_PP,DESCR_PP);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CPDH_HM_DATA_PRODPRAC::doAnnouncement(const std::string& pHMID, const std::string& pTREATID, const std::string& pPLANT, const std::string& pDESCR)
{
  bool retValue=false;
  CDateTime now;
  //int i;  // place-holder variable - delete later
  //double j; // place-holder variable - delete later

  try
  {
    setHM_ID(pHMID);
    setTREATID(pTREATID);
    setPLANT(pPLANT);
    setDESCR_PP (pDESCR);
    setSTEELGRADECODE_ACT("1"); // TO BE DONE
    setPRODPRACID_PLAN("1");
    setPRODPRACID_MOD("99"); 
   
    retValue = insert();
    // commit only if own values are successfully written
    if (retValue)
    {
      commit();
    }
    else
    {
      rollback();
      log("ERROR: CPDH_HM_DATA_PRODPRAC::doAnnouncement failed",1);
    }
  }
  catch(...)
  {
    retValue = false;
  }
  return retValue;
}
bool CPDH_HM_DATA_PRODPRAC::doCancelHeat(const std::string& pHMID, const std::string& pTREATID, const std::string& pPLANT)
{
	bool result;
  std::stringstream sql;
	try
	{
		addWhereClause("HM_ID",pHMID);
		addWhereClause("TREATID",pTREATID);
		addWhereClause("PLANT",pPLANT);
		//sql += getWhereStatement() + ";";
		sql << "delete from PDH_HM_DATA_PRODPRAC" 
			  << getWhereStatement();
		/*<< "  where HEATID = '" << pHeatId << "'"
		<< "   and TREATID = '" << pTreatId << "'"
		<< "   and PLANT = '" << pPlant << "'";*/

	result = executeSQL(sql.str());
	if (result)
    {
      commit();
    }
    else
    {
      rollback();
      log("ERROR: CPDH_HM_DATA_PRODPRAC::doCancelHeat failed",1);
    }
	}
	catch(...)
	{
		result=false;
	}

	return result;
}




