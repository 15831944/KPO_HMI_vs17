//## Copyright (C) 2013 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CHDH_HM_RES.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_RES::HM_ID("HM_ID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_RES::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_RES::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_RES::TREAT_TYPE("TREAT_TYPE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_RES::REVTIME("REVTIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_RES::UPDATENO("UPDATENO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_RES::DURSINCEHEATANNOUNCEMENT("DURSINCEHEATANNOUNCEMENT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_RES::HM_MASS("HM_MASS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_RES::SLAG_MASS("SLAG_MASS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_RES::TEMP_ACT("TEMP_ACT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_RES::TEMP_END("TEMP_END");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_RES::CUR_PHASE("CUR_PHASE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_RES::GAS_TYPE("GAS_TYPE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_RES::COMP_AVAIL("COMP_AVAIL");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_RES::SULPHUR_PPM_AIM("SULPHUR_PPM_AIM");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_RES::SULPHUR_DELTA_PPM("SULPHUR_DELTA_PPM");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_RES::SULPHUR_DELTA_KG("SULPHUR_DELTA_KG");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_RES::DEPART_TIME("DEPART_TIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_RES::FINAL_SLAG_WEIGHT("FINAL_SLAG_WEIGHT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_RES::DUR_START_PHASE("DUR_START_PHASE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_RES::DUR_CO_PHASE("DUR_CO_PHASE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_RES::DUR_END_PHASE("DUR_END_PHASE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_RES::MAT_COST_START("MAT_COST_START");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_RES::MAT_COST_END("MAT_COST_END");

//##DBClassCodeUtility ! DO NOT EDIT !
CHDH_HM_RES::CHDH_HM_RES(cCBS_StdConnection* Connection)
:CSMC_DBData("HDH_HM_RES",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHDH_HM_RES::CHDH_HM_RES(cCBS_Connection* Connection)
:CSMC_DBData("HDH_HM_RES",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHDH_HM_RES::CHDH_HM_RES()
:CSMC_DBData("HDH_HM_RES")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHDH_HM_RES::~CHDH_HM_RES()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_HM_RES::getHM_ID(long Row)
{
  return getString(CHDH_HM_RES::HM_ID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_RES::setHM_ID(const std::string& value)
{
  setString(CHDH_HM_RES::HM_ID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_HM_RES::getTREATID(long Row)
{
  return getString(CHDH_HM_RES::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_RES::setTREATID(const std::string& value)
{
  setString(CHDH_HM_RES::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_HM_RES::getPLANT(long Row)
{
  return getString(CHDH_HM_RES::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_RES::setPLANT(const std::string& value)
{
  setString(CHDH_HM_RES::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDH_HM_RES::getTREAT_TYPE(long Row)
{
  return getLong(CHDH_HM_RES::TREAT_TYPE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_RES::setTREAT_TYPE(long value)
{
  setLong(CHDH_HM_RES::TREAT_TYPE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CHDH_HM_RES::getREVTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHDH_HM_RES::REVTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_RES::setREVTIME(const CDateTime& value)
{
 setString(CHDH_HM_RES::REVTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDH_HM_RES::getUPDATENO(long Row)
{
  return getLong(CHDH_HM_RES::UPDATENO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_RES::setUPDATENO(long value)
{
  setLong(CHDH_HM_RES::UPDATENO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_HM_RES::getDURSINCEHEATANNOUNCEMENT(long Row)
{
  return getDouble(CHDH_HM_RES::DURSINCEHEATANNOUNCEMENT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_RES::setDURSINCEHEATANNOUNCEMENT(double value)
{
  setDouble(CHDH_HM_RES::DURSINCEHEATANNOUNCEMENT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_HM_RES::getHM_MASS(long Row)
{
  return getDouble(CHDH_HM_RES::HM_MASS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_RES::setHM_MASS(double value)
{
  setDouble(CHDH_HM_RES::HM_MASS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_HM_RES::getSLAG_MASS(long Row)
{
  return getDouble(CHDH_HM_RES::SLAG_MASS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_RES::setSLAG_MASS(double value)
{
  setDouble(CHDH_HM_RES::SLAG_MASS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_HM_RES::getTEMP_ACT(long Row)
{
  return getDouble(CHDH_HM_RES::TEMP_ACT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_RES::setTEMP_ACT(double value)
{
  setDouble(CHDH_HM_RES::TEMP_ACT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_HM_RES::getTEMP_END(long Row)
{
  return getDouble(CHDH_HM_RES::TEMP_END, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_RES::setTEMP_END(double value)
{
  setDouble(CHDH_HM_RES::TEMP_END, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_HM_RES::getCUR_PHASE(long Row)
{
  return getString(CHDH_HM_RES::CUR_PHASE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_RES::setCUR_PHASE(const std::string& value)
{
  setString(CHDH_HM_RES::CUR_PHASE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_HM_RES::getGAS_TYPE(long Row)
{
  return getString(CHDH_HM_RES::GAS_TYPE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_RES::setGAS_TYPE(const std::string& value)
{
  setString(CHDH_HM_RES::GAS_TYPE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDH_HM_RES::getCOMP_AVAIL(long Row)
{
  return getLong(CHDH_HM_RES::COMP_AVAIL, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_RES::setCOMP_AVAIL(long value)
{
  setLong(CHDH_HM_RES::COMP_AVAIL, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_HM_RES::getSULPHUR_PPM_AIM(long Row)
{
  return getDouble(CHDH_HM_RES::SULPHUR_PPM_AIM, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_RES::setSULPHUR_PPM_AIM(double value)
{
  setDouble(CHDH_HM_RES::SULPHUR_PPM_AIM, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_HM_RES::getSULPHUR_DELTA_PPM(long Row)
{
  return getDouble(CHDH_HM_RES::SULPHUR_DELTA_PPM, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_RES::setSULPHUR_DELTA_PPM(double value)
{
  setDouble(CHDH_HM_RES::SULPHUR_DELTA_PPM, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_HM_RES::getSULPHUR_DELTA_KG(long Row)
{
  return getDouble(CHDH_HM_RES::SULPHUR_DELTA_KG, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_RES::setSULPHUR_DELTA_KG(double value)
{
  setDouble(CHDH_HM_RES::SULPHUR_DELTA_KG, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CHDH_HM_RES::getDEPART_TIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHDH_HM_RES::DEPART_TIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_RES::setDEPART_TIME(const CDateTime& value)
{
 setString(CHDH_HM_RES::DEPART_TIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_HM_RES::getFINAL_SLAG_WEIGHT(long Row)
{
  return getDouble(CHDH_HM_RES::FINAL_SLAG_WEIGHT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_RES::setFINAL_SLAG_WEIGHT(double value)
{
  setDouble(CHDH_HM_RES::FINAL_SLAG_WEIGHT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_HM_RES::getDUR_START_PHASE(long Row)
{
  return getDouble(CHDH_HM_RES::DUR_START_PHASE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_RES::setDUR_START_PHASE(double value)
{
  setDouble(CHDH_HM_RES::DUR_START_PHASE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_HM_RES::getDUR_CO_PHASE(long Row)
{
  return getDouble(CHDH_HM_RES::DUR_CO_PHASE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_RES::setDUR_CO_PHASE(double value)
{
  setDouble(CHDH_HM_RES::DUR_CO_PHASE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_HM_RES::getDUR_END_PHASE(long Row)
{
  return getDouble(CHDH_HM_RES::DUR_END_PHASE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_RES::setDUR_END_PHASE(double value)
{
  setDouble(CHDH_HM_RES::DUR_END_PHASE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_HM_RES::getMAT_COST_START(long Row)
{
  return getDouble(CHDH_HM_RES::MAT_COST_START, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_RES::setMAT_COST_START(double value)
{
  setDouble(CHDH_HM_RES::MAT_COST_START, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_HM_RES::getMAT_COST_END(long Row)
{
  return getDouble(CHDH_HM_RES::MAT_COST_END, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_RES::setMAT_COST_END(double value)
{
  setDouble(CHDH_HM_RES::MAT_COST_END, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CHDH_HM_RES::select(const std::string& HM_ID, const std::string& TREATID, const std::string& PLANT, long TREAT_TYPE, const CDateTime& REVTIME)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CHDH_HM_RES::HM_ID,HM_ID);
  addWhereClause(CHDH_HM_RES::TREATID,TREATID);
  addWhereClause(CHDH_HM_RES::PLANT,PLANT);
  addWhereClause(CHDH_HM_RES::TREAT_TYPE,TREAT_TYPE);
  addWhereClause(CHDH_HM_RES::REVTIME,REVTIME);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CHDH_HM_RES::writeResults(const string& HM_ID, const string& TreatID, const string& PlantID, long Treat_Type, const CDateTime& Now,double d1, double SlagAmount,double TemperatureAfter,long ComputerMode,double CODur)
{
  bool  RetValue   = false;
  long  upno = 0;

  if (selectActual(HM_ID, TreatID, PlantID, Treat_Type))
  {
	upno = getUPDATENO(1) + 1;
  }
  else
  {
	upno = 1;
  }

  setHM_ID(HM_ID);
  setTREATID(TreatID);
  setPLANT(PlantID);
  setTREAT_TYPE(Treat_Type);
  setREVTIME(Now);
  setUPDATENO(upno);
  setDURSINCEHEATANNOUNCEMENT(d1);

  setSLAG_MASS(SlagAmount);
  setFINAL_SLAG_WEIGHT(SlagAmount);
  setTEMP_END(TemperatureAfter);
  setCOMP_AVAIL(ComputerMode);
  setDUR_CO_PHASE(CODur);

  CDateTime dt;
  dt = Now;
  dt.addTime(CODur);

  setDEPART_TIME(dt.toDBString());

  RetValue = insert();

  if (RetValue)
  {
    commit();
  }
  else
  {
    rollback();
    RetValue = false;
  }

  return RetValue;

}

bool CHDH_HM_RES::selectActual(const string& HM_ID, const string& TREATID, const string& PLANT, long TREAT_TYPE)
{
	cleanWhereStatement();

	m_Statement = "Select * from " + m_TableName;

	addWhereClause("HM_ID",HM_ID);
	addWhereClause("TREATID",TREATID);
	addWhereClause("PLANT",PLANT);
  addWhereClause("TREAT_TYPE",TREAT_TYPE);

  std::string MaxClause = "REVTIME = (select max(REVTIME) from " + m_TableName + getWhereStatement() +")";
  addWhereClause(MaxClause);

  m_Statement += getWhereStatement() + ";";

	return CSMC_DBData::select();
}

bool CHDH_HM_RES::update_HeatAnnounce(const string &pHM_ID)
{
		bool result;
		CDateTime now;
		cleanWhereStatement();
		setHM_ID(pHM_ID);
		setTREATID("01");
		setPLANT("HMD");
		setTREAT_TYPE(1);
		setREVTIME(now);
		setUPDATENO(1);
		setDURSINCEHEATANNOUNCEMENT(1);

		result = insert();
		if (result)
    {
      commit();
    }
    else
    {
      rollback();
      log("ERROR: CPD_PLANTSTATUS::doHeatAnnouncement failed",1);
    }


	return result;
}







