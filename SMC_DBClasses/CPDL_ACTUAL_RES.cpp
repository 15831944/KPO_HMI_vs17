//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "iSMC_DataDefinitions_s.hh"
#include "CIntfData.h"
#include "CSMC_EventLogFrameController.h"
#include "CPDL_ACTUAL_RES_ANL.h"
#include "CPDL_ACTUAL_RES.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_ACTUAL_RES::HEATID("HEATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_ACTUAL_RES::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_ACTUAL_RES::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_ACTUAL_RES::REVTIME("REVTIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_ACTUAL_RES::ELEC_ENERGY("ELEC_ENERGY");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_ACTUAL_RES::UPDATENO("UPDATENO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_ACTUAL_RES::DURSINCEHEATANNOUNCEMENT("DURSINCEHEATANNOUNCEMENT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_ACTUAL_RES::CURELECPRACPHASE("CURELECPRACPHASE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_ACTUAL_RES::CURELECSTEPNO("CURELECSTEPNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_ACTUAL_RES::STEELMASS("STEELMASS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_ACTUAL_RES::SLAGMASS("SLAGMASS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_ACTUAL_RES::TEMP("TEMP");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_ACTUAL_RES::VOLTTAP("VOLTTAP");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_ACTUAL_RES::IMPCURVE("IMPCURVE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_ACTUAL_RES::REMELECENERGY("REMELECENERGY");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_ACTUAL_RES::STIRRINTENSITY("STIRRINTENSITY");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_ACTUAL_RES::STIRRFLOW("STIRRFLOW");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_ACTUAL_RES::CURPHASE("CURPHASE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_ACTUAL_RES::STIRRGASTYPE("STIRRGASTYPE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_ACTUAL_RES::ACTIVITYNAME_PRIO1("ACTIVITYNAME_PRIO1");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_ACTUAL_RES::ACTIVITYNAME_PRIO2("ACTIVITYNAME_PRIO2");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_ACTUAL_RES::ACTIVITYNAME_PRIO3("ACTIVITYNAME_PRIO3");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_ACTUAL_RES::COMPAVAIL_MAT("COMPAVAIL_MAT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_ACTUAL_RES::COMPAVAIL_STIRR("COMPAVAIL_STIRR");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_ACTUAL_RES::COMPAVAIL_ELEC("COMPAVAIL_ELEC");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_ACTUAL_RES::ELECTRODEPULLREQ("ELECTRODEPULLREQ");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_ACTUAL_RES::ELECTRODELOCKREQ("ELECTRODELOCKREQ");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_ACTUAL_RES::ELEC_EGY_INIT_HEAT("ELEC_EGY_INIT_HEAT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_ACTUAL_RES::ELEC_EGY_MAIN_HEAT("ELEC_EGY_MAIN_HEAT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_ACTUAL_RES::ELEC_EGY_FINAL_HEAT("ELEC_EGY_FINAL_HEAT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_ACTUAL_RES::TEMP_INIT_HEAT("TEMP_INIT_HEAT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_ACTUAL_RES::TEMP_MAIN_HEAT("TEMP_MAIN_HEAT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_ACTUAL_RES::TEMP_FINAL_HEAT("TEMP_FINAL_HEAT");

//##DBClassCodeUtility ! DO NOT EDIT !
CPDL_ACTUAL_RES::CPDL_ACTUAL_RES(cCBS_StdConnection* Connection)
:CSMC_DBData("PDL_ACTUAL_RES",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPDL_ACTUAL_RES::CPDL_ACTUAL_RES(cCBS_Connection* Connection)
:CSMC_DBData("PDL_ACTUAL_RES",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPDL_ACTUAL_RES::CPDL_ACTUAL_RES()
:CSMC_DBData("PDL_ACTUAL_RES")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPDL_ACTUAL_RES::~CPDL_ACTUAL_RES()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDL_ACTUAL_RES::getHEATID(long Row)
{
  return getString(CPDL_ACTUAL_RES::HEATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_ACTUAL_RES::setHEATID(const std::string& value)
{
  setString(CPDL_ACTUAL_RES::HEATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDL_ACTUAL_RES::getTREATID(long Row)
{
  return getString(CPDL_ACTUAL_RES::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_ACTUAL_RES::setTREATID(const std::string& value)
{
  setString(CPDL_ACTUAL_RES::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDL_ACTUAL_RES::getPLANT(long Row)
{
  return getString(CPDL_ACTUAL_RES::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_ACTUAL_RES::setPLANT(const std::string& value)
{
  setString(CPDL_ACTUAL_RES::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CPDL_ACTUAL_RES::getREVTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CPDL_ACTUAL_RES::REVTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_ACTUAL_RES::setREVTIME(const CDateTime& value)
{
 setString(CPDL_ACTUAL_RES::REVTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDL_ACTUAL_RES::getELEC_ENERGY(long Row)
{
  return getDouble(CPDL_ACTUAL_RES::ELEC_ENERGY, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_ACTUAL_RES::setELEC_ENERGY(double value)
{
  setDouble(CPDL_ACTUAL_RES::ELEC_ENERGY, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDL_ACTUAL_RES::getUPDATENO(long Row)
{
  return getLong(CPDL_ACTUAL_RES::UPDATENO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_ACTUAL_RES::setUPDATENO(long value)
{
  setLong(CPDL_ACTUAL_RES::UPDATENO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDL_ACTUAL_RES::getDURSINCEHEATANNOUNCEMENT(long Row)
{
  return getDouble(CPDL_ACTUAL_RES::DURSINCEHEATANNOUNCEMENT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_ACTUAL_RES::setDURSINCEHEATANNOUNCEMENT(double value)
{
  setDouble(CPDL_ACTUAL_RES::DURSINCEHEATANNOUNCEMENT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDL_ACTUAL_RES::getCURELECPRACPHASE(long Row)
{
  return getString(CPDL_ACTUAL_RES::CURELECPRACPHASE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_ACTUAL_RES::setCURELECPRACPHASE(const std::string& value)
{
  setString(CPDL_ACTUAL_RES::CURELECPRACPHASE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDL_ACTUAL_RES::getCURELECSTEPNO(long Row)
{
  return getLong(CPDL_ACTUAL_RES::CURELECSTEPNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_ACTUAL_RES::setCURELECSTEPNO(long value)
{
  setLong(CPDL_ACTUAL_RES::CURELECSTEPNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDL_ACTUAL_RES::getSTEELMASS(long Row)
{
  return getDouble(CPDL_ACTUAL_RES::STEELMASS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_ACTUAL_RES::setSTEELMASS(double value)
{
  setDouble(CPDL_ACTUAL_RES::STEELMASS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDL_ACTUAL_RES::getSLAGMASS(long Row)
{
  return getDouble(CPDL_ACTUAL_RES::SLAGMASS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_ACTUAL_RES::setSLAGMASS(double value)
{
  setDouble(CPDL_ACTUAL_RES::SLAGMASS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDL_ACTUAL_RES::getTEMP(long Row)
{
  return getDouble(CPDL_ACTUAL_RES::TEMP, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_ACTUAL_RES::setTEMP(double value)
{
  setDouble(CPDL_ACTUAL_RES::TEMP, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDL_ACTUAL_RES::getVOLTTAP(long Row)
{
  return getLong(CPDL_ACTUAL_RES::VOLTTAP, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_ACTUAL_RES::setVOLTTAP(long value)
{
  setLong(CPDL_ACTUAL_RES::VOLTTAP, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDL_ACTUAL_RES::getIMPCURVE(long Row)
{
  return getLong(CPDL_ACTUAL_RES::IMPCURVE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_ACTUAL_RES::setIMPCURVE(long value)
{
  setLong(CPDL_ACTUAL_RES::IMPCURVE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDL_ACTUAL_RES::getREMELECENERGY(long Row)
{
  return getDouble(CPDL_ACTUAL_RES::REMELECENERGY, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_ACTUAL_RES::setREMELECENERGY(double value)
{
  setDouble(CPDL_ACTUAL_RES::REMELECENERGY, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDL_ACTUAL_RES::getSTIRRINTENSITY(long Row)
{
  return getLong(CPDL_ACTUAL_RES::STIRRINTENSITY, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_ACTUAL_RES::setSTIRRINTENSITY(long value)
{
  setLong(CPDL_ACTUAL_RES::STIRRINTENSITY, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDL_ACTUAL_RES::getSTIRRFLOW(long Row)
{
  return getDouble(CPDL_ACTUAL_RES::STIRRFLOW, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_ACTUAL_RES::setSTIRRFLOW(double value)
{
  setDouble(CPDL_ACTUAL_RES::STIRRFLOW, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDL_ACTUAL_RES::getCURPHASE(long Row)
{
  return getString(CPDL_ACTUAL_RES::CURPHASE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_ACTUAL_RES::setCURPHASE(const std::string& value)
{
  setString(CPDL_ACTUAL_RES::CURPHASE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDL_ACTUAL_RES::getSTIRRGASTYPE(long Row)
{
  return getString(CPDL_ACTUAL_RES::STIRRGASTYPE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_ACTUAL_RES::setSTIRRGASTYPE(const std::string& value)
{
  setString(CPDL_ACTUAL_RES::STIRRGASTYPE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDL_ACTUAL_RES::getACTIVITYNAME_PRIO1(long Row)
{
  return getString(CPDL_ACTUAL_RES::ACTIVITYNAME_PRIO1, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_ACTUAL_RES::setACTIVITYNAME_PRIO1(const std::string& value)
{
  setString(CPDL_ACTUAL_RES::ACTIVITYNAME_PRIO1, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDL_ACTUAL_RES::getACTIVITYNAME_PRIO2(long Row)
{
  return getString(CPDL_ACTUAL_RES::ACTIVITYNAME_PRIO2, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_ACTUAL_RES::setACTIVITYNAME_PRIO2(const std::string& value)
{
  setString(CPDL_ACTUAL_RES::ACTIVITYNAME_PRIO2, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDL_ACTUAL_RES::getACTIVITYNAME_PRIO3(long Row)
{
  return getString(CPDL_ACTUAL_RES::ACTIVITYNAME_PRIO3, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_ACTUAL_RES::setACTIVITYNAME_PRIO3(const std::string& value)
{
  setString(CPDL_ACTUAL_RES::ACTIVITYNAME_PRIO3, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDL_ACTUAL_RES::getCOMPAVAIL_MAT(long Row)
{
  return getLong(CPDL_ACTUAL_RES::COMPAVAIL_MAT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_ACTUAL_RES::setCOMPAVAIL_MAT(long value)
{
  setLong(CPDL_ACTUAL_RES::COMPAVAIL_MAT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDL_ACTUAL_RES::getCOMPAVAIL_STIRR(long Row)
{
  return getLong(CPDL_ACTUAL_RES::COMPAVAIL_STIRR, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_ACTUAL_RES::setCOMPAVAIL_STIRR(long value)
{
  setLong(CPDL_ACTUAL_RES::COMPAVAIL_STIRR, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDL_ACTUAL_RES::getCOMPAVAIL_ELEC(long Row)
{
  return getLong(CPDL_ACTUAL_RES::COMPAVAIL_ELEC, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_ACTUAL_RES::setCOMPAVAIL_ELEC(long value)
{
  setLong(CPDL_ACTUAL_RES::COMPAVAIL_ELEC, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDL_ACTUAL_RES::getELECTRODEPULLREQ(long Row)
{
  return getLong(CPDL_ACTUAL_RES::ELECTRODEPULLREQ, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_ACTUAL_RES::setELECTRODEPULLREQ(long value)
{
  setLong(CPDL_ACTUAL_RES::ELECTRODEPULLREQ, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDL_ACTUAL_RES::getELECTRODELOCKREQ(long Row)
{
  return getLong(CPDL_ACTUAL_RES::ELECTRODELOCKREQ, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_ACTUAL_RES::setELECTRODELOCKREQ(long value)
{
  setLong(CPDL_ACTUAL_RES::ELECTRODELOCKREQ, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDL_ACTUAL_RES::getELEC_EGY_INIT_HEAT(long Row)
{
  return getDouble(CPDL_ACTUAL_RES::ELEC_EGY_INIT_HEAT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_ACTUAL_RES::setELEC_EGY_INIT_HEAT(double value)
{
  setDouble(CPDL_ACTUAL_RES::ELEC_EGY_INIT_HEAT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDL_ACTUAL_RES::getELEC_EGY_MAIN_HEAT(long Row)
{
  return getDouble(CPDL_ACTUAL_RES::ELEC_EGY_MAIN_HEAT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_ACTUAL_RES::setELEC_EGY_MAIN_HEAT(double value)
{
  setDouble(CPDL_ACTUAL_RES::ELEC_EGY_MAIN_HEAT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDL_ACTUAL_RES::getELEC_EGY_FINAL_HEAT(long Row)
{
  return getDouble(CPDL_ACTUAL_RES::ELEC_EGY_FINAL_HEAT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_ACTUAL_RES::setELEC_EGY_FINAL_HEAT(double value)
{
  setDouble(CPDL_ACTUAL_RES::ELEC_EGY_FINAL_HEAT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDL_ACTUAL_RES::getTEMP_INIT_HEAT(long Row)
{
  return getDouble(CPDL_ACTUAL_RES::TEMP_INIT_HEAT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_ACTUAL_RES::setTEMP_INIT_HEAT(double value)
{
  setDouble(CPDL_ACTUAL_RES::TEMP_INIT_HEAT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDL_ACTUAL_RES::getTEMP_MAIN_HEAT(long Row)
{
  return getDouble(CPDL_ACTUAL_RES::TEMP_MAIN_HEAT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_ACTUAL_RES::setTEMP_MAIN_HEAT(double value)
{
  setDouble(CPDL_ACTUAL_RES::TEMP_MAIN_HEAT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDL_ACTUAL_RES::getTEMP_FINAL_HEAT(long Row)
{
  return getDouble(CPDL_ACTUAL_RES::TEMP_FINAL_HEAT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_ACTUAL_RES::setTEMP_FINAL_HEAT(double value)
{
  setDouble(CPDL_ACTUAL_RES::TEMP_FINAL_HEAT, value);
}
//##DBClassCodeUtility ! DO NOT EDIT !
bool CPDL_ACTUAL_RES::select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const CDateTime& REVTIME)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPDL_ACTUAL_RES::HEATID,HEATID);
  addWhereClause(CPDL_ACTUAL_RES::TREATID,TREATID);
  addWhereClause(CPDL_ACTUAL_RES::PLANT,PLANT);
  addWhereClause(CPDL_ACTUAL_RES::REVTIME,REVTIME);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

void CPDL_ACTUAL_RES::doOnConstruct()
{
  m_pPDL_ACTUAL_RES_ANL = new CPDL_ACTUAL_RES_ANL( m_pCBS_StdConnection );
}

void CPDL_ACTUAL_RES::doOnDestruct()
{
  if ( m_pPDL_ACTUAL_RES_ANL )
  {
    delete m_pPDL_ACTUAL_RES_ANL;
    m_pPDL_ACTUAL_RES_ANL = 0;
  }
}

bool CPDL_ACTUAL_RES::exists(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT)
{
	cleanWhereStatement();

	m_Statement = "Select HEATID from " + m_TableName;

	addWhereClause(CPDL_ACTUAL_RES::HEATID,HEATID);
	addWhereClause(CPDL_ACTUAL_RES::TREATID,TREATID);
	addWhereClause(CPDL_ACTUAL_RES::PLANT,PLANT);
   
  std::string sWhereStatement = getWhereStatement();
  //to avoid the exception like 'Select HEATID from PP_HEAT AND ROWNUM = 1 '
  if(sWhereStatement.length() > 0 ) 
  {
    // do not use ROWNUM in "addWhereClause", ROWNUM is not a table column and where statement will be used for deletion at "deleteRows"
    m_Statement += sWhereStatement + " AND ROWNUM = 1 ;";
  }
  else
  {
    return false;
  }

	return CSMC_DBData::select();
}

bool CPDL_ACTUAL_RES::writeResults(const std::string &heatID, const std::string &treatID, const std::string &plant, const std::string & ActPhase, double DurSinceHeatAnnounce, double DurSinceHeatStart, long ElecPullReq, long ElecLockReq,const seqPredRes &sqcPredRes, const seqLFElecPredRes &sqcElecPredRes, const seqLFStirrPredRes &sqcStirrPredRes,const seqComputerModes &seqCompModes)
{
  long      i = 0;
  bool      RetValue   = false;

  CDateTime now;
  sPredRes  PredRes;
  sGenRes   GenRes;
  sLFElecPredRes  ElecPredRes;
  sLFStirrPredRes StirrPredRes;

  try
  {
    long CompModeLength  = CIntfData::getLength(seqCompModes);
    long PredResLength   = CIntfData::getLength(sqcPredRes); 
    long ElecPredLength  = CIntfData::getLength(sqcElecPredRes);
    long StirrPredLength = CIntfData::getLength(sqcStirrPredRes);

    setHEATID(heatID);
    setTREATID(treatID);
    setPLANT(plant);
    setREVTIME(now);

    setDURSINCEHEATANNOUNCEMENT(DurSinceHeatAnnounce);
    setELECTRODEPULLREQ(ElecPullReq);
    setELECTRODELOCKREQ(ElecLockReq);

    for ( i = 0 ; i < CompModeLength ; ++i)
    {
      sComputerMode ComputerMode;
      CIntfData::getAt(ComputerMode,&seqCompModes,i);

      // COMPAVAIL_MAT, COMPAVAIL_ELEC, COMPAVAIL_STIRR
      if (DEF_COMP_MODES::MatHandle == ComputerMode.Device)
      {
        setCOMPAVAIL_MAT(ComputerMode.Status);
      }
      else if (DEF_COMP_MODES::Electric == ComputerMode.Device)
      {
        setCOMPAVAIL_ELEC(ComputerMode.Status);
      }
      else if (DEF_COMP_MODES::Stirring == ComputerMode.Device)
      {
        setCOMPAVAIL_STIRR(ComputerMode.Status);
      }
    }

    // PREDICTION DATA
    // ***************         
    for (i = 0 ; i < PredResLength ; ++i)
    {
      CIntfData::getAt(PredRes,&sqcPredRes,i);

      // Write only the results for the actual phase
      // NOTE: don't use std::string compare, we are dealing with char pointer from the CORBA interface
      // type changed to std:string !
      if ( ActPhase == std::string(PredRes.Phase) )
      {
      // Now we have the structures for DEF_EAF_PRED_PHASES::Actual
        GenRes = PredRes.GenRes;

        setCURPHASE(ActPhase);
        setSTEELMASS(GenRes.SteelWeight);
        setSLAGMASS(GenRes.SlagWeight);
        setTEMP(GenRes.Temp);

        RetValue   = true;
        break;
      }
    }

    // ELECTRICAL DATA
    // ***************
    if ( ElecPredLength > 0)
    {
      // In the sequence seqLFElecPredRes the first data set is actual
      CIntfData::getAt(ElecPredRes,&sqcElecPredRes,0);

      // Write only the results for valid phases names
      if ( std::string(ElecPredRes.ElecPhase).empty() )
      {
        CSMC_EventLogFrame *pEventLog = CSMC_EventLogFrameController::getInstance()->getpEventLog();
        sEventLogMessage sMessage = cCBS_StdEventLog::initMessage(__FILE__,__LINE__);
        pEventLog->EL_InconsistentDataReceived(sMessage,"Empty Electric Phase Name received","");
      }
      else
      {
        setCURELECPRACPHASE(std::string(ElecPredRes.ElecPhase));
        setCURELECSTEPNO(ElecPredRes.Step);
        if (ElecPredRes.VoltTap>0)
          setVOLTTAP(ElecPredRes.VoltTap);
        else
          setVOLTTAP(0);
        if (ElecPredRes.ImpCurve>0)
          setIMPCURVE(ElecPredRes.ImpCurve);
        else
          setIMPCURVE(0);
        if ((ElecPredRes.ElecEgy>0.0) && (ElecPredRes.ElecEgy<999999.0))
          setELEC_ENERGY(ElecPredRes.ElecEgy);

        setSTIRRINTENSITY(ElecPredRes.StirrIntensity);
        if ( ElecPredRes.StirrFlow != CSMC_DBData::unspecDouble )
        {
          setSTIRRFLOW(ElecPredRes.StirrFlow);
        }

        setSTIRRGASTYPE(std::string(ElecPredRes.GasType));
      }
    }

    // STIRRING DATA
    // ***************    
    if ( StirrPredLength > 0)
    {
      // In the sequence seqLFStirrPredRes the first data set is actual
      CIntfData::getAt(StirrPredRes,&sqcStirrPredRes,0);

      setSTIRRINTENSITY(StirrPredRes.StirrIntensity);
      if ( ElecPredRes.StirrFlow != CSMC_DBData::unspecDouble )
      {
        setSTIRRFLOW(StirrPredRes.StirrFlow);
      }
      setSTIRRGASTYPE(std::string(StirrPredRes.GasType));
    }


    RetValue = insert();

    //zhpf,PDL_ACTUAL_RES_ANL
    if(RetValue)
    for (i = 0 ; i < PredResLength ; ++i)
    {
      CIntfData::getAt(PredRes,&sqcPredRes,i);

      // Write only the results for the actual phase
      // NOTE: don't use std::string compare, we are dealing with char pointer from the CORBA interface
      // type changed to std:string !
      if ( ActPhase == std::string(PredRes.Phase) )
      {
        GenRes = PredRes.GenRes;
        m_pPDL_ACTUAL_RES_ANL->writeAnalysis(heatID, treatID, plant,now,GenRes.Analysis);
        break;
      }
    }

    if (RetValue)
    {
      commit();
    }
    else
    {
      rollback();
    }
  }
  catch(...)
  {
   RetValue = false;
   rollback();
  }
  return RetValue;
}


