//## Copyright (C) 2013 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CHDH_HM_DATA_PRODPRAC.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA_PRODPRAC::HM_ID("HM_ID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA_PRODPRAC::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA_PRODPRAC::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA_PRODPRAC::DESCR_PP("DESCR_PP");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA_PRODPRAC::STEELGRADECODE_ACT("STEELGRADECODE_ACT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA_PRODPRAC::PRODPRACID_PLAN("PRODPRACID_PLAN");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA_PRODPRAC::PRODPRACID_MOD("PRODPRACID_MOD");

//##DBClassCodeUtility ! DO NOT EDIT !
CHDH_HM_DATA_PRODPRAC::CHDH_HM_DATA_PRODPRAC(cCBS_StdConnection* Connection)
:CSMC_DBData("HDH_HM_DATA_PRODPRAC",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHDH_HM_DATA_PRODPRAC::CHDH_HM_DATA_PRODPRAC(cCBS_Connection* Connection)
:CSMC_DBData("HDH_HM_DATA_PRODPRAC",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHDH_HM_DATA_PRODPRAC::CHDH_HM_DATA_PRODPRAC()
:CSMC_DBData("HDH_HM_DATA_PRODPRAC")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHDH_HM_DATA_PRODPRAC::~CHDH_HM_DATA_PRODPRAC()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_HM_DATA_PRODPRAC::getHM_ID(long Row)
{
  return getString(CHDH_HM_DATA_PRODPRAC::HM_ID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA_PRODPRAC::setHM_ID(const std::string& value)
{
  setString(CHDH_HM_DATA_PRODPRAC::HM_ID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_HM_DATA_PRODPRAC::getTREATID(long Row)
{
  return getString(CHDH_HM_DATA_PRODPRAC::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA_PRODPRAC::setTREATID(const std::string& value)
{
  setString(CHDH_HM_DATA_PRODPRAC::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_HM_DATA_PRODPRAC::getPLANT(long Row)
{
  return getString(CHDH_HM_DATA_PRODPRAC::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA_PRODPRAC::setPLANT(const std::string& value)
{
  setString(CHDH_HM_DATA_PRODPRAC::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_HM_DATA_PRODPRAC::getDESCR_PP(long Row)
{
  return getString(CHDH_HM_DATA_PRODPRAC::DESCR_PP, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA_PRODPRAC::setDESCR_PP(const std::string& value)
{
  setString(CHDH_HM_DATA_PRODPRAC::DESCR_PP, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_HM_DATA_PRODPRAC::getSTEELGRADECODE_ACT(long Row)
{
  return getString(CHDH_HM_DATA_PRODPRAC::STEELGRADECODE_ACT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA_PRODPRAC::setSTEELGRADECODE_ACT(const std::string& value)
{
  setString(CHDH_HM_DATA_PRODPRAC::STEELGRADECODE_ACT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_HM_DATA_PRODPRAC::getPRODPRACID_PLAN(long Row)
{
  return getString(CHDH_HM_DATA_PRODPRAC::PRODPRACID_PLAN, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA_PRODPRAC::setPRODPRACID_PLAN(const std::string& value)
{
  setString(CHDH_HM_DATA_PRODPRAC::PRODPRACID_PLAN, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_HM_DATA_PRODPRAC::getPRODPRACID_MOD(long Row)
{
  return getString(CHDH_HM_DATA_PRODPRAC::PRODPRACID_MOD, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA_PRODPRAC::setPRODPRACID_MOD(const std::string& value)
{
  setString(CHDH_HM_DATA_PRODPRAC::PRODPRACID_MOD, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CHDH_HM_DATA_PRODPRAC::select(const std::string& HM_ID, const std::string& TREATID, const std::string& PLANT, const std::string& DESCR_PP)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CHDH_HM_DATA_PRODPRAC::HM_ID,HM_ID);
  addWhereClause(CHDH_HM_DATA_PRODPRAC::TREATID,TREATID);
  addWhereClause(CHDH_HM_DATA_PRODPRAC::PLANT,PLANT);
  addWhereClause(CHDH_HM_DATA_PRODPRAC::DESCR_PP,DESCR_PP);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CHDH_HM_DATA_PRODPRAC::copyHDHHDPRODPRAC(const string& pHeatId, const string& pTreatId, const string& pPlant, bool pCommit)
{
	bool result=true;
	std::stringstream sql;
	//some data found -> delete them
	/*if (!result)
	{
		result = deleteRows();
		if (!result)
			setLastError(string("delete from HD_HEAT_DATA_PRODPRAC faild"), 0, "delete from HD_HEAT_DATA_PRODPRAC where " + getWhereStatement());
	}*/

	sql << "insert into HDH_HM_DATA_PRODPRAC (HM_ID, TREATID, PLANT, DESCR_PP, STEELGRADECODE_ACT,"
		<< "  PRODPRACID_PLAN, PRODPRACID_MOD)"
		<< " (select HM_ID, TREATID, PLANT, DESCR_PP, STEELGRADECODE_ACT, PRODPRACID_PLAN, PRODPRACID_MOD"
		<< "  from PDH_HM_DATA_PRODPRAC"
		<< "  where HM_ID = '" << pHeatId << "'"
		<< "    and TREATID = '" << pTreatId << "'"
		<< "    and PLANT = '" << pPlant << "')";

	result = result && executeSQL(sql.str());
	if (!result)
		//pError = getLastError();

	if(pCommit)
	{
		if (result)
			this->commit();
		else
			rollback();
	}

	return result;
}

bool CHDH_HM_DATA_PRODPRAC::delete_HDH_HM_DATA_PRODPRAC(const std::string& HM_ID, const std::string& TREATID, const std::string& PLANT)
{
	bool result;
  std::stringstream sql;
	try
	{
		addWhereClause("HM_ID",HM_ID);
		addWhereClause("TREATID",TREATID);
		addWhereClause("PLANT",PLANT);
		//sql += getWhereStatement() + ";";
		sql << "delete from HDH_HM_DATA_PRODPRAC" 
			  << getWhereStatement();
		/*<< "  where HEATID = '" << pHeatId << "'"
		<< "   and TREATID = '" << pTreatId << "'"
		<< "   and PLANT = '" << pPlant << "'";*/

	result = executeSQL(sql.str());
	if (result)
    {
      commit();
    }
    else
    {
      rollback();
      log("ERROR: CHDH_HM_DATA_PRODPRAC::delete_HDH_HM_DATA_PRODPRAC failed",1);
    }
	}
	catch(...)
	{
		result=false;
	}

	return result;
}



