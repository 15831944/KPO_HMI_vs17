//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 

#if defined (_MSC_VER) && (_MSC_VER >= 1000)
#pragma once
#endif
#ifndef _INC_CPP_ORDER_SINGLE_AIMS_INCLUDED
#define _INC_CPP_ORDER_SINGLE_AIMS_INCLUDED

#include "CSMC_DBData.h"

class CGC_PP_ORDER_SINGLE_AIMS;

class CPP_ORDER_SINGLE_AIMS
: public CSMC_DBData
{

public:
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PRODORDERID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PLANT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TYPE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string VARNAME;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string VALUE;

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPP_ORDER_SINGLE_AIMS(cCBS_StdConnection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPP_ORDER_SINGLE_AIMS(cCBS_Connection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPP_ORDER_SINGLE_AIMS();

  //##DBClassCodeUtility ! DO NOT EDIT !
  ~CPP_ORDER_SINGLE_AIMS();

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Production oder identification
  std::string getPRODORDERID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPRODORDERID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Plant identifier
  std::string getPLANT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPLANT(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Specifies data type of value. 1=long, 2=double,3=string
  long getTYPE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTYPE(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getVARNAME(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setVARNAME(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Character representation of VALUE, conversion to be done depending on TYPE
  std::string getVALUE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setVALUE(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  bool select(const std::string& PRODORDERID, const std::string& PLANT, long TYPE, const std::string& VARNAME);

  //## ----------------------------------END-GENERATED-CODE--------------------- 

  //## ----------------------------------YOUR-CODE------------------------------ 

  bool deletePP(const std::string& PRODORDERID, const std::string& PLANT, std::string& VARNAME, bool Commit, cCBS_ODBC_DBError &Error);

  virtual void doOnConstruct();

  virtual void doOnDestruct();

  bool exists(const std::string& PRODORDERID, const std::string& PLANT, const std::string& VARNAME);

  bool updateInsertPP(const std::string& PRODORDERID, const std::string& PLANT, const std::string& VARNAME, const std::string VALUE, bool Commit, cCBS_ODBC_DBError &Error);

  CGC_PP_ORDER_SINGLE_AIMS *m_pGC_PP_ORDER_SINGLE_AIMS;
};

#endif /* _INC_CPP_ORDER_SINGLE_AIMS_INCLUDED */
