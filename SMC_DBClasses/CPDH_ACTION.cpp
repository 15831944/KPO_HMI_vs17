//## Copyright (C) 2013 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 

#include "DEF_GC_ACTION_DEF.h"
#include "CPDH_ACTION.h"
#include "CGC_ACTION_DEF.h"

//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDH_ACTION::HM_ID("HM_ID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDH_ACTION::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDH_ACTION::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDH_ACTION::ACTIONNO("ACTIONNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDH_ACTION::DURSINCEHEATANNOUNCEMENT("DURSINCEHEATANNOUNCEMENT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDH_ACTION::DURSINCESTARTOFHEAT("DURSINCESTARTOFHEAT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDH_ACTION::ACTIONNAME("ACTIONNAME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDH_ACTION::ACTIONUNIT("ACTIONUNIT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDH_ACTION::ACTIONVALUE("ACTIONVALUE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDH_ACTION::ACTIONSTATUS("ACTIONSTATUS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDH_ACTION::REVTIME("REVTIME");

//##DBClassCodeUtility ! DO NOT EDIT !
CPDH_ACTION::CPDH_ACTION(cCBS_StdConnection* Connection)
:CSMC_DBData("PDH_ACTION",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPDH_ACTION::CPDH_ACTION(cCBS_Connection* Connection)
:CSMC_DBData("PDH_ACTION",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPDH_ACTION::CPDH_ACTION()
:CSMC_DBData("PDH_ACTION")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPDH_ACTION::~CPDH_ACTION()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDH_ACTION::getHM_ID(long Row)
{
  return getString(CPDH_ACTION::HM_ID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDH_ACTION::setHM_ID(const std::string& value)
{
  setString(CPDH_ACTION::HM_ID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDH_ACTION::getTREATID(long Row)
{
  return getString(CPDH_ACTION::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDH_ACTION::setTREATID(const std::string& value)
{
  setString(CPDH_ACTION::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDH_ACTION::getPLANT(long Row)
{
  return getString(CPDH_ACTION::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDH_ACTION::setPLANT(const std::string& value)
{
  setString(CPDH_ACTION::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDH_ACTION::getACTIONNO(long Row)
{
  return getLong(CPDH_ACTION::ACTIONNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDH_ACTION::setACTIONNO(long value)
{
  setLong(CPDH_ACTION::ACTIONNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDH_ACTION::getDURSINCEHEATANNOUNCEMENT(long Row)
{
  return getDouble(CPDH_ACTION::DURSINCEHEATANNOUNCEMENT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDH_ACTION::setDURSINCEHEATANNOUNCEMENT(double value)
{
  setDouble(CPDH_ACTION::DURSINCEHEATANNOUNCEMENT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDH_ACTION::getDURSINCESTARTOFHEAT(long Row)
{
  return getDouble(CPDH_ACTION::DURSINCESTARTOFHEAT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDH_ACTION::setDURSINCESTARTOFHEAT(double value)
{
  setDouble(CPDH_ACTION::DURSINCESTARTOFHEAT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDH_ACTION::getACTIONNAME(long Row)
{
  return getString(CPDH_ACTION::ACTIONNAME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDH_ACTION::setACTIONNAME(const std::string& value)
{
  setString(CPDH_ACTION::ACTIONNAME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDH_ACTION::getACTIONUNIT(long Row)
{
  return getString(CPDH_ACTION::ACTIONUNIT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDH_ACTION::setACTIONUNIT(const std::string& value)
{
  setString(CPDH_ACTION::ACTIONUNIT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDH_ACTION::getACTIONVALUE(long Row)
{
  return getString(CPDH_ACTION::ACTIONVALUE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDH_ACTION::setACTIONVALUE(const std::string& value)
{
  setString(CPDH_ACTION::ACTIONVALUE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDH_ACTION::getACTIONSTATUS(long Row)
{
  return getLong(CPDH_ACTION::ACTIONSTATUS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDH_ACTION::setACTIONSTATUS(long value)
{
  setLong(CPDH_ACTION::ACTIONSTATUS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CPDH_ACTION::getREVTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CPDH_ACTION::REVTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDH_ACTION::setREVTIME(const CDateTime& value)
{
 setString(CPDH_ACTION::REVTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CPDH_ACTION::select(const std::string& HM_ID, const std::string& TREATID, const std::string& PLANT, long ACTIONNO)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPDH_ACTION::HM_ID,HM_ID);
  addWhereClause(CPDH_ACTION::TREATID,TREATID);
  addWhereClause(CPDH_ACTION::PLANT,PLANT);
  addWhereClause(CPDH_ACTION::ACTIONNO,ACTIONNO);
  m_Statement += getWhereStatement() + " order by REVTIME desc;";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CPDH_ACTION::doAnnouncement(const std::string& HM_ID, const std::string& TREATID, const std::string& PLANT)
{
  bool retValue;
  CDateTime now;
  int i;  // place-holder variable - delete later
  double j; // place-holder variable - delete later

  try
  {

		std::string actionName = "";
		CGC_ACTION_DEF   GC_ACTION_DEF (m_pCBS_StdConnection);
		if(GC_ACTION_DEF.select(DEF_GC_ACTION_DEF::HeatAnnounce))
		{
			actionName = GC_ACTION_DEF.getACTIONNAME(1);
		}

    setHM_ID(HM_ID);
    setTREATID(TREATID);
    setPLANT(PLANT);
    setACTIONNO(DEF_GC_ACTION_DEF::HeatAnnounce); //1000
    setDURSINCEHEATANNOUNCEMENT(0); 
    setDURSINCESTARTOFHEAT(0);
    setACTIONNAME(actionName); 
    setACTIONUNIT(" ");
    setACTIONVALUE(" "); // TO BE DONE 
    setACTIONSTATUS(1); // TO BE DONE 
    setREVTIME(now);

    retValue = insert();
    // commit only if own values are successfully written
    if (retValue)
    {
      commit();
    }
    else
    {
      rollback();
      log("ERROR: CPDH_ACTION::doAnnouncement failed",1);
    }
  }
  catch(...)
  {
    retValue = false;
  }

  return retValue;
}
bool CPDH_ACTION::doCancelHeat(const std::string& HM_ID, const std::string& TREATID, const std::string& PLANT)
{
	bool result;
  std::stringstream sql;
	try
	{
		addWhereClause("HM_ID",HM_ID);
		addWhereClause("TREATID",TREATID);
		addWhereClause("PLANT",PLANT);
		
		sql << "delete from PDH_ACTION" 
			  << getWhereStatement();
		
	result = executeSQL(sql.str());
	if (result)
    {
      commit();
    }
    else
    {
      rollback();
      log("ERROR: CPDH_ACTION::doCancelHeat failed",1);
    }
	}
	catch(...)
	{
		result=false;
	}

	return result;
}
bool CPDH_ACTION::doHeatDeparture(const std::string& HM_ID, const std::string& TREATID, const std::string& PLANT,long pDurSinceHeatStart,long pDurSinceHeatAnnounce)
{
	bool result;
	int i=1;
	CDateTime now;
  std::stringstream sql;
	try
	{

		std::string actionName = "";
		CGC_ACTION_DEF   GC_ACTION_DEF (m_pCBS_StdConnection);
		if(GC_ACTION_DEF.select(DEF_GC_ACTION_DEF::Departure))
		{
			actionName = GC_ACTION_DEF.getACTIONNAME(1);
		}

	sql << "update PDH_ACTION set " 
			<< "ACTIONNO = " << DEF_GC_ACTION_DEF::Departure << " ,"   //  1004
			<< "ACTIONNAME = '" << actionName << "' ," 
			<< "DURSINCEHEATANNOUNCEMENT = " << pDurSinceHeatAnnounce << " ,"		
			<< "DURSINCESTARTOFHEAT = " << pDurSinceHeatStart << " ,"					
			<< "ACTIONSTATUS  = " << i << " ,"			// TO DO LATER
			<< "REVTIME = '" << now.toDBString() << "' "
			<< "where HM_ID = '" << HM_ID << "' and TREATID = '" << TREATID << "' and PLANT = '" << PLANT << "'"  ; 

	result = executeSQL(sql.str());
	if (result)
    {
      commit();
    }
    else
    {
      rollback();
      log("ERROR: CPDH_ACTION::doHeatDeparture failed",1);
    }
	}
	catch(...)
	{
		result=false;
	}

	return result;
}



bool CPDH_ACTION::doHeatStart(const std::string& HM_ID, const std::string& TREATID, const std::string& PLANT,long pDurSinceHeatStart,long pDurSinceHeatAnnounce)
{
	bool result;
	int i=1;
	CDateTime now;
  std::stringstream sql;
	try
	{
		std::string actionName = "";
		CGC_ACTION_DEF   GC_ACTION_DEF (m_pCBS_StdConnection);
		if(GC_ACTION_DEF.select(DEF_GC_ACTION_DEF::HeatStart))
		{
			actionName = GC_ACTION_DEF.getACTIONNAME(1);
		}

	sql << "update PDH_ACTION set " 
			<< "ACTIONNO = " << DEF_GC_ACTION_DEF::HeatStart << " ,"   
			<< "ACTIONNAME = '" << actionName << "' ," 
			<< "DURSINCEHEATANNOUNCEMENT = " << pDurSinceHeatAnnounce << " ,"		
			<< "DURSINCESTARTOFHEAT = " << pDurSinceHeatStart << " ,"					
			<< "REVTIME = '" << now.toDBString() << "' "
			<< "where HM_ID = '" << HM_ID<< "' and TREATID = '" << TREATID << "' and PLANT = '" << PLANT << "'"  ;

	result = executeSQL(sql.str());
	if (result)
    {
      commit();
    }
    else
    {
      rollback();
      log("ERROR: CPDH_ACTION::doHeatStart failed",1);
    }
	}
	catch(...)
	{
		result=false;
	}

	return result;
}

bool CPDH_ACTION::doHeatEnd(const std::string& HM_ID, const std::string& TREATID, const std::string& PLANT,long pDurSinceHeatStart,long pDurSinceHeatAnnounce)
{
	bool result;
	int i=1;
	CDateTime now;
  std::stringstream sql;
	try
	{
		std::string actionName = "";
		CGC_ACTION_DEF   GC_ACTION_DEF (m_pCBS_StdConnection);
		if(GC_ACTION_DEF.select(DEF_GC_ACTION_DEF::HeatEnd))
		{
			actionName = GC_ACTION_DEF.getACTIONNAME(1);
		}

	sql << "update PDH_ACTION set " 
			<< "ACTIONNO = " << DEF_GC_ACTION_DEF::HeatEnd << " ,"   
			<< "ACTIONNAME = '" << actionName << "' ," 
			<< "DURSINCEHEATANNOUNCEMENT = " << pDurSinceHeatAnnounce << " ,"		
			<< "DURSINCESTARTOFHEAT = " << pDurSinceHeatStart << " ,"					
			<< "REVTIME = '" << now.toDBString() << "' "
			<< "where HM_ID = '" << HM_ID<< "' and TREATID = '" << TREATID << "' and PLANT = '" << PLANT << "'"  ;

	result = executeSQL(sql.str());
	if (result)
    {
      commit();
    }
    else
    {
      rollback();
      log("ERROR: CPDH_ACTION::doHeatStart failed",1);
    }
	}
	catch(...)
	{
		result=false;
	}

	return result;
}


bool CPDH_ACTION::insert_Deslagging(const std::string& HM_ID, const std::string& TREATID, const std::string& PLANT, long pDeslagStat,const std::string& pActionname,long pActionNo)
{
  bool retValue=false;
  CDateTime now;

  try
  {
    setHM_ID(HM_ID);
    setTREATID(TREATID);
    setPLANT(PLANT);
    setACTIONNO(pActionNo);
    setACTIONNAME(pActionname); 
    setACTIONSTATUS(pDeslagStat); 
    setREVTIME(now);

    retValue = insert();
    // commit only if own values are successfully written
    if (retValue)
    {
      commit();
    }
    else
    {
      rollback();
      log("ERROR: CPDH_ACTION::insert_CPDHActoin failed",1);
    }
  }
  catch(...)
  {
    retValue = false;
  }

  return retValue;
}

bool CPDH_ACTION::select_L3Data(const std::string& HM_ID, const std::string& TREATID, const std::string& PLANT)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause("HM_ID",HM_ID);
  addWhereClause("TREATID",TREATID);
  addWhereClause("PLANT",PLANT);
  m_Statement += getWhereStatement() + " and ACTIONNAME like '%Deslagging%' order by REVTIME desc;";

  return CSMC_DBData::select();
}
bool CPDH_ACTION::select_HMStatus(const std::string& HM_ID, const std::string& TREATID, const std::string& PLANT)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause("HM_ID",HM_ID);
  addWhereClause("TREATID",TREATID);
  addWhereClause("PLANT",PLANT);

  //m_Statement += getWhereStatement() + " and ACTIONNO in (1000,1001,1004,1007,1008) order by REVTIME desc;";
	std::stringstream temp;
	temp << DEF_GC_ACTION_DEF::HeatAnnounce << "," << DEF_GC_ACTION_DEF::HeatStart << "," << DEF_GC_ACTION_DEF::Departure << "," << DEF_GC_ACTION_DEF::DeslaggingStart << "," << DEF_GC_ACTION_DEF::DeslaggingEnd ;	

	m_Statement += getWhereStatement() + " and ACTIONNO in (" + temp.str() +  " ) order by REVTIME desc;";
	
  return CSMC_DBData::select();
}


