//## Copyright (C) 2013 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CHDH_PP_BLOWING.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_BLOWING::HM_ID("HM_ID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_BLOWING::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_BLOWING::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_BLOWING::PRACNO("PRACNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_BLOWING::REVTIME("REVTIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_BLOWING::DESCR_E("DESCR_E");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_BLOWING::DESCR_C("DESCR_C");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_BLOWING::USERCODE("USERCODE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_BLOWING::CO_LIME_STD_REL("CO_LIME_STD_REL");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_BLOWING::CO_LIME_FIX_LIME("CO_LIME_FIX_LIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_BLOWING::CO_LIME_FIX_CARBIDE("CO_LIME_FIX_CARBIDE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_BLOWING::CO_LIME_MIN_LIME("CO_LIME_MIN_LIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_BLOWING::CO_LIME_MIN_CARBIDE("CO_LIME_MIN_CARBIDE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_BLOWING::CO_LIME_MIN_MG("CO_LIME_MIN_MG");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_BLOWING::CO_CARB_STD_REL("CO_CARB_STD_REL");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_BLOWING::CO_CARB_FIX_LIME("CO_CARB_FIX_LIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_BLOWING::CO_CARB_FIX_CARBIDE("CO_CARB_FIX_CARBIDE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_BLOWING::CO_CARB_MIN_LIME("CO_CARB_MIN_LIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_BLOWING::CO_CARB_MIN_CARBIDE("CO_CARB_MIN_CARBIDE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_BLOWING::CO_CARB_MIN_MG("CO_CARB_MIN_MG");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_BLOWING::ECO_STD_REL("ECO_STD_REL");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_BLOWING::ECO_FIX_LIME("ECO_FIX_LIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_BLOWING::ECO_FIX_CARBIDE("ECO_FIX_CARBIDE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_BLOWING::ECO_MIN_LIME("ECO_MIN_LIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_BLOWING::ECO_MIN_CARBIDE("ECO_MIN_CARBIDE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_BLOWING::ECO_MIN_MG("ECO_MIN_MG");

//##DBClassCodeUtility ! DO NOT EDIT !
CHDH_PP_BLOWING::CHDH_PP_BLOWING(cCBS_StdConnection* Connection)
:CSMC_DBData("HDH_PP_BLOWING",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHDH_PP_BLOWING::CHDH_PP_BLOWING(cCBS_Connection* Connection)
:CSMC_DBData("HDH_PP_BLOWING",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHDH_PP_BLOWING::CHDH_PP_BLOWING()
:CSMC_DBData("HDH_PP_BLOWING")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHDH_PP_BLOWING::~CHDH_PP_BLOWING()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_PP_BLOWING::getHM_ID(long Row)
{
  return getString(CHDH_PP_BLOWING::HM_ID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_BLOWING::setHM_ID(const std::string& value)
{
  setString(CHDH_PP_BLOWING::HM_ID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_PP_BLOWING::getTREATID(long Row)
{
  return getString(CHDH_PP_BLOWING::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_BLOWING::setTREATID(const std::string& value)
{
  setString(CHDH_PP_BLOWING::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_PP_BLOWING::getPLANT(long Row)
{
  return getString(CHDH_PP_BLOWING::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_BLOWING::setPLANT(const std::string& value)
{
  setString(CHDH_PP_BLOWING::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDH_PP_BLOWING::getPRACNO(long Row)
{
  return getLong(CHDH_PP_BLOWING::PRACNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_BLOWING::setPRACNO(long value)
{
  setLong(CHDH_PP_BLOWING::PRACNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CHDH_PP_BLOWING::getREVTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHDH_PP_BLOWING::REVTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_BLOWING::setREVTIME(const CDateTime& value)
{
 setString(CHDH_PP_BLOWING::REVTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_PP_BLOWING::getDESCR_E(long Row)
{
  return getString(CHDH_PP_BLOWING::DESCR_E, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_BLOWING::setDESCR_E(const std::string& value)
{
  setString(CHDH_PP_BLOWING::DESCR_E, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_PP_BLOWING::getDESCR_C(long Row)
{
  return getString(CHDH_PP_BLOWING::DESCR_C, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_BLOWING::setDESCR_C(const std::string& value)
{
  setString(CHDH_PP_BLOWING::DESCR_C, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_PP_BLOWING::getUSERCODE(long Row)
{
  return getString(CHDH_PP_BLOWING::USERCODE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_BLOWING::setUSERCODE(const std::string& value)
{
  setString(CHDH_PP_BLOWING::USERCODE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_PP_BLOWING::getCO_LIME_STD_REL(long Row)
{
  return getDouble(CHDH_PP_BLOWING::CO_LIME_STD_REL, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_BLOWING::setCO_LIME_STD_REL(double value)
{
  setDouble(CHDH_PP_BLOWING::CO_LIME_STD_REL, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_PP_BLOWING::getCO_LIME_FIX_LIME(long Row)
{
  return getDouble(CHDH_PP_BLOWING::CO_LIME_FIX_LIME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_BLOWING::setCO_LIME_FIX_LIME(double value)
{
  setDouble(CHDH_PP_BLOWING::CO_LIME_FIX_LIME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_PP_BLOWING::getCO_LIME_FIX_CARBIDE(long Row)
{
  return getDouble(CHDH_PP_BLOWING::CO_LIME_FIX_CARBIDE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_BLOWING::setCO_LIME_FIX_CARBIDE(double value)
{
  setDouble(CHDH_PP_BLOWING::CO_LIME_FIX_CARBIDE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_PP_BLOWING::getCO_LIME_MIN_LIME(long Row)
{
  return getDouble(CHDH_PP_BLOWING::CO_LIME_MIN_LIME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_BLOWING::setCO_LIME_MIN_LIME(double value)
{
  setDouble(CHDH_PP_BLOWING::CO_LIME_MIN_LIME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_PP_BLOWING::getCO_LIME_MIN_CARBIDE(long Row)
{
  return getDouble(CHDH_PP_BLOWING::CO_LIME_MIN_CARBIDE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_BLOWING::setCO_LIME_MIN_CARBIDE(double value)
{
  setDouble(CHDH_PP_BLOWING::CO_LIME_MIN_CARBIDE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_PP_BLOWING::getCO_LIME_MIN_MG(long Row)
{
  return getDouble(CHDH_PP_BLOWING::CO_LIME_MIN_MG, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_BLOWING::setCO_LIME_MIN_MG(double value)
{
  setDouble(CHDH_PP_BLOWING::CO_LIME_MIN_MG, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_PP_BLOWING::getCO_CARB_STD_REL(long Row)
{
  return getDouble(CHDH_PP_BLOWING::CO_CARB_STD_REL, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_BLOWING::setCO_CARB_STD_REL(double value)
{
  setDouble(CHDH_PP_BLOWING::CO_CARB_STD_REL, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_PP_BLOWING::getCO_CARB_FIX_LIME(long Row)
{
  return getDouble(CHDH_PP_BLOWING::CO_CARB_FIX_LIME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_BLOWING::setCO_CARB_FIX_LIME(double value)
{
  setDouble(CHDH_PP_BLOWING::CO_CARB_FIX_LIME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_PP_BLOWING::getCO_CARB_FIX_CARBIDE(long Row)
{
  return getDouble(CHDH_PP_BLOWING::CO_CARB_FIX_CARBIDE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_BLOWING::setCO_CARB_FIX_CARBIDE(double value)
{
  setDouble(CHDH_PP_BLOWING::CO_CARB_FIX_CARBIDE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_PP_BLOWING::getCO_CARB_MIN_LIME(long Row)
{
  return getDouble(CHDH_PP_BLOWING::CO_CARB_MIN_LIME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_BLOWING::setCO_CARB_MIN_LIME(double value)
{
  setDouble(CHDH_PP_BLOWING::CO_CARB_MIN_LIME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_PP_BLOWING::getCO_CARB_MIN_CARBIDE(long Row)
{
  return getDouble(CHDH_PP_BLOWING::CO_CARB_MIN_CARBIDE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_BLOWING::setCO_CARB_MIN_CARBIDE(double value)
{
  setDouble(CHDH_PP_BLOWING::CO_CARB_MIN_CARBIDE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_PP_BLOWING::getCO_CARB_MIN_MG(long Row)
{
  return getDouble(CHDH_PP_BLOWING::CO_CARB_MIN_MG, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_BLOWING::setCO_CARB_MIN_MG(double value)
{
  setDouble(CHDH_PP_BLOWING::CO_CARB_MIN_MG, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_PP_BLOWING::getECO_STD_REL(long Row)
{
  return getDouble(CHDH_PP_BLOWING::ECO_STD_REL, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_BLOWING::setECO_STD_REL(double value)
{
  setDouble(CHDH_PP_BLOWING::ECO_STD_REL, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_PP_BLOWING::getECO_FIX_LIME(long Row)
{
  return getDouble(CHDH_PP_BLOWING::ECO_FIX_LIME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_BLOWING::setECO_FIX_LIME(double value)
{
  setDouble(CHDH_PP_BLOWING::ECO_FIX_LIME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_PP_BLOWING::getECO_FIX_CARBIDE(long Row)
{
  return getDouble(CHDH_PP_BLOWING::ECO_FIX_CARBIDE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_BLOWING::setECO_FIX_CARBIDE(double value)
{
  setDouble(CHDH_PP_BLOWING::ECO_FIX_CARBIDE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_PP_BLOWING::getECO_MIN_LIME(long Row)
{
  return getDouble(CHDH_PP_BLOWING::ECO_MIN_LIME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_BLOWING::setECO_MIN_LIME(double value)
{
  setDouble(CHDH_PP_BLOWING::ECO_MIN_LIME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_PP_BLOWING::getECO_MIN_CARBIDE(long Row)
{
  return getDouble(CHDH_PP_BLOWING::ECO_MIN_CARBIDE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_BLOWING::setECO_MIN_CARBIDE(double value)
{
  setDouble(CHDH_PP_BLOWING::ECO_MIN_CARBIDE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_PP_BLOWING::getECO_MIN_MG(long Row)
{
  return getDouble(CHDH_PP_BLOWING::ECO_MIN_MG, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_BLOWING::setECO_MIN_MG(double value)
{
  setDouble(CHDH_PP_BLOWING::ECO_MIN_MG, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CHDH_PP_BLOWING::select(const std::string& HM_ID, const std::string& TREATID, const std::string& PLANT, long PRACNO)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CHDH_PP_BLOWING::HM_ID,HM_ID);
  addWhereClause(CHDH_PP_BLOWING::TREATID,TREATID);
  addWhereClause(CHDH_PP_BLOWING::PLANT,PLANT);
  addWhereClause(CHDH_PP_BLOWING::PRACNO,PRACNO);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CHDH_PP_BLOWING::copyHDHPPBlowing(const string& pHeatId, const string& pTreatId, const string& pPlant, long pPlantno, bool pCommit)
{
	bool result=true;
	std::stringstream sql;
	//some data found -> delete them
	/*if (!result)
	{
		result = deleteRows();
		if (!result)
			setLastError(string("delete from HDH_PP_BLOWING faild"), 0, "delete from HDH_PP_BLOWING where " + getWhereStatement());
	}*/
	// pracno =0 for model data

	sql << "insert into HDH_PP_BLOWING (HM_ID,TREATID,PLANT,PRACNO,REVTIME,DESCR_E,DESCR_C,USERCODE,CO_LIME_STD_REL,CO_LIME_FIX_LIME ,"
		  << " CO_LIME_FIX_CARBIDE, CO_LIME_MIN_LIME, CO_LIME_MIN_CARBIDE, CO_LIME_MIN_MG, CO_CARB_STD_REL, CO_CARB_FIX_LIME, CO_CARB_FIX_CARBIDE,"
			<< " CO_CARB_MIN_LIME, CO_CARB_MIN_CARBIDE, CO_CARB_MIN_MG, ECO_STD_REL, ECO_FIX_LIME, ECO_FIX_CARBIDE, ECO_MIN_LIME, ECO_MIN_CARBIDE, ECO_MIN_MG ) "
			<< " (select '" << pHeatId << "', '" << pTreatId << "', '" << pPlant << "', PRACNO,REVTIME,DESCR_E,DESCR_C,USERCODE,CO_LIME_STD_REL,CO_LIME_FIX_LIME ,"
			//<< " (select '" << pHeatId << "', '" << pTreatId << "', '" << pPlant << "',0,REVTIME,DESCR_E,DESCR_C,USERCODE,CO_LIME_STD_REL,CO_LIME_FIX_LIME ,"
			<< " CO_LIME_FIX_CARBIDE, CO_LIME_MIN_LIME, CO_LIME_MIN_CARBIDE, CO_LIME_MIN_MG, CO_CARB_STD_REL, CO_CARB_FIX_LIME, CO_CARB_FIX_CARBIDE,"
			<< " CO_CARB_MIN_LIME, CO_CARB_MIN_CARBIDE, CO_CARB_MIN_MG, ECO_STD_REL, ECO_FIX_LIME, ECO_FIX_CARBIDE, ECO_MIN_LIME, ECO_MIN_CARBIDE, ECO_MIN_MG "
			<< " from GTH_PP_BLOWING"
			<< "  where PLANTNO = "  << pPlantno 
			<< "  and PRACNO = (select PRODPRACID_MOD from PDH_HM_DATA_PRODPRAC where HM_ID = '" << pHeatId << "' and TREATID = '"  <<  pTreatId <<  "' and PLANT = '" << pPlant << "' and DESCR_PP = 'Blowing')"
			<< "  and REVTIME = (select max(REVTIME) from GTH_PP_BLOWING))";
			
	result = result && executeSQL(sql.str());
	if (!result)
		//pError = getLastError();

	if(pCommit)
  {
		if (result)
			this->commit();
		else
			rollback();
  }

	return result;
}

bool CHDH_PP_BLOWING::delete_HDH_PP_BLOWING(const std::string& HM_ID, const std::string& TREATID, const std::string& PLANT)
{
	bool result;
  std::stringstream sql;
	try
	{
		addWhereClause("HM_ID",HM_ID);
		addWhereClause("TREATID",TREATID);
		addWhereClause("PLANT",PLANT);
		//sql += getWhereStatement() + ";";
		sql << "delete from HDH_PP_BLOWING" 
			  << getWhereStatement();
		/*<< "  where HEATID = '" << pHeatId << "'"
		<< "   and TREATID = '" << pTreatId << "'"
		<< "   and PLANT = '" << pPlant << "'";*/

	result = executeSQL(sql.str());
	if (result)
    {
      commit();
    }
    else
    {
      rollback();
      log("ERROR: CHDH_PP_BLOWING::delete_HDH_PP_BLOWING failed",1);
    }
	}
	catch(...)
	{
		result=false;
	}

	return result;
}



