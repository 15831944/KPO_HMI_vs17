//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CGTE_PP_EL.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTE_PP_EL::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTE_PP_EL::PLANTNO("PLANTNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTE_PP_EL::PRACNO("PRACNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTE_PP_EL::TREATMODENO("TREATMODENO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTE_PP_EL::LIQ_ADD_AMOUNT("LIQ_ADD_AMOUNT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTE_PP_EL::REVTIME("REVTIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTE_PP_EL::DESCR_E("DESCR_E");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTE_PP_EL::DESCR_C("DESCR_C");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTE_PP_EL::USERCODE("USERCODE");

//##DBClassCodeUtility ! DO NOT EDIT !
CGTE_PP_EL::CGTE_PP_EL(cCBS_StdConnection* Connection)
:CSMC_DBData("GTE_PP_EL",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGTE_PP_EL::CGTE_PP_EL(cCBS_Connection* Connection)
:CSMC_DBData("GTE_PP_EL",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGTE_PP_EL::CGTE_PP_EL()
:CSMC_DBData("GTE_PP_EL")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGTE_PP_EL::~CGTE_PP_EL()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CGTE_PP_EL::getPLANT(long Row)
{
  return getString(CGTE_PP_EL::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTE_PP_EL::setPLANT(const std::string& value)
{
  setString(CGTE_PP_EL::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CGTE_PP_EL::getPLANTNO(long Row)
{
  return getLong(CGTE_PP_EL::PLANTNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTE_PP_EL::setPLANTNO(long value)
{
  setLong(CGTE_PP_EL::PLANTNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CGTE_PP_EL::getPRACNO(long Row)
{
  return getLong(CGTE_PP_EL::PRACNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTE_PP_EL::setPRACNO(long value)
{
  setLong(CGTE_PP_EL::PRACNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CGTE_PP_EL::getTREATMODENO(long Row)
{
  return getLong(CGTE_PP_EL::TREATMODENO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTE_PP_EL::setTREATMODENO(long value)
{
  setLong(CGTE_PP_EL::TREATMODENO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CGTE_PP_EL::getLIQ_ADD_AMOUNT(long Row)
{
  return getLong(CGTE_PP_EL::LIQ_ADD_AMOUNT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTE_PP_EL::setLIQ_ADD_AMOUNT(long value)
{
  setLong(CGTE_PP_EL::LIQ_ADD_AMOUNT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CGTE_PP_EL::getREVTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CGTE_PP_EL::REVTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTE_PP_EL::setREVTIME(const CDateTime& value)
{
 setString(CGTE_PP_EL::REVTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CGTE_PP_EL::getDESCR_E(long Row)
{
  return getString(CGTE_PP_EL::DESCR_E, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTE_PP_EL::setDESCR_E(const std::string& value)
{
  setString(CGTE_PP_EL::DESCR_E, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CGTE_PP_EL::getDESCR_C(long Row)
{
  return getString(CGTE_PP_EL::DESCR_C, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTE_PP_EL::setDESCR_C(const std::string& value)
{
  setString(CGTE_PP_EL::DESCR_C, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CGTE_PP_EL::getUSERCODE(long Row)
{
  return getString(CGTE_PP_EL::USERCODE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTE_PP_EL::setUSERCODE(const std::string& value)
{
  setString(CGTE_PP_EL::USERCODE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CGTE_PP_EL::select(const std::string& PLANT, long PLANTNO, long PRACNO, long TREATMODENO, long LIQ_ADD_AMOUNT)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CGTE_PP_EL::PLANT,PLANT);
  addWhereClause(CGTE_PP_EL::PLANTNO,PLANTNO);
  addWhereClause(CGTE_PP_EL::PRACNO,PRACNO);
  addWhereClause(CGTE_PP_EL::TREATMODENO,TREATMODENO);
  addWhereClause(CGTE_PP_EL::LIQ_ADD_AMOUNT,LIQ_ADD_AMOUNT);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 


