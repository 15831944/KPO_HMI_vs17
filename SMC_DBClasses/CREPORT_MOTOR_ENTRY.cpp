//## Copyright (C) 2014 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CREPORT_MOTOR_ENTRY.h"
#include "cCBS_StdEventLogFrameController.h"

//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CREPORT_MOTOR_ENTRY::MOTORID("MOTORID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CREPORT_MOTOR_ENTRY::START_TIME("START_TIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CREPORT_MOTOR_ENTRY::STOP_TIME("STOP_TIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CREPORT_MOTOR_ENTRY::PLANT_NO("PLANT_NO");

//##DBClassCodeUtility ! DO NOT EDIT !
CREPORT_MOTOR_ENTRY::CREPORT_MOTOR_ENTRY(cCBS_StdConnection* Connection)
:CSMC_DBData("REPORT_MOTOR_ENTRY",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CREPORT_MOTOR_ENTRY::CREPORT_MOTOR_ENTRY(cCBS_Connection* Connection)
:CSMC_DBData("REPORT_MOTOR_ENTRY",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CREPORT_MOTOR_ENTRY::CREPORT_MOTOR_ENTRY()
:CSMC_DBData("REPORT_MOTOR_ENTRY")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CREPORT_MOTOR_ENTRY::~CREPORT_MOTOR_ENTRY()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Motor ID
long CREPORT_MOTOR_ENTRY::getMOTORID(long Row)
{
  return getLong(CREPORT_MOTOR_ENTRY::MOTORID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CREPORT_MOTOR_ENTRY::setMOTORID(long value)
{
  setLong(CREPORT_MOTOR_ENTRY::MOTORID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Motor start time
CDateTime CREPORT_MOTOR_ENTRY::getSTART_TIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CREPORT_MOTOR_ENTRY::START_TIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CREPORT_MOTOR_ENTRY::setSTART_TIME(const CDateTime& value)
{
 setString(CREPORT_MOTOR_ENTRY::START_TIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Motor stop time
CDateTime CREPORT_MOTOR_ENTRY::getSTOP_TIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CREPORT_MOTOR_ENTRY::STOP_TIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CREPORT_MOTOR_ENTRY::setSTOP_TIME(const CDateTime& value)
{
 setString(CREPORT_MOTOR_ENTRY::STOP_TIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Plant number
long CREPORT_MOTOR_ENTRY::getPLANT_NO(long Row)
{
  return getLong(CREPORT_MOTOR_ENTRY::PLANT_NO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CREPORT_MOTOR_ENTRY::setPLANT_NO(long value)
{
  setLong(CREPORT_MOTOR_ENTRY::PLANT_NO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CREPORT_MOTOR_ENTRY::select(long MOTORID, const CDateTime& START_TIME, long PLANT_NO)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CREPORT_MOTOR_ENTRY::MOTORID,MOTORID);
  addWhereClause(CREPORT_MOTOR_ENTRY::START_TIME,START_TIME);
  addWhereClause(CREPORT_MOTOR_ENTRY::PLANT_NO,PLANT_NO);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 
bool CREPORT_MOTOR_ENTRY::updateOrInsert(long MOTORID, const CDateTime& START_TIME, long PLANT_NO,const CDateTime& STOP_TIME,bool Commit, cCBS_ODBC_DBError &Error)
{
  bool result = false;
	try
	{
		result = select(MOTORID,START_TIME,PLANT_NO);

		if (result) 
		{
			setSTOP_TIME(STOP_TIME);

			result = update();
		}
		else 
		{
			setMOTORID(MOTORID);
			setSTART_TIME(START_TIME);
			setPLANT_NO(PLANT_NO);
			setSTOP_TIME(STOP_TIME);

			result = insert();
		}
  

		if (!result)
			Error = getLastError();

		if (Commit)
		{
			if (result)
				commit();
			else
				rollback();
  }
	}
  catch(cCBS_DBExc &e) 
  {
    doOnCBS_DBExc(e,"CREPORT_MOTOR_ENTRY::updateOrInsert");
    rollback();
    result = false;
  }
  catch(...)
  {
    cCBS_StdEventLogFrame *pEventLog = cCBS_StdEventLogFrameController::getInstance()->getpEventLog();
    sEventLogMessage sMessage = cCBS_StdEventLogFrame::initMessage(__FILE__,__LINE__);
    pEventLog->EL_ExceptionCaught(sMessage,"","CREPORT_MOTOR_ENTRY::updateOrInsert()","");
    result = false;
  }
  return result;
}


bool CREPORT_MOTOR_ENTRY::selectByMOTORID(long MOTORID, long PLANT_NO)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CREPORT_MOTOR_ENTRY::MOTORID,MOTORID);
  addWhereClause(CREPORT_MOTOR_ENTRY::PLANT_NO,PLANT_NO);
  m_Statement += getWhereStatement() + " order by START_TIME desc;";

  return CSMC_DBData::select();
}