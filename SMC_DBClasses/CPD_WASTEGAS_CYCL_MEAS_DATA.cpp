//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CPD_WASTEGAS_CYCL_MEAS_DATA.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_WASTEGAS_CYCL_MEAS_DATA::HEATID("HEATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_WASTEGAS_CYCL_MEAS_DATA::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_WASTEGAS_CYCL_MEAS_DATA::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_WASTEGAS_CYCL_MEAS_DATA::REVTIME("REVTIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_WASTEGAS_CYCL_MEAS_DATA::O2_MOMENT("O2_MOMENT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_WASTEGAS_CYCL_MEAS_DATA::N2_MOMENT("N2_MOMENT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_WASTEGAS_CYCL_MEAS_DATA::AR_MOMENT("AR_MOMENT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_WASTEGAS_CYCL_MEAS_DATA::DURSINCEHEATANNOUNCE("DURSINCEHEATANNOUNCE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_WASTEGAS_CYCL_MEAS_DATA::DURSINCESTARTOFHEAT("DURSINCESTARTOFHEAT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_WASTEGAS_CYCL_MEAS_DATA::ELEC_EGYTOT("ELEC_EGYTOT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_WASTEGAS_CYCL_MEAS_DATA::WASTEGAS_CO("WASTEGAS_CO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_WASTEGAS_CYCL_MEAS_DATA::WASTEGAS_CO2("WASTEGAS_CO2");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_WASTEGAS_CYCL_MEAS_DATA::WASTEGAS_O2("WASTEGAS_O2");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_WASTEGAS_CYCL_MEAS_DATA::WASTEGAS_AR("WASTEGAS_AR");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_WASTEGAS_CYCL_MEAS_DATA::WASTEGAS_HE("WASTEGAS_HE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_WASTEGAS_CYCL_MEAS_DATA::WASTEGAS_FLOW("WASTEGAS_FLOW");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_WASTEGAS_CYCL_MEAS_DATA::WASTEGAS_TEMP("WASTEGAS_TEMP");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_WASTEGAS_CYCL_MEAS_DATA::WASTEGAS_N2("WASTEGAS_N2");

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_WASTEGAS_CYCL_MEAS_DATA::CPD_WASTEGAS_CYCL_MEAS_DATA(cCBS_StdConnection* Connection)
:CSMC_DBData("PD_WASTEGAS_CYCL_MEAS_DATA",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_WASTEGAS_CYCL_MEAS_DATA::CPD_WASTEGAS_CYCL_MEAS_DATA(cCBS_Connection* Connection)
:CSMC_DBData("PD_WASTEGAS_CYCL_MEAS_DATA",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_WASTEGAS_CYCL_MEAS_DATA::CPD_WASTEGAS_CYCL_MEAS_DATA()
:CSMC_DBData("PD_WASTEGAS_CYCL_MEAS_DATA")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_WASTEGAS_CYCL_MEAS_DATA::~CPD_WASTEGAS_CYCL_MEAS_DATA()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Internal heat identifier
std::string CPD_WASTEGAS_CYCL_MEAS_DATA::getHEATID(long Row)
{
  return getString(CPD_WASTEGAS_CYCL_MEAS_DATA::HEATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_WASTEGAS_CYCL_MEAS_DATA::setHEATID(const std::string& value)
{
  setString(CPD_WASTEGAS_CYCL_MEAS_DATA::HEATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Treatment identifier
std::string CPD_WASTEGAS_CYCL_MEAS_DATA::getTREATID(long Row)
{
  return getString(CPD_WASTEGAS_CYCL_MEAS_DATA::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_WASTEGAS_CYCL_MEAS_DATA::setTREATID(const std::string& value)
{
  setString(CPD_WASTEGAS_CYCL_MEAS_DATA::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Plant identifier
std::string CPD_WASTEGAS_CYCL_MEAS_DATA::getPLANT(long Row)
{
  return getString(CPD_WASTEGAS_CYCL_MEAS_DATA::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_WASTEGAS_CYCL_MEAS_DATA::setPLANT(const std::string& value)
{
  setString(CPD_WASTEGAS_CYCL_MEAS_DATA::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Date and time of last revision
CDateTime CPD_WASTEGAS_CYCL_MEAS_DATA::getREVTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CPD_WASTEGAS_CYCL_MEAS_DATA::REVTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_WASTEGAS_CYCL_MEAS_DATA::setREVTIME(const CDateTime& value)
{
 setString(CPD_WASTEGAS_CYCL_MEAS_DATA::REVTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Metallurgical Nm3 since start of heat
double CPD_WASTEGAS_CYCL_MEAS_DATA::getO2_MOMENT(long Row)
{
  return getDouble(CPD_WASTEGAS_CYCL_MEAS_DATA::O2_MOMENT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_WASTEGAS_CYCL_MEAS_DATA::setO2_MOMENT(double value)
{
  setDouble(CPD_WASTEGAS_CYCL_MEAS_DATA::O2_MOMENT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Metallurgical Nm3 since start of heat
double CPD_WASTEGAS_CYCL_MEAS_DATA::getN2_MOMENT(long Row)
{
  return getDouble(CPD_WASTEGAS_CYCL_MEAS_DATA::N2_MOMENT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_WASTEGAS_CYCL_MEAS_DATA::setN2_MOMENT(double value)
{
  setDouble(CPD_WASTEGAS_CYCL_MEAS_DATA::N2_MOMENT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Argon consumption
double CPD_WASTEGAS_CYCL_MEAS_DATA::getAR_MOMENT(long Row)
{
  return getDouble(CPD_WASTEGAS_CYCL_MEAS_DATA::AR_MOMENT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_WASTEGAS_CYCL_MEAS_DATA::setAR_MOMENT(double value)
{
  setDouble(CPD_WASTEGAS_CYCL_MEAS_DATA::AR_MOMENT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Duration since heat announcement
double CPD_WASTEGAS_CYCL_MEAS_DATA::getDURSINCEHEATANNOUNCE(long Row)
{
  return getDouble(CPD_WASTEGAS_CYCL_MEAS_DATA::DURSINCEHEATANNOUNCE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_WASTEGAS_CYCL_MEAS_DATA::setDURSINCEHEATANNOUNCE(double value)
{
  setDouble(CPD_WASTEGAS_CYCL_MEAS_DATA::DURSINCEHEATANNOUNCE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Duration since start of heat
double CPD_WASTEGAS_CYCL_MEAS_DATA::getDURSINCESTARTOFHEAT(long Row)
{
  return getDouble(CPD_WASTEGAS_CYCL_MEAS_DATA::DURSINCESTARTOFHEAT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_WASTEGAS_CYCL_MEAS_DATA::setDURSINCESTARTOFHEAT(double value)
{
  setDouble(CPD_WASTEGAS_CYCL_MEAS_DATA::DURSINCESTARTOFHEAT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Total electric energy consumption in case of electric heating, kWh
double CPD_WASTEGAS_CYCL_MEAS_DATA::getELEC_EGYTOT(long Row)
{
  return getDouble(CPD_WASTEGAS_CYCL_MEAS_DATA::ELEC_EGYTOT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_WASTEGAS_CYCL_MEAS_DATA::setELEC_EGYTOT(double value)
{
  setDouble(CPD_WASTEGAS_CYCL_MEAS_DATA::ELEC_EGYTOT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Wast gas CO concentration if Measured
double CPD_WASTEGAS_CYCL_MEAS_DATA::getWASTEGAS_CO(long Row)
{
  return getDouble(CPD_WASTEGAS_CYCL_MEAS_DATA::WASTEGAS_CO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_WASTEGAS_CYCL_MEAS_DATA::setWASTEGAS_CO(double value)
{
  setDouble(CPD_WASTEGAS_CYCL_MEAS_DATA::WASTEGAS_CO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Waste gas CO2 concentration if measured
double CPD_WASTEGAS_CYCL_MEAS_DATA::getWASTEGAS_CO2(long Row)
{
  return getDouble(CPD_WASTEGAS_CYCL_MEAS_DATA::WASTEGAS_CO2, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_WASTEGAS_CYCL_MEAS_DATA::setWASTEGAS_CO2(double value)
{
  setDouble(CPD_WASTEGAS_CYCL_MEAS_DATA::WASTEGAS_CO2, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Waste gas O2 concentration if measured
double CPD_WASTEGAS_CYCL_MEAS_DATA::getWASTEGAS_O2(long Row)
{
  return getDouble(CPD_WASTEGAS_CYCL_MEAS_DATA::WASTEGAS_O2, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_WASTEGAS_CYCL_MEAS_DATA::setWASTEGAS_O2(double value)
{
  setDouble(CPD_WASTEGAS_CYCL_MEAS_DATA::WASTEGAS_O2, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Waste gas Ar concentration if measured
double CPD_WASTEGAS_CYCL_MEAS_DATA::getWASTEGAS_AR(long Row)
{
  return getDouble(CPD_WASTEGAS_CYCL_MEAS_DATA::WASTEGAS_AR, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_WASTEGAS_CYCL_MEAS_DATA::setWASTEGAS_AR(double value)
{
  setDouble(CPD_WASTEGAS_CYCL_MEAS_DATA::WASTEGAS_AR, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Waste Gas He concentration if measured
double CPD_WASTEGAS_CYCL_MEAS_DATA::getWASTEGAS_HE(long Row)
{
  return getDouble(CPD_WASTEGAS_CYCL_MEAS_DATA::WASTEGAS_HE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_WASTEGAS_CYCL_MEAS_DATA::setWASTEGAS_HE(double value)
{
  setDouble(CPD_WASTEGAS_CYCL_MEAS_DATA::WASTEGAS_HE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Waste Gas flow
double CPD_WASTEGAS_CYCL_MEAS_DATA::getWASTEGAS_FLOW(long Row)
{
  return getDouble(CPD_WASTEGAS_CYCL_MEAS_DATA::WASTEGAS_FLOW, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_WASTEGAS_CYCL_MEAS_DATA::setWASTEGAS_FLOW(double value)
{
  setDouble(CPD_WASTEGAS_CYCL_MEAS_DATA::WASTEGAS_FLOW, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Waste gas temperature if measured
double CPD_WASTEGAS_CYCL_MEAS_DATA::getWASTEGAS_TEMP(long Row)
{
  return getDouble(CPD_WASTEGAS_CYCL_MEAS_DATA::WASTEGAS_TEMP, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_WASTEGAS_CYCL_MEAS_DATA::setWASTEGAS_TEMP(double value)
{
  setDouble(CPD_WASTEGAS_CYCL_MEAS_DATA::WASTEGAS_TEMP, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Waste gas N2 concentration if measured
double CPD_WASTEGAS_CYCL_MEAS_DATA::getWASTEGAS_N2(long Row)
{
  return getDouble(CPD_WASTEGAS_CYCL_MEAS_DATA::WASTEGAS_N2, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_WASTEGAS_CYCL_MEAS_DATA::setWASTEGAS_N2(double value)
{
  setDouble(CPD_WASTEGAS_CYCL_MEAS_DATA::WASTEGAS_N2, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CPD_WASTEGAS_CYCL_MEAS_DATA::select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const CDateTime& REVTIME)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPD_WASTEGAS_CYCL_MEAS_DATA::HEATID,HEATID);
  addWhereClause(CPD_WASTEGAS_CYCL_MEAS_DATA::TREATID,TREATID);
  addWhereClause(CPD_WASTEGAS_CYCL_MEAS_DATA::PLANT,PLANT);
  addWhereClause(CPD_WASTEGAS_CYCL_MEAS_DATA::REVTIME,REVTIME);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 


