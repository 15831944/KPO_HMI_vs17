//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CGC_PLANTGROUP.h"
#include "CGT_PARAM_MATRIX.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_PARAM_MATRIX::UNITGROUPNO("UNITGROUPNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_PARAM_MATRIX::PNAME("PNAME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_PARAM_MATRIX::PRACNO("PRACNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_PARAM_MATRIX::TYPE("TYPE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_PARAM_MATRIX::KEY1("KEY1");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_PARAM_MATRIX::KEY2("KEY2");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_PARAM_MATRIX::VALUE("VALUE");

//##DBClassCodeUtility ! DO NOT EDIT !
CGT_PARAM_MATRIX::CGT_PARAM_MATRIX(cCBS_StdConnection* Connection)
:CSMC_DBData("GT_PARAM_MATRIX",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGT_PARAM_MATRIX::CGT_PARAM_MATRIX(cCBS_Connection* Connection)
:CSMC_DBData("GT_PARAM_MATRIX",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGT_PARAM_MATRIX::CGT_PARAM_MATRIX()
:CSMC_DBData("GT_PARAM_MATRIX")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGT_PARAM_MATRIX::~CGT_PARAM_MATRIX()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Unit group number, see GC_PLANT_GROUP
long CGT_PARAM_MATRIX::getUNITGROUPNO(long Row)
{
  return getLong(CGT_PARAM_MATRIX::UNITGROUPNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_PARAM_MATRIX::setUNITGROUPNO(long value)
{
  setLong(CGT_PARAM_MATRIX::UNITGROUPNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Parameter name
std::string CGT_PARAM_MATRIX::getPNAME(long Row)
{
  return getString(CGT_PARAM_MATRIX::PNAME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_PARAM_MATRIX::setPNAME(const std::string& value)
{
  setString(CGT_PARAM_MATRIX::PNAME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Production Practice Number
long CGT_PARAM_MATRIX::getPRACNO(long Row)
{
  return getLong(CGT_PARAM_MATRIX::PRACNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_PARAM_MATRIX::setPRACNO(long value)
{
  setLong(CGT_PARAM_MATRIX::PRACNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Type indicator (1 to 9)
long CGT_PARAM_MATRIX::getTYPE(long Row)
{
  return getLong(CGT_PARAM_MATRIX::TYPE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_PARAM_MATRIX::setTYPE(long value)
{
  setLong(CGT_PARAM_MATRIX::TYPE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##First key
std::string CGT_PARAM_MATRIX::getKEY1(long Row)
{
  return getString(CGT_PARAM_MATRIX::KEY1, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_PARAM_MATRIX::setKEY1(const std::string& value)
{
  setString(CGT_PARAM_MATRIX::KEY1, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Second key, not used for single, keyed parameter
std::string CGT_PARAM_MATRIX::getKEY2(long Row)
{
  return getString(CGT_PARAM_MATRIX::KEY2, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_PARAM_MATRIX::setKEY2(const std::string& value)
{
  setString(CGT_PARAM_MATRIX::KEY2, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Value
std::string CGT_PARAM_MATRIX::getVALUE(long Row)
{
  return getString(CGT_PARAM_MATRIX::VALUE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_PARAM_MATRIX::setVALUE(const std::string& value)
{
  setString(CGT_PARAM_MATRIX::VALUE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CGT_PARAM_MATRIX::select(long UNITGROUPNO, const std::string& PNAME, long PRACNO, long TYPE, const std::string& KEY1, const std::string& KEY2)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CGT_PARAM_MATRIX::UNITGROUPNO,UNITGROUPNO);
  addWhereClause(CGT_PARAM_MATRIX::PNAME,PNAME);
  addWhereClause(CGT_PARAM_MATRIX::PRACNO,PRACNO);
  addWhereClause(CGT_PARAM_MATRIX::TYPE,TYPE);
  addWhereClause(CGT_PARAM_MATRIX::KEY1,KEY1);
  addWhereClause(CGT_PARAM_MATRIX::KEY2,KEY2);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CGT_PARAM_MATRIX::selectByPlant(const std::string& PLANT,long PLANTNO, const std::string& PNAME, long PRACNO, long TYPE, const std::string& KEY1, const std::string& KEY2)
{ 
  bool RetValue = false;

  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CGT_PARAM_MATRIX::PNAME,PNAME);
  addWhereClause(CGT_PARAM_MATRIX::PRACNO,PRACNO);
  addWhereClause(CGT_PARAM_MATRIX::TYPE,TYPE);
  addWhereClause(CGT_PARAM_MATRIX::KEY1,KEY1);
  addWhereClause(CGT_PARAM_MATRIX::KEY2,KEY2);

  // find unitgroup numbers 
  std::vector<long> UnitGroupList = getUnitGroupList(PLANT,PLANTNO);

  // building where clause  like ( UNITGROUPNO IN ( 0, 10 , 11 ) )
  addWhereClause(CGT_PARAM_MATRIX::UNITGROUPNO,UnitGroupList,"IN");

  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

std::vector<long> CGT_PARAM_MATRIX::getUnitGroupList(const std::string& Plant,long PlantNo)
{
  CGC_PLANTGROUP GC_PLANTGROUP(m_pCBS_StdConnection);

  return GC_PLANTGROUP.getUnitGroupList(Plant,PlantNo);
}


