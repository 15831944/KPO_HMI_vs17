//## Copyright (C) 2010 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 

#if defined (_MSC_VER) && (_MSC_VER >= 1000)
#pragma once
#endif
#ifndef _INC_CPDE_HEAT_DATA_BURN_INCLUDED
#define _INC_CPDE_HEAT_DATA_BURN_INCLUDED

#include "CSMC_DBData.h"

class CPDE_HEAT_DATA_BURN
: public CSMC_DBData
{

public:
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string HEATID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TREATID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PLANT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string BURNERNAME;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string STARTTIME;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string ENDTIME;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string O2_FLOW;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string O2_CONS;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string GAS_FLOW;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string GAS_CONS;

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPDE_HEAT_DATA_BURN(cCBS_StdConnection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPDE_HEAT_DATA_BURN(cCBS_Connection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPDE_HEAT_DATA_BURN();

  //##DBClassCodeUtility ! DO NOT EDIT !
  ~CPDE_HEAT_DATA_BURN();

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getHEATID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setHEATID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getTREATID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTREATID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getPLANT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPLANT(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getBURNERNAME(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setBURNERNAME(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CDateTime getSTARTTIME(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSTARTTIME(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CDateTime getENDTIME(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setENDTIME(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getO2_FLOW(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setO2_FLOW(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getO2_CONS(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setO2_CONS(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getGAS_FLOW(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setGAS_FLOW(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getGAS_CONS(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setGAS_CONS(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  bool select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const std::string& BURNERNAME, const CDateTime& STARTTIME);

  //## ----------------------------------END-GENERATED-CODE--------------------- 

  //## ----------------------------------YOUR-CODE------------------------------ 

  bool selectActual(const string& HEATID, const string& TREATID, const string& PLANT, const string& BURNERNAME);

  bool selectBurnerConsDataByHeat(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT);

  bool selectNotStopBurner(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT,const std::string& BURNERNAME);

};

#endif /* _INC_CPDE_HEAT_DATA_BURN_INCLUDED */
