//## Copyright (C) 2010 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CGT_MAT_FEED.h"
#include "CHD_MAT_FEED.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_MAT_FEED::HEATID("HEATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_MAT_FEED::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_MAT_FEED::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_MAT_FEED::PRACNO("PRACNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_MAT_FEED::TREATMODENO("TREATMODENO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_MAT_FEED::PRACPHASE("PRACPHASE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_MAT_FEED::LIQ_ADD_AMOUNT("LIQ_ADD_AMOUNT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_MAT_FEED::MAT_CODE("MAT_CODE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_MAT_FEED::STEPNO("STEPNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_MAT_FEED::FEEDINGRATE_ABS("FEEDINGRATE_ABS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_MAT_FEED::FEEDINGRATE_REL("FEEDINGRATE_REL");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_MAT_FEED::FEEDINGRATE_INPUT("FEEDINGRATE_INPUT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_MAT_FEED::DISPLAY_ORDER("DISPLAY_ORDER");

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_MAT_FEED::CHD_MAT_FEED(cCBS_StdConnection* Connection)
:CSMC_DBData("HD_MAT_FEED",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_MAT_FEED::CHD_MAT_FEED(cCBS_Connection* Connection)
:CSMC_DBData("HD_MAT_FEED",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_MAT_FEED::CHD_MAT_FEED()
:CSMC_DBData("HD_MAT_FEED")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_MAT_FEED::~CHD_MAT_FEED()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Internal heat identifier
std::string CHD_MAT_FEED::getHEATID(long Row)
{
  return getString(CHD_MAT_FEED::HEATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_MAT_FEED::setHEATID(const std::string& value)
{
  setString(CHD_MAT_FEED::HEATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Treatment identifier
std::string CHD_MAT_FEED::getTREATID(long Row)
{
  return getString(CHD_MAT_FEED::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_MAT_FEED::setTREATID(const std::string& value)
{
  setString(CHD_MAT_FEED::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Plant identifier
std::string CHD_MAT_FEED::getPLANT(long Row)
{
  return getString(CHD_MAT_FEED::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_MAT_FEED::setPLANT(const std::string& value)
{
  setString(CHD_MAT_FEED::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Production Practice Number
long CHD_MAT_FEED::getPRACNO(long Row)
{
  return getLong(CHD_MAT_FEED::PRACNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_MAT_FEED::setPRACNO(long value)
{
  setLong(CHD_MAT_FEED::PRACNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Treatment mode number
long CHD_MAT_FEED::getTREATMODENO(long Row)
{
  return getLong(CHD_MAT_FEED::TREATMODENO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_MAT_FEED::setTREATMODENO(long value)
{
  setLong(CHD_MAT_FEED::TREATMODENO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Phases are e.g. Basket, LiqAdd for EAF
std::string CHD_MAT_FEED::getPRACPHASE(long Row)
{
  return getString(CHD_MAT_FEED::PRACPHASE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_MAT_FEED::setPRACPHASE(const std::string& value)
{
  setString(CHD_MAT_FEED::PRACPHASE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Amount of  liquid addition relative to aim steel weight into EAF/Conarc., AOD, LF... = 0. Unit: % without precision
long CHD_MAT_FEED::getLIQ_ADD_AMOUNT(long Row)
{
  return getLong(CHD_MAT_FEED::LIQ_ADD_AMOUNT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_MAT_FEED::setLIQ_ADD_AMOUNT(long value)
{
  setLong(CHD_MAT_FEED::LIQ_ADD_AMOUNT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Material code
std::string CHD_MAT_FEED::getMAT_CODE(long Row)
{
  return getString(CHD_MAT_FEED::MAT_CODE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_MAT_FEED::setMAT_CODE(const std::string& value)
{
  setString(CHD_MAT_FEED::MAT_CODE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Energy step
long CHD_MAT_FEED::getSTEPNO(long Row)
{
  return getLong(CHD_MAT_FEED::STEPNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_MAT_FEED::setSTEPNO(long value)
{
  setLong(CHD_MAT_FEED::STEPNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Absolute feeding rate in kg/min
double CHD_MAT_FEED::getFEEDINGRATE_ABS(long Row)
{
  return getDouble(CHD_MAT_FEED::FEEDINGRATE_ABS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_MAT_FEED::setFEEDINGRATE_ABS(double value)
{
  setDouble(CHD_MAT_FEED::FEEDINGRATE_ABS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Relative feeding rate in kg/minMW
double CHD_MAT_FEED::getFEEDINGRATE_REL(long Row)
{
  return getDouble(CHD_MAT_FEED::FEEDINGRATE_REL, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_MAT_FEED::setFEEDINGRATE_REL(double value)
{
  setDouble(CHD_MAT_FEED::FEEDINGRATE_REL, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Feeding rate can be entered absolute or relative. The corresponding other value is calculated., 1- Indicates that relative feeding rate was calculated from absolute, 2- Indicates that absolute feeding rate was calculated from relative
long CHD_MAT_FEED::getFEEDINGRATE_INPUT(long Row)
{
  return getLong(CHD_MAT_FEED::FEEDINGRATE_INPUT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_MAT_FEED::setFEEDINGRATE_INPUT(long value)
{
  setLong(CHD_MAT_FEED::FEEDINGRATE_INPUT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Display order of feeding materials for HMI
long CHD_MAT_FEED::getDISPLAY_ORDER(long Row)
{
  return getLong(CHD_MAT_FEED::DISPLAY_ORDER, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_MAT_FEED::setDISPLAY_ORDER(long value)
{
  setLong(CHD_MAT_FEED::DISPLAY_ORDER, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CHD_MAT_FEED::select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long PRACNO, long TREATMODENO, const std::string& PRACPHASE, long LIQ_ADD_AMOUNT, const std::string& MAT_CODE, long STEPNO)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CHD_MAT_FEED::HEATID,HEATID);
  addWhereClause(CHD_MAT_FEED::TREATID,TREATID);
  addWhereClause(CHD_MAT_FEED::PLANT,PLANT);
  addWhereClause(CHD_MAT_FEED::PRACNO,PRACNO);
  addWhereClause(CHD_MAT_FEED::TREATMODENO,TREATMODENO);
  addWhereClause(CHD_MAT_FEED::PRACPHASE,PRACPHASE);
  addWhereClause(CHD_MAT_FEED::LIQ_ADD_AMOUNT,LIQ_ADD_AMOUNT);
  addWhereClause(CHD_MAT_FEED::MAT_CODE,MAT_CODE);
  addWhereClause(CHD_MAT_FEED::STEPNO,STEPNO);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

//@SANKAR added following
bool CHD_MAT_FEED::selectOrdered(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long PRACNO, long TREATMODENO, const std::string& PRACPHASE, long LIQ_ADD_AMOUNT, const std::string& MAT_CODE, long STEPNO)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CHD_MAT_FEED::HEATID,HEATID);
  addWhereClause(CHD_MAT_FEED::TREATID,TREATID);
  addWhereClause(CHD_MAT_FEED::PLANT,PLANT);
  addWhereClause(CHD_MAT_FEED::PRACNO,PRACNO);
  addWhereClause(CHD_MAT_FEED::TREATMODENO,TREATMODENO);
  addWhereClause(CHD_MAT_FEED::PRACPHASE,PRACPHASE);
  addWhereClause(CHD_MAT_FEED::LIQ_ADD_AMOUNT,LIQ_ADD_AMOUNT);
  addWhereClause(CHD_MAT_FEED::MAT_CODE,MAT_CODE);
  addWhereClause(CHD_MAT_FEED::STEPNO,STEPNO);

  m_Statement += getWhereStatement() +" order by HEATID,TREATID,PLANT,PRACNO,TREATMODENO,PRACPHASE,STEPNO;";

  return CSMC_DBData::select();
}

bool CHD_MAT_FEED::copy(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long PLANTNO, long PRACNO, long TREATMODENO, long LIQ_ADD_AMOUNT, bool Commit, cCBS_ODBC_DBError &Error)
{
	bool result = true;
	//some data found -> delete them
	if (exists(HEATID, TREATID, PLANT, PRACNO))
	{
		result = deleteRows();
		if (!result)
      setLastError(std::string("ERROR_DELETE_DATA"), 0, getActStatement());
	}

  // preparing setting for source table
  CGT_MAT_FEED GT_MAT_FEED(m_pCBS_StdConnection);
  GT_MAT_FEED.addWhereClause(CGT_MAT_FEED::PLANT,PLANT);
  GT_MAT_FEED.addWhereClause(CGT_MAT_FEED::PLANTNO,PLANTNO);
  GT_MAT_FEED.addWhereClause(CGT_MAT_FEED::PRACNO,PRACNO);
  GT_MAT_FEED.addWhereClause(CGT_MAT_FEED::TREATMODENO,TREATMODENO);
  GT_MAT_FEED.addWhereClause(CGT_MAT_FEED::LIQ_ADD_AMOUNT,LIQ_ADD_AMOUNT, "<=");

  // preparing setting for aim table
  setHEATID (HEATID);
  setTREATID(TREATID);
  setPLANT  (PLANT);

  result = result && copyByInsert(&GT_MAT_FEED);

	if (!result)
		Error = getLastError();

	if(Commit)
  {
		if (result)
			commit();
		else
			rollback();
  }

	return result;
}

bool CHD_MAT_FEED::exists(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT,long PRACNO)
{
	cleanWhereStatement();

	m_Statement = "Select HEATID from " + m_TableName;

	addWhereClause(CHD_MAT_FEED::HEATID,HEATID);
	addWhereClause(CHD_MAT_FEED::TREATID,TREATID);
	addWhereClause(CHD_MAT_FEED::PLANT,PLANT);
  addWhereClause(CHD_MAT_FEED::PRACNO,PRACNO);
   
  std::string sWhereStatement = getWhereStatement();
  //to avoid the exception like 'Select HEATID from PP_HEAT AND ROWNUM = 1 '
  if(sWhereStatement.length() > 0 ) 
  {
    // do not use ROWNUM in "addWhereClause", ROWNUM is not a table column and where statement will be used for deletion at "deleteRows"
    m_Statement += sWhereStatement + " AND ROWNUM = 1 ;";
  }
  else
  {
    return false;
  }

	return CSMC_DBData::select();
}


