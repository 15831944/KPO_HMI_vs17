//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CPD_HEAT_DATA_CUST.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_HEAT_DATA_CUST::HEATID("HEATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_HEAT_DATA_CUST::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_HEAT_DATA_CUST::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_HEAT_DATA_CUST::REVTIME("REVTIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_HEAT_DATA_CUST::FREEBORD("FREEBORD");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_HEAT_DATA_CUST::LF_COOLING_WATER("LF_COOLING_WATER");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_HEAT_DATA_CUST::LF_PLUG1_STATUS("LF_PLUG1_STATUS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_HEAT_DATA_CUST::LF_PLUG2_STATUS("LF_PLUG2_STATUS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_HEAT_DATA_CUST::LF_OPERATOR("LF_OPERATOR");

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_HEAT_DATA_CUST::CPD_HEAT_DATA_CUST(cCBS_StdConnection* Connection)
:CSMC_DBData("PD_HEAT_DATA_CUST",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_HEAT_DATA_CUST::CPD_HEAT_DATA_CUST(cCBS_Connection* Connection)
:CSMC_DBData("PD_HEAT_DATA_CUST",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_HEAT_DATA_CUST::CPD_HEAT_DATA_CUST()
:CSMC_DBData("PD_HEAT_DATA_CUST")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_HEAT_DATA_CUST::~CPD_HEAT_DATA_CUST()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPD_HEAT_DATA_CUST::getHEATID(long Row)
{
  return getString(CPD_HEAT_DATA_CUST::HEATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_HEAT_DATA_CUST::setHEATID(const std::string& value)
{
  setString(CPD_HEAT_DATA_CUST::HEATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPD_HEAT_DATA_CUST::getTREATID(long Row)
{
  return getString(CPD_HEAT_DATA_CUST::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_HEAT_DATA_CUST::setTREATID(const std::string& value)
{
  setString(CPD_HEAT_DATA_CUST::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPD_HEAT_DATA_CUST::getPLANT(long Row)
{
  return getString(CPD_HEAT_DATA_CUST::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_HEAT_DATA_CUST::setPLANT(const std::string& value)
{
  setString(CPD_HEAT_DATA_CUST::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Date and time of last revision
CDateTime CPD_HEAT_DATA_CUST::getREVTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CPD_HEAT_DATA_CUST::REVTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_HEAT_DATA_CUST::setREVTIME(const CDateTime& value)
{
 setString(CPD_HEAT_DATA_CUST::REVTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Freeboard of ladle
double CPD_HEAT_DATA_CUST::getFREEBORD(long Row)
{
  return getDouble(CPD_HEAT_DATA_CUST::FREEBORD, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_HEAT_DATA_CUST::setFREEBORD(double value)
{
  setDouble(CPD_HEAT_DATA_CUST::FREEBORD, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Total cooling water in m3
double CPD_HEAT_DATA_CUST::getLF_COOLING_WATER(long Row)
{
  return getDouble(CPD_HEAT_DATA_CUST::LF_COOLING_WATER, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_HEAT_DATA_CUST::setLF_COOLING_WATER(double value)
{
  setDouble(CPD_HEAT_DATA_CUST::LF_COOLING_WATER, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Plug status as from confirmation
std::string CPD_HEAT_DATA_CUST::getLF_PLUG1_STATUS(long Row)
{
  return getString(CPD_HEAT_DATA_CUST::LF_PLUG1_STATUS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_HEAT_DATA_CUST::setLF_PLUG1_STATUS(const std::string& value)
{
  setString(CPD_HEAT_DATA_CUST::LF_PLUG1_STATUS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Plug status as from confirmation
std::string CPD_HEAT_DATA_CUST::getLF_PLUG2_STATUS(long Row)
{
  return getString(CPD_HEAT_DATA_CUST::LF_PLUG2_STATUS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_HEAT_DATA_CUST::setLF_PLUG2_STATUS(const std::string& value)
{
  setString(CPD_HEAT_DATA_CUST::LF_PLUG2_STATUS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Name of operator at LF
std::string CPD_HEAT_DATA_CUST::getLF_OPERATOR(long Row)
{
  return getString(CPD_HEAT_DATA_CUST::LF_OPERATOR, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_HEAT_DATA_CUST::setLF_OPERATOR(const std::string& value)
{
  setString(CPD_HEAT_DATA_CUST::LF_OPERATOR, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CPD_HEAT_DATA_CUST::select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPD_HEAT_DATA_CUST::HEATID,HEATID);
  addWhereClause(CPD_HEAT_DATA_CUST::TREATID,TREATID);
  addWhereClause(CPD_HEAT_DATA_CUST::PLANT,PLANT);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CPD_HEAT_DATA_CUST::selectLastRecord(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const CDateTime& REVTIME)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPD_HEAT_DATA_CUST::HEATID,HEATID);
  addWhereClause(CPD_HEAT_DATA_CUST::TREATID,TREATID);
  addWhereClause(CPD_HEAT_DATA_CUST::PLANT,PLANT);
  addWhereClause(CPD_HEAT_DATA_CUST::REVTIME,REVTIME);
  m_Statement += getWhereStatement() + " order by REVTIME desc ;";

  return CSMC_DBData::select();
}

bool CPD_HEAT_DATA_CUST::doAnnouncement(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, bool Commit, cCBS_ODBC_DBError &Error)
{
  bool result = true;

  CDateTime revtime;
  if (!select(HEATID, TREATID, PLANT))
  {
    setHEATID(HEATID);
    setTREATID(TREATID);
    setPLANT(PLANT);
    setREVTIME(revtime);
    result = insert();
  }
  else
  {
    setREVTIME(revtime);
    result = update();
  }

  if (!result)
    Error = getLastError();

  if (Commit)
  {
    if (result)
      commit();
    else
      rollback();
  }
  return result;
}


