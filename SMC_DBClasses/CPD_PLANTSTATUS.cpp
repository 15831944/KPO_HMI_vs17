//## Copyright (C) 2010 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CDataConversion.h"
#include "CPP_ORDER.h"
#include "CPP_HEAT.h"
#include "CPP_HEAT_PLANT.h"
#include "CGC_HEAT_STATUS.h"
#include "CPD_HEAT_DATA.h"
#include "CPD_SAMPLE_REF.h"
#include "CGC_LADLE_DEF.h"
#include "DEF_GC_HEAT_STATUS.h"
#include "DEF_GC_MEASUREMENT_NAME.h"
#include "CPD_PLANTSTATUS_PLANT.h"
#include "CPD_LADLE.h"
#include "CPD_PLANTSTATUS.h"
#include "CPP_HM.h"

//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_PLANTSTATUS::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_PLANTSTATUS::PLANTNO("PLANTNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_PLANTSTATUS::TREATMENTPOSITION("TREATMENTPOSITION");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_PLANTSTATUS::SAMPLE_COUNTER("SAMPLE_COUNTER");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_PLANTSTATUS::HEATID("HEATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_PLANTSTATUS::HM_ID("HM_ID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_PLANTSTATUS::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_PLANTSTATUS::REVTIME("REVTIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_PLANTSTATUS::PRODORDERID("PRODORDERID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_PLANTSTATUS::STEELGRADECODE("STEELGRADECODE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_PLANTSTATUS::HEATSTATUSNO("HEATSTATUSNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_PLANTSTATUS::LADLETYPE("LADLETYPE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_PLANTSTATUS::LADLENO("LADLENO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_PLANTSTATUS::TREATMENTSTART("TREATMENTSTART");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_PLANTSTATUS::EXPTREATMENTEND("EXPTREATMENTEND");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_PLANTSTATUS::TEMP("TEMP");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_PLANTSTATUS::TEMP_SAMPLETIME("TEMP_SAMPLETIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_PLANTSTATUS::LADLETAREWEIGHT("LADLETAREWEIGHT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_PLANTSTATUS::STEELWEIGHT("STEELWEIGHT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_PLANTSTATUS::SLAGWEIGHT("SLAGWEIGHT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_PLANTSTATUS::HEATID_EXT_CUST("HEATID_EXT_CUST");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_PLANTSTATUS::TREATID_EXT_CUST("TREATID_EXT_CUST");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_PLANTSTATUS::HM_ID_EXT_CUST("HM_ID_EXT_CUST");

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_PLANTSTATUS::CPD_PLANTSTATUS(cCBS_StdConnection* Connection)
:CSMC_DBData("PD_PLANTSTATUS",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_PLANTSTATUS::CPD_PLANTSTATUS(cCBS_Connection* Connection)
:CSMC_DBData("PD_PLANTSTATUS",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_PLANTSTATUS::CPD_PLANTSTATUS()
:CSMC_DBData("PD_PLANTSTATUS")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_PLANTSTATUS::~CPD_PLANTSTATUS()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Plant identifier
std::string CPD_PLANTSTATUS::getPLANT(long Row)
{
  return getString(CPD_PLANTSTATUS::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_PLANTSTATUS::setPLANT(const std::string& value)
{
  setString(CPD_PLANTSTATUS::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Plant number
long CPD_PLANTSTATUS::getPLANTNO(long Row)
{
  return getLong(CPD_PLANTSTATUS::PLANTNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_PLANTSTATUS::setPLANTNO(long value)
{
  setLong(CPD_PLANTSTATUS::PLANTNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Identification of treatment position to handle heats at Twin-LF (1-> car 1, 2-> car 2) and melting units with tapping area (1-> furnace, 2-> TapLadle)
long CPD_PLANTSTATUS::getTREATMENTPOSITION(long Row)
{
  return getLong(CPD_PLANTSTATUS::TREATMENTPOSITION, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_PLANTSTATUS::setTREATMENTPOSITION(long value)
{
  setLong(CPD_PLANTSTATUS::TREATMENTPOSITION, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Unique sample counter
long CPD_PLANTSTATUS::getSAMPLE_COUNTER(long Row)
{
  return getLong(CPD_PLANTSTATUS::SAMPLE_COUNTER, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_PLANTSTATUS::setSAMPLE_COUNTER(long value)
{
  setLong(CPD_PLANTSTATUS::SAMPLE_COUNTER, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Internal heat identifier
std::string CPD_PLANTSTATUS::getHEATID(long Row)
{
  return getString(CPD_PLANTSTATUS::HEATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_PLANTSTATUS::setHEATID(const std::string& value)
{
  setString(CPD_PLANTSTATUS::HEATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Internal identifier for Desulphurisation station
std::string CPD_PLANTSTATUS::getHM_ID(long Row)
{
  return getString(CPD_PLANTSTATUS::HM_ID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_PLANTSTATUS::setHM_ID(const std::string& value)
{
  setString(CPD_PLANTSTATUS::HM_ID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Treatment identifier
std::string CPD_PLANTSTATUS::getTREATID(long Row)
{
  return getString(CPD_PLANTSTATUS::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_PLANTSTATUS::setTREATID(const std::string& value)
{
  setString(CPD_PLANTSTATUS::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Date and time of last revision
CDateTime CPD_PLANTSTATUS::getREVTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CPD_PLANTSTATUS::REVTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_PLANTSTATUS::setREVTIME(const CDateTime& value)
{
 setString(CPD_PLANTSTATUS::REVTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Production oder identification
std::string CPD_PLANTSTATUS::getPRODORDERID(long Row)
{
  return getString(CPD_PLANTSTATUS::PRODORDERID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_PLANTSTATUS::setPRODORDERID(const std::string& value)
{
  setString(CPD_PLANTSTATUS::PRODORDERID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Steel grade code
std::string CPD_PLANTSTATUS::getSTEELGRADECODE(long Row)
{
  return getString(CPD_PLANTSTATUS::STEELGRADECODE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_PLANTSTATUS::setSTEELGRADECODE(const std::string& value)
{
  setString(CPD_PLANTSTATUS::STEELGRADECODE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPD_PLANTSTATUS::getHEATSTATUSNO(long Row)
{
  return getLong(CPD_PLANTSTATUS::HEATSTATUSNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_PLANTSTATUS::setHEATSTATUSNO(long value)
{
  setLong(CPD_PLANTSTATUS::HEATSTATUSNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##e.g. Hot Metal -> H, Teeming -> T
std::string CPD_PLANTSTATUS::getLADLETYPE(long Row)
{
  return getString(CPD_PLANTSTATUS::LADLETYPE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_PLANTSTATUS::setLADLETYPE(const std::string& value)
{
  setString(CPD_PLANTSTATUS::LADLETYPE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Unique ladle number
long CPD_PLANTSTATUS::getLADLENO(long Row)
{
  return getLong(CPD_PLANTSTATUS::LADLENO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_PLANTSTATUS::setLADLENO(long value)
{
  setLong(CPD_PLANTSTATUS::LADLENO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Treatment start time
CDateTime CPD_PLANTSTATUS::getTREATMENTSTART(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CPD_PLANTSTATUS::TREATMENTSTART, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_PLANTSTATUS::setTREATMENTSTART(const CDateTime& value)
{
 setString(CPD_PLANTSTATUS::TREATMENTSTART, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CPD_PLANTSTATUS::getEXPTREATMENTEND(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CPD_PLANTSTATUS::EXPTREATMENTEND, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_PLANTSTATUS::setEXPTREATMENTEND(const CDateTime& value)
{
 setString(CPD_PLANTSTATUS::EXPTREATMENTEND, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPD_PLANTSTATUS::getTEMP(long Row)
{
  return getDouble(CPD_PLANTSTATUS::TEMP, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_PLANTSTATUS::setTEMP(double value)
{
  setDouble(CPD_PLANTSTATUS::TEMP, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CPD_PLANTSTATUS::getTEMP_SAMPLETIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CPD_PLANTSTATUS::TEMP_SAMPLETIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_PLANTSTATUS::setTEMP_SAMPLETIME(const CDateTime& value)
{
 setString(CPD_PLANTSTATUS::TEMP_SAMPLETIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPD_PLANTSTATUS::getLADLETAREWEIGHT(long Row)
{
  return getDouble(CPD_PLANTSTATUS::LADLETAREWEIGHT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_PLANTSTATUS::setLADLETAREWEIGHT(double value)
{
  setDouble(CPD_PLANTSTATUS::LADLETAREWEIGHT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Steel weight in kg
double CPD_PLANTSTATUS::getSTEELWEIGHT(long Row)
{
  return getDouble(CPD_PLANTSTATUS::STEELWEIGHT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_PLANTSTATUS::setSTEELWEIGHT(double value)
{
  setDouble(CPD_PLANTSTATUS::STEELWEIGHT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Slag weight in kg
double CPD_PLANTSTATUS::getSLAGWEIGHT(long Row)
{
  return getDouble(CPD_PLANTSTATUS::SLAGWEIGHT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_PLANTSTATUS::setSLAGWEIGHT(double value)
{
  setDouble(CPD_PLANTSTATUS::SLAGWEIGHT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Customer HEATID, which might be received from external plant unit and which might not be known so far at that plant unit (no internal HeatID available)
std::string CPD_PLANTSTATUS::getHEATID_EXT_CUST(long Row)
{
  return getString(CPD_PLANTSTATUS::HEATID_EXT_CUST, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_PLANTSTATUS::setHEATID_EXT_CUST(const std::string& value)
{
  setString(CPD_PLANTSTATUS::HEATID_EXT_CUST, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Customer TREATID, which might be received from external plant unit and which might not be known so far at that plant unit 
std::string CPD_PLANTSTATUS::getTREATID_EXT_CUST(long Row)
{
  return getString(CPD_PLANTSTATUS::TREATID_EXT_CUST, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_PLANTSTATUS::setTREATID_EXT_CUST(const std::string& value)
{
  setString(CPD_PLANTSTATUS::TREATID_EXT_CUST, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Customer HM_ID, which might be received from external plant unit and which might not be known so far at that plant unit 
std::string CPD_PLANTSTATUS::getHM_ID_EXT_CUST(long Row)
{
  return getString(CPD_PLANTSTATUS::HM_ID_EXT_CUST, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_PLANTSTATUS::setHM_ID_EXT_CUST(const std::string& value)
{
  setString(CPD_PLANTSTATUS::HM_ID_EXT_CUST, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CPD_PLANTSTATUS::select(const std::string& PLANT, long PLANTNO, long TREATMENTPOSITION)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPD_PLANTSTATUS::PLANT,PLANT);
  addWhereClause(CPD_PLANTSTATUS::PLANTNO,PLANTNO);
  addWhereClause(CPD_PLANTSTATUS::TREATMENTPOSITION,TREATMENTPOSITION);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CPD_PLANTSTATUS::selectByHeatIdOnPlant(const std::string& Plant, long PlantNo, const std::string& HeatID )
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPD_PLANTSTATUS::PLANT,Plant);
  addWhereClause(CPD_PLANTSTATUS::PLANTNO,PlantNo);
  addWhereClause(CPD_PLANTSTATUS::HEATID,HeatID);

  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

bool CPD_PLANTSTATUS::selectByProdOrder(const std::string& OrderID )
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPD_PLANTSTATUS::PRODORDERID,OrderID);

  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

bool CPD_PLANTSTATUS::selectByREVTIME(const CDateTime& REVTIME, const std::string& Operator)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPD_PLANTSTATUS::REVTIME, REVTIME, Operator );

  m_Statement += getWhereStatement() + " order by REVTIME desc;";

  return CSMC_DBData::select();
}

bool CPD_PLANTSTATUS::changeAimData(const std::string& Plant, long PlantNo, const std::string& HeatID, const std::string& TreatID, const std::string& Steelgradecode, long TreatmentPosition, const CDateTime& Exptreatmentend, bool Commit, cCBS_ODBC_DBError &Error)
{
  //changer ladle on the position of recieved heat
  bool result = true;

  if ( selectByHeatIdOnPlant(Plant, PlantNo, HeatID) )
  {
    if(HeatID != CSMC_DBData::unspecString)
      setHEATID(HeatID);
    if(TreatID != CSMC_DBData::unspecString)
      setTREATID(TreatID);
    if(Steelgradecode != CSMC_DBData::unspecString)
      setSTEELGRADECODE(Steelgradecode);
    if(Exptreatmentend != CSMC_DBData::unspecDate)
      setEXPTREATMENTEND(Exptreatmentend);

    setREVTIME(CDateTime());

    result = update();

    if (!result)
      Error = getLastError();

    if (Commit)
    {
      if (result)
        commit();
      else
        rollback();
    }
  }
  else
  {
    setLastError(std::string("NO_DATA_FOUND"), 0, getActStatement());
  }

  return result;
}

bool CPD_PLANTSTATUS::changeLadleData(const std::string& Plant, long PlantNo, long TreatPos, const std::string& HeatId, const std::string& TreatId, long LADLENO, const std::string& LADLETYPE, bool Commit, cCBS_ODBC_DBError &Error)
{
  //changer ladle on the position of recieved heat
  bool result = true;

  CPD_LADLE PD_LADLE(m_pCBS_StdConnection);
  double TAREWEIGHT = CSMC_DBData::unspecDouble;

  if ( result && selectByHeatIdOnPlant(Plant, PlantNo, HeatId) )
  {
    CGC_LADLE_DEF GC_LADLE_DEF(m_pCBS_StdConnection);

    if ( GC_LADLE_DEF.isValidLadle(LADLENO, LADLETYPE) )
    {
      setLADLETYPE(LADLETYPE);
      setLADLENO(LADLENO);

      if( PD_LADLE.select(LADLENO, LADLETYPE) )
      {
        TAREWEIGHT = PD_LADLE.getTAREWEIGHT(1);
      }
    }
    else
    {
      setLADLETYPE(CSMC_DBData::unspecString);
      setLADLENO(CSMC_DBData::unspecLong);

      CSMC_EventLogFrame *pEventLog = CSMC_EventLogFrameController::getInstance()->getpEventLog();
      sEventLogMessage sMessage = cCBS_StdEventLog::initMessage(__FILE__,__LINE__);
      pEventLog->EL_DBWriteWarning(sMessage,"LADLENO","PD_PLANTSTATUS","INVALID_LADLE_RECEIVED");
    }
        
    setLADLETAREWEIGHT(TAREWEIGHT);

    result = update();

    if (!result)
      Error = getLastError();

    if (Commit)
    {
      if (result)
        commit();
      else
        rollback();
    }
  }
  else
  {
    setLastError(std::string("NO_DATA_FOUND"), 0, getActStatement());
  }

  return result;
}

bool CPD_PLANTSTATUS::doAnnouncement(const std::string& PLANT, long PLANTNO, long TREATMENTPOSITION, long SAMPLE_COUNTER, const std::string& HEATID, const std::string& TREATID, long HEATSTATUSNO, const std::string& STEELGRADECODE, long LADLENO, const std::string& LADLETYPE, double TEMP, const CDateTime& TEMP_SAMPLETIME, double STEELWEIGHT, double SLAGWEIGHT, bool Commit, cCBS_ODBC_DBError &Error)
{
  bool result = true;
    
  if ( select(PLANT, PLANTNO, TREATMENTPOSITION) )
  {
    CPP_ORDER                 m_PP_ORDER(m_pCBS_StdConnection);
    CPP_HEAT                  m_PP_HEAT(m_pCBS_StdConnection);
    CPP_HEAT_PLANT            m_PP_HEAT_PLANT(m_pCBS_StdConnection);
    CGC_LADLE_DEF             GC_LADLE_DEF(m_pCBS_StdConnection);
  
    CDateTime Now;

    if ( SAMPLE_COUNTER != CSMC_DBData::unspecLong )
    {
      setSAMPLE_COUNTER(SAMPLE_COUNTER);
    }

    setHEATID(HEATID);
    setTREATID(TREATID);
    setREVTIME(Now);
    setHEATSTATUSNO(HEATSTATUSNO);

    if ( m_PP_HEAT.select(HEATID) )
    {
      setPRODORDERID(m_PP_HEAT.getPRODORDERID(1));

       // use STEELGRADECODE from planning data if not known
        if ( STEELGRADECODE.empty() || STEELGRADECODE == CSMC_DBData::unspecString )
        {
          if ( m_PP_ORDER.select(m_PP_HEAT.getPRODORDERID(1)) )
          {
            setSTEELGRADECODE(m_PP_ORDER.getSTEELGRADECODE(1));
          }
        }
        else
        {
          setSTEELGRADECODE(STEELGRADECODE);
        }
    }

    if ( GC_LADLE_DEF.isValidLadle(LADLENO, LADLETYPE) )
    {
      setLADLETYPE(LADLETYPE);
      setLADLENO(LADLENO);
    }
    else
    {
      setLADLETYPE(CSMC_DBData::unspecString);
      setLADLENO(CSMC_DBData::unspecLong);

      CSMC_EventLogFrame *pEventLog = CSMC_EventLogFrameController::getInstance()->getpEventLog();
      sEventLogMessage sMessage = cCBS_StdEventLog::initMessage(__FILE__,__LINE__);
      pEventLog->EL_DBWriteWarning(sMessage,"LADLENO","PD_PLANTSTATUS","INVALID_LADLE_RECEIVED");
    }

    setTREATMENTSTART(Now);

    if ( m_PP_HEAT_PLANT.select(HEATID,TREATID,PLANT) )
    {
      setEXPTREATMENTEND  (m_PP_HEAT_PLANT.getTREATEND_PLAN(1));
      setHEATID_EXT_CUST  (m_PP_HEAT_PLANT.getHEATID_CUST_PLAN(1));
      setTREATID_EXT_CUST (m_PP_HEAT_PLANT.getTREATID_CUST_PLAN(1));
    }
  
    setTEMP(TEMP);
    setTEMP_SAMPLETIME(TEMP_SAMPLETIME);

    //setLADLETAREWEIGHT();
    setSTEELWEIGHT(STEELWEIGHT);
    setSLAGWEIGHT(SLAGWEIGHT);

    result = update();

    if (!result)
      Error = getLastError();

    if (Commit)
    {
      if (result)
        commit();
      else
        rollback();
    }
  }
  else
  {
    // PD_PLANTSTATUS has to be configured due to plant requirements
    // function will return "true" even if no data can be selected for update

    CSMC_EventLogFrame *pEventLog = CSMC_EventLogFrameController::getInstance()->getpEventLog();
    sEventLogMessage sMessage = cCBS_StdEventLog::initMessage(__FILE__,__LINE__);
    pEventLog->EL_DBReadError(sMessage,"PLANT - PLANTNO - TREATMENTPOSITION","PD_PLANTSTATUS","NO_DATA_FOUND");
  }

  return result;
}

//this function will set the values for the plant, plantno, treatmentposition with the available information for the heat and all other fields to null
bool CPD_PLANTSTATUS::doHeatStart(const std::string& PLANT, long PLANTNO, long TREATMENTPOSITION, const std::string& HEATID, const std::string& TREATID, bool Commit, cCBS_ODBC_DBError &Error)
{
  bool result = true;

  if ( select(PLANT, PLANTNO, TREATMENTPOSITION) )
  {
    CPP_ORDER            PP_ORDER      (m_pCBS_StdConnection);
    CPP_HEAT             PP_HEAT       (m_pCBS_StdConnection);
    CPP_HEAT_PLANT       PP_HEAT_PLANT (m_pCBS_StdConnection);
    CGC_HEAT_STATUS      GC_HEAT_STATUS(m_pCBS_StdConnection);
    CPD_HEAT_DATA        PD_HEAT_DATA  (m_pCBS_StdConnection);
    CPD_SAMPLE_REF       PD_SAMPLE_REF (m_pCBS_StdConnection);
    CGC_LADLE_DEF        GC_LADLE_DEF  (m_pCBS_StdConnection);
    CPD_LADLE            PD_LADLE	     (m_pCBS_StdConnection);

    CPD_PLANTSTATUS_PLANT PD_PLANTSTATUS_PLANT(m_pCBS_StdConnection);

    CDateTime Now;


    long HEATSTATUSNO         = GC_HEAT_STATUS.getHeatStatusNo(PLANT, DEF_GC_HEAT_STATUS::TreatmentStart);
    CDateTime TREATMENTSTART  = CSMC_DBData::unspecDate;
    CDateTime EXPTREATMENTEND = CSMC_DBData::unspecDate;
    long LADLENO              = CSMC_DBData::unspecLong;
    std::string LADLETYPE     = CSMC_DBData::unspecString;
    CDateTime TEMP_SAMPLETIME = CSMC_DBData::unspecDate;
    double STEELWEIGHT        = CSMC_DBData::unspecDouble;
    double SLAGWEIGHT         = CSMC_DBData::unspecDouble;
    long SAMPLE_COUNTER       = CSMC_DBData::unspecLong;
    double TEMP               = CSMC_DBData::unspecDouble;;
    long SAMPLE_REF           = CSMC_DBData::unspecLong;
    double TAREWEIGHT         = CSMC_DBData::unspecDouble;

    setHEATID(HEATID);
    setTREATID(TREATID);
    setREVTIME(Now);
    setHEATSTATUSNO(HEATSTATUSNO);

    //TODO: clear all not available fields
    if ( PP_HEAT.select(HEATID) )
    {
      setPRODORDERID(PP_HEAT.getPRODORDERID(1));
      if ( PP_ORDER.select(PP_HEAT.getPRODORDERID(1)) )
      {
        setSTEELGRADECODE(PP_ORDER.getSTEELGRADECODE(1));
      }
    }

    if ( PD_HEAT_DATA.select(HEATID, TREATID, PLANT) )
    {
      TREATMENTSTART = PD_HEAT_DATA.getTREATSTART_ACT(1);
      LADLENO        = PD_HEAT_DATA.getLADLENO(1);
      LADLETYPE      = PD_HEAT_DATA.getLADLETYPE(1);
      //SAMPLE_REF     = PD_HEAT_DATA.getSAMPLE_REF(1);
      STEELWEIGHT    = PD_HEAT_DATA.getSTEELMASS(1);
      SLAGWEIGHT     = PD_HEAT_DATA.getSLAGMASS(1);
      EXPTREATMENTEND = PD_HEAT_DATA.getTREATEND_MOD(1);
    }

    if ( TREATMENTSTART == CSMC_DBData::unspecDate )
    {
      TREATMENTSTART = Now;
    }

    if ( GC_LADLE_DEF.isValidLadle(LADLENO, LADLETYPE) )
    {
      setLADLETYPE(LADLETYPE);
      setLADLENO(LADLENO);
    }

    if( PD_LADLE.select(LADLENO, LADLETYPE) )
    {
      TAREWEIGHT = PD_LADLE.getTAREWEIGHT(1);
    }

    setSTEELWEIGHT(STEELWEIGHT);
    setSLAGWEIGHT(SLAGWEIGHT);
    setLADLETAREWEIGHT(TAREWEIGHT);

    setTREATMENTSTART(TREATMENTSTART);

    if ( PP_HEAT_PLANT.select(HEATID, TREATID, PLANT) )
    {
      setHEATID_EXT_CUST  (PP_HEAT_PLANT.getHEATID_CUST_PLAN(1));
      setTREATID_EXT_CUST (PP_HEAT_PLANT.getTREATID_CUST_PLAN(1));
    }

    setEXPTREATMENTEND(EXPTREATMENTEND);
    setSAMPLE_COUNTER(SAMPLE_COUNTER);
    setTEMP(TEMP);
    setTEMP_SAMPLETIME(TEMP_SAMPLETIME);

    result = update();

    result = result && PD_PLANTSTATUS_PLANT.resetPlantStatus(PLANT, PLANTNO, TREATMENTPOSITION, Commit, Error);

    if (!result)
      Error = getLastError();

    if (Commit)
    {
      if (result)
        commit();
      else
        rollback();
    }
  }
  else
  {
    // PD_PLANTSTATUS has to be configured due to plant requirements
    // function will return "true" even if no data can be selected for update

    CSMC_EventLogFrame *pEventLog = CSMC_EventLogFrameController::getInstance()->getpEventLog();
    sEventLogMessage sMessage = cCBS_StdEventLog::initMessage(__FILE__,__LINE__);
    pEventLog->EL_DBReadError(sMessage,"PLANT - PLANTNO - TREATMENTPOSITION","PD_PLANTSTATUS","NO_DATA_FOUND");
  }

  return result;
}

bool CPD_PLANTSTATUS::exists(const std::string& Plant, long PlantNo, long TreatmentPosition)
{
  cleanWhereStatement();

  m_Statement = "Select PLANT from " + m_TableName;

  addWhereClause(CPD_PLANTSTATUS::PLANT,Plant);
  addWhereClause(CPD_PLANTSTATUS::PLANTNO,PlantNo);
  addWhereClause(CPD_PLANTSTATUS::TREATMENTPOSITION,TreatmentPosition);
   
  std::string sWhereStatement = getWhereStatement();
  //to avoid the exception like 'Select HEATID from PP_HEAT AND ROWNUM = 1 '
  if(sWhereStatement.length() > 0 ) 
  {
    // do not use ROWNUM in "addWhereClause", ROWNUM is not a table column and where statement will be used for deletion at "deleteRows"
    m_Statement += sWhereStatement + " AND ROWNUM = 1 ;";
  }
  else
  {
    return false;
  }

  return CSMC_DBData::select();
}

bool CPD_PLANTSTATUS::resetPlantStatus(const std::string& Plant,long PlantNo,long TreatmentPosition, bool Commit, cCBS_ODBC_DBError &Error)
{
  
  CPD_PLANTSTATUS_PLANT PD_PLANTSTATUS_PLANT(m_pCBS_StdConnection);

  bool result = true; 

  if ( select(Plant,PlantNo,TreatmentPosition) )
  {
    setSAMPLE_COUNTER(CSMC_DBData::unspecLong);
    setHEATID(CSMC_DBData::unspecString);
    setTREATID(CSMC_DBData::unspecString);
    setREVTIME(CDateTime());
    setPRODORDERID(CSMC_DBData::unspecString);
    setSTEELGRADECODE(CSMC_DBData::unspecString);
    setHEATSTATUSNO(CSMC_DBData::unspecLong);
    setLADLETYPE(CSMC_DBData::unspecString);
    setLADLENO(CSMC_DBData::unspecLong);
    setTREATMENTSTART(CSMC_DBData::unspecDate);
    setEXPTREATMENTEND(CSMC_DBData::unspecDate);
    setTEMP(CSMC_DBData::unspecDouble);
    setTEMP_SAMPLETIME(CSMC_DBData::unspecDate);
    setLADLETAREWEIGHT(CSMC_DBData::unspecDouble);
    setSTEELWEIGHT(CSMC_DBData::unspecDouble);
    setSLAGWEIGHT(CSMC_DBData::unspecDouble);
    setHEATID_EXT_CUST(CSMC_DBData::unspecString);
    setTREATID_EXT_CUST(CSMC_DBData::unspecString);

    result = update();

    result = result && PD_PLANTSTATUS_PLANT.resetPlantStatus(Plant, PlantNo, TreatmentPosition, Commit, Error);

    if (!result)
      Error = getLastError();

    if (Commit)
    {
      if (result)
        commit();
      else
        rollback();
    }
  }
  else
  {
    // PD_PLANTSTATUS has to be configured due to plant requirements
    // function will return "true" even if no data can be selected for update

    CSMC_EventLogFrame *pEventLog = CSMC_EventLogFrameController::getInstance()->getpEventLog();
    sEventLogMessage sMessage = cCBS_StdEventLog::initMessage(__FILE__,__LINE__);
    pEventLog->EL_DBReadError(sMessage,"PLANT - PLANTNO - TREATMENTPOSITION","PD_PLANTSTATUS","NO_DATA_FOUND");
  }

  return result;
}

bool CPD_PLANTSTATUS::switchHeatStatusNo(const std::string& PLANT, long PLANTNO, long TreatmentPosition, const std::string& HEATID, const std::string& TREATID, long HEATSTATUSNO, bool Commit, cCBS_ODBC_DBError &Error)
{
  bool result = true;

  if( HEATSTATUSNO > -1 )
  {
    if ( HEATSTATUSNO >= getHEATSTATUSNO(1) )
    {
      result = updatePlantStatus(PLANT, PLANTNO, HEATID, TREATID, CSMC_DBData::unspecString, CSMC_DBData::unspecString, HEATSTATUSNO,
                                 CSMC_DBData::unspecString, CSMC_DBData::unspecLong  , TreatmentPosition,
                                 CSMC_DBData::unspecDate,   CSMC_DBData::unspecDouble, CSMC_DBData::unspecDouble,
                                 CSMC_DBData::unspecDouble, Commit, Error);
    }
    else
    {
      setLastError("HEATSTATUSNO_SWITCH_NOT_PLAUSIBLE", 0, CDataConversion::LongToString(HEATSTATUSNO));
      result = false;
    } // if ( HEATSTATUSNO >= getHEATSTATUSNO(1) )
  }
  else
  {
    setLastError("INVALID_HEATSTATUSNO_RECEIVED", 0, CDataConversion::LongToString(HEATSTATUSNO));
    result = false;
  } // if( HEATSTATUSNO > -1 )

  if (!result)
    Error = getLastError();

  return result;
}

bool CPD_PLANTSTATUS::switchTreatmentPosition(const std::string& Plant,long PlantNo, long FromTreatPos, long ToTreatPos , bool Commit, cCBS_ODBC_DBError &Error)
{
  bool result = true;

  //SRKO_19Aug2013_JSW 
  //CPD_PLANTSTATUS_PLANT PD_PLANTSTATUS_PLANT(m_pCBS_StdConnection);
  
  if ( select(Plant, PlantNo, FromTreatPos) )
  {
    setSAMPLE_COUNTER(getSAMPLE_COUNTER(1));
    setHEATID(getHEATID(1));
    setTREATID(getTREATID(1));
    setREVTIME(CDateTime());
    setPRODORDERID(getPRODORDERID(1));
    setSTEELGRADECODE(getSTEELGRADECODE(1));
    setHEATSTATUSNO(getHEATSTATUSNO(1));
    setLADLETYPE(getLADLETYPE(1));
    setLADLENO(getLADLENO(1));
    setTREATMENTSTART(getTREATMENTSTART(1));
    setEXPTREATMENTEND(getEXPTREATMENTEND(1));
    setTEMP(getTEMP(1));
    setTEMP_SAMPLETIME(getTEMP_SAMPLETIME(1));
    setLADLETAREWEIGHT(getLADLETAREWEIGHT(1));
    setSTEELWEIGHT(getSTEELWEIGHT(1));
    setSLAGWEIGHT(getSLAGWEIGHT(1));
    setHEATID_EXT_CUST(getHEATID_EXT_CUST(1));
    setTREATID_EXT_CUST(getTREATID_EXT_CUST(1));

    if ( select(Plant, PlantNo, ToTreatPos) )
    {
      result = update();
	  //SRKO_19Aug2013_JSW 
      //result = result && PD_PLANTSTATUS_PLANT.switchTreatmentPosition( Plant, PlantNo, FromTreatPos, ToTreatPos , false, Error);

      result = result && resetPlantStatus(Plant, PlantNo, FromTreatPos, false, Error);

      if (!result)
        Error = getLastError();

      if (Commit)
      {
        if (result)
          commit();
        else
          rollback();
      }
    }
    else
    {
      // PD_PLANTSTATUS has to be configured due to plant requirements
      // function will return "true" even if no data can be selected for update

      CSMC_EventLogFrame *pEventLog = CSMC_EventLogFrameController::getInstance()->getpEventLog();
      sEventLogMessage sMessage = cCBS_StdEventLog::initMessage(__FILE__,__LINE__);
      pEventLog->EL_DBReadError(sMessage,"PLANT - PLANTNO - TREATMENTPOSITION","PD_PLANTSTATUS","NO_DATA_FOUND");
    }
  }
  else
  {
    // PD_PLANTSTATUS has to be configured due to plant requirements
    // function will return "true" even if no data can be selected for update

    CSMC_EventLogFrame *pEventLog = CSMC_EventLogFrameController::getInstance()->getpEventLog();
    sEventLogMessage sMessage = cCBS_StdEventLog::initMessage(__FILE__,__LINE__);
    pEventLog->EL_DBReadError(sMessage,"PLANT - PLANTNO - TREATMENTPOSITION","PD_PLANTSTATUS","NO_DATA_FOUND");
  }

  return result;
}

bool CPD_PLANTSTATUS::updateExptreatmentend(const std::string& Plant, long PlantNo, const CDateTime& Exptreatmentend, long TreatmentPosition, bool Commit, cCBS_ODBC_DBError &Error)
{
  bool result = true;

  if ( select(Plant,PlantNo,TreatmentPosition) )
  {
    setEXPTREATMENTEND(Exptreatmentend);

    result = update();

    if (!result)
      Error = getLastError();

    if (Commit)
    {
      if (result)
        commit();
      else
        rollback();
    }
  }
  else
  {
    // PD_PLANTSTATUS has to be configured due to plant requirements
    // function will return "true" even if no data can be selected for update

    CSMC_EventLogFrame *pEventLog = CSMC_EventLogFrameController::getInstance()->getpEventLog();
    sEventLogMessage sMessage = cCBS_StdEventLog::initMessage(__FILE__,__LINE__);
    pEventLog->EL_DBReadError(sMessage,"PLANT - PLANTNO - TREATMENTPOSITION","PD_PLANTSTATUS","NO_DATA_FOUND");
    
  }

  return result;
}

bool CPD_PLANTSTATUS::updatePlantStatus(const std::string& Plant, long PlantNo, const std::string& HeatID, const std::string& TreatID, const std::string& ProdorderID, const std::string& Steelgradecode, long HeatStatusNo, const std::string& LadleType, long LadleNo, long TreatmentPosition, const CDateTime& Exptreatmentend, double LadleTareweight, double SteelWeight, double SlagWeight, bool Commit, cCBS_ODBC_DBError &Error)
{
  bool result = true;

  if ( select(Plant,PlantNo,TreatmentPosition) )
  {
    if(HeatID != CSMC_DBData::unspecString)
      setHEATID(HeatID);
    if(TreatID != CSMC_DBData::unspecString)
      setTREATID(TreatID);
    if(ProdorderID != CSMC_DBData::unspecString)
      setPRODORDERID(ProdorderID);
    if(Steelgradecode != CSMC_DBData::unspecString)
      setSTEELGRADECODE(Steelgradecode);
    if(HeatStatusNo != CSMC_DBData::unspecLong)
      setHEATSTATUSNO(HeatStatusNo);
    if(LadleType != CSMC_DBData::unspecString)
      setLADLETYPE(LadleType);
    if(LadleNo != CSMC_DBData::unspecLong)
      setLADLENO(LadleNo);
    if(Exptreatmentend != CSMC_DBData::unspecDate)
      setEXPTREATMENTEND(Exptreatmentend);
    if(LadleTareweight != CSMC_DBData::unspecDouble)
      setLADLETAREWEIGHT(LadleTareweight);
    if(SteelWeight != CSMC_DBData::unspecDouble)
      setSTEELWEIGHT(SteelWeight);
    if(SlagWeight != CSMC_DBData::unspecDouble)
      setSLAGWEIGHT(SlagWeight);

    setREVTIME(CDateTime());

    result = update();

    if (!result)
      Error = getLastError();

    if (Commit)
    {
      if (result)
        commit();
      else
        rollback();
    }
  }
  else
  {
    // PD_PLANTSTATUS has to be configured due to plant requirements
    // function will return "true" even if no data can be selected for update

    CSMC_EventLogFrame *pEventLog = CSMC_EventLogFrameController::getInstance()->getpEventLog();
    sEventLogMessage sMessage = cCBS_StdEventLog::initMessage(__FILE__,__LINE__);
    pEventLog->EL_DBReadError(sMessage,"PLANT - PLANTNO - TREATMENTPOSITION","PD_PLANTSTATUS","NO_DATA_FOUND");
  }

  return result;
}

bool CPD_PLANTSTATUS::updateSampleCounter(const std::string& Plant,long PlantNo,const std::string& HeatID,const std::string& TreatID, long SampleCounter, long TreatmentPosition, bool Commit, cCBS_ODBC_DBError &Error)
{
  bool result = true;
  
  if ( select(Plant,PlantNo,TreatmentPosition) )
  {
    setSAMPLE_COUNTER(SampleCounter);

    result = update();

    if (!result)
      Error = getLastError();

    if (Commit)
    {
      if (result)
        commit();
      else
        rollback();
    }
  }
  else
  {
    // PD_PLANTSTATUS has to be configured due to plant requirements
    // function will return "true" even if no data can be selected for update

    CSMC_EventLogFrame *pEventLog = CSMC_EventLogFrameController::getInstance()->getpEventLog();
    sEventLogMessage sMessage = cCBS_StdEventLog::initMessage(__FILE__,__LINE__);
    pEventLog->EL_DBReadError(sMessage,"PLANT - PLANTNO - TREATMENTPOSITION","PD_PLANTSTATUS","NO_DATA_FOUND");
  }

  return result;
}

bool CPD_PLANTSTATUS::updateSteelWeight(const std::string& Plant,long PlantNo,const std::string& HeatID,const std::string& TreatID, double SteelWeight, long TreatmentPosition, bool Commit, cCBS_ODBC_DBError &Error)
{
  bool result = true;

  if ( select(Plant,PlantNo,TreatmentPosition) )
  {
    setSTEELWEIGHT(SteelWeight);

    result = update();

    if (!result)
      Error = getLastError();

    if (Commit)
    {
      if (result)
        commit();
      else
        rollback();
    }
  }
  else
  {
    // PD_PLANTSTATUS has to be configured due to plant requirements
    // function will return "true" even if no data can be selected for update

    CSMC_EventLogFrame *pEventLog = CSMC_EventLogFrameController::getInstance()->getpEventLog();
    sEventLogMessage sMessage = cCBS_StdEventLog::initMessage(__FILE__,__LINE__);
    pEventLog->EL_DBReadError(sMessage,"PLANT - PLANTNO - TREATMENTPOSITION","PD_PLANTSTATUS","NO_DATA_FOUND");
  }

  return result;
}

bool CPD_PLANTSTATUS::updateTempTaken(const std::string& Plant, long PlantNo, double TEMP, CDateTime& TempTime, long TreatmentPosition, bool Commit, cCBS_ODBC_DBError &Error)
{
  bool result = true;

  if ( select(Plant,PlantNo,TreatmentPosition) )
  {
    setTEMP(TEMP);
    setTEMP_SAMPLETIME(TempTime);

    result = update();

    if (!result)
      Error = getLastError();

    if (Commit)
    {
      if (result)
        commit();
      else
        rollback();
    }
  }
  else
  {
    // PD_PLANTSTATUS has to be configured due to plant requirements
    // function will return "true" even if no data can be selected for update

    CSMC_EventLogFrame *pEventLog = CSMC_EventLogFrameController::getInstance()->getpEventLog();
    sEventLogMessage sMessage = cCBS_StdEventLog::initMessage(__FILE__,__LINE__);
    pEventLog->EL_DBReadError(sMessage,"PLANT - PLANTNO - TREATMENTPOSITION","PD_PLANTSTATUS","NO_DATA_FOUND");
    
  }

  return result;
}



bool CPD_PLANTSTATUS::update_PDplantStatus(const string &pHMId, const string &pTREATID, const string &pPlant, long pHeatStatusNo)
{
	bool result;
	CDateTime now;
  std::stringstream sql;
	try
	{
	sql << "update PD_PLANTSTATUS set " 
			<< "HEATSTATUSNO = " << pHeatStatusNo << " ,"   
			<< "REVTIME = '" << now.toDBString() << "' "
			<< "where HM_ID = '" << pHMId<< "' and TREATID = '" << pTREATID << "' and PLANT = '" << pPlant << "'"  ;

	result = executeSQL(sql.str());
	if (result)
    {
      commit();
    }
    else
    {
      rollback();
      log("ERROR: CPD_PLANTSTATUS::doHeatDeparture failed",1);
    }
	}
	catch(...)
	{
		result=false;
	}

	return result;
}

bool CPD_PLANTSTATUS::OnHeatStart(const string &pHMId, const string &pTREATID, const string &pPlant,long htStatus)
{
	bool result;
	CDateTime now;
  std::stringstream sql;
	try
	{
	sql << "update PD_PLANTSTATUS set " 
			<< "HEATSTATUSNO = " << htStatus << ", "   
			<< "TREATMENTSTART = '" << now.toDBString() << "',"
			//<< "EXPTREATMENTEND = '" << now.toDBString() << "'," // to do later
			<< "REVTIME = '" << now.toDBString() << "' "
			<< "where HM_ID = '" << pHMId << "' and TREATID = '" << pTREATID<< "' and PLANT = '" << pPlant << "'"  ;

	result = executeSQL(sql.str());
	if (result)
    {
      commit();
    }
    else
    {
      rollback();
      log("ERROR: CPD_PLANTSTATUS::doHeatDeparture failed",1);
    }
	}
	catch(...)
	{
		result=false;
	}

	return result;
}

bool CPD_PLANTSTATUS::doHeatCancel(const string &pPlant,long pPlantNo,long htStatus)
{
	bool result;
	CDateTime now;
  std::stringstream sql;
	try
	{
			cleanWhereStatement();
			setHM_ID(CSMC_DBData::unspecString);
			setPRODORDERID(CSMC_DBData::unspecString);
			setREVTIME(now);
			setHEATSTATUSNO(CSMC_DBData::unspecLong); //htStatus
			setTREATID(CSMC_DBData::unspecString); 
			setHM_ID_EXT_CUST(CSMC_DBData::unspecString);
			setTREATID_EXT_CUST(CSMC_DBData::unspecString);
	    setSAMPLE_COUNTER(CSMC_DBData::unspecLong);
      setSTEELGRADECODE(CSMC_DBData::unspecString);
      setLADLETYPE(CSMC_DBData::unspecString);
      setLADLENO(CSMC_DBData::unspecLong);
			setTREATMENTSTART(CSMC_DBData::unspecDate);
			setEXPTREATMENTEND(CSMC_DBData::unspecDate);

			setTEMP(CSMC_DBData::unspecDouble);
			setTEMP_SAMPLETIME(CSMC_DBData::unspecDate);
			setLADLETAREWEIGHT(CSMC_DBData::unspecDouble);
			setSTEELWEIGHT(CSMC_DBData::unspecDouble);
			setSLAGWEIGHT(CSMC_DBData::unspecDouble);

			addWhereClause("PLANT",pPlant);
			addWhereClause("PLANTNO",pPlantNo);
			addWhereClause("TREATMENTPOSITION","1");
			result= update();
		
	if (result)
    {
      commit();
    }
    else
    {
      rollback();
      log("ERROR: CPD_PLANTSTATUS::doHeatAnnouncement failed",1);
    }
	}
	catch(...)
	{
		result=false;
	}

	return result;
}

bool CPD_PLANTSTATUS::doHeatDeparture(const string &pPlant,long pPlantNo, long htStatus,long FromTreatPos,long ToTreatPos)
{
	bool result;
	CDateTime now;
  //std::stringstream sql;
	try
	{
			cleanWhereStatement();

			if ( select(pPlant, pPlantNo, FromTreatPos) )
			{
				setHM_ID(getHM_ID(1));
				setPRODORDERID(getPRODORDERID(1));
				setREVTIME(now);
				setHEATSTATUSNO(htStatus); 
				setTREATID(getTREATID(1)); 
				setSTEELWEIGHT(getSTEELWEIGHT(1));
				setSLAGWEIGHT(getSLAGWEIGHT(1));
				setTEMP(getTEMP(1));
				setTEMP_SAMPLETIME(getTEMP_SAMPLETIME(1));
				setLADLETYPE(getLADLETYPE(1));
				setLADLENO(getLADLENO(1));
				setHM_ID_EXT_CUST(getHM_ID_EXT_CUST(1));
				setTREATID_EXT_CUST(getTREATID_EXT_CUST(1));
				setTREATMENTSTART(getTREATMENTSTART(1));
				setEXPTREATMENTEND(getEXPTREATMENTEND(1));
				setSAMPLE_COUNTER(getSAMPLE_COUNTER(1));

				if ( select(pPlant, pPlantNo, ToTreatPos) )
				{
					result = update();
				}

				if ( select(pPlant, pPlantNo, FromTreatPos) )
				{
					setHM_ID(CSMC_DBData::unspecString);
					setPRODORDERID(CSMC_DBData::unspecString);
					setREVTIME(now);
					setHEATSTATUSNO(CSMC_DBData::unspecLong); 
					setTREATID(CSMC_DBData::unspecString); 
					setHM_ID_EXT_CUST(CSMC_DBData::unspecString);
					setTREATID_EXT_CUST(CSMC_DBData::unspecString);

					setTREATMENTSTART(CSMC_DBData::unspecDate);
					setEXPTREATMENTEND(CSMC_DBData::unspecDate);
					setSAMPLE_COUNTER(CSMC_DBData::unspecLong);

					setTEMP(CSMC_DBData::unspecDouble);
					setTEMP_SAMPLETIME(CSMC_DBData::unspecDate);
					setLADLETYPE(CSMC_DBData::unspecString);
					setLADLENO(CSMC_DBData::unspecLong);
					setSTEELWEIGHT(CSMC_DBData::unspecDouble);
					setSLAGWEIGHT(CSMC_DBData::unspecDouble);

					result = result && update();
				}
			}
		
	  if (result)
    {
      commit();
    }
    else
    {
      rollback();
      log("ERROR: CPD_PLANTSTATUS::doHeatAnnouncement failed",1);
    }
	}
	catch(...)
	{
		result=false;
	}

	return result;
}

bool CPD_PLANTSTATUS::OnTempMeasurement(long pSampleCounter, const string &pHMId, const string &pTreatId, const string &pPlant,double pTemp,bool pCommit)
{
	bool result;
	CDateTime now;
  std::stringstream sql;
	try
	{
	sql << "update PD_PLANTSTATUS set " 
			<< "SAMPLE_COUNTER = " << pSampleCounter << " , "   
			<< "TEMP = " <<  pTemp << ", "
			<< "TEMP_SAMPLETIME = '" << now.toDBString() << "', " 
			<< "REVTIME = '" << now.toDBString() << "' "
			<< "where HM_ID = '" << pHMId << "' and TREATID = '" << pTreatId << "' and PLANT = '" << pPlant << "'"  ;

	result = executeSQL(sql.str());
	if (pCommit)
    /*{
      commit();
    }
    else
    {
      rollback();
      log("ERROR: CPD_PLANTSTATUS::doHeatDeparture failed");
    }*/
		if (result)
			this->commit();
		else
			rollback();
	}
	catch(...)
	{
		//result=false;
	}

	return result;
}

bool CPD_PLANTSTATUS::doHeatAnnouncement(const string &pHMId, const string &pPRODORDERID, const string &pTREATID, const string &pPlant,long pPlantNo, double pHMWt, double pSlagWT,long ldlno,double pHMTemp,long htStatus)
{
	bool result;
	CDateTime now;
	CDateTime now2;
  now2.addTime(30*60.0);

  std::stringstream sql;
	try
	{
		CPP_HM            m_PP_HM(m_pCBS_StdConnection);
		string CustID = CSMC_DBData::unspecString;
    if ( m_PP_HM.select(pHMId) )
    {
      CustID =  m_PP_HM.getHM_ID_CUST_PLAN(1);
    }

		if (!exists(pPlant,pPlantNo,1))
		{
			setPLANT(pPlant);
			setPLANTNO(pPlantNo);
			setHM_ID(pHMId);
			setHEATSTATUSNO(htStatus); 
			setTREATID(pTREATID); 
			setREVTIME(now);
			setPRODORDERID(pPRODORDERID);
			setTREATMENTPOSITION(1);
			setSTEELWEIGHT(pHMWt);
			setSLAGWEIGHT(pSlagWT);
			setLADLETYPE("H");
			setLADLENO(ldlno);
			setHM_ID_EXT_CUST(CustID);
			setTREATID_EXT_CUST(pTREATID);
			setTREATMENTSTART(now);
			setEXPTREATMENTEND(now2);
			result = insert();
		}
		else
		{
			cleanWhereStatement();
			setHM_ID(pHMId);
			setPRODORDERID(pPRODORDERID);
			setREVTIME(now);
			setHEATSTATUSNO(htStatus); 
			setTREATID(pTREATID);
			setSTEELWEIGHT(pHMWt);
			setSLAGWEIGHT(pSlagWT);
			setTEMP(pHMTemp);
			setLADLETYPE("H");
			setLADLENO(ldlno);

			setHM_ID_EXT_CUST(CustID);
			setTREATID_EXT_CUST(pTREATID);
			setTREATMENTSTART(now);
			setEXPTREATMENTEND(now2);

			addWhereClause("PLANT",pPlant);
			addWhereClause("PLANTNO",pPlantNo);
			addWhereClause("TREATMENTPOSITION","1");


			result= update();
		}

	if (result)
    {
      commit();
    }
    else
    {
      rollback();
      log("ERROR: CPD_PLANTSTATUS::doHeatAnnouncement failed",1);
    }
	}
	catch(...)
	{
		result=false;
	}

	return result;
}