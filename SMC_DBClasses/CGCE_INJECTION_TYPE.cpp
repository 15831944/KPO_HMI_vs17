//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "cCBS_StdEventLogFrameController.h"
#include "CGCE_INJECTION_TYPE.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGCE_INJECTION_TYPE::INJTYPE("INJTYPE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGCE_INJECTION_TYPE::INJTYPEDESCR("INJTYPEDESCR");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGCE_INJECTION_TYPE::PURP_CODE_1("PURP_CODE_1");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGCE_INJECTION_TYPE::PURP_CODE_2("PURP_CODE_2");

//##DBClassCodeUtility ! DO NOT EDIT !
CGCE_INJECTION_TYPE::CGCE_INJECTION_TYPE(cCBS_StdConnection* Connection)
:CSMC_DBData("GCE_INJECTION_TYPE",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGCE_INJECTION_TYPE::CGCE_INJECTION_TYPE(cCBS_Connection* Connection)
:CSMC_DBData("GCE_INJECTION_TYPE",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGCE_INJECTION_TYPE::CGCE_INJECTION_TYPE()
:CSMC_DBData("GCE_INJECTION_TYPE")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGCE_INJECTION_TYPE::~CGCE_INJECTION_TYPE()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CGCE_INJECTION_TYPE::getINJTYPE(long Row)
{
  return getString(CGCE_INJECTION_TYPE::INJTYPE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGCE_INJECTION_TYPE::setINJTYPE(const std::string& value)
{
  setString(CGCE_INJECTION_TYPE::INJTYPE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CGCE_INJECTION_TYPE::getINJTYPEDESCR(long Row)
{
  return getString(CGCE_INJECTION_TYPE::INJTYPEDESCR, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGCE_INJECTION_TYPE::setINJTYPEDESCR(const std::string& value)
{
  setString(CGCE_INJECTION_TYPE::INJTYPEDESCR, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CGCE_INJECTION_TYPE::getPURP_CODE_1(long Row)
{
  return getString(CGCE_INJECTION_TYPE::PURP_CODE_1, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGCE_INJECTION_TYPE::setPURP_CODE_1(const std::string& value)
{
  setString(CGCE_INJECTION_TYPE::PURP_CODE_1, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CGCE_INJECTION_TYPE::getPURP_CODE_2(long Row)
{
  return getString(CGCE_INJECTION_TYPE::PURP_CODE_2, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGCE_INJECTION_TYPE::setPURP_CODE_2(const std::string& value)
{
  setString(CGCE_INJECTION_TYPE::PURP_CODE_2, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CGCE_INJECTION_TYPE::select(const std::string& INJTYPE)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CGCE_INJECTION_TYPE::INJTYPE,INJTYPE);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CGCE_INJECTION_TYPE::selectByPurpCode(const std::string& PURP_CODE_1, const std::string& PURP_CODE_2)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CGCE_INJECTION_TYPE::PURP_CODE_1,PURP_CODE_1);
  addWhereClause(CGCE_INJECTION_TYPE::PURP_CODE_2,PURP_CODE_2);

  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

std::string CGCE_INJECTION_TYPE::getInjTypeByPurposeCode(const std::string& PURP_CODE_1, const std::string& PURP_CODE_2)
{
  std::string InjType = CSMC_DBData::unspecString;

  if ( selectByPurpCode(PURP_CODE_1, PURP_CODE_2) )
  {
    InjType = getINJTYPE(1);
  }

  if ( InjType == CSMC_DBData::unspecString )
  {
    std::stringstream Message;
    Message << "Cannot injection type for detect purpose " << PURP_CODE_1 << " and " << PURP_CODE_2 ;

		cCBS_StdEventLogFrame *pEventLog = cCBS_StdEventLogFrameController::getInstance()->getpEventLog();
		sEventLogMessage sMessage = cCBS_StdEventLogFrame::initMessage(__FILE__,__LINE__);
    pEventLog->EL_DBReadError(sMessage,"", m_TableName.c_str(), Message.str().c_str());
  }

  return InjType;

}

std::string CGCE_INJECTION_TYPE::getPurposeCodeByInjType(const std::string& INJTYPE)
{
  std::string PurposeCode = CSMC_DBData::unspecString;

  if ( select(INJTYPE) )
  {
    PurposeCode = getPURP_CODE_1(1);
  }

  if ( PurposeCode == CSMC_DBData::unspecString )
  {
    std::stringstream Message;
    Message << "Cannot detect purpose for injection type " << INJTYPE ;

		cCBS_StdEventLogFrame *pEventLog = cCBS_StdEventLogFrameController::getInstance()->getpEventLog();
		sEventLogMessage sMessage = cCBS_StdEventLogFrame::initMessage(__FILE__,__LINE__);
    pEventLog->EL_DBReadError(sMessage,"", m_TableName.c_str(), Message.str().c_str());
  }

  return PurposeCode;

}


