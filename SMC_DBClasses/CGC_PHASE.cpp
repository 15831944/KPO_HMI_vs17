//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CGC_PHASE.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_PHASE::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_PHASE::RES_PHASENO("RES_PHASENO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_PHASE::PHASENAME("PHASENAME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_PHASE::PHASENO("PHASENO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_PHASE::PHASENAMEHMI("PHASENAMEHMI");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_PHASE::FLAG("FLAG");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_PHASE::L1_PHASE_NO("L1_PHASE_NO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_PHASE::PHASENO_HMI("PHASENO_HMI");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_PHASE::COLOUR_RED("COLOUR_RED");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_PHASE::COLOUR_GREEN("COLOUR_GREEN");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_PHASE::COLOUR_BLUE("COLOUR_BLUE");

//##DBClassCodeUtility ! DO NOT EDIT !
CGC_PHASE::CGC_PHASE(cCBS_StdConnection* Connection)
:CSMC_DBData("GC_PHASE",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGC_PHASE::CGC_PHASE(cCBS_Connection* Connection)
:CSMC_DBData("GC_PHASE",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGC_PHASE::CGC_PHASE()
:CSMC_DBData("GC_PHASE")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGC_PHASE::~CGC_PHASE()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Plant identifier
std::string CGC_PHASE::getPLANT(long Row)
{
  return getString(CGC_PHASE::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_PHASE::setPLANT(const std::string& value)
{
  setString(CGC_PHASE::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Result Phase No for storing into the Result tables
long CGC_PHASE::getRES_PHASENO(long Row)
{
  return getLong(CGC_PHASE::RES_PHASENO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_PHASE::setRES_PHASENO(long value)
{
  setLong(CGC_PHASE::RES_PHASENO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##This is the phase name, which is used in the model
std::string CGC_PHASE::getPHASENAME(long Row)
{
  return getString(CGC_PHASE::PHASENAME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_PHASE::setPHASENAME(const std::string& value)
{
  setString(CGC_PHASE::PHASENAME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Some model phases are countable. They have PHASENO (1,2,3,...). Those which are not countable have PHASENO = 0
long CGC_PHASE::getPHASENO(long Row)
{
  return getLong(CGC_PHASE::PHASENO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_PHASE::setPHASENO(long value)
{
  setLong(CGC_PHASE::PHASENO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Phase Name to be shown by the HMI
std::string CGC_PHASE::getPHASENAMEHMI(long Row)
{
  return getString(CGC_PHASE::PHASENAMEHMI, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_PHASE::setPHASENAMEHMI(const std::string& value)
{
  setString(CGC_PHASE::PHASENAMEHMI, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##This Flag is an indication that only, following Result data for the End of the Phase are calculated, Weights Steel and Slag, Analysis, Temp, and Time Until end of Process Phase., In the other case also results for several patterns are defined.
long CGC_PHASE::getFLAG(long Row)
{
  return getLong(CGC_PHASE::FLAG, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_PHASE::setFLAG(long value)
{
  setLong(CGC_PHASE::FLAG, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##The number of phase that is requried by Level 1
long CGC_PHASE::getL1_PHASE_NO(long Row)
{
  return getLong(CGC_PHASE::L1_PHASE_NO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_PHASE::setL1_PHASE_NO(long value)
{
  setLong(CGC_PHASE::L1_PHASE_NO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##The phase number HMI is used for example for bars in the HMI
long CGC_PHASE::getPHASENO_HMI(long Row)
{
  return getLong(CGC_PHASE::PHASENO_HMI, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_PHASE::setPHASENO_HMI(long value)
{
  setLong(CGC_PHASE::PHASENO_HMI, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##RGB colour settings
long CGC_PHASE::getCOLOUR_RED(long Row)
{
  return getLong(CGC_PHASE::COLOUR_RED, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_PHASE::setCOLOUR_RED(long value)
{
  setLong(CGC_PHASE::COLOUR_RED, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##RGB colour settings
long CGC_PHASE::getCOLOUR_GREEN(long Row)
{
  return getLong(CGC_PHASE::COLOUR_GREEN, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_PHASE::setCOLOUR_GREEN(long value)
{
  setLong(CGC_PHASE::COLOUR_GREEN, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##RGB colour settings
long CGC_PHASE::getCOLOUR_BLUE(long Row)
{
  return getLong(CGC_PHASE::COLOUR_BLUE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_PHASE::setCOLOUR_BLUE(long value)
{
  setLong(CGC_PHASE::COLOUR_BLUE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CGC_PHASE::select(const std::string& PLANT, long RES_PHASENO)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CGC_PHASE::PLANT,PLANT);
  addWhereClause(CGC_PHASE::RES_PHASENO,RES_PHASENO);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CGC_PHASE::selectByPhase(const std::string& PLANT, const std::string& PHASENAME, long PHASENO, long L1_PHASE_NO)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CGC_PHASE::PLANT,PLANT);
  addWhereClause(CGC_PHASE::PHASENAME,PHASENAME);
  addWhereClause(CGC_PHASE::PHASENO,PHASENO);
  addWhereClause(CGC_PHASE::L1_PHASE_NO,L1_PHASE_NO);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//added by deb 
bool CGC_PHASE::selectByPhase(const std::string& PLANT, const std::string& PHASENAME, long PHASENO)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CGC_PHASE::PLANT,PLANT);
  addWhereClause(CGC_PHASE::PHASENAME,PHASENAME);
  addWhereClause(CGC_PHASE::PHASENO,PHASENO);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

bool CGC_PHASE::selectByPhaseName(const std::string& PLANT, const std::string& PHASENAME)
{
	cleanWhereStatement();

	m_Statement = "Select * from " + m_TableName;

	addWhereClause(CGC_PHASE::PLANT,PLANT);
  addWhereClause(CGC_PHASE::PHASENAME,PHASENAME);
	m_Statement += getWhereStatement() + ";";

	return CSMC_DBData::select();
}

//deb select by l1 phase no
bool CGC_PHASE::selectByPhaseNo(const std::string& PLANT, long L1_PHASENO)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CGC_PHASE::PLANT,PLANT);
  addWhereClause(CGC_PHASE::L1_PHASE_NO,L1_PHASENO);

  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

bool CGC_PHASE::selectByPlant(const std::string& PLANT)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CGC_PHASE::PLANT,PLANT);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

bool CGC_PHASE::selectOrdered(const std::string& PLANT, long RES_PHASENO)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CGC_PHASE::PLANT,PLANT);
  addWhereClause(CGC_PHASE::RES_PHASENO,RES_PHASENO);
  m_Statement += getWhereStatement() + " ORDER BY " + CGC_PHASE::RES_PHASENO + ";";

  return CSMC_DBData::select();
}

std::string CGC_PHASE::getPhaseNameByResPhaseNo(const std::string& PLANT, long RES_PHASENO)
{
  std::string RetValue = CSMC_DBData::unspecString;

  if ( select(PLANT, RES_PHASENO) )
  {
    RetValue = getPHASENAME(1);
  }

  return RetValue;
}

std::map< std::string, long> & CGC_PHASE::getPhaseNameList(const std::string & Plant)
{
  static std::map<std::string, long> PhaseNameList;

  cleanWhereStatement();
  m_Statement = "select * from " + m_TableName;

  addWhereClause(CGC_PHASE::PLANT,Plant);

  m_Statement += getWhereStatement();
  m_Statement += " ; ";
  CSMC_DBData::select();

  long lRowsGot = this->getLastRow();
  std::ostringstream PhaseNo;
  std::string L2PhaseName;
  long L1PhaseNo = 0;
  for (long i = 1; i <= lRowsGot; i++)
  {
    PhaseNo << getPHASENAME(i);
    PhaseNo << "_";
    PhaseNo << getPHASENO(i);
    
    L2PhaseName = PhaseNo.str();
    L1PhaseNo  = getL1_PHASE_NO(i);

    PhaseNameList.insert(std::pair <std::string,long>(L2PhaseName, L1PhaseNo));
    
    PhaseNo.str("");
  }
  return PhaseNameList;
}

long CGC_PHASE::getPhaseNoByResPhaseNo(const std::string& PLANT, long RES_PHASENO)
{
  long RetValue = CSMC_DBData::unspecLong;

  if ( select(PLANT, RES_PHASENO) )
  {
    RetValue = getPHASENO(1);
  }

  return RetValue;
}


