//## Copyright (C) 2013 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CHDH_HM_DATA_PHASE.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA_PHASE::HM_ID("HM_ID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA_PHASE::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA_PHASE::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA_PHASE::PHASE("PHASE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA_PHASE::START_TIME("START_TIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA_PHASE::END_TIME("END_TIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA_PHASE::DURATION("DURATION");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA_PHASE::INJ_CARBIDE("INJ_CARBIDE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA_PHASE::INJ_LIME("INJ_LIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_DATA_PHASE::INJ_MG("INJ_MG");

//##DBClassCodeUtility ! DO NOT EDIT !
CHDH_HM_DATA_PHASE::CHDH_HM_DATA_PHASE(cCBS_StdConnection* Connection)
:CSMC_DBData("HDH_HM_DATA_PHASE",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHDH_HM_DATA_PHASE::CHDH_HM_DATA_PHASE(cCBS_Connection* Connection)
:CSMC_DBData("HDH_HM_DATA_PHASE",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHDH_HM_DATA_PHASE::CHDH_HM_DATA_PHASE()
:CSMC_DBData("HDH_HM_DATA_PHASE")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHDH_HM_DATA_PHASE::~CHDH_HM_DATA_PHASE()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_HM_DATA_PHASE::getHM_ID(long Row)
{
  return getString(CHDH_HM_DATA_PHASE::HM_ID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA_PHASE::setHM_ID(const std::string& value)
{
  setString(CHDH_HM_DATA_PHASE::HM_ID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_HM_DATA_PHASE::getTREATID(long Row)
{
  return getString(CHDH_HM_DATA_PHASE::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA_PHASE::setTREATID(const std::string& value)
{
  setString(CHDH_HM_DATA_PHASE::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_HM_DATA_PHASE::getPLANT(long Row)
{
  return getString(CHDH_HM_DATA_PHASE::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA_PHASE::setPLANT(const std::string& value)
{
  setString(CHDH_HM_DATA_PHASE::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_HM_DATA_PHASE::getPHASE(long Row)
{
  return getString(CHDH_HM_DATA_PHASE::PHASE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA_PHASE::setPHASE(const std::string& value)
{
  setString(CHDH_HM_DATA_PHASE::PHASE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CHDH_HM_DATA_PHASE::getSTART_TIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHDH_HM_DATA_PHASE::START_TIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA_PHASE::setSTART_TIME(const CDateTime& value)
{
 setString(CHDH_HM_DATA_PHASE::START_TIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CHDH_HM_DATA_PHASE::getEND_TIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHDH_HM_DATA_PHASE::END_TIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA_PHASE::setEND_TIME(const CDateTime& value)
{
 setString(CHDH_HM_DATA_PHASE::END_TIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_HM_DATA_PHASE::getDURATION(long Row)
{
  return getDouble(CHDH_HM_DATA_PHASE::DURATION, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA_PHASE::setDURATION(double value)
{
  setDouble(CHDH_HM_DATA_PHASE::DURATION, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_HM_DATA_PHASE::getINJ_CARBIDE(long Row)
{
  return getDouble(CHDH_HM_DATA_PHASE::INJ_CARBIDE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA_PHASE::setINJ_CARBIDE(double value)
{
  setDouble(CHDH_HM_DATA_PHASE::INJ_CARBIDE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_HM_DATA_PHASE::getINJ_LIME(long Row)
{
  return getDouble(CHDH_HM_DATA_PHASE::INJ_LIME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA_PHASE::setINJ_LIME(double value)
{
  setDouble(CHDH_HM_DATA_PHASE::INJ_LIME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_HM_DATA_PHASE::getINJ_MG(long Row)
{
  return getDouble(CHDH_HM_DATA_PHASE::INJ_MG, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_DATA_PHASE::setINJ_MG(double value)
{
  setDouble(CHDH_HM_DATA_PHASE::INJ_MG, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CHDH_HM_DATA_PHASE::select(const std::string& HM_ID, const std::string& TREATID, const std::string& PLANT, const std::string& PHASE, const CDateTime& START_TIME)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CHDH_HM_DATA_PHASE::HM_ID,HM_ID);
  addWhereClause(CHDH_HM_DATA_PHASE::TREATID,TREATID);
  addWhereClause(CHDH_HM_DATA_PHASE::PLANT,PLANT);
  addWhereClause(CHDH_HM_DATA_PHASE::PHASE,PHASE);
  addWhereClause(CHDH_HM_DATA_PHASE::START_TIME,START_TIME);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CHDH_HM_DATA_PHASE::doPhaseDataChange(const string& pHMId, const string& pTreatID, const string& pPlant, const string& pPhase, double pDuration, double pConsCarbide, double pConsMG, double pConsLime, bool pCommit)
{
	bool result=true;
	CDateTime now;
  std::stringstream sql;
	std::stringstream sqlstr;
	try
	{
		if(pPhase.compare("HMD_PHASE_PREPARATION")!=0)
		{
			//sql << "update HDH_HM_DATA_PHASE set "
			//	  << "END_TIME  = '" << now.toDBString() << "'" //, "	
			//		//<< "Inj_MG  = (select CONS_MG  from PDH_CYCL_MEAS_DATA   where REVTIME =(select max(REVTIME) from PDH_CYCL_MEAS_DATA)), "	
			//		//<< "Inj_CARBIDE  = (select CONS_CARBIDE  from PDH_CYCL_MEAS_DATA   where REVTIME =(select max(REVTIME) from PDH_CYCL_MEAS_DATA))"
			//		<< "where END_TIME IS NULL "
			//		<< "and HM_ID = '" << pHMId << "' and TREATID = '" << pTreatID << "' and PLANT = '" << pPlant << "'"  ; 

			//SANKAR
			sql << "update HDH_HM_DATA_PHASE set "
				  << "END_TIME  = '" << now.toDBString() << "' ," 	
					<< "INJ_MG  = " << pConsMG	<< " ," 	
					<< "INJ_CARBIDE  = " << pConsCarbide << " ," 	
					<< "INJ_LIME  = " << pConsLime  	<< " ," 	
					<< "DURATION  = " << pDuration  	
					<< " where END_TIME IS NULL "
					<< "and HM_ID = '" << pHMId << "' and TREATID = '" << pTreatID << "' and PLANT = '" << pPlant << "'"  ; 

			result = executeSQL(sql.str());
			if (pCommit)
			{
				if (result)
				{
					commit();
				}
				else
				{
					rollback();
				}
			}
		}

	//sqlstr << "insert into HDH_HM_DATA_PHASE(HM_ID,TREATID,PLANT,PHASE,START_TIME,DURATION,Inj_MG,Inj_CARBIDE, INJ_LIME) " 
	//		<< "values('" << pHMId << "','" << pTreatID << "','" << pPlant << "','" << pPhase <<  "','" << now.toDBString() << "' ,"  << pDuration  <<	"," << pConsMG << ","  << pConsCarbide << ","  << pConsLime << ")";	

  //SANKAR
	sqlstr << "insert into HDH_HM_DATA_PHASE(HM_ID,TREATID,PLANT,PHASE,START_TIME) " 
			<< "values('" << pHMId << "','" << pTreatID << "','" << pPlant << "','" << pPhase <<  "','" << now.toDBString() << "')";	

	result = result && executeSQL(sqlstr.str());
	if (pCommit)
	{
		if (result)
		{
			commit();
		}
		else
		{
			rollback();
		}
	}
	}
	catch(...)
	{
		result=false;
		log("ERROR: CHDH_HM_DATA_PHASE::doPhaseDataChange failed",1);
	}

	return result;
}


bool CHDH_HM_DATA_PHASE::doBlowEnd(const string& pHMId, const string& pTreatID, const string& pPlant, double pDuration, double pConsCarbide, double pConsMG, double pConsLime, bool pCommit)
{
	bool result=true;
	CDateTime now;
  std::stringstream sql;
	std::stringstream sqlstr;
	try
	{
			sql << "update HDH_HM_DATA_PHASE set "
				  << "END_TIME  = '" << now.toDBString() << "' ," 	
					<< "INJ_MG  = " << pConsMG	<< " ," 	
					<< "INJ_CARBIDE  = " << pConsCarbide << " ," 	
					<< "INJ_LIME  = " << pConsLime  	<< " ," 	
					<< "DURATION  = " << pDuration  	
					<< " where END_TIME IS NULL "
					<< "and HM_ID = '" << pHMId << "' and TREATID = '" << pTreatID << "' and PLANT = '" << pPlant << "'"  ; 

			result = executeSQL(sql.str());
			if (pCommit)
			{
				if (result)
				{
					commit();
				}
				else
				{
					rollback();
				}
			}
		
	}
	catch(...)
	{
		result=false;
		log("ERROR: PDH_HM_DATA_PHASE::doBlowEnd failed",1);
	}

	return result;
}

bool CHDH_HM_DATA_PHASE::insert_HDH_HM_DATA_PHASE(const string& pHMId, const string& pTreatID, const string& pPlant, bool pCommit)
{
	bool result=true;
	CDateTime now;
  std::stringstream sql;
	std::stringstream sqlstr;
	try
	{
		setHM_ID(pHMId);
		setTREATID(pTreatID);
		setPLANT(pPlant);
		//setPHASE("HMD_PHASE_PREPARATION");
		setPHASE("MONO_INJECTION_CARBIDE_START");
		setSTART_TIME(now.toDBString());
		setDURATION(0);
		setINJ_CARBIDE(0);
		setINJ_LIME(0);
		setINJ_MG(0);

	result = insert();
	if (pCommit)
	{
		if (result)
		{
			commit();
		}
		else
		{
			rollback();
		}
	}
	}
	catch(...)
	{
		result=false;
		log("ERROR: HDH_HM_DATA_PHASE::doPhaseDataChange failed",1);
	}

	return result;
}

bool CHDH_HM_DATA_PHASE::update_AfterHeatDeparture(const string& pHMId, const string& pTreatID, const string& pPlant, bool pCommit)
{
	bool result=true;
	CDateTime now;
  std::stringstream sql;
	try
	{
			sql << "update HDH_HM_DATA_PHASE set "
				<< "END_TIME  = '" << now.toDBString() << "' "	
				<< "where END_TIME IS NULL "
				<< "and HM_ID = '" << pHMId << "' and TREATID = '" << pTreatID << "' and PLANT = '" << pPlant << "'"  ; 

			result = executeSQL(sql.str());
			if (pCommit)
			{
				if (result)
				{
					commit();
				}
				else
				{
					rollback();
				}
			}
		}

	catch(...)
	{
		result=false;
		log("ERROR: CHDH_HM_DATA_PHASE::update_AfterHeatDeparture failed",1);
	}

	return result;
}



