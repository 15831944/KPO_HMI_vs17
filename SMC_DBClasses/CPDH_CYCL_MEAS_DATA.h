//## Copyright (C) 2013 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 

#if defined (_MSC_VER) && (_MSC_VER >= 1000)
#pragma once
#endif
#ifndef _INC_CPDH_CYCL_MEAS_DATA_INCLUDED
#define _INC_CPDH_CYCL_MEAS_DATA_INCLUDED

#include "CSMC_DBData.h"

class CPDH_CYCL_MEAS_DATA
: public CSMC_DBData

{

public:
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string HM_ID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TREATID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PLANT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string REVTIME;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TREATTYPE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string DURSINCEHEATANNOUNCE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string DURSINCESTARTOFHEAT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string FLOW_LIME;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string FLOW_MG;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string FLOW_CARBIDE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string CONS_LIME;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string CONS_MG;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string CONS_CARBIDE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string GAS_FLOW_N2;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string GAS_PRESSURE_N2;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string CONS_N2;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string LANCEPOS;

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPDH_CYCL_MEAS_DATA(cCBS_StdConnection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPDH_CYCL_MEAS_DATA(cCBS_Connection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPDH_CYCL_MEAS_DATA();

  //##DBClassCodeUtility ! DO NOT EDIT !
  ~CPDH_CYCL_MEAS_DATA();

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getHM_ID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setHM_ID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getTREATID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTREATID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getPLANT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPLANT(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CDateTime getREVTIME(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setREVTIME(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  long getTREATTYPE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTREATTYPE(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getDURSINCEHEATANNOUNCE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setDURSINCEHEATANNOUNCE(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getDURSINCESTARTOFHEAT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setDURSINCESTARTOFHEAT(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getFLOW_LIME(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setFLOW_LIME(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getFLOW_MG(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setFLOW_MG(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getFLOW_CARBIDE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setFLOW_CARBIDE(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getCONS_LIME(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setCONS_LIME(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getCONS_MG(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setCONS_MG(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getCONS_CARBIDE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setCONS_CARBIDE(double value);

 //##DBClassCodeUtility ! DO NOT EDIT !
  double getGAS_FLOW_N2(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setGAS_FLOW_N2(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getGAS_PRESSURE_N2(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setGAS_PRESSURE_N2(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getCONS_N2(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setCONS_N2(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  long getLANCEPOS(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setLANCEPOS(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  bool select(const std::string& HM_ID, const std::string& TREATID, const std::string& PLANT, const CDateTime& REVTIME);

  //## ----------------------------------END-GENERATED-CODE--------------------- 

  //## ----------------------------------YOUR-CODE------------------------------ 

  
  bool select(const std::string& HM_ID, const std::string& TREATID, const std::string& PLANT);

  bool select_totalconsumedCac2MG(const std::string& HM_ID, const std::string& TREATID, const std::string& PLANT);

  bool doCyclicMeasurement(const std::string& HM_ID, const std::string& TREATID, const std::string& PLANT,long pBlowingMode, double pBlowRateMg, double pBlowRateLime, double BlowRateCarbide, double pBlownMg, double pBlownLime, double pBlownCarbide, long DurSinceHeatAnnounce, long DurSinceHeatStart,double PoderInjGasFlowRate_N2,double PoderInjGasPressure_N2,double TotalNConsumed, long LancePos);

};

#endif /* _INC_CPDH_CYCL_MEAS_DATA_INCLUDED */
