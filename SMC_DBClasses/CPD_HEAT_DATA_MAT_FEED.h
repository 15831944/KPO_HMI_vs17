//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 

#if defined (_MSC_VER) && (_MSC_VER >= 1000)
#pragma once
#endif
#ifndef _INC_CPD_HEAT_DATA_MAT_FEED_INCLUDED
#define _INC_CPD_HEAT_DATA_MAT_FEED_INCLUDED

#include "CSMC_DBData.h"

class CPD_HEAT_DATA_MAT_FEED
: public CSMC_DBData
{

public:
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string HEATID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TREATID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PLANT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string FEEDERNO;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string MAT_CODE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string STARTTIME;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string ENDTIME;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string FEEDINGRATE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string MAT_WEIGHT;

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPD_HEAT_DATA_MAT_FEED(cCBS_StdConnection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPD_HEAT_DATA_MAT_FEED(cCBS_Connection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPD_HEAT_DATA_MAT_FEED();

  //##DBClassCodeUtility ! DO NOT EDIT !
  ~CPD_HEAT_DATA_MAT_FEED();

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Internal heat identifier
  std::string getHEATID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setHEATID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Treatment identifier
  std::string getTREATID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTREATID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Plant identifier
  std::string getPLANT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPLANT(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Basket number
  long getFEEDERNO(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setFEEDERNO(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getMAT_CODE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setMAT_CODE(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CDateTime getSTARTTIME(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSTARTTIME(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CDateTime getENDTIME(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setENDTIME(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Absolute feeding rate in kg/min
  double getFEEDINGRATE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setFEEDINGRATE(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getMAT_WEIGHT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setMAT_WEIGHT(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  bool select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long FEEDERNO, const std::string& MAT_CODE, const CDateTime& STARTTIME);

  //## ----------------------------------END-GENERATED-CODE--------------------- 

  //## ----------------------------------YOUR-CODE------------------------------ 

  double getDRIweight(const std::string& PLANT, const std::string& HEATID, const std::string& TREATID, const std::string& mat_code );

};

#endif /* _INC_CPD_HEAT_DATA_MAT_FEED_INCLUDED */
