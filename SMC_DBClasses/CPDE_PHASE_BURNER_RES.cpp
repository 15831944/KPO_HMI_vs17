//## Copyright (C) 2010 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CIntfData.h"

//#include "iSMC_DataDefinitions_s.hh"
#include "CGCE_BURNER.h"
#include "CDataConversion.h"
#include "DEF_GCE_BURNER_GASTYPE.h"
#include "CPDE_PHASE_BURNER_RES.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_PHASE_BURNER_RES::HEATID("HEATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_PHASE_BURNER_RES::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_PHASE_BURNER_RES::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_PHASE_BURNER_RES::PROCPHASE("PROCPHASE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_PHASE_BURNER_RES::PROCPHASENO("PROCPHASENO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_PHASE_BURNER_RES::STEPNO("STEPNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_PHASE_BURNER_RES::BURNERNAME("BURNERNAME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_PHASE_BURNER_RES::BASWEIGHT("BASWEIGHT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_PHASE_BURNER_RES::SPECEGY("SPECEGY");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_PHASE_BURNER_RES::STARTTIME("STARTTIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_PHASE_BURNER_RES::STEPDUR("STEPDUR");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_PHASE_BURNER_RES::ELEC_ENERGY("ELEC_ENERGY");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_PHASE_BURNER_RES::REVTIME("REVTIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_PHASE_BURNER_RES::GASTYPE("GASTYPE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_PHASE_BURNER_RES::GASFLOW("GASFLOW");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_PHASE_BURNER_RES::O2_FLOW("O2_FLOW");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_PHASE_BURNER_RES::FLAMEPROFILENO("FLAMEPROFILENO");

//##DBClassCodeUtility ! DO NOT EDIT !
CPDE_PHASE_BURNER_RES::CPDE_PHASE_BURNER_RES(cCBS_StdConnection* Connection)
:CSMC_DBData("PDE_PHASE_BURNER_RES",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPDE_PHASE_BURNER_RES::CPDE_PHASE_BURNER_RES(cCBS_Connection* Connection)
:CSMC_DBData("PDE_PHASE_BURNER_RES",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPDE_PHASE_BURNER_RES::CPDE_PHASE_BURNER_RES()
:CSMC_DBData("PDE_PHASE_BURNER_RES")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPDE_PHASE_BURNER_RES::~CPDE_PHASE_BURNER_RES()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDE_PHASE_BURNER_RES::getHEATID(long Row)
{
  return getString(CPDE_PHASE_BURNER_RES::HEATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_PHASE_BURNER_RES::setHEATID(const std::string& value)
{
  setString(CPDE_PHASE_BURNER_RES::HEATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDE_PHASE_BURNER_RES::getTREATID(long Row)
{
  return getString(CPDE_PHASE_BURNER_RES::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_PHASE_BURNER_RES::setTREATID(const std::string& value)
{
  setString(CPDE_PHASE_BURNER_RES::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDE_PHASE_BURNER_RES::getPLANT(long Row)
{
  return getString(CPDE_PHASE_BURNER_RES::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_PHASE_BURNER_RES::setPLANT(const std::string& value)
{
  setString(CPDE_PHASE_BURNER_RES::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDE_PHASE_BURNER_RES::getPROCPHASE(long Row)
{
  return getString(CPDE_PHASE_BURNER_RES::PROCPHASE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_PHASE_BURNER_RES::setPROCPHASE(const std::string& value)
{
  setString(CPDE_PHASE_BURNER_RES::PROCPHASE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDE_PHASE_BURNER_RES::getPROCPHASENO(long Row)
{
  return getLong(CPDE_PHASE_BURNER_RES::PROCPHASENO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_PHASE_BURNER_RES::setPROCPHASENO(long value)
{
  setLong(CPDE_PHASE_BURNER_RES::PROCPHASENO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDE_PHASE_BURNER_RES::getSTEPNO(long Row)
{
  return getLong(CPDE_PHASE_BURNER_RES::STEPNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_PHASE_BURNER_RES::setSTEPNO(long value)
{
  setLong(CPDE_PHASE_BURNER_RES::STEPNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDE_PHASE_BURNER_RES::getBURNERNAME(long Row)
{
  return getString(CPDE_PHASE_BURNER_RES::BURNERNAME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_PHASE_BURNER_RES::setBURNERNAME(const std::string& value)
{
  setString(CPDE_PHASE_BURNER_RES::BURNERNAME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDE_PHASE_BURNER_RES::getBASWEIGHT(long Row)
{
  return getDouble(CPDE_PHASE_BURNER_RES::BASWEIGHT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_PHASE_BURNER_RES::setBASWEIGHT(double value)
{
  setDouble(CPDE_PHASE_BURNER_RES::BASWEIGHT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDE_PHASE_BURNER_RES::getSPECEGY(long Row)
{
  return getDouble(CPDE_PHASE_BURNER_RES::SPECEGY, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_PHASE_BURNER_RES::setSPECEGY(double value)
{
  setDouble(CPDE_PHASE_BURNER_RES::SPECEGY, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDE_PHASE_BURNER_RES::getSTARTTIME(long Row)
{
  return getDouble(CPDE_PHASE_BURNER_RES::STARTTIME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_PHASE_BURNER_RES::setSTARTTIME(double value)
{
  setDouble(CPDE_PHASE_BURNER_RES::STARTTIME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDE_PHASE_BURNER_RES::getSTEPDUR(long Row)
{
  return getDouble(CPDE_PHASE_BURNER_RES::STEPDUR, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_PHASE_BURNER_RES::setSTEPDUR(double value)
{
  setDouble(CPDE_PHASE_BURNER_RES::STEPDUR, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDE_PHASE_BURNER_RES::getELEC_ENERGY(long Row)
{
  return getDouble(CPDE_PHASE_BURNER_RES::ELEC_ENERGY, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_PHASE_BURNER_RES::setELEC_ENERGY(double value)
{
  setDouble(CPDE_PHASE_BURNER_RES::ELEC_ENERGY, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CPDE_PHASE_BURNER_RES::getREVTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CPDE_PHASE_BURNER_RES::REVTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_PHASE_BURNER_RES::setREVTIME(const CDateTime& value)
{
 setString(CPDE_PHASE_BURNER_RES::REVTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDE_PHASE_BURNER_RES::getGASTYPE(long Row)
{
  return getString(CPDE_PHASE_BURNER_RES::GASTYPE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_PHASE_BURNER_RES::setGASTYPE(const std::string& value)
{
  setString(CPDE_PHASE_BURNER_RES::GASTYPE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDE_PHASE_BURNER_RES::getGASFLOW(long Row)
{
  return getDouble(CPDE_PHASE_BURNER_RES::GASFLOW, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_PHASE_BURNER_RES::setGASFLOW(double value)
{
  setDouble(CPDE_PHASE_BURNER_RES::GASFLOW, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDE_PHASE_BURNER_RES::getO2_FLOW(long Row)
{
  return getDouble(CPDE_PHASE_BURNER_RES::O2_FLOW, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_PHASE_BURNER_RES::setO2_FLOW(double value)
{
  setDouble(CPDE_PHASE_BURNER_RES::O2_FLOW, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDE_PHASE_BURNER_RES::getFLAMEPROFILENO(long Row)
{
  return getLong(CPDE_PHASE_BURNER_RES::FLAMEPROFILENO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_PHASE_BURNER_RES::setFLAMEPROFILENO(long value)
{
  setLong(CPDE_PHASE_BURNER_RES::FLAMEPROFILENO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CPDE_PHASE_BURNER_RES::select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const std::string& PROCPHASE, long PROCPHASENO, long STEPNO, const std::string& BURNERNAME)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPDE_PHASE_BURNER_RES::HEATID,HEATID);
  addWhereClause(CPDE_PHASE_BURNER_RES::TREATID,TREATID);
  addWhereClause(CPDE_PHASE_BURNER_RES::PLANT,PLANT);
  addWhereClause(CPDE_PHASE_BURNER_RES::PROCPHASE,PROCPHASE);
  addWhereClause(CPDE_PHASE_BURNER_RES::PROCPHASENO,PROCPHASENO);
  addWhereClause(CPDE_PHASE_BURNER_RES::STEPNO,STEPNO);
  addWhereClause(CPDE_PHASE_BURNER_RES::BURNERNAME,BURNERNAME);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

void CPDE_PHASE_BURNER_RES::doOnConstruct()
{
  m_pGCE_Burner = new CGCE_BURNER( m_pCBS_StdConnection );
}

void CPDE_PHASE_BURNER_RES::doOnDestruct()
{
  if ( m_pGCE_Burner )
  {
    delete m_pGCE_Burner;
    m_pGCE_Burner = 0;
  }
}

bool CPDE_PHASE_BURNER_RES::exists(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT)
{
	cleanWhereStatement();

	m_Statement = "Select HEATID from " + m_TableName;

	addWhereClause(CPDE_PHASE_BURNER_RES::HEATID,HEATID);
	addWhereClause(CPDE_PHASE_BURNER_RES::TREATID,TREATID);
	addWhereClause(CPDE_PHASE_BURNER_RES::PLANT,PLANT);
   
  std::string sWhereStatement = getWhereStatement();
  //to avoid the exception like 'Select HEATID from PP_HEAT AND ROWNUM = 1 '
  if(sWhereStatement.length() > 0 ) 
  {
    // do not use ROWNUM in "addWhereClause", ROWNUM is not a table column and where statement will be used for deletion at "deleteRows"
    m_Statement += sWhereStatement + " AND ROWNUM = 1 ;";
  }
  else
  {
    return false;
  }

	return CSMC_DBData::select();
}

bool CPDE_PHASE_BURNER_RES::writeResults(const std::string & HeatID, const std::string & TreatID, const std::string& PLANT, const long PLANTNO, double DurSinceHeatAnnounce, const seqEAFBurnerPredRes &SeqEAFBurnerPredRes)
{
  bool            RetValue   = false;
  long            PredLength = 0;
  long            i;
  CDateTime       now;
  sEAFBurnerPredRes Burner;
  string          Phase;
  string          Code;
  double          StartTime  = 0;
  long            ActualBurnerNo = 0;

  //@SANKAR : 05.03.2010
  try
  {
    PredLength = CIntfData::getLength(SeqEAFBurnerPredRes);

    RetValue = !exists(HeatID, TreatID, PLANT);
    //some data found -> delete them
    if (!RetValue && PredLength > 0 )
    {
      RetValue = deleteRows();
      if (!RetValue)
        setLastError(std::string("ERROR_DELETE_DATA"), 0, getActStatement());
    }

    for (i = 0 ; i < PredLength ; ++i)
    {
      CIntfData::getAt(Burner,&SeqEAFBurnerPredRes,i);
     
      string BurnerName = Burner.BurnerName;

      /*ActualBurnerNo = CDataConversion::StringToLong(string(Burner.BurnerName));      
      bool isBurnerExist = m_pGCE_Burner->selectByL1BurnerNo(PLANTNO,ActualBurnerNo);
      if(isBurnerExist)
      {
        BurnerName  = m_pGCE_Burner->getBURNERNAME(1);

      }else 
      {
        log ("Invalid Burner NO from Model, BurnerNo not 1 nor 2");
        return false;
      }*/

      
      RetValue = select( HeatID,TreatID ,PLANT,string(Burner.Phase),Burner.PhaseNo,Burner.Step,BurnerName);

      setHEATID(HeatID);
      setTREATID(TreatID);
      setPLANT(PLANT);
      setBURNERNAME(BurnerName); 
      setPROCPHASENO(Burner.PhaseNo);
      setPROCPHASE(string(Burner.Phase));
      setSTEPNO(Burner.Step);
      setGASTYPE(std::string(DEF_GCE_BURNER_GASTYPE::BG)); //wrapper does not send gastype
      setBASWEIGHT(Burner.BaseMass);
      setSPECEGY(Burner.SpecEgy); 
      setSTARTTIME(Burner.DurUntilStartOfStep); //DurSinceHeatAnnounce
      setGASFLOW(Burner.GasFlow);
      setO2_FLOW(Burner.O2Flow);
      setREVTIME(now);     
      setELEC_ENERGY(Burner.ElecEgy);
      setSTEPDUR(Burner.DurStep);

      //StartTime += Burner.DurStep;

      if (RetValue)
        RetValue = update();
      else
        RetValue = insert();

      if (!RetValue) break;
    }

    // commit only if own values  are successfully written
    if (RetValue)
    {
      commit();
    }
    else
    {
      rollback();
    }
  }
  catch(...)
  {
    RetValue = false;
    rollback();
  }
  return RetValue;
}


