//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CGC_SAMPLELOC.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_SAMPLELOC::SAMPLELOC("SAMPLELOC");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_SAMPLELOC::SAMPLELOCDESCR("SAMPLELOCDESCR");

//##DBClassCodeUtility ! DO NOT EDIT !
CGC_SAMPLELOC::CGC_SAMPLELOC(cCBS_StdConnection* Connection)
:CSMC_DBData("GC_SAMPLELOC",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGC_SAMPLELOC::CGC_SAMPLELOC(cCBS_Connection* Connection)
:CSMC_DBData("GC_SAMPLELOC",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGC_SAMPLELOC::CGC_SAMPLELOC()
:CSMC_DBData("GC_SAMPLELOC")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGC_SAMPLELOC::~CGC_SAMPLELOC()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Sample location
std::string CGC_SAMPLELOC::getSAMPLELOC(long Row)
{
  return getString(CGC_SAMPLELOC::SAMPLELOC, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_SAMPLELOC::setSAMPLELOC(const std::string& value)
{
  setString(CGC_SAMPLELOC::SAMPLELOC, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Description of Sample location
std::string CGC_SAMPLELOC::getSAMPLELOCDESCR(long Row)
{
  return getString(CGC_SAMPLELOC::SAMPLELOCDESCR, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_SAMPLELOC::setSAMPLELOCDESCR(const std::string& value)
{
  setString(CGC_SAMPLELOC::SAMPLELOCDESCR, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CGC_SAMPLELOC::select(const std::string& SAMPLELOC)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CGC_SAMPLELOC::SAMPLELOC,SAMPLELOC);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CGC_SAMPLELOC::selectSampleLoc(const std::string& SAMPLELOCDESCR)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CGC_SAMPLELOC::SAMPLELOCDESCR,SAMPLELOCDESCR);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

std::string CGC_SAMPLELOC::getSampleLocDescr(const std::string& SAMPLELOC)
{

  std::string SampleLocDescr = CSMC_DBData::unspecString;

  if ( select ( SAMPLELOC ) )
  {
    SampleLocDescr = getSAMPLELOCDESCR(1);
  }

  return SampleLocDescr;
}


