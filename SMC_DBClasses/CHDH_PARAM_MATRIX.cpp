//## Copyright (C) 2013 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CHDH_PARAM_MATRIX.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PARAM_MATRIX::HM_ID("HM_ID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PARAM_MATRIX::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PARAM_MATRIX::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PARAM_MATRIX::UNITGROUPNO("UNITGROUPNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PARAM_MATRIX::PRACNO("PRACNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PARAM_MATRIX::PNAME("PNAME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PARAM_MATRIX::TYPE("TYPE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PARAM_MATRIX::KEY1("KEY1");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PARAM_MATRIX::KEY2("KEY2");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PARAM_MATRIX::VALUE("VALUE");

//##DBClassCodeUtility ! DO NOT EDIT !
CHDH_PARAM_MATRIX::CHDH_PARAM_MATRIX(cCBS_StdConnection* Connection)
:CSMC_DBData("HDH_PARAM_MATRIX",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHDH_PARAM_MATRIX::CHDH_PARAM_MATRIX(cCBS_Connection* Connection)
:CSMC_DBData("HDH_PARAM_MATRIX",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHDH_PARAM_MATRIX::CHDH_PARAM_MATRIX()
:CSMC_DBData("HDH_PARAM_MATRIX")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHDH_PARAM_MATRIX::~CHDH_PARAM_MATRIX()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_PARAM_MATRIX::getHM_ID(long Row)
{
  return getString(CHDH_PARAM_MATRIX::HM_ID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PARAM_MATRIX::setHM_ID(const std::string& value)
{
  setString(CHDH_PARAM_MATRIX::HM_ID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_PARAM_MATRIX::getTREATID(long Row)
{
  return getString(CHDH_PARAM_MATRIX::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PARAM_MATRIX::setTREATID(const std::string& value)
{
  setString(CHDH_PARAM_MATRIX::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_PARAM_MATRIX::getPLANT(long Row)
{
  return getString(CHDH_PARAM_MATRIX::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PARAM_MATRIX::setPLANT(const std::string& value)
{
  setString(CHDH_PARAM_MATRIX::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDH_PARAM_MATRIX::getUNITGROUPNO(long Row)
{
  return getLong(CHDH_PARAM_MATRIX::UNITGROUPNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PARAM_MATRIX::setUNITGROUPNO(long value)
{
  setLong(CHDH_PARAM_MATRIX::UNITGROUPNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDH_PARAM_MATRIX::getPRACNO(long Row)
{
  return getLong(CHDH_PARAM_MATRIX::PRACNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PARAM_MATRIX::setPRACNO(long value)
{
  setLong(CHDH_PARAM_MATRIX::PRACNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_PARAM_MATRIX::getPNAME(long Row)
{
  return getString(CHDH_PARAM_MATRIX::PNAME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PARAM_MATRIX::setPNAME(const std::string& value)
{
  setString(CHDH_PARAM_MATRIX::PNAME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDH_PARAM_MATRIX::getTYPE(long Row)
{
  return getLong(CHDH_PARAM_MATRIX::TYPE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PARAM_MATRIX::setTYPE(long value)
{
  setLong(CHDH_PARAM_MATRIX::TYPE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_PARAM_MATRIX::getKEY1(long Row)
{
  return getString(CHDH_PARAM_MATRIX::KEY1, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PARAM_MATRIX::setKEY1(const std::string& value)
{
  setString(CHDH_PARAM_MATRIX::KEY1, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_PARAM_MATRIX::getKEY2(long Row)
{
  return getString(CHDH_PARAM_MATRIX::KEY2, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PARAM_MATRIX::setKEY2(const std::string& value)
{
  setString(CHDH_PARAM_MATRIX::KEY2, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_PARAM_MATRIX::getVALUE(long Row)
{
  return getString(CHDH_PARAM_MATRIX::VALUE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PARAM_MATRIX::setVALUE(const std::string& value)
{
  setString(CHDH_PARAM_MATRIX::VALUE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CHDH_PARAM_MATRIX::select(const std::string& HM_ID, const std::string& TREATID, const std::string& PLANT, long UNITGROUPNO, long PRACNO, const std::string& PNAME, long TYPE, const std::string& KEY1, const std::string& KEY2)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CHDH_PARAM_MATRIX::HM_ID,HM_ID);
  addWhereClause(CHDH_PARAM_MATRIX::TREATID,TREATID);
  addWhereClause(CHDH_PARAM_MATRIX::PLANT,PLANT);
  addWhereClause(CHDH_PARAM_MATRIX::UNITGROUPNO,UNITGROUPNO);
  addWhereClause(CHDH_PARAM_MATRIX::PRACNO,PRACNO);
  addWhereClause(CHDH_PARAM_MATRIX::PNAME,PNAME);
  addWhereClause(CHDH_PARAM_MATRIX::TYPE,TYPE);
  addWhereClause(CHDH_PARAM_MATRIX::KEY1,KEY1);
  addWhereClause(CHDH_PARAM_MATRIX::KEY2,KEY2);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CHDH_PARAM_MATRIX::copyHDHParamMatrix(const std::string& HM_ID, const std::string& TREATID, const std::string& PLANT, bool pCommit)
{
	bool result=true;
	std::stringstream sql;
	
	//create the condition
		
	sql << "insert into HDH_PARAM_MATRIX (HM_ID, TREATID, PLANT, UNITGROUPNO, PNAME, TYPE,"
		<< "  PRACNO, KEY1, KEY2, VALUE)"
		<< " (select '" << HM_ID << "', '" << TREATID << "', '" << PLANT << "', UNITGROUPNO,"
		<< "  PNAME, TYPE, PRACNO, KEY1, KEY2, VALUE"
		<< " from GT_PARAM_MATRIX"
		<< " where UNITGROUPNO in ( " << 101 << ")"
		<< "   and PRACNO in (0, " << 1 << "))";

	result = result && executeSQL(sql.str());
	//if (!result)
		/*pError = getLastError();*/

	if(pCommit)
  {
		if (result)
			this->commit();
		else
			rollback();
  }

	return result;
}
bool CHDH_PARAM_MATRIX::delete_HDH_PARAM_MATRIX(const std::string& HM_ID, const std::string& TREATID, const std::string& PLANT)
{
	bool result;
  std::stringstream sql;
	try
	{
		addWhereClause("HM_ID",HM_ID);
		addWhereClause("TREATID",TREATID);
		addWhereClause("PLANT",PLANT);
		//sql += getWhereStatement() + ";";
		sql << "delete from HDH_PARAM_MATRIX" 
			  << getWhereStatement();
		/*<< "  where HEATID = '" << pHeatId << "'"
		<< "   and TREATID = '" << pTreatId << "'"
		<< "   and PLANT = '" << pPlant << "'";*/

	result = executeSQL(sql.str());
	if (result)
    {
      commit();
    }
    else
    {
      rollback();
      log("ERROR: CHDH_PARAM_MATRIX::delete_HDH_PARAM_MATRIX failed",1);
    }
	}
	catch(...)
	{
		result=false;
	}

	return result;
}



