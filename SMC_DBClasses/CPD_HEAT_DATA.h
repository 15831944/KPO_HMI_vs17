//## Copyright (C) 2010 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 

#if defined (_MSC_VER) && (_MSC_VER >= 1000)
#pragma once
#endif
#ifndef _INC_CPD_HEAT_DATA_INCLUDED
#define _INC_CPD_HEAT_DATA_INCLUDED

#include "CSMC_DBData.h"

class CPD_HEAT_DATA
: public CSMC_DBData
{

public:
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string HEATID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TREATID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PLANT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string STEELGRADECODE_PLAN;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string STEELGRADECODE_ACT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PRODORDERID_PLAN;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PRODORDERID_ACT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string AIMSTEELWGT_PLAN;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string AIMSTEELWGT_MOD;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string AIMTEMP_PLAN;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string AIMTEMP_MOD;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string HEATANNOUNCE_OFFLINE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string HEATANNOUNCE_ACT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TREATSTART_PLAN;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TREATSTART_MOD;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TREATSTART_ACT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TREATEND_PLAN;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TREATEND_MOD;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TREATEND_CALC;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TREATEND_ACT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string HEATDEPARTURE_ACT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TREATEND_PREV;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string LADLETYPE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string LADLENO;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string STEELMASS;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string SLAGMASS;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string SAMPLE_REF;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string REVTIME;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string USERCODE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TEMP_SAMPLES;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string STEEL_SAMPLES;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string SLAG_SAMPLES;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string STEELMASS_START;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string SLAGMASS_START;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string ROUTECODE_PLAN;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string ROUTECODE_ACT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TREATMENTDURATION;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string FINALTEMP;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string SHIFT_ID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string CREW_ID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string CREW_RESPONSIBILITY;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string HEAT_RESPONSIBILITY;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string COMMENTS;

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPD_HEAT_DATA(cCBS_StdConnection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPD_HEAT_DATA(cCBS_Connection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPD_HEAT_DATA();

  //##DBClassCodeUtility ! DO NOT EDIT !
  ~CPD_HEAT_DATA();

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Internal heat identifier
  std::string getHEATID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setHEATID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Treatment identifier
  std::string getTREATID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTREATID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Plant identifier
  std::string getPLANT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPLANT(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Planned steel grade code
  std::string getSTEELGRADECODE_PLAN(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSTEELGRADECODE_PLAN(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Actual Steel grade code
  std::string getSTEELGRADECODE_ACT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSTEELGRADECODE_ACT(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##From PP_ORDER as planned
  std::string getPRODORDERID_PLAN(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPRODORDERID_PLAN(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##From PP_ORDER but modified
  std::string getPRODORDERID_ACT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPRODORDERID_ACT(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Aim steel weight according production order.
  double getAIMSTEELWGT_PLAN(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setAIMSTEELWGT_PLAN(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Aim steel weight according operator. (= Order if not changed)
  double getAIMSTEELWGT_MOD(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setAIMSTEELWGT_MOD(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Aim temperature according plan.
  double getAIMTEMP_PLAN(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setAIMTEMP_PLAN(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Aim temperature according operator modification
  double getAIMTEMP_MOD(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setAIMTEMP_MOD(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##In case a model supports offline calculation for e.g. scrap order this time stamp is used to have a complete time line for the heat
  CDateTime getHEATANNOUNCE_OFFLINE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setHEATANNOUNCE_OFFLINE(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Heat announcement time
  CDateTime getHEATANNOUNCE_ACT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setHEATANNOUNCE_ACT(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Treatment start from schedule
  CDateTime getTREATSTART_PLAN(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTREATSTART_PLAN(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Treatment start, schedule modified
  CDateTime getTREATSTART_MOD(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTREATSTART_MOD(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Actual treatment start
  CDateTime getTREATSTART_ACT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTREATSTART_ACT(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Treatment end from schedule
  CDateTime getTREATEND_PLAN(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTREATEND_PLAN(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Treatment end, schedule modified
  CDateTime getTREATEND_MOD(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTREATEND_MOD(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Treatment end time calculated by model
  CDateTime getTREATEND_CALC(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTREATEND_CALC(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Actual treatment end
  CDateTime getTREATEND_ACT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTREATEND_ACT(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Heat departure time
  CDateTime getHEATDEPARTURE_ACT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setHEATDEPARTURE_ACT(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Last treatment end, should be filled from PD_PLANTSTATUS_PLANT.LASTTREATENDTIME
  CDateTime getTREATEND_PREV(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTREATEND_PREV(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##e.g. Hot Metal -> H, Teeming -> T
  std::string getLADLETYPE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setLADLETYPE(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Unique ladle number
  long getLADLENO(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setLADLENO(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Cummulated steel mass from all additions, Eng. Unit : kg, 
  double getSTEELMASS(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSTEELMASS(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Cummulated slag mass from all additions, Eng. Unit : kg, 
  double getSLAGMASS(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSLAGMASS(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Unique sample reference
  long getSAMPLE_REF(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSAMPLE_REF(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Date and time of last revision
  CDateTime getREVTIME(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setREVTIME(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getUSERCODE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setUSERCODE(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Number of taken temperature measurements
  long getTEMP_SAMPLES(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTEMP_SAMPLES(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Number of taken steel analysis measurements
  long getSTEEL_SAMPLES(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSTEEL_SAMPLES(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Number of taken slag analysis measurements
  long getSLAG_SAMPLES(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSLAG_SAMPLES(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Steel mass at begin of treatment
  double getSTEELMASS_START(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSTEELMASS_START(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Slag mass at begin of treatment
  double getSLAGMASS_START(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSLAGMASS_START(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Planned route code
  std::string getROUTECODE_PLAN(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setROUTECODE_PLAN(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Actual route code
  std::string getROUTECODE_ACT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setROUTECODE_ACT(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Treatment duration
  double getTREATMENTDURATION(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTREATMENTDURATION(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Final temperature (measured or calculated, plant dependend)
  double getFINALTEMP(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setFINALTEMP(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Shift of Production
  std::string getSHIFT_ID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSHIFT_ID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Identification of working crew
  std::string getCREW_ID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setCREW_ID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Responsible person of crew, typically the foreman
  std::string getCREW_RESPONSIBILITY(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setCREW_RESPONSIBILITY(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Crew member (MEMBER_ID), reponsible for the heat, if required
  std::string getHEAT_RESPONSIBILITY(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setHEAT_RESPONSIBILITY(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Free text for operator comments.
  std::string getCOMMENTS(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setCOMMENTS(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  bool select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT);

  //## ----------------------------------END-GENERATED-CODE--------------------- 

  //## ----------------------------------YOUR-CODE------------------------------ 

  bool selectByPRODORDERID_ACT_ValidNotFinished(const std::string& PRODORDERID_ACT, const std::string& PLANT, long PLANTNO);

  bool selectByREVTIME(const CDateTime& REVTIME, const std::string& Operator);

  bool selectCurrentHeat(const std::string &PLANT);

  bool selectHeatInProduction(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT);

  bool selectHeatsAnnounced(const std::string& PLANT, long PLANTNO);

  bool selectHeatsInTreatment(const std::string& PLANT, long PLANTNO);

  bool selectHeatsPrepared(const std::string& PLANT, long PLANTNO);

  bool selectLastFinishedHeatByPlant( const std::string& PLANT );

  bool selectLastHeat(const std::string &PLANT);

  bool selectPrevHeatByPlantAndLadle(const std::string& HEATID, const std::string& PLANT, long LADLENO, const std::string& LADLETYPE);

  bool addCommentsForHeat(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const std::string& NewComment);

  bool deleteRowsbyHeat(const std::string& HEATID );

  bool doAnnouncement(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long PLANTNO, const std::string& USERCODE, bool Commit, cCBS_ODBC_DBError& Error);

  bool doAnnouncement(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long PLANTNO, const std::string& STEELGRADECODE, double STEELMASS, double SLAGMASS, long SAMPLE_REF, long LADLENO, const string& LADLETYPE, const string& USERCODE, bool Commit, cCBS_ODBC_DBError &Error);

  bool doAnnouncement(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long PLANTNO, const std::string& STEELGRADECODE, double STEELMASS, double SLAGMASS, long SAMPLE_REF, long LADLENO, const string& LADLETYPE, const CDateTime& TRETEND_PREV, const string& USERCODE, bool Commit, cCBS_ODBC_DBError &Error);

  bool doCancelHeat(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, bool Commit, cCBS_ODBC_DBError &Error);

  bool doChange(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const std::string& STEELGRADECODE, const std::string& PRODORDERID, double AIMSTEELWGT, double TEMP, const CDateTime& TREATSTART, const CDateTime& TREATEND, bool Commit, cCBS_ODBC_DBError &Error);

  bool doDeparture(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, bool Commit, cCBS_ODBC_DBError& Error);

  bool doHeatEnd(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, bool Commit, cCBS_ODBC_DBError& Error);

  bool isHeatDeparted(const string& HEATID, const string& TREATID, const string& PLANT);

  bool doHeatStart(const string& HEATID, const string& TREATID, const string& PLANT, bool Commit, cCBS_ODBC_DBError &Error);

  bool doLadleDataChanged(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long LADLENO, const std::string &LADLETYPE/*, const std::string& THERMALSTATUS*/, bool Commit, cCBS_ODBC_DBError &Error);

  bool doSampleRefUpdate(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long SAMPLE_REF, bool Commit, cCBS_ODBC_DBError& Error);

  bool doSetupHeat(const std::string& HEATID,const std::string& TREATID, const std::string& PLANT, const std::string STEELGRADECODE, long LADLENO, const std::string& LADLETYPE, const CDateTime &TREATSTART, const CDateTime &TREATEND, double STEELMASS, double TEMP, long SAMPLE_REF, const std::string& USERCODE, bool Commit, cCBS_ODBC_DBError& Error);

  bool doSetupHeatAnnouncement(const std::string& HEATID,const std::string& TREATID, const std::string& PLANT, const std::string STEELGRADECODE, long LADLENO, const std::string& LADLETYPE, const CDateTime &TREATSTART, const CDateTime &TREATEND, double STEELMASS, double TEMP, long SAMPLE_REF, const std::string &USERCODE, bool Commit, cCBS_ODBC_DBError &Error);

  bool doSetupHeatTreatmentStart(const std::string& HEATID,const std::string& TREATID, const std::string& PLANT, const std::string STEELGRADECODE, long LADLENO, const std::string& LADLETYPE, const CDateTime &TREATSTART, const CDateTime &TREATEND, double STEELMASS, double TEMP, long SAMPLE_REF, const std::string &USERCODE, bool Commit, cCBS_ODBC_DBError &Error);

  bool doSteelGradeChange(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const std::string& STEELGRADECODE, bool Commit, cCBS_ODBC_DBError& Error);

  bool exists(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT);

  CDateTime getLastFinishedTimeByPlant(const std::string &PLANT,const long PLANTNO);

  std::vector<long> getSampleRefList(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT);

  std::string getSteelGradeCode(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT);

  bool isHeatInProduction(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT);

  bool isHeatProductionDone(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT);

  // Return true if ProdOrderId is assigned to any heat being produced
  bool isProdOrderInProduction   (const std::string &ProdOrderId);

  // Return true if ProdOrderId is assigned to any heat that has been produced at any plant
  bool isProdOrderProductionDone (const std::string &ProdOrderId);

  bool updateShiftCrewCode(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long PLANTNO, const std::string &USERCODE, bool Commit, cCBS_ODBC_DBError &Error);

};

#endif /* _INC_CPD_HEAT_DATA_INCLUDED */
