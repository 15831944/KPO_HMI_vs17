//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 

#if defined (_MSC_VER) && (_MSC_VER >= 1000)
#pragma once
#endif
#ifndef _INC_CGC_RECIPE_L1_INCLUDED
#define _INC_CGC_RECIPE_L1_INCLUDED

#include "CSMC_DBData.h"

class CGC_RECIPE_L1
: public CSMC_DBData
{

public:
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PLANT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string RECIPENAME;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string RECIPENO;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string RECIPE_NO_L1;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string DESCRIPTION;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string DISPLAY_ORDER;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string RECIPENAME_MODEL;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string RECIPENO_MODEL;

  //##DBClassCodeUtility ! DO NOT EDIT !
  CGC_RECIPE_L1(cCBS_StdConnection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CGC_RECIPE_L1(cCBS_Connection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CGC_RECIPE_L1();

  //##DBClassCodeUtility ! DO NOT EDIT !
  ~CGC_RECIPE_L1();

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Plant identifier
  std::string getPLANT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPLANT(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Name of recipe or recipe group
  std::string getRECIPENAME(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setRECIPENAME(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Running recipe counter with a pre-defined range(0-10/14 depending on the model). If a recipe is sent again the DM checks highest RECIPENO in PD_RECIPE and uses the next one as the new one.
  long getRECIPENO(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setRECIPENO(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##This is the mapping between the RECIPENAME and the possible incremented RECIPENO to a unique number used for L1 communication.
  long getRECIPE_NO_L1(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setRECIPE_NO_L1(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Description for what this recipe is used for. For special recipes like 'L2 Manual Addition' a separate number range should be defined to difference this addition from additions calculated by the model.
  std::string getDESCRIPTION(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setDESCRIPTION(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Display order in HMI, chronological order during treatment
  long getDISPLAY_ORDER(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setDISPLAY_ORDER(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getRECIPENAME_MODEL(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setRECIPENAME_MODEL(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  long getRECIPENO_MODEL(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setRECIPENO_MODEL(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  bool select(const std::string& PLANT, const std::string& RECIPENAME, long RECIPENO);

  //## ----------------------------------END-GENERATED-CODE--------------------- 

  //## ----------------------------------YOUR-CODE------------------------------ 

  bool selectOrdered(const std::string& PLANT, const std::string& RECIPENAME, long RECIPENO);

  bool selectOrderedByModelData(const std::string& PLANT, const std::string& RECIPENAME_MODEL, long RECIPENO_MODEL);

  std::map<long, std::pair<std::string, long> > & getL1RecipeNoList(const std::string& Plant);

  std::map<std::string, long> &  getL2RecipeNameList(const std::string& Plant );

  long getMaxRecipeNo(const std::string& PLANT, const std::string& RECIPENAME_MODEL, long RECIPENO_MODEL);

  long getMinRecipeNo(const std::string& PLANT, const std::string& RECIPENAME_MODEL, long RECIPENO_MODEL);

  std::string getRecipeNameByModelData(const std::string& PLANT, const std::string& RECIPENAME_MODEL, long RECIPENO_MODEL);

};

#endif /* _INC_CGC_RECIPE_L1_INCLUDED */
