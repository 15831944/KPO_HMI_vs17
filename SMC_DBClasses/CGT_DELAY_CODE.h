//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 

#if defined (_MSC_VER) && (_MSC_VER >= 1000)
#pragma once
#endif
#ifndef _INC_CGT_DELAY_CODE_INCLUDED
#define _INC_CGT_DELAY_CODE_INCLUDED

#include "CSMC_DBData.h"

class CGT_DELAY_CODE
: public CSMC_DBData
{

public:
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PLANT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string DELAY_CODE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string GROUPNO;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string DELAYDESCR;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string USERCODE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string DEFAULT_DURATION;

  //##DBClassCodeUtility ! DO NOT EDIT !
  CGT_DELAY_CODE(cCBS_StdConnection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CGT_DELAY_CODE(cCBS_Connection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CGT_DELAY_CODE();

  //##DBClassCodeUtility ! DO NOT EDIT !
  ~CGT_DELAY_CODE();

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Plant identifier
  std::string getPLANT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPLANT(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Delay code
  std::string getDELAY_CODE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setDELAY_CODE(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  long getGROUPNO(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setGROUPNO(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Delay Description
  std::string getDELAYDESCR(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setDELAYDESCR(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##User who entered the delay
  std::string getUSERCODE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setUSERCODE(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Delay default duration
  long getDEFAULT_DURATION(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setDEFAULT_DURATION(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  bool select(const std::string& PLANT, const std::string& DELAY_CODE);

  //## ----------------------------------END-GENERATED-CODE--------------------- 

  //## ----------------------------------YOUR-CODE------------------------------ 

  bool deleteRow(const std::string& PLANT , const std::string& DELAY_CODE);

  bool updateInsertDelay(const std::string& PLANT, const std::string& DELAY_CODE, long GROUPNO, const std::string& DELAYDESCR, const std::string& DELAYDESCR_CUST, const std::string& USERCODE, long DEFAULT_DURATION, bool Commit, cCBS_ODBC_DBError &Error);

};

#endif /* _INC_CGT_DELAY_CODE_INCLUDED */
