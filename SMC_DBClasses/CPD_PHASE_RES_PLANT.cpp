//## Copyright (C) 2010 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "cCBS_StdEventLogFrameController.h"
#include "CPD_PHASE_RES_PLANT.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_PHASE_RES_PLANT::HEATID("HEATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_PHASE_RES_PLANT::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_PHASE_RES_PLANT::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_PHASE_RES_PLANT::RES_PHASENO("RES_PHASENO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_PHASE_RES_PLANT::RESULTVALNO("RESULTVALNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_PHASE_RES_PLANT::RESULTVALUE("RESULTVALUE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_PHASE_RES_PLANT::REVTIME("REVTIME");

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_PHASE_RES_PLANT::CPD_PHASE_RES_PLANT(cCBS_StdConnection* Connection)
:CSMC_DBData("PD_PHASE_RES_PLANT",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_PHASE_RES_PLANT::CPD_PHASE_RES_PLANT(cCBS_Connection* Connection)
:CSMC_DBData("PD_PHASE_RES_PLANT",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_PHASE_RES_PLANT::CPD_PHASE_RES_PLANT()
:CSMC_DBData("PD_PHASE_RES_PLANT")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_PHASE_RES_PLANT::~CPD_PHASE_RES_PLANT()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Internal heat identifier
std::string CPD_PHASE_RES_PLANT::getHEATID(long Row)
{
  return getString(CPD_PHASE_RES_PLANT::HEATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_PHASE_RES_PLANT::setHEATID(const std::string& value)
{
  setString(CPD_PHASE_RES_PLANT::HEATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Treatment identifier
std::string CPD_PHASE_RES_PLANT::getTREATID(long Row)
{
  return getString(CPD_PHASE_RES_PLANT::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_PHASE_RES_PLANT::setTREATID(const std::string& value)
{
  setString(CPD_PHASE_RES_PLANT::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Plant identifier
std::string CPD_PHASE_RES_PLANT::getPLANT(long Row)
{
  return getString(CPD_PHASE_RES_PLANT::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_PHASE_RES_PLANT::setPLANT(const std::string& value)
{
  setString(CPD_PHASE_RES_PLANT::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Result Phase No for storing into the Result tables
long CPD_PHASE_RES_PLANT::getRES_PHASENO(long Row)
{
  return getLong(CPD_PHASE_RES_PLANT::RES_PHASENO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_PHASE_RES_PLANT::setRES_PHASENO(long value)
{
  setLong(CPD_PHASE_RES_PLANT::RES_PHASENO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPD_PHASE_RES_PLANT::getRESULTVALNO(long Row)
{
  return getLong(CPD_PHASE_RES_PLANT::RESULTVALNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_PHASE_RES_PLANT::setRESULTVALNO(long value)
{
  setLong(CPD_PHASE_RES_PLANT::RESULTVALNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPD_PHASE_RES_PLANT::getRESULTVALUE(long Row)
{
  return getDouble(CPD_PHASE_RES_PLANT::RESULTVALUE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_PHASE_RES_PLANT::setRESULTVALUE(double value)
{
  setDouble(CPD_PHASE_RES_PLANT::RESULTVALUE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Date and time of last revision
CDateTime CPD_PHASE_RES_PLANT::getREVTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CPD_PHASE_RES_PLANT::REVTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_PHASE_RES_PLANT::setREVTIME(const CDateTime& value)
{
 setString(CPD_PHASE_RES_PLANT::REVTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CPD_PHASE_RES_PLANT::select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long RES_PHASENO, long RESULTVALNO)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPD_PHASE_RES_PLANT::HEATID,HEATID);
  addWhereClause(CPD_PHASE_RES_PLANT::TREATID,TREATID);
  addWhereClause(CPD_PHASE_RES_PLANT::PLANT,PLANT);
  addWhereClause(CPD_PHASE_RES_PLANT::RES_PHASENO,RES_PHASENO);
  addWhereClause(CPD_PHASE_RES_PLANT::RESULTVALNO,RESULTVALNO);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CPD_PHASE_RES_PLANT::deleteRow(const std::string& HeatID, const std::string& TreatID, const std::string& Plant)
{
  bool RetValue = false;

  try
  {
    cleanWhereStatement();

    addWhereClause(CPD_PHASE_RES_PLANT::HEATID,HeatID);
    addWhereClause(CPD_PHASE_RES_PLANT::TREATID,TreatID);
    addWhereClause(CPD_PHASE_RES_PLANT::PLANT,Plant);
	
    RetValue = deleteRows();
  }
  catch(...)
  {
    cCBS_StdEventLogFrame *pEventLog = cCBS_StdEventLogFrameController::getInstance()->getpEventLog();
    sEventLogMessage sMessage = cCBS_StdEventLog::initMessage(__FILE__,__LINE__);
    pEventLog->EL_ExceptionCaught(sMessage,"","CPD_PHASE_RES_PLANT::cleanData","");
    RetValue = false;
  }
  return RetValue;
}

bool CPD_PHASE_RES_PLANT::write(const std::string& HeatID, const std::string& TreatID, const std::string& Plant, long Res_PhaseNo, std::map<long,double> Results)
{
  bool RetValue = false;

  std::map<long,double>::iterator it;

  for ( it = Results.begin() ; it != Results.end() ; ++it )
  {
    RetValue = write(HeatID, TreatID, Plant, Res_PhaseNo, it->first , it->second, true );
    if (!RetValue)
    {
      break;
    }
  }

  return RetValue;
}

bool CPD_PHASE_RES_PLANT::write(const std::string& HeatID, const std::string& TreatID, const std::string& Plant, long Res_PhaseNo, long ResultValNo, double ResultValue, bool Commit)
{
  bool RetValue = true;

  try
  {
    CDateTime now;

    cleanWhereStatement();

    addWhereClause(CPD_PHASE_RES_PLANT::HEATID,HeatID);
    addWhereClause(CPD_PHASE_RES_PLANT::TREATID,TreatID);
    addWhereClause(CPD_PHASE_RES_PLANT::PLANT,Plant);
    addWhereClause(CPD_PHASE_RES_PLANT::RES_PHASENO,Res_PhaseNo);
    addWhereClause(CPD_PHASE_RES_PLANT::RESULTVALNO,ResultValNo);

    setHEATID(HeatID);
    setTREATID(TreatID);
    setPLANT(Plant);
    setRES_PHASENO(Res_PhaseNo); 
    setRESULTVALNO(ResultValNo);

    setREVTIME(now);
    setRESULTVALUE(ResultValue);

    if ( select(HeatID,TreatID,Plant,Res_PhaseNo,ResultValNo) )
      RetValue = update();
    else
      RetValue = insert();

    //RetValue = updateOrInsert();
	
	  if (Commit)
	  {
		  if (RetValue)
			  commit();
		  else
			  rollback();
	  }
  }
  catch(...)
  {
    RetValue = false;
  }

  return RetValue;
}


