//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CGT_EQUIV_ENTRY.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_EQUIV_ENTRY::EQ_NAME("EQ_NAME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_EQUIV_ENTRY::TYPE("TYPE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_EQUIV_ENTRY::ENAME("ENAME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_EQUIV_ENTRY::FACTOR("FACTOR");

//##DBClassCodeUtility ! DO NOT EDIT !
CGT_EQUIV_ENTRY::CGT_EQUIV_ENTRY(cCBS_StdConnection* Connection)
:CSMC_DBData("GT_EQUIV_ENTRY",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGT_EQUIV_ENTRY::CGT_EQUIV_ENTRY(cCBS_Connection* Connection)
:CSMC_DBData("GT_EQUIV_ENTRY",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGT_EQUIV_ENTRY::CGT_EQUIV_ENTRY()
:CSMC_DBData("GT_EQUIV_ENTRY")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGT_EQUIV_ENTRY::~CGT_EQUIV_ENTRY()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Equivalence name
std::string CGT_EQUIV_ENTRY::getEQ_NAME(long Row)
{
  return getString(CGT_EQUIV_ENTRY::EQ_NAME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_EQUIV_ENTRY::setEQ_NAME(const std::string& value)
{
  setString(CGT_EQUIV_ENTRY::EQ_NAME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##1-> Entries are relevant for the numerator, 2-> Entries are relevant for the denominator
long CGT_EQUIV_ENTRY::getTYPE(long Row)
{
  return getLong(CGT_EQUIV_ENTRY::TYPE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_EQUIV_ENTRY::setTYPE(long value)
{
  setLong(CGT_EQUIV_ENTRY::TYPE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Element or slag compound name
std::string CGT_EQUIV_ENTRY::getENAME(long Row)
{
  return getString(CGT_EQUIV_ENTRY::ENAME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_EQUIV_ENTRY::setENAME(const std::string& value)
{
  setString(CGT_EQUIV_ENTRY::ENAME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Scaling factor for the element, e.g. 0.5*Mn
double CGT_EQUIV_ENTRY::getFACTOR(long Row)
{
  return getDouble(CGT_EQUIV_ENTRY::FACTOR, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_EQUIV_ENTRY::setFACTOR(double value)
{
  setDouble(CGT_EQUIV_ENTRY::FACTOR, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CGT_EQUIV_ENTRY::select(const std::string& EQ_NAME, long TYPE, const std::string& ENAME)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CGT_EQUIV_ENTRY::EQ_NAME,EQ_NAME);
  addWhereClause(CGT_EQUIV_ENTRY::TYPE,TYPE);
  addWhereClause(CGT_EQUIV_ENTRY::ENAME,ENAME);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 


