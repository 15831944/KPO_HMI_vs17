//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CPD_HEAT_DATA.h"
#include "CPD_SAMPLE_REF.h"
#include "CHD_SAMPLE_REF.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_SAMPLE_REF::SAMPLE_REF("SAMPLE_REF");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_SAMPLE_REF::HOT_METAL("HOT_METAL");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_SAMPLE_REF::STEEL("STEEL");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_SAMPLE_REF::STEEL_CALC("STEEL_CALC");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_SAMPLE_REF::STEEL_CALC_FINAL("STEEL_CALC_FINAL");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_SAMPLE_REF::SLAG("SLAG");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_SAMPLE_REF::SLAG_CALC("SLAG_CALC");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_SAMPLE_REF::SLAG_CALC_FINAL("SLAG_CALC_FINAL");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_SAMPLE_REF::TEMP("TEMP");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_SAMPLE_REF::TEMP_CALC("TEMP_CALC");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_SAMPLE_REF::TEMP_CALC_FINAL("TEMP_CALC_FINAL");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_SAMPLE_REF::CARBON("CARBON");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_SAMPLE_REF::OXYGEN("OXYGEN");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_SAMPLE_REF::HYDROGEN("HYDROGEN");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_SAMPLE_REF::CELOX_SLAG("CELOX_SLAG");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_SAMPLE_REF::ALUMINIUM("ALUMINIUM");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_SAMPLE_REF::EMF("EMF");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_SAMPLE_REF::REVTIME("REVTIME");

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_SAMPLE_REF::CHD_SAMPLE_REF(cCBS_StdConnection* Connection)
:CSMC_DBData("HD_SAMPLE_REF",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_SAMPLE_REF::CHD_SAMPLE_REF(cCBS_Connection* Connection)
:CSMC_DBData("HD_SAMPLE_REF",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_SAMPLE_REF::CHD_SAMPLE_REF()
:CSMC_DBData("HD_SAMPLE_REF")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_SAMPLE_REF::~CHD_SAMPLE_REF()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Unique sample reference
long CHD_SAMPLE_REF::getSAMPLE_REF(long Row)
{
  return getLong(CHD_SAMPLE_REF::SAMPLE_REF, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_SAMPLE_REF::setSAMPLE_REF(long value)
{
  setLong(CHD_SAMPLE_REF::SAMPLE_REF, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Reference to last measured hot metal analysis
long CHD_SAMPLE_REF::getHOT_METAL(long Row)
{
  return getLong(CHD_SAMPLE_REF::HOT_METAL, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_SAMPLE_REF::setHOT_METAL(long value)
{
  setLong(CHD_SAMPLE_REF::HOT_METAL, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Reference to last measured steel analysis
long CHD_SAMPLE_REF::getSTEEL(long Row)
{
  return getLong(CHD_SAMPLE_REF::STEEL, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_SAMPLE_REF::setSTEEL(long value)
{
  setLong(CHD_SAMPLE_REF::STEEL, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Reference to last calculated actual steel analysis
long CHD_SAMPLE_REF::getSTEEL_CALC(long Row)
{
  return getLong(CHD_SAMPLE_REF::STEEL_CALC, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_SAMPLE_REF::setSTEEL_CALC(long value)
{
  setLong(CHD_SAMPLE_REF::STEEL_CALC, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Reference to last calculated final steel analysis
long CHD_SAMPLE_REF::getSTEEL_CALC_FINAL(long Row)
{
  return getLong(CHD_SAMPLE_REF::STEEL_CALC_FINAL, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_SAMPLE_REF::setSTEEL_CALC_FINAL(long value)
{
  setLong(CHD_SAMPLE_REF::STEEL_CALC_FINAL, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Reference to last measured slag analysis
long CHD_SAMPLE_REF::getSLAG(long Row)
{
  return getLong(CHD_SAMPLE_REF::SLAG, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_SAMPLE_REF::setSLAG(long value)
{
  setLong(CHD_SAMPLE_REF::SLAG, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Reference to last calculated slag analysis
long CHD_SAMPLE_REF::getSLAG_CALC(long Row)
{
  return getLong(CHD_SAMPLE_REF::SLAG_CALC, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_SAMPLE_REF::setSLAG_CALC(long value)
{
  setLong(CHD_SAMPLE_REF::SLAG_CALC, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Reference to last calculated final slag analysis
long CHD_SAMPLE_REF::getSLAG_CALC_FINAL(long Row)
{
  return getLong(CHD_SAMPLE_REF::SLAG_CALC_FINAL, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_SAMPLE_REF::setSLAG_CALC_FINAL(long value)
{
  setLong(CHD_SAMPLE_REF::SLAG_CALC_FINAL, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Reference to last measured temperature
long CHD_SAMPLE_REF::getTEMP(long Row)
{
  return getLong(CHD_SAMPLE_REF::TEMP, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_SAMPLE_REF::setTEMP(long value)
{
  setLong(CHD_SAMPLE_REF::TEMP, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Reference to last calculated temperature
long CHD_SAMPLE_REF::getTEMP_CALC(long Row)
{
  return getLong(CHD_SAMPLE_REF::TEMP_CALC, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_SAMPLE_REF::setTEMP_CALC(long value)
{
  setLong(CHD_SAMPLE_REF::TEMP_CALC, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Reference to last calculated final temperature
long CHD_SAMPLE_REF::getTEMP_CALC_FINAL(long Row)
{
  return getLong(CHD_SAMPLE_REF::TEMP_CALC_FINAL, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_SAMPLE_REF::setTEMP_CALC_FINAL(long value)
{
  setLong(CHD_SAMPLE_REF::TEMP_CALC_FINAL, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Reference to last carbon measurement
long CHD_SAMPLE_REF::getCARBON(long Row)
{
  return getLong(CHD_SAMPLE_REF::CARBON, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_SAMPLE_REF::setCARBON(long value)
{
  setLong(CHD_SAMPLE_REF::CARBON, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Reference to last oxygen  measurement
long CHD_SAMPLE_REF::getOXYGEN(long Row)
{
  return getLong(CHD_SAMPLE_REF::OXYGEN, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_SAMPLE_REF::setOXYGEN(long value)
{
  setLong(CHD_SAMPLE_REF::OXYGEN, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Reference to last hydrogen measurement
long CHD_SAMPLE_REF::getHYDROGEN(long Row)
{
  return getLong(CHD_SAMPLE_REF::HYDROGEN, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_SAMPLE_REF::setHYDROGEN(long value)
{
  setLong(CHD_SAMPLE_REF::HYDROGEN, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Reference to last celox slag measurement
long CHD_SAMPLE_REF::getCELOX_SLAG(long Row)
{
  return getLong(CHD_SAMPLE_REF::CELOX_SLAG, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_SAMPLE_REF::setCELOX_SLAG(long value)
{
  setLong(CHD_SAMPLE_REF::CELOX_SLAG, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Reference to last aluminium measurement
long CHD_SAMPLE_REF::getALUMINIUM(long Row)
{
  return getLong(CHD_SAMPLE_REF::ALUMINIUM, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_SAMPLE_REF::setALUMINIUM(long value)
{
  setLong(CHD_SAMPLE_REF::ALUMINIUM, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Reference to last EMF measurement
long CHD_SAMPLE_REF::getEMF(long Row)
{
  return getLong(CHD_SAMPLE_REF::EMF, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_SAMPLE_REF::setEMF(long value)
{
  setLong(CHD_SAMPLE_REF::EMF, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Date and time of last revision
CDateTime CHD_SAMPLE_REF::getREVTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHD_SAMPLE_REF::REVTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_SAMPLE_REF::setREVTIME(const CDateTime& value)
{
 setString(CHD_SAMPLE_REF::REVTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CHD_SAMPLE_REF::select(long SAMPLE_REF)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CHD_SAMPLE_REF::SAMPLE_REF,SAMPLE_REF);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CHD_SAMPLE_REF::selectByREVTIME(const CDateTime& REVTIME, const std::string& Operator)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CHD_SAMPLE_REF::REVTIME, REVTIME, Operator );

  m_Statement += getWhereStatement() + " order by REVTIME desc;";

  return CSMC_DBData::select();
}

bool CHD_SAMPLE_REF::copy(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, bool Commit, cCBS_ODBC_DBError &Error)
{
	bool result = !exists(HEATID, TREATID, PLANT);
	//some data found -> delete them
	if (!result)
	{
		result = deleteSample(HEATID, TREATID, PLANT, Commit, Error);
	}

  // preparing setting for source table
  CPD_HEAT_DATA PD_HEAT_DATA(m_pCBS_StdConnection);
  std::vector<long> SampleRefList = PD_HEAT_DATA.getSampleRefList(HEATID, TREATID, PLANT);

  CPD_SAMPLE_REF PD_SAMPLE_REF(m_pCBS_StdConnection);
  PD_SAMPLE_REF.addWhereClause(CPD_SAMPLE_REF::SAMPLE_REF,SampleRefList, "IN");

  result = result && copyByInsert(&PD_SAMPLE_REF);

	if (!result)
		Error = getLastError();

	if(Commit)
	{
		if (result)
			this->commit();
		else
			rollback();
	}

	return result;
}

bool CHD_SAMPLE_REF::deleteSample(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, bool Commit, cCBS_ODBC_DBError &Error)
{
	cleanWhereStatement();

  CPD_HEAT_DATA PD_HEAT_DATA(m_pCBS_StdConnection);
  std::vector<long> SampleRefList = PD_HEAT_DATA.getSampleRefList(HEATID, TREATID, PLANT);

  addWhereClause(CHD_SAMPLE_REF::SAMPLE_REF,SampleRefList, "IN");

	
  bool result = CSMC_DBData::deleteRows();
	if (!result)
		Error = getLastError();

	if(Commit)
	{
		if (result)
			this->commit();
		else
			rollback();
	}

	return result;
}

bool CHD_SAMPLE_REF::exists( const std::string& HEATID, const std::string& TREATID, const std::string& PLANT )
{	
	cleanWhereStatement();

  CPD_HEAT_DATA PD_HEAT_DATA(m_pCBS_StdConnection);
  std::vector<long> SampleRefList = PD_HEAT_DATA.getSampleRefList(HEATID, TREATID, PLANT);

	m_Statement = "Select SAMPLE_REF from HD_SAMPLE_REF ";
  
  addWhereClause(CHD_SAMPLE_REF::SAMPLE_REF,SampleRefList, "IN");
   
  std::string sWhereStatement = getWhereStatement();
  //to avoid the exception like 'Select HEATID from PP_HEAT AND ROWNUM = 1 '
  if(sWhereStatement.length() > 0 ) 
  {
    // do not use ROWNUM in "addWhereClause", ROWNUM is not a table column and where statement will be used for deletion at "deleteRows"
    m_Statement += sWhereStatement + " AND ROWNUM = 1 ;";
  }
  else
  {
    return false;
  }

	return CSMC_DBData::select();
}


