//## Copyright (C) 2010 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CPD_ELEC_SYSTEM.h"
#include "CHD_ELEC_SYSTEM.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_ELEC_SYSTEM::HEATID("HEATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_ELEC_SYSTEM::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_ELEC_SYSTEM::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_ELEC_SYSTEM::ELEC_SYSTEM_CODE("ELEC_SYSTEM_CODE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_ELEC_SYSTEM::DATECHANGE("DATECHANGE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_ELEC_SYSTEM::DURSINCEHEATANNOUNCE("DURSINCEHEATANNOUNCE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_ELEC_SYSTEM::DURSINCESTARTOFHEAT("DURSINCESTARTOFHEAT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_ELEC_SYSTEM::ELEC_EGYTOT("ELEC_EGYTOT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_ELEC_SYSTEM::STATUS("STATUS");

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_ELEC_SYSTEM::CHD_ELEC_SYSTEM(cCBS_StdConnection* Connection)
:CSMC_DBData("HD_ELEC_SYSTEM",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_ELEC_SYSTEM::CHD_ELEC_SYSTEM(cCBS_Connection* Connection)
:CSMC_DBData("HD_ELEC_SYSTEM",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_ELEC_SYSTEM::CHD_ELEC_SYSTEM()
:CSMC_DBData("HD_ELEC_SYSTEM")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_ELEC_SYSTEM::~CHD_ELEC_SYSTEM()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Internal heat identifier
std::string CHD_ELEC_SYSTEM::getHEATID(long Row)
{
  return getString(CHD_ELEC_SYSTEM::HEATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_ELEC_SYSTEM::setHEATID(const std::string& value)
{
  setString(CHD_ELEC_SYSTEM::HEATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Treatment identifier
std::string CHD_ELEC_SYSTEM::getTREATID(long Row)
{
  return getString(CHD_ELEC_SYSTEM::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_ELEC_SYSTEM::setTREATID(const std::string& value)
{
  setString(CHD_ELEC_SYSTEM::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Plant identifier
std::string CHD_ELEC_SYSTEM::getPLANT(long Row)
{
  return getString(CHD_ELEC_SYSTEM::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_ELEC_SYSTEM::setPLANT(const std::string& value)
{
  setString(CHD_ELEC_SYSTEM::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Electric system, e.g. Power Furnace breaker
std::string CHD_ELEC_SYSTEM::getELEC_SYSTEM_CODE(long Row)
{
  return getString(CHD_ELEC_SYSTEM::ELEC_SYSTEM_CODE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_ELEC_SYSTEM::setELEC_SYSTEM_CODE(const std::string& value)
{
  setString(CHD_ELEC_SYSTEM::ELEC_SYSTEM_CODE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Timestamp indication of the change
CDateTime CHD_ELEC_SYSTEM::getDATECHANGE(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHD_ELEC_SYSTEM::DATECHANGE, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_ELEC_SYSTEM::setDATECHANGE(const CDateTime& value)
{
 setString(CHD_ELEC_SYSTEM::DATECHANGE, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Duration since heat announcement
double CHD_ELEC_SYSTEM::getDURSINCEHEATANNOUNCE(long Row)
{
  return getDouble(CHD_ELEC_SYSTEM::DURSINCEHEATANNOUNCE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_ELEC_SYSTEM::setDURSINCEHEATANNOUNCE(double value)
{
  setDouble(CHD_ELEC_SYSTEM::DURSINCEHEATANNOUNCE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Duration since start of heat
double CHD_ELEC_SYSTEM::getDURSINCESTARTOFHEAT(long Row)
{
  return getDouble(CHD_ELEC_SYSTEM::DURSINCESTARTOFHEAT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_ELEC_SYSTEM::setDURSINCESTARTOFHEAT(double value)
{
  setDouble(CHD_ELEC_SYSTEM::DURSINCESTARTOFHEAT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Total electric energy consumption in case of electric heating, kWh
double CHD_ELEC_SYSTEM::getELEC_EGYTOT(long Row)
{
  return getDouble(CHD_ELEC_SYSTEM::ELEC_EGYTOT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_ELEC_SYSTEM::setELEC_EGYTOT(double value)
{
  setDouble(CHD_ELEC_SYSTEM::ELEC_EGYTOT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHD_ELEC_SYSTEM::getSTATUS(long Row)
{
  return getLong(CHD_ELEC_SYSTEM::STATUS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_ELEC_SYSTEM::setSTATUS(long value)
{
  setLong(CHD_ELEC_SYSTEM::STATUS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CHD_ELEC_SYSTEM::select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const std::string& ELEC_SYSTEM_CODE, const CDateTime& DATECHANGE)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CHD_ELEC_SYSTEM::HEATID,HEATID);
  addWhereClause(CHD_ELEC_SYSTEM::TREATID,TREATID);
  addWhereClause(CHD_ELEC_SYSTEM::PLANT,PLANT);
  addWhereClause(CHD_ELEC_SYSTEM::ELEC_SYSTEM_CODE,ELEC_SYSTEM_CODE);
  addWhereClause(CHD_ELEC_SYSTEM::DATECHANGE,DATECHANGE);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CHD_ELEC_SYSTEM::copy(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, bool Commit, cCBS_ODBC_DBError &Error)
{
	bool result = !exists(HEATID, TREATID, PLANT);
	//some data found -> delete them
	if (!result)
	{
		result = deleteRows();
		if (!result)
			setLastError(std::string("ERROR_DELETE_DATA"), 0, getActStatement());
	}

  // preparing setting for source table
  CPD_ELEC_SYSTEM PD_ELEC_SYSTEM(m_pCBS_StdConnection);
  PD_ELEC_SYSTEM.addWhereClause(CPD_ELEC_SYSTEM::HEATID,HEATID);
  PD_ELEC_SYSTEM.addWhereClause(CPD_ELEC_SYSTEM::TREATID,TREATID);
  PD_ELEC_SYSTEM.addWhereClause(CPD_ELEC_SYSTEM::PLANT,PLANT);

  result = result && copyByInsert(&PD_ELEC_SYSTEM);

	if (!result)
		Error = getLastError();

	if(Commit)
	{
		if (result)
			this->commit();
		else
			rollback();
	}

	return result;
}

bool CHD_ELEC_SYSTEM::exists(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT)
{
  cleanWhereStatement();

	m_Statement = "Select HEATID from " + m_TableName;

  addWhereClause(CHD_ELEC_SYSTEM::HEATID,HEATID);
  addWhereClause(CHD_ELEC_SYSTEM::TREATID,TREATID);
  addWhereClause(CHD_ELEC_SYSTEM::PLANT,PLANT);
   
  std::string sWhereStatement = getWhereStatement();
  //to avoid the exception like 'Select HEATID from PP_HEAT AND ROWNUM = 1 '
  if(sWhereStatement.length() > 0 ) 
  {
    // do not use ROWNUM in "addWhereClause", ROWNUM is not a table column and where statement will be used for deletion at "deleteRows"
    m_Statement += sWhereStatement + " AND ROWNUM = 1 ;";
  }
  else
  {
    return false;
  }

	return CSMC_DBData::select();
}


