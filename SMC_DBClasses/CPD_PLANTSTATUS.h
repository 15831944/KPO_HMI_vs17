//## Copyright (C) 2010 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 

#if defined (_MSC_VER) && (_MSC_VER >= 1000)
#pragma once
#endif
#ifndef _INC_CPD_PLANTSTATUS_INCLUDED
#define _INC_CPD_PLANTSTATUS_INCLUDED

#include "CSMC_DBData.h"

class CPD_PLANTSTATUS
: public CSMC_DBData
{

public:
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PLANT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PLANTNO;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TREATMENTPOSITION;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string SAMPLE_COUNTER;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string HEATID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string HM_ID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TREATID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string REVTIME;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PRODORDERID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string STEELGRADECODE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string HEATSTATUSNO;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string LADLETYPE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string LADLENO;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TREATMENTSTART;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string EXPTREATMENTEND;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TEMP;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TEMP_SAMPLETIME;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string LADLETAREWEIGHT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string STEELWEIGHT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string SLAGWEIGHT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string HEATID_EXT_CUST;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TREATID_EXT_CUST;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string HM_ID_EXT_CUST;

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPD_PLANTSTATUS(cCBS_StdConnection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPD_PLANTSTATUS(cCBS_Connection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPD_PLANTSTATUS();

  //##DBClassCodeUtility ! DO NOT EDIT !
  ~CPD_PLANTSTATUS();

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Plant identifier
  std::string getPLANT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPLANT(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Plant number
  long getPLANTNO(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPLANTNO(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Identification of treatment position to handle heats at Twin-LF (1-> car 1, 2-> car 2) and melting units with tapping area (1-> furnace, 2-> TapLadle)
  long getTREATMENTPOSITION(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTREATMENTPOSITION(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Unique sample counter
  long getSAMPLE_COUNTER(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSAMPLE_COUNTER(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Internal heat identifier
  std::string getHEATID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setHEATID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Internal identifier for Desulphurisation station
  std::string getHM_ID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setHM_ID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Treatment identifier
  std::string getTREATID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTREATID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Date and time of last revision
  CDateTime getREVTIME(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setREVTIME(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Production oder identification
  std::string getPRODORDERID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPRODORDERID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Steel grade code
  std::string getSTEELGRADECODE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSTEELGRADECODE(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  long getHEATSTATUSNO(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setHEATSTATUSNO(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##e.g. Hot Metal -> H, Teeming -> T
  std::string getLADLETYPE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setLADLETYPE(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Unique ladle number
  long getLADLENO(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setLADLENO(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Treatment start time
  CDateTime getTREATMENTSTART(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTREATMENTSTART(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CDateTime getEXPTREATMENTEND(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setEXPTREATMENTEND(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getTEMP(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTEMP(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CDateTime getTEMP_SAMPLETIME(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTEMP_SAMPLETIME(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getLADLETAREWEIGHT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setLADLETAREWEIGHT(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Steel weight in kg
  double getSTEELWEIGHT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSTEELWEIGHT(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Slag weight in kg
  double getSLAGWEIGHT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSLAGWEIGHT(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Customer HEATID, which might be received from external plant unit and which might not be known so far at that plant unit (no internal HeatID available)
  std::string getHEATID_EXT_CUST(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setHEATID_EXT_CUST(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Customer TREATID, which might be received from external plant unit and which might not be known so far at that plant unit 
  std::string getTREATID_EXT_CUST(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTREATID_EXT_CUST(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Customer HM_ID, which might be received from external plant unit and which might not be known so far at that plant unit 
  std::string getHM_ID_EXT_CUST(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setHM_ID_EXT_CUST(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  bool select(const std::string& PLANT, long PLANTNO, long TREATMENTPOSITION);

  //## ----------------------------------END-GENERATED-CODE--------------------- 

  //## ----------------------------------YOUR-CODE------------------------------ 

  bool selectByHeatIdOnPlant(const std::string& Plant, long PlantNo, const std::string& HeatID );

  bool selectByProdOrder(const std::string& OrderID );

  bool selectByREVTIME(const CDateTime& REVTIME, const std::string& Operator);

  bool changeAimData(const std::string& Plant, long PlantNo, const std::string& HeatID, const std::string& TreatID, const std::string& Steelgradecode, long TreatmentPosition, const CDateTime& Exptreatmentend, bool Commit, cCBS_ODBC_DBError &Error);

  bool changeLadleData(const std::string& Plant, long PlantNo, long TreatPos, const std::string& HeatId, const std::string& TreatId, long LADLENO, const std::string& LADLETYPE, bool Commit, cCBS_ODBC_DBError &Error);

  bool doAnnouncement(const std::string& PLANT, long PLANTNO, long TREATMENTPOSITION, long SAMPLE_COUNTER, const std::string& HEATID, const std::string& TREATID, long HEATSTATUSNO, const std::string& STEELGRADECODE, long LADLENO, const std::string& LADLETYPE, double TEMP, const CDateTime& TEMP_SAMPLETIME, double STEELWEIGHT, double SLAGWEIGHT, bool Commit, cCBS_ODBC_DBError &Error);

  bool doHeatStart(const std::string& PLANT, long PLANTNO, long TREATMENTPOSITION, const std::string& HEATID, const std::string& TREATID, bool Commit, cCBS_ODBC_DBError &Error);

  bool exists(const std::string& Plant, long PlantNo, long TreatmentPosition);

  bool resetPlantStatus(const std::string& Plant,long PlantNo,long TreatmentPosition, bool Commit, cCBS_ODBC_DBError &Error);

  bool switchHeatStatusNo(const std::string& PLANT, long PLANTNO, long TreatmentPosition, const std::string& HEATID, const std::string& TREATID, long HEATSTATUSNO, bool Commit, cCBS_ODBC_DBError &Error);

  bool switchTreatmentPosition(const std::string& Plant,long PlantNo, long FromTreatPos, long ToTreatPos , bool Commit, cCBS_ODBC_DBError &Error);

  bool updateExptreatmentend(const std::string& Plant, long PlantNo, const CDateTime& Exptreatmentend, long TreatmentPosition, bool Commit, cCBS_ODBC_DBError &Error);

  bool updatePlantStatus(const std::string& Plant, long PlantNo, const std::string& HeatID, const std::string& TreatID, const std::string& ProdorderID, const std::string& Steelgradecode, long HeatStatusNo, const std::string& LadleType, long LadleNo, long TreatmentPosition, const CDateTime& Exptreatmentend, double LadleTareweight, double SteelWeight, double SlagWeight, bool Commit, cCBS_ODBC_DBError &Error);

  bool updateSampleCounter(const std::string& Plant,long PlantNo,const std::string& HeatID,const std::string& TreatID, long SampleCounter, long TreatmentPosition, bool Commit, cCBS_ODBC_DBError &Error);

  bool updateSteelWeight(const std::string& Plant,long PlantNo,const std::string& HeatID,const std::string& TreatID, double SteelWeight, long TreatmentPosition, bool Commit, cCBS_ODBC_DBError &Error);

  bool updateTempTaken(const std::string& Plant, long PlantNo, double TEMP, CDateTime& TempTime, long TreatmentPosition, bool Commit, cCBS_ODBC_DBError &Error);

	bool CPD_PLANTSTATUS::update_PDplantStatus(const string &pHMId, const string &pTREATID, const string &pPlant, long pHeatStatusNo);

	bool CPD_PLANTSTATUS::OnHeatStart(const string &pHMId, const string &pTREATID, const string &pPlant,long htStatus);

	bool CPD_PLANTSTATUS::doHeatCancel(const string &pPlant,long pPlantNo,long htStatus);

	bool CPD_PLANTSTATUS::OnTempMeasurement(long pSampleCounter, const string &pHMId, const string &pTreatId, const string &pPlant,double pTemp,bool pCommit);

	bool CPD_PLANTSTATUS::doHeatAnnouncement(const string &pHMId, const string &pPRODORDERID, const string &pTREATID, const string &pPlant,long pPlantNo, double pHMWt, double pSlagWT,long ldlno,double pHMTemp,long htStatus);
	bool CPD_PLANTSTATUS::doHeatDeparture(const string &pPlant,long pPlantNo, long htStatus,long FromTreatPos,long ToTreatPos);

};

#endif /* _INC_CPD_PLANTSTATUS_INCLUDED */
