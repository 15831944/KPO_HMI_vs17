//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CIntfData.h"
#include "CGT_MAT_CHEM.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_MAT_CHEM::MAT_CODE("MAT_CODE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_MAT_CHEM::ENAME("ENAME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_MAT_CHEM::VALUE("VALUE");

//##DBClassCodeUtility ! DO NOT EDIT !
CGT_MAT_CHEM::CGT_MAT_CHEM(cCBS_StdConnection* Connection)
:CSMC_DBData("GT_MAT_CHEM",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGT_MAT_CHEM::CGT_MAT_CHEM(cCBS_Connection* Connection)
:CSMC_DBData("GT_MAT_CHEM",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGT_MAT_CHEM::CGT_MAT_CHEM()
:CSMC_DBData("GT_MAT_CHEM")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGT_MAT_CHEM::~CGT_MAT_CHEM()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Material code
std::string CGT_MAT_CHEM::getMAT_CODE(long Row)
{
  return getString(CGT_MAT_CHEM::MAT_CODE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_MAT_CHEM::setMAT_CODE(const std::string& value)
{
  setString(CGT_MAT_CHEM::MAT_CODE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Element or slag compound name
std::string CGT_MAT_CHEM::getENAME(long Row)
{
  return getString(CGT_MAT_CHEM::ENAME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_MAT_CHEM::setENAME(const std::string& value)
{
  setString(CGT_MAT_CHEM::ENAME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Concentration (element or compound)
double CGT_MAT_CHEM::getVALUE(long Row)
{
  return getDouble(CGT_MAT_CHEM::VALUE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_MAT_CHEM::setVALUE(double value)
{
  setDouble(CGT_MAT_CHEM::VALUE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CGT_MAT_CHEM::select(const std::string& MAT_CODE, const std::string& ENAME)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CGT_MAT_CHEM::MAT_CODE,MAT_CODE);
  addWhereClause(CGT_MAT_CHEM::ENAME,ENAME);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CGT_MAT_CHEM::deleteChem(const std::string& MAT_CODE)
{
  cleanWhereStatement();
  
  addWhereClause(CGT_MAT_CHEM::MAT_CODE,MAT_CODE);

  return CSMC_DBData::deleteRows();
}

bool CGT_MAT_CHEM::updateInsertChem(const std::string& MAT_CODE, seqAnalysis & SeqAnalysis, bool Replace, bool Commit, cCBS_ODBC_DBError &Error)
{
  bool RetValue = false;

  if ( Replace )
  {
    RetValue = deleteChem(MAT_CODE);
  }

  for ( long i = 0 ; i < CIntfData::getLength(SeqAnalysis) ; ++i )
  {
    sAnalysis Analysis;
    CIntfData::getAt(Analysis,SeqAnalysis,i);

    std::string ENAME = Analysis.Element;

    if ( !ENAME.empty() )
    {

      if ( select(MAT_CODE, ENAME) )
      {
        setVALUE(Analysis.Concentration);

        RetValue = update();

      }
      else
      {
        setMAT_CODE(MAT_CODE);
        setENAME(ENAME);
        setVALUE(Analysis.Concentration);

        RetValue = insert();
      }

      if ( !RetValue)
      {
        break;
      }
    }
  }

  if ( !RetValue )
  {
    Error = getLastError();
  }

  if(Commit)
  {
    if(RetValue)
    {
      commit();
    }
    else 
    {
      rollback();
    }
  }
  
  return RetValue;
}


