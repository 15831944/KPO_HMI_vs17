//## Copyright (C) 2010 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CDataConversion.h"
#include "CPD_SAMPLE_REF.h"
#include "CPD_PRETREATDATA.h"
#include "CPP_HEAT.h"
#include "CPP_HEAT_PLANT.h"
#include "CPD_LADLE.h"
#include "CPD_HOT_METAL_ORDER.h"
#include "CPD_HOT_METAL.h"
#include "CPD_HEAT_DATA.h"
#include "CGC_LADLE_DEF.h"
#include "DEF_GC_LIQADD_STATUS.h"
#include "DEF_GC_LIQADD_TYPE.h"
#include "DEF_GC_LADLE_TYPE.h"
#include "CPD_HEAT_DATA_LIQADD.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_HEAT_DATA_LIQADD::HEATID("HEATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_HEAT_DATA_LIQADD::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_HEAT_DATA_LIQADD::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_HEAT_DATA_LIQADD::LIQADDNO("LIQADDNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_HEAT_DATA_LIQADD::STEELWEIGHT("STEELWEIGHT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_HEAT_DATA_LIQADD::SLAGWEIGHT("SLAGWEIGHT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_HEAT_DATA_LIQADD::SAMPLE_REF("SAMPLE_REF");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_HEAT_DATA_LIQADD::LADLENO("LADLENO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_HEAT_DATA_LIQADD::LADLETYPE("LADLETYPE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_HEAT_DATA_LIQADD::STATUS("STATUS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_HEAT_DATA_LIQADD::LIQADDTYPE("LIQADDTYPE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_HEAT_DATA_LIQADD::DISCHARGETIME("DISCHARGETIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_HEAT_DATA_LIQADD::MANUALCHANGED("MANUALCHANGED");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_HEAT_DATA_LIQADD::LASTPLANT("LASTPLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_HEAT_DATA_LIQADD::THERMALSTATUS("THERMALSTATUS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_HEAT_DATA_LIQADD::SCULLMASS("SCULLMASS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_HEAT_DATA_LIQADD::PRETREAT_CNT("PRETREAT_CNT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_HEAT_DATA_LIQADD::HOTMETAL_CNT("HOTMETAL_CNT");

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_HEAT_DATA_LIQADD::CPD_HEAT_DATA_LIQADD(cCBS_StdConnection* Connection)
:CSMC_DBData("PD_HEAT_DATA_LIQADD",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_HEAT_DATA_LIQADD::CPD_HEAT_DATA_LIQADD(cCBS_Connection* Connection)
:CSMC_DBData("PD_HEAT_DATA_LIQADD",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_HEAT_DATA_LIQADD::CPD_HEAT_DATA_LIQADD()
:CSMC_DBData("PD_HEAT_DATA_LIQADD")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_HEAT_DATA_LIQADD::~CPD_HEAT_DATA_LIQADD()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Internal heat identifier
std::string CPD_HEAT_DATA_LIQADD::getHEATID(long Row)
{
  return getString(CPD_HEAT_DATA_LIQADD::HEATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_HEAT_DATA_LIQADD::setHEATID(const std::string& value)
{
  setString(CPD_HEAT_DATA_LIQADD::HEATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Treatment identifier
std::string CPD_HEAT_DATA_LIQADD::getTREATID(long Row)
{
  return getString(CPD_HEAT_DATA_LIQADD::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_HEAT_DATA_LIQADD::setTREATID(const std::string& value)
{
  setString(CPD_HEAT_DATA_LIQADD::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Plant identifier
std::string CPD_HEAT_DATA_LIQADD::getPLANT(long Row)
{
  return getString(CPD_HEAT_DATA_LIQADD::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_HEAT_DATA_LIQADD::setPLANT(const std::string& value)
{
  setString(CPD_HEAT_DATA_LIQADD::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Number of liquid addition
long CPD_HEAT_DATA_LIQADD::getLIQADDNO(long Row)
{
  return getLong(CPD_HEAT_DATA_LIQADD::LIQADDNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_HEAT_DATA_LIQADD::setLIQADDNO(long value)
{
  setLong(CPD_HEAT_DATA_LIQADD::LIQADDNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Steel weight in kg
double CPD_HEAT_DATA_LIQADD::getSTEELWEIGHT(long Row)
{
  return getDouble(CPD_HEAT_DATA_LIQADD::STEELWEIGHT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_HEAT_DATA_LIQADD::setSTEELWEIGHT(double value)
{
  setDouble(CPD_HEAT_DATA_LIQADD::STEELWEIGHT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Slag weight in kg
double CPD_HEAT_DATA_LIQADD::getSLAGWEIGHT(long Row)
{
  return getDouble(CPD_HEAT_DATA_LIQADD::SLAGWEIGHT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_HEAT_DATA_LIQADD::setSLAGWEIGHT(double value)
{
  setDouble(CPD_HEAT_DATA_LIQADD::SLAGWEIGHT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Unique sample reference
long CPD_HEAT_DATA_LIQADD::getSAMPLE_REF(long Row)
{
  return getLong(CPD_HEAT_DATA_LIQADD::SAMPLE_REF, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_HEAT_DATA_LIQADD::setSAMPLE_REF(long value)
{
  setLong(CPD_HEAT_DATA_LIQADD::SAMPLE_REF, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Unique ladle number
long CPD_HEAT_DATA_LIQADD::getLADLENO(long Row)
{
  return getLong(CPD_HEAT_DATA_LIQADD::LADLENO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_HEAT_DATA_LIQADD::setLADLENO(long value)
{
  setLong(CPD_HEAT_DATA_LIQADD::LADLENO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##e.g. Hot Metal -> H, Teeming -> T
std::string CPD_HEAT_DATA_LIQADD::getLADLETYPE(long Row)
{
  return getString(CPD_HEAT_DATA_LIQADD::LADLETYPE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_HEAT_DATA_LIQADD::setLADLETYPE(const std::string& value)
{
  setString(CPD_HEAT_DATA_LIQADD::LADLETYPE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Status of liquid addition
std::string CPD_HEAT_DATA_LIQADD::getSTATUS(long Row)
{
  return getString(CPD_HEAT_DATA_LIQADD::STATUS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_HEAT_DATA_LIQADD::setSTATUS(const std::string& value)
{
  setString(CPD_HEAT_DATA_LIQADD::STATUS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Type of liquid addition
std::string CPD_HEAT_DATA_LIQADD::getLIQADDTYPE(long Row)
{
  return getString(CPD_HEAT_DATA_LIQADD::LIQADDTYPE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_HEAT_DATA_LIQADD::setLIQADDTYPE(const std::string& value)
{
  setString(CPD_HEAT_DATA_LIQADD::LIQADDTYPE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CPD_HEAT_DATA_LIQADD::getDISCHARGETIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CPD_HEAT_DATA_LIQADD::DISCHARGETIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_HEAT_DATA_LIQADD::setDISCHARGETIME(const CDateTime& value)
{
 setString(CPD_HEAT_DATA_LIQADD::DISCHARGETIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##1= Manual Changed on HMI, 0 = Not Manual changed
long CPD_HEAT_DATA_LIQADD::getMANUALCHANGED(long Row)
{
  return getLong(CPD_HEAT_DATA_LIQADD::MANUALCHANGED, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_HEAT_DATA_LIQADD::setMANUALCHANGED(long value)
{
  setLong(CPD_HEAT_DATA_LIQADD::MANUALCHANGED, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Where does the ladle comes from? Taken from PD_PRETREATDATA during announcement.
std::string CPD_HEAT_DATA_LIQADD::getLASTPLANT(long Row)
{
  return getString(CPD_HEAT_DATA_LIQADD::LASTPLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_HEAT_DATA_LIQADD::setLASTPLANT(const std::string& value)
{
  setString(CPD_HEAT_DATA_LIQADD::LASTPLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##H=Hot, M=Medium, C=Cold
std::string CPD_HEAT_DATA_LIQADD::getTHERMALSTATUS(long Row)
{
  return getString(CPD_HEAT_DATA_LIQADD::THERMALSTATUS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_HEAT_DATA_LIQADD::setTHERMALSTATUS(const std::string& value)
{
  setString(CPD_HEAT_DATA_LIQADD::THERMALSTATUS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Eng. Unit : kg, Mass of ladle scull
double CPD_HEAT_DATA_LIQADD::getSCULLMASS(long Row)
{
  return getDouble(CPD_HEAT_DATA_LIQADD::SCULLMASS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_HEAT_DATA_LIQADD::setSCULLMASS(double value)
{
  setDouble(CPD_HEAT_DATA_LIQADD::SCULLMASS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Treatment data for liquid addition from pretreatment data
long CPD_HEAT_DATA_LIQADD::getPRETREAT_CNT(long Row)
{
  return getLong(CPD_HEAT_DATA_LIQADD::PRETREAT_CNT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_HEAT_DATA_LIQADD::setPRETREAT_CNT(long value)
{
  setLong(CPD_HEAT_DATA_LIQADD::PRETREAT_CNT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Treatment data for liquid addition from hot metal
long CPD_HEAT_DATA_LIQADD::getHOTMETAL_CNT(long Row)
{
  return getLong(CPD_HEAT_DATA_LIQADD::HOTMETAL_CNT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_HEAT_DATA_LIQADD::setHOTMETAL_CNT(long value)
{
  setLong(CPD_HEAT_DATA_LIQADD::HOTMETAL_CNT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CPD_HEAT_DATA_LIQADD::select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long LIQADDNO)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPD_HEAT_DATA_LIQADD::HEATID,HEATID);
  addWhereClause(CPD_HEAT_DATA_LIQADD::TREATID,TREATID);
  addWhereClause(CPD_HEAT_DATA_LIQADD::PLANT,PLANT);
  addWhereClause(CPD_HEAT_DATA_LIQADD::LIQADDNO,LIQADDNO);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

//this structure need to be initialize, otherwize some random would exist and lead to error for save
void CPD_HEAT_DATA_LIQADD::initialSampleRef(sSampleRef &pSample)
{
  pSample.mAluminium = -1;
  pSample.mCarbon = -1;
  pSample.mCelogSlag = -1;
  pSample.mEMF = -1;
  pSample.mHydrogen = -1;
  pSample.mOxygen = -1;
  pSample.mSlag = -1;
  pSample.mSlagCalc = -1;
  pSample.mSteel = -1;
  pSample.mSteelCalc = -1;
  pSample.mTemp = -1;
  pSample.mTempCalc = -1;
}

bool CPD_HEAT_DATA_LIQADD::selectByHotMetalCounter(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long HOTMETAL_CNT)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPD_HEAT_DATA_LIQADD::HEATID,HEATID);
  addWhereClause(CPD_HEAT_DATA_LIQADD::TREATID,TREATID);
  addWhereClause(CPD_HEAT_DATA_LIQADD::PLANT,PLANT);
  addWhereClause(CPD_HEAT_DATA_LIQADD::HOTMETAL_CNT,HOTMETAL_CNT);

  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

bool CPD_HEAT_DATA_LIQADD::selectByOrderLiqAdd(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPD_HEAT_DATA_LIQADD::HEATID,HEATID);
  addWhereClause(CPD_HEAT_DATA_LIQADD::TREATID,TREATID);
  addWhereClause(CPD_HEAT_DATA_LIQADD::PLANT,PLANT);

  m_Statement += getWhereStatement() + " Order by HEATID,TREATID,PLANT,LIQADDNO DESC;";

  return CSMC_DBData::select();
}

bool CPD_HEAT_DATA_LIQADD::selectHeatByLadle(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const std::string& LADLETYPE, long LADLENO, const std::string& LIQADDTYPE)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPD_HEAT_DATA_LIQADD::HEATID,HEATID);
  addWhereClause(CPD_HEAT_DATA_LIQADD::TREATID,TREATID);
  addWhereClause(CPD_HEAT_DATA_LIQADD::PLANT,PLANT);
  addWhereClause(CPD_HEAT_DATA_LIQADD::LADLETYPE,LADLETYPE);
  addWhereClause(CPD_HEAT_DATA_LIQADD::LADLENO,LADLENO);
  addWhereClause(CPD_HEAT_DATA_LIQADD::LIQADDTYPE,LIQADDTYPE);

  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

bool CPD_HEAT_DATA_LIQADD::copyHotMetalData(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long HOTMETAL_CNT, bool Commit, cCBS_ODBC_DBError &Error)
{
  bool result = false;

  CPD_HOT_METAL       PD_HOT_METAL(m_pCBS_StdConnection);
  CPD_LADLE           PD_LADLE(m_pCBS_StdConnection);

  if ( PD_HOT_METAL.select(HOTMETAL_CNT) )
  {
    if ( selectByHotMetalCounter(HEATID, TREATID, PLANT, HOTMETAL_CNT) )
    {
      setSTEELWEIGHT(PD_HOT_METAL.getWEIGHT(1));
      setSLAGWEIGHT(PD_HOT_METAL.getWEIGHT_SLAG(1));
      setLADLENO(PD_HOT_METAL.getLADLENO(1));
      setLADLETYPE(PD_HOT_METAL.getLADLETYPE(1));

      std::string THERMALSTATUS = PD_LADLE.getThermalStatus(PD_HOT_METAL.getLADLENO(1),PD_HOT_METAL.getLADLETYPE(1), Error);

      setTHERMALSTATUS(THERMALSTATUS);
      setSAMPLE_REF(PD_HOT_METAL.getSAMPLE_REF(1));
      setLIQADDTYPE(DEF_GC_LIQADD_TYPE::HotMetal);

      result = update();
    }
    else
    {
      long LIQADDNO = 1;
      getNextLiqAddNo(HEATID, TREATID, PLANT, LIQADDNO, Error);

      setHEATID(HEATID);
      setTREATID(TREATID);
      setPLANT(PLANT);
      setHOTMETAL_CNT(HOTMETAL_CNT);
      setSTATUS(DEF_GC_LIQADD_STATUS::ASSIGNED);
      setMANUALCHANGED(0);                                

      setSTEELWEIGHT(PD_HOT_METAL.getWEIGHT(1));
      setSLAGWEIGHT(PD_HOT_METAL.getWEIGHT_SLAG(1));
      setLADLENO(PD_HOT_METAL.getLADLENO(1));
      setLADLETYPE(PD_HOT_METAL.getLADLETYPE(1));

      std::string THERMALSTATUS = PD_LADLE.getThermalStatus(PD_HOT_METAL.getLADLENO(1),PD_HOT_METAL.getLADLETYPE(1), Error);

      setTHERMALSTATUS(THERMALSTATUS);
      setSAMPLE_REF(PD_HOT_METAL.getSAMPLE_REF(1));
      setLIQADDTYPE(DEF_GC_LIQADD_TYPE::HotMetal);
      setLIQADDNO(LIQADDNO);

      result = insert();

    }

  }
  else
  {
    setLastError(std::string("NO_DATA_FOUND"), 0, getActStatement());
  }
    
  if (!result)
    Error = getLastError();

  if (Commit)
  {
    if (result)
      commit();
    else
      rollback();
  }
  return result;
}

bool CPD_HEAT_DATA_LIQADD::doAnnouncement(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long PLANTNO, bool Commit, cCBS_ODBC_DBError &Error)
{
  bool result = false;
  if (select(HEATID, TREATID, PLANT, 1)) // LIQ_ADD_NO assumed as 1 // method sets where clauses to be used at "update()"
  {
    CPD_PRETREATDATA  m_pPD_PRETREATDATA(m_pCBS_StdConnection);
    CPP_HEAT_PLANT    m_pPP_HEAT_PLANT(m_pCBS_StdConnection);
    CPP_HEAT          m_pPP_HEAT(m_pCBS_StdConnection);
    CPD_LADLE         m_pPD_LADLE(m_pCBS_StdConnection);
    CGC_LADLE_DEF     GC_LADLE_DEF(m_pCBS_StdConnection);

    // check PP_HETA_PLANT
    // check PP_HEAT and read PRODORDERID
    // check PD_PRETREATDATA for PRODORDERID

    double STEELWEIGHT  = 0.0;
    double SLAGWEIGHT   = 0.0;
    double SCULLMASS    = 0.0;
    long LADLENO        = 0;
    std::string LADLETYPE;
    std::string STATUS = DEF_GC_LIQADD_STATUS::ASSIGNED;
    std::string LASTPLANT;
    std::string THERMALSTATUS;

    if ( m_pPP_HEAT_PLANT.selectByHeatPlantData(HEATID,TREATID,PLANT,PLANTNO) )
    {
      if (m_pPP_HEAT.select(HEATID))
      {
        if ( m_pPD_PRETREATDATA.selectValidDataByProdOrderId( m_pPP_HEAT.getPRODORDERID(1) ) )
        {
          STEELWEIGHT   = m_pPD_PRETREATDATA.getSTEELWEIGHT(1);
          SLAGWEIGHT    = m_pPD_PRETREATDATA.getSLAGWEIGHT(1);
          LADLETYPE     = m_pPD_PRETREATDATA.getLADLETYPE(1);
          LADLENO       = m_pPD_PRETREATDATA.getLADLENO(1);  
          LASTPLANT     = m_pPD_PRETREATDATA.getPLANT(1);  
        }
      }
    }

    if ( LADLENO    != CSMC_DBData::unspecLong && 
         LADLETYPE  != CSMC_DBData::unspecString && 
         m_pPD_LADLE.select(LADLENO,LADLETYPE) )
    {
      THERMALSTATUS = m_pPD_LADLE.getTHERMALSTATUS(1);    
    }

    setSTEELWEIGHT(STEELWEIGHT);
    setSLAGWEIGHT(SLAGWEIGHT);
    setSCULLMASS(SCULLMASS);

    if ( GC_LADLE_DEF.isValidLadle(LADLENO, LADLETYPE) )
    {
      setLADLETYPE(LADLETYPE);
      setLADLENO(LADLENO);
    }

    setSTATUS(STATUS);
    setMANUALCHANGED(0);
    setLASTPLANT(LASTPLANT);
    setTHERMALSTATUS(THERMALSTATUS);

   	result = update();

  }
  else
  {
    //create a new pd_sample_ref with same sample_counter
    long mSampleRef = -1;
    long mNewSampleRef = -1;

    CPD_SAMPLE_REF    m_pPD_SAMPLE_REF(m_pCBS_StdConnection);
    CPD_PRETREATDATA  m_pPD_PRETREATDATA(m_pCBS_StdConnection);
    CPP_HEAT_PLANT    m_pPP_HEAT_PLANT(m_pCBS_StdConnection);
    CPP_HEAT          m_pPP_HEAT(m_pCBS_StdConnection);
    CPD_LADLE         m_pPD_LADLE(m_pCBS_StdConnection);
    CGC_LADLE_DEF     GC_LADLE_DEF(m_pCBS_StdConnection);

    // check PP_HETA_PLANT
    // check PP_HEAT and read PRODORDERID
    // check PD_PRETREATDATA for PRODORDERID

    double STEELWEIGHT  = 0.0;
    double SLAGWEIGHT   = 0.0;
    double SCULLMASS    = 0.0;
    long LADLENO        = 0;
    std::string LADLETYPE;
    std::string STATUS = DEF_GC_LIQADD_STATUS::ASSIGNED;
    std::string LASTPLANT;
    std::string THERMALSTATUS;

    if ( m_pPP_HEAT_PLANT.selectByHeatPlantData(HEATID,TREATID,PLANT,PLANTNO) )
    {
      if (m_pPP_HEAT.select(HEATID))
      {
        if ( m_pPD_PRETREATDATA.selectValidDataByProdOrderId( m_pPP_HEAT.getPRODORDERID(1) ) )
        {
          mSampleRef    = m_pPD_PRETREATDATA.getSAMPLE_REF(1);

          STEELWEIGHT   = m_pPD_PRETREATDATA.getSTEELWEIGHT(1);
          SLAGWEIGHT    = m_pPD_PRETREATDATA.getSLAGWEIGHT(1);
          LADLETYPE     = m_pPD_PRETREATDATA.getLADLETYPE(1);
          LADLENO       = m_pPD_PRETREATDATA.getLADLENO(1);  
          LASTPLANT     = m_pPD_PRETREATDATA.getPLANT(1);  
        }
      }
    }

    if ( LADLENO    != CSMC_DBData::unspecLong && 
         LADLETYPE  != CSMC_DBData::unspecString && 
         m_pPD_LADLE.select(LADLENO,LADLETYPE) )
    {
      THERMALSTATUS = m_pPD_LADLE.getTHERMALSTATUS(1);    
    }

    if(mSampleRef != CSMC_DBData::unspecLong && mSampleRef != -1)
    {
      mNewSampleRef = m_pPD_SAMPLE_REF.copyToNextSAMPLE_REF(mSampleRef,Commit);
    }
    else
    {
      mNewSampleRef = m_pPD_SAMPLE_REF.insertNewSAMPLE_REF();
    }

    setHEATID(HEATID);
    setTREATID(TREATID);
    setPLANT(PLANT);
    setLIQADDNO(1);
    setSTEELWEIGHT(STEELWEIGHT);
    setSLAGWEIGHT(SLAGWEIGHT);
    setSCULLMASS(SCULLMASS);

    if ( GC_LADLE_DEF.isValidLadle(LADLENO, LADLETYPE) )
    {
      setLADLETYPE(LADLETYPE);
      setLADLENO(LADLENO);
    }

    setSAMPLE_REF(mNewSampleRef);
    setSTATUS(STATUS);
    setMANUALCHANGED(0);
    setLASTPLANT(LASTPLANT);
    setTHERMALSTATUS(THERMALSTATUS);

    result = insert();
  }

  if (!result)
    Error = getLastError();
  
  if (Commit)
  {
    if (result)
      commit();
    else
      rollback();
  }
  return result;
}

bool CPD_HEAT_DATA_LIQADD::doAnnouncement(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, double STEELWEIGHT, double SLAGWEIGHT, long LADLENO, const std::string& LADLETYPE, const std::string& THERMALSTATUS, long SAMPLE_REF, bool Commit, cCBS_ODBC_DBError &Error)
{
  bool result = false;

  if ( select(HEATID, TREATID, PLANT, 1) )
  {
    CPD_SAMPLE_REF m_pPD_SAMPLE_REF(m_pCBS_StdConnection);
    CGC_LADLE_DEF  GC_LADLE_DEF(m_pCBS_StdConnection);

    setPLANT(PLANT);
    setHEATID(HEATID);
    setTREATID(TREATID);
    setLIQADDNO(1);
    setSTEELWEIGHT(STEELWEIGHT);
    setSLAGWEIGHT(SLAGWEIGHT);

    if ( GC_LADLE_DEF.isValidLadle(LADLENO, LADLETYPE) )
    {
      setLADLETYPE(LADLETYPE);
      setLADLENO(LADLENO);
    }

    setSTATUS(DEF_GC_LIQADD_STATUS::ASSIGNED);
    setTHERMALSTATUS(THERMALSTATUS);
    
    long ACT_SAMPLE_REF = getSAMPLE_REF(1);

    if ( SAMPLE_REF != CSMC_DBData::unspecLong )
    {
      if ( ACT_SAMPLE_REF != CSMC_DBData::unspecLong )
      {
        m_pPD_SAMPLE_REF.copySampleRef(SAMPLE_REF,ACT_SAMPLE_REF, Commit, Error);
      }
      else
      {
        ACT_SAMPLE_REF = m_pPD_SAMPLE_REF.copyToNextSAMPLE_REF(SAMPLE_REF, Commit);
      }
    }

    result = update();
  }
  else
  {
    //create a new pd_sample_ref based on PD_HEAT_DATA with same sample_counter
    long NEW_SAMPLE_REF = CSMC_DBData::unspecLong;

    CPD_SAMPLE_REF m_pPD_SAMPLE_REF(m_pCBS_StdConnection);
    CPD_HEAT_DATA  m_pPD_HEAT_DATA(m_pCBS_StdConnection);
    CGC_LADLE_DEF  GC_LADLE_DEF(m_pCBS_StdConnection);

    if(SAMPLE_REF != CSMC_DBData::unspecLong)
    {
      NEW_SAMPLE_REF = m_pPD_SAMPLE_REF.copyToNextSAMPLE_REF(SAMPLE_REF,Commit);
    }
    else
    {
      NEW_SAMPLE_REF = m_pPD_SAMPLE_REF.insertNewSAMPLE_REF();
    }

    setPLANT(PLANT);
    setHEATID(HEATID);
    setTREATID(TREATID);
    setLIQADDNO(1);
    setSTEELWEIGHT(STEELWEIGHT);
    setSLAGWEIGHT(SLAGWEIGHT);

    if ( GC_LADLE_DEF.isValidLadle(LADLENO, LADLETYPE) )
    {
      setLADLETYPE(LADLETYPE);
      setLADLENO(LADLENO);
    }

    setSAMPLE_REF(NEW_SAMPLE_REF);
    setSTATUS(DEF_GC_LIQADD_STATUS::ASSIGNED);
    setTHERMALSTATUS(THERMALSTATUS);

    result = insert();
  }

  if (!result)
    Error = getLastError();
  
  if (Commit)
  {
    if (result)
      commit();
    else
      rollback();
  }
  return result;
}

bool CPD_HEAT_DATA_LIQADD::doChangeLiquidAdditionData(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long LIQADDNO, double STEELWEIGHT, double SLAGWEIGHT, long LADLENO, const std::string& LADLETYPE, const std::string& THERMALSTATUS, long pSampRefCount, bool Commit, cCBS_ODBC_DBError &Error)
{
  bool result = false;

  setSTEELWEIGHT(STEELWEIGHT);
  setSLAGWEIGHT(SLAGWEIGHT);

  CGC_LADLE_DEF GC_LADLE_DEF(m_pCBS_StdConnection);

  if ( LADLENO   != CSMC_DBData::unspecLong && 
       LADLETYPE != CSMC_DBData::unspecString )
  {
    if ( GC_LADLE_DEF.isValidLadle(LADLENO, LADLETYPE) )
    {
      setLADLENO(LADLENO);
      setLADLETYPE(LADLETYPE);
    }
  }

  if (THERMALSTATUS != DEF::Inv_String)
    setTHERMALSTATUS(THERMALSTATUS);

  if (pSampRefCount != DEF::Inv_Long)
    setSAMPLE_REF(pSampRefCount);

  if (select(HEATID, TREATID, PLANT, LIQADDNO))
  {
    result = update();
  }
  else
  {
    setPLANT(PLANT);
    setHEATID(HEATID);
    setTREATID(TREATID);
    setLIQADDNO(LIQADDNO);

    result = insert();
  }

  if (!result)
    Error = getLastError();

  if (Commit)
  {
    if (result)
      commit();
    else
      rollback();
  }
  return result;
}

bool CPD_HEAT_DATA_LIQADD::doChangeLiquidAdditionDataForHM(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long LIQADDNO, long HOTMETAL_CNT, bool Commit, cCBS_ODBC_DBError &Error)
{
  std::stringstream sql;
  if (select(HEATID, TREATID, PLANT, LIQADDNO))
  {
    sql << "update PD_HEAT_DATA_LIQADD set (STEELWEIGHT, SLAGWEIGHT,"
      << "  LADLENO, LADLETYPE, THERMALSTATUS, SAMPLE_REF) = "
      << " (select hm.WEIGHT, hm.WEIGHT_SLAG, hm.LADLENO, hm.LADLETYPE,"
      << "   l.THERMALSTATUS, hm.SAMPLE_REF"
      << "  from PD_HOT_METAL hm, PD_LADLE l"
      << "  where hm.LADLENO = l.LADLENO"
      << "    and hm.LADLETYPE = l.LADLETYPE"
      << "    and hm.HOTMETAL_CNT = " << HOTMETAL_CNT << ")"
      << " where LIQADDNO = " << LIQADDNO
      << "   and HEATID = '" << HEATID << "'"
      << "   and TREATID = '" << TREATID << "'"
      << "   and PLANT = '" << PLANT << "'";
  }
  else
  {
    sql << "insert into PD_HEAT_DATA_LIQADD"
      << " (HEATID, TREATID, PLANT, LIQADDNO, STEELWEIGHT, SLAGWEIGHT, "
      << "  SAMPLE_REF, LADLENO, LADLETYPE, STATUS, DISCHARGETIME, MANUALCHANGED,"
      << "  LASTPLANT, THERMALSTATUS, SCULLMASS)"
      << " (select '" << HEATID << "', '" << TREATID << "', '" << PLANT << "', " << LIQADDNO << ","
      << "  hm.WEIGHT, hm.WEIGHT_SLAG, hm.SAMPLE_REF, hm.LADLENO, hm.LADLETYPE,"
      << "  'ASSIGNED', NULL, 1, NULL,l.THERMALSTATUS, NULL"
      << " from PD_HOT_METAL hm, PD_LADLE l"
      << " where hm.LADLENO = l.LADLENO"
      << "   and hm.LADLETYPE = l.LADLETYPE"
      << "   and hm.HOTMETAL_CNT = " << HOTMETAL_CNT << ")";
  }  
  
  bool result = executeSQL(sql.str());
    
  if (!result)
    Error = getLastError();

  if (Commit)
  {
    if (result)
      commit();
    else
      rollback();
  }
  return result;
}

bool CPD_HEAT_DATA_LIQADD::doDischargedHM(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long HOTMETAL_CNT, bool Commit, cCBS_ODBC_DBError &Error)
{
  bool result = copyHotMetalData(HEATID, TREATID, PLANT, HOTMETAL_CNT, Commit, Error);

  if ( selectByHotMetalCounter(HEATID, TREATID, PLANT, HOTMETAL_CNT) )
  {
    setSTATUS(DEF_GC_LIQADD_STATUS::CHARGED);

    result = update();
  }

	if (!result)
		Error = getLastError();

  if ( Commit )
  {
    if ( result )
      commit();
    else
      rollback();   
  }

  return result;
}

bool CPD_HEAT_DATA_LIQADD::doNewHeat(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long PLANTNO, std::string& LIQADDTYPE ,bool Commit, cCBS_ODBC_DBError &Error)
{
  bool result = false;
  if (select(HEATID, TREATID, PLANT, 1)) // LIQ_ADD_NO assumed as 1 // method sets where clauses to be used at "update()"
  {
    CPD_PRETREATDATA  m_pPD_PRETREATDATA(m_pCBS_StdConnection);
    CPP_HEAT_PLANT    m_pPP_HEAT_PLANT(m_pCBS_StdConnection);
    CPP_HEAT          m_pPP_HEAT(m_pCBS_StdConnection);
    CPD_LADLE         m_pPD_LADLE(m_pCBS_StdConnection);
    CGC_LADLE_DEF     GC_LADLE_DEF(m_pCBS_StdConnection);

    // check PP_HETA_PLANT
    // check PP_HEAT and read PRODORDERID
    // check PD_PRETREATDATA for PRODORDERID

    double STEELWEIGHT  = 0.0;
    double SLAGWEIGHT   = 0.0;
    double SCULLMASS    = 0.0;
    long LADLENO        = 0;
    std::string LADLETYPE;
    std::string STATUS = DEF_GC_LIQADD_STATUS::ASSIGNED;
    std::string LASTPLANT;
    std::string THERMALSTATUS;

    if ( m_pPP_HEAT_PLANT.selectByHeatPlantData(HEATID,TREATID,PLANT,PLANTNO) )
    {
      if (m_pPP_HEAT.select(HEATID))
      {
        if ( m_pPD_PRETREATDATA.selectValidDataByProdOrderId( m_pPP_HEAT.getPRODORDERID(1) ) )
        {
          STEELWEIGHT   = m_pPD_PRETREATDATA.getSTEELWEIGHT(1);
          SLAGWEIGHT    = m_pPD_PRETREATDATA.getSLAGWEIGHT(1);
          LADLETYPE     = m_pPD_PRETREATDATA.getLADLETYPE(1);
          LADLENO       = m_pPD_PRETREATDATA.getLADLENO(1);  
          LASTPLANT     = m_pPD_PRETREATDATA.getPLANT(1);  
        }
      }
    }

    if ( LADLENO    != CSMC_DBData::unspecLong && 
         LADLETYPE  != CSMC_DBData::unspecString && 
         m_pPD_LADLE.select(LADLENO,LADLETYPE) )
    {
      THERMALSTATUS = m_pPD_LADLE.getTHERMALSTATUS(1);    
    }

    setLIQADDTYPE(LIQADDTYPE);
    setSTEELWEIGHT(STEELWEIGHT);
    setSLAGWEIGHT(SLAGWEIGHT);
    setSCULLMASS(SCULLMASS);

    if ( GC_LADLE_DEF.isValidLadle(LADLENO, LADLETYPE) )
    {
      setLADLETYPE(LADLETYPE);
      setLADLENO(LADLENO);
    }

    setSTATUS(STATUS);
    setMANUALCHANGED(0);
    setLASTPLANT(LASTPLANT);
    setTHERMALSTATUS(THERMALSTATUS);

     result = update();
  }
  else
  {
    CPD_PRETREATDATA  m_pPD_PRETREATDATA(m_pCBS_StdConnection);
    CPP_HEAT_PLANT    m_pPP_HEAT_PLANT(m_pCBS_StdConnection);
    CPP_HEAT          m_pPP_HEAT(m_pCBS_StdConnection);
    CPD_LADLE         m_pPD_LADLE(m_pCBS_StdConnection);
    CGC_LADLE_DEF     GC_LADLE_DEF(m_pCBS_StdConnection);
    // check PP_HETA_PLANT
    // check PP_HEAT and read PRODORDERID
    // check PD_PRETREATDATA for PRODORDERID

    double STEELWEIGHT  = 0.0;
    double SLAGWEIGHT   = 0.0;
    double SCULLMASS    = 0.0;
    long LADLENO        = 0;
    long SAMPLE_REF     = 0;
    std::string LADLETYPE;
    std::string STATUS = DEF_GC_LIQADD_STATUS::ASSIGNED;
    std::string LASTPLANT;
    std::string THERMALSTATUS;

    if ( m_pPP_HEAT_PLANT.selectByHeatPlantData(HEATID,TREATID,PLANT,PLANTNO) )
    {
      if (m_pPP_HEAT.select(HEATID))
      {
        if ( m_pPD_PRETREATDATA.selectValidDataByProdOrderId( m_pPP_HEAT.getPRODORDERID(1) ) )
        {
          SAMPLE_REF    = m_pPD_PRETREATDATA.getSAMPLE_REF(1);

          STEELWEIGHT   = m_pPD_PRETREATDATA.getSTEELWEIGHT(1);
          SLAGWEIGHT    = m_pPD_PRETREATDATA.getSLAGWEIGHT(1);
          LADLETYPE     = m_pPD_PRETREATDATA.getLADLETYPE(1);
          LADLENO       = m_pPD_PRETREATDATA.getLADLENO(1);  
          LASTPLANT     = m_pPD_PRETREATDATA.getPLANT(1);  
        }
      }
    }

    if ( LADLENO    != CSMC_DBData::unspecLong && 
         LADLETYPE  != CSMC_DBData::unspecString && 
         m_pPD_LADLE.select(LADLENO,LADLETYPE) )
    {
      THERMALSTATUS = m_pPD_LADLE.getTHERMALSTATUS(1);    
    }

    setHEATID(HEATID);
    setTREATID(TREATID);
    setPLANT(PLANT);
    setLIQADDNO(1);
    setSTEELWEIGHT(STEELWEIGHT);
    setSLAGWEIGHT(SLAGWEIGHT);
    setSCULLMASS(SCULLMASS);

    if ( GC_LADLE_DEF.isValidLadle(LADLENO, LADLETYPE) )
    {
      setLADLETYPE(LADLETYPE);
      setLADLENO(LADLENO);
    }

    setSAMPLE_REF(SAMPLE_REF);
    setSTATUS(STATUS);
    setMANUALCHANGED(0);
    setLASTPLANT(LASTPLANT);
    setTHERMALSTATUS(THERMALSTATUS);

     result = insert();
  }

  if (!result)
    Error = getLastError();

  if (Commit)
  {
    if (result)
      commit();
    else
      rollback();
  }
  return result;
}

bool CPD_HEAT_DATA_LIQADD::doRemoveLiquidAdditionData(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long LIQADDNO, bool Commit, cCBS_ODBC_DBError &Error)
{
  std::stringstream sql;
  bool result = true; 

  if (select(HEATID, TREATID, PLANT, LIQADDNO))
  {
    sql << "delete from PD_HEAT_DATA_LIQADD"
      << " where HEATID = '" << HEATID << "'"
      << "   and TREATID = '" << TREATID << "'"
      << "   and PLANT = '" << PLANT << "'"
      << "   and LIQADDNO = " << LIQADDNO;
  
    result = result && executeSQL(sql.str());
    if (!result)
      Error = getLastError();

    if (Commit)
    {
      if (result)
        commit();
      else
        rollback();
    }
  }
  return result;
}

bool CPD_HEAT_DATA_LIQADD::exists(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long LIQADDNO)
{
  cleanWhereStatement();

  m_Statement = "Select HEATID from " + m_TableName;

  addWhereClause(CPD_HEAT_DATA_LIQADD::HEATID,HEATID);
  addWhereClause(CPD_HEAT_DATA_LIQADD::TREATID,TREATID);
  addWhereClause(CPD_HEAT_DATA_LIQADD::PLANT,PLANT);
  addWhereClause(CPD_HEAT_DATA_LIQADD::LIQADDNO,LIQADDNO);
   
  std::string sWhereStatement = getWhereStatement();
  //to avoid the exception like 'Select HEATID from PP_HEAT AND ROWNUM = 1 '
  if(sWhereStatement.length() > 0 ) 
  {
    // do not use ROWNUM in "addWhereClause", ROWNUM is not a table column and where statement will be used for deletion at "deleteRows"
    m_Statement += sWhereStatement + " AND ROWNUM = 1 ;";
  }
  else
  {
    return false;
  }

  return CSMC_DBData::select();
}

bool CPD_HEAT_DATA_LIQADD::exists(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const std::string &LADLETYPE)
{
  cleanWhereStatement();

  m_Statement = "Select HEATID from " + m_TableName;

  addWhereClause(CPD_HEAT_DATA_LIQADD::HEATID,HEATID);
  addWhereClause(CPD_HEAT_DATA_LIQADD::TREATID,TREATID);
  addWhereClause(CPD_HEAT_DATA_LIQADD::PLANT,PLANT);
  addWhereClause(CPD_HEAT_DATA_LIQADD::LADLETYPE,LADLETYPE);
   
  std::string sWhereStatement = getWhereStatement();
  //to avoid the exception like 'Select HEATID from PP_HEAT AND ROWNUM = 1 '
  if(sWhereStatement.length() > 0 ) 
  {
    // do not use ROWNUM in "addWhereClause", ROWNUM is not a table column and where statement will be used for deletion at "deleteRows"
    m_Statement += sWhereStatement + " AND ROWNUM = 1 ;";
  }
  else
  {
    return false;
  }

  return CSMC_DBData::select();
}

bool CPD_HEAT_DATA_LIQADD::getFirstLiqAddNo(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const std::string &LADLETYPE, long &LIQADDNO, cCBS_ODBC_DBError &Error)
{
  std::stringstream sql;
  bool result = true;
  if (exists(HEATID, TREATID, PLANT, LADLETYPE))
  {
    cleanWhereStatement();

    m_Statement = "Select * from " + m_TableName;

    addWhereClause(CPD_HEAT_DATA_LIQADD::HEATID,HEATID);
    addWhereClause(CPD_HEAT_DATA_LIQADD::TREATID,TREATID);
    addWhereClause(CPD_HEAT_DATA_LIQADD::PLANT,PLANT);
    addWhereClause(CPD_HEAT_DATA_LIQADD::LADLETYPE,LADLETYPE);
    m_Statement += getWhereStatement() + " order by LIQADDNO;";

    result = CSMC_DBData::select();

    if (result)
      LIQADDNO = getLIQADDNO(1);
    else
      Error = getLastError();
  }
  else
    //Data don't exists -> get next value
    result = getNextLiqAddNo(HEATID, TREATID, PLANT, LIQADDNO, Error);

  return result;
}

//return next LiqAddNo
bool CPD_HEAT_DATA_LIQADD::getNextLiqAddNo(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long &LIQADDNO, cCBS_ODBC_DBError &Error)
{
  std::stringstream sql;
  sql << "select nvl(max(LIQADDNO)+1, 1) as LIQADDNO"
    << " from PD_HEAT_DATA_LIQADD"
    << " where HEATID = '" << HEATID << "'"
    << "   and TREATID = '" << TREATID << "'"
    << "   and PLANT = '" << PLANT << "'";
  
  m_Statement = sql.str() + ";";

  bool result = CSMC_DBData::select();
  if (result)
    LIQADDNO = getLIQADDNO(1);
  else
    Error = getLastError();

  return result;
}

bool CPD_HEAT_DATA_LIQADD::removeLiquidAdditionHM(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long HOTMETAL_CNT, bool Commit, cCBS_ODBC_DBError &Error)
{
  log("++++++ CPD_HEAT_DATA_LIQADD::removeLiquidAdditionHM",3);

  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPD_HEAT_DATA_LIQADD::HEATID,HEATID);
  addWhereClause(CPD_HEAT_DATA_LIQADD::TREATID,TREATID);
  addWhereClause(CPD_HEAT_DATA_LIQADD::PLANT,PLANT);
  addWhereClause(CPD_HEAT_DATA_LIQADD::HOTMETAL_CNT,HOTMETAL_CNT);

  m_Statement += getWhereStatement() + ";";

  bool result = CSMC_DBData::deleteRows();

  if (!result)
    Error = getLastError();

  if (Commit)
  {
    if (result)
      commit();
    else
      rollback();
  }
  return result;

}

bool CPD_HEAT_DATA_LIQADD::updateSampleRefForHeatId(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const std::string& LADLETYPE, long LADLENO, long SAMPLE_REF)
{
  bool RetValue = false;

  if ( selectHeatByLadle(HEATID, TREATID, PLANT, LADLETYPE, LADLENO, CSMC_DBData::unspecString) )
  {
    setSAMPLE_REF(SAMPLE_REF);
    if ( update() )
    {
      commit();
      RetValue = true;
    }
    else
    {
      rollback();
    }
  }

  return RetValue;
}

bool CPD_HEAT_DATA_LIQADD::writeHotMetalData(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const std::string& ORDERID, bool Commit, cCBS_ODBC_DBError &Error)
{
  bool result = true; 

  CPD_HOT_METAL_ORDER PD_HOT_METAL_ORDER(m_pCBS_StdConnection);
  CPD_HOT_METAL       PD_HOT_METAL(m_pCBS_StdConnection);
  CPD_LADLE           PD_LADLE(m_pCBS_StdConnection);

  if (PD_HOT_METAL_ORDER.select(PLANT, ORDERID, CSMC_DBData::unspecLong) )
  {
    for (int k = 1; k <= PD_HOT_METAL_ORDER.getLastRow(); ++k) 
    {
      if (!PD_HOT_METAL_ORDER.isNull(CPD_HEAT_DATA_LIQADD::HOTMETAL_CNT,k))
      {
        long HM_LADLE_IN_SEQ = PD_HOT_METAL_ORDER.getHM_LADLE_IN_SEQ(k);
        if (PD_HOT_METAL.select(PD_HOT_METAL_ORDER.getHOTMETAL_COUNTER(1)))
        {
          setHEATID(HEATID);
          setTREATID(TREATID);
          setPLANT(PLANT);
          setLIQADDNO(HM_LADLE_IN_SEQ);
          setSTEELWEIGHT(PD_HOT_METAL.getWEIGHT(1));
          setSLAGWEIGHT(PD_HOT_METAL.getWEIGHT_SLAG(1));
          setSAMPLE_REF(PD_HOT_METAL.getSAMPLE_REF(1));
          setLADLENO(PD_HOT_METAL.getLADLENO(1));
          setLADLETYPE(PD_HOT_METAL.getLADLETYPE(1));
          if (PD_HOT_METAL.getLADLENO(1) != CSMC_DBData::unspecLong &&
              PD_HOT_METAL.getLADLETYPE(1) != CSMC_DBData::unspecString)
          {
            if (PD_LADLE.select(PD_HOT_METAL.getLADLENO(1), PD_HOT_METAL.getLADLETYPE(1)))
              setTHERMALSTATUS(PD_LADLE.getTHERMALSTATUS(1));
          }
          setSTATUS(DEF_GC_LIQADD_STATUS::ASSIGNED);
          if (PD_HOT_METAL.getLADLETYPE(1) != DEF_GC_LADLE_TYPE::HotMetalLadle)
            setLIQADDTYPE(DEF_GC_LIQADD_TYPE::FeCr);
          else
            setLIQADDTYPE(DEF_GC_LIQADD_TYPE::HotMetal);

          result = result && insert();
        }
      }
    } //for
  }//if

  if (!result)
    Error = getLastError();

  if (Commit)
  {
    if (result)
      commit();
    else
      rollback();
  }

    return result;
}


