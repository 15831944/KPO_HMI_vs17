//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 

#if defined (_MSC_VER) && (_MSC_VER >= 1000)
#pragma once
#endif
#ifndef _INC_CPD_PLANTSTATUS_PLANT_INCLUDED
#define _INC_CPD_PLANTSTATUS_PLANT_INCLUDED

#include "CSMC_DBData.h"

class CPD_PLANTSTATUS_PLANT
: public CSMC_DBData
{

public:
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PLANT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PLANTNO;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TREATMENTPOSITION;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TYPE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string VARNAME;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string VALUE;

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPD_PLANTSTATUS_PLANT(cCBS_StdConnection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPD_PLANTSTATUS_PLANT(cCBS_Connection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPD_PLANTSTATUS_PLANT();

  //##DBClassCodeUtility ! DO NOT EDIT !
  ~CPD_PLANTSTATUS_PLANT();

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Plant identifier
  std::string getPLANT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPLANT(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Plant number
  long getPLANTNO(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPLANTNO(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Identification of treatment position to handle heats at Twin-LF (1-> car 1, 2-> car 2) and melting units with tapping area (1-> furnace, 2-> TapLadle)
  long getTREATMENTPOSITION(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTREATMENTPOSITION(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Specifies data type of value. 1=long, 2=double,3=string
  long getTYPE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTYPE(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getVARNAME(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setVARNAME(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getVALUE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setVALUE(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  bool select(const std::string& PLANT, long PLANTNO, long TREATMENTPOSITION, long TYPE, const std::string& VARNAME);

  //## ----------------------------------END-GENERATED-CODE--------------------- 

  //## ----------------------------------YOUR-CODE------------------------------ 

  bool resetPlantStatus(const std::string& PLANT, long PLANTNO, long TREATMENTPOSITION, bool Commit, cCBS_ODBC_DBError &Error);

  bool switchTreatmentPosition(const std::string& PLANT,long PLANTNO, long FromTreatPos, long ToTreatPos , bool Commit, cCBS_ODBC_DBError &Error);

  bool updateStatus(const std::string& PLANT, long PLANTNO, long TREATMENTPOSITION, long TYPE, const std::string& VARNAME, const std::string& VALUE, bool Commit, cCBS_ODBC_DBError &Error);

  bool deleteRows(const std::string& PLANT, long PLANTNO, long FromTreatPos, long ToTreatPos, bool Commit, cCBS_ODBC_DBError &Error);
};

#endif /* _INC_CPD_PLANTSTATUS_PLANT_INCLUDED */
