//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CPD_RECIPE.h"
#include "CHD_RECIPE.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_RECIPE::HEATID("HEATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_RECIPE::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_RECIPE::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_RECIPE::RECIPENAME("RECIPENAME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_RECIPE::RECIPENO("RECIPENO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_RECIPE::SOURCE("SOURCE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_RECIPE::BATCHSTATUSNO("BATCHSTATUSNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_RECIPE::CALC_BASIS_NO("CALC_BASIS_NO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_RECIPE::BATCHSTATUSCHGDATE("BATCHSTATUSCHGDATE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_RECIPE::UPDTIME("UPDTIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_RECIPE::WEIGHTTOTAL("WEIGHTTOTAL");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_RECIPE::COSTSBATCH("COSTSBATCH");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_RECIPE::BULKVOL("BULKVOL");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_RECIPE::ACTOXYGENMOMENT("ACTOXYGENMOMENT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_RECIPE::ACT_AR_MOMENT("ACT_AR_MOMENT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_RECIPE::ACT_N2_MOMENT("ACT_N2_MOMENT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_RECIPE::ACT_EGY("ACT_EGY");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_RECIPE::DURSINCEHEATANNOUNCEMENT("DURSINCEHEATANNOUNCEMENT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_RECIPE::DURSINCESTARTOFFHEAT("DURSINCESTARTOFFHEAT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_RECIPE::BATCHFEEDSPEED("BATCHFEEDSPEED");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_RECIPE::DISCHARGESTARTTIME("DISCHARGESTARTTIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_RECIPE::DISCHARGEENDTIME("DISCHARGEENDTIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_RECIPE::VOLUME("VOLUME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_RECIPE::CHARGING_DEST_NAME("CHARGING_DEST_NAME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_RECIPE::ACT_O2_MOMENT("ACT_O2_MOMENT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_RECIPE::CHARGE_MOMENT("CHARGE_MOMENT");

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_RECIPE::CHD_RECIPE(cCBS_StdConnection* Connection)
:CSMC_DBData("HD_RECIPE",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_RECIPE::CHD_RECIPE(cCBS_Connection* Connection)
:CSMC_DBData("HD_RECIPE",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_RECIPE::CHD_RECIPE()
:CSMC_DBData("HD_RECIPE")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_RECIPE::~CHD_RECIPE()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Internal heat identifier
std::string CHD_RECIPE::getHEATID(long Row)
{
  return getString(CHD_RECIPE::HEATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_RECIPE::setHEATID(const std::string& value)
{
  setString(CHD_RECIPE::HEATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Treatment identifier
std::string CHD_RECIPE::getTREATID(long Row)
{
  return getString(CHD_RECIPE::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_RECIPE::setTREATID(const std::string& value)
{
  setString(CHD_RECIPE::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Plant identifier
std::string CHD_RECIPE::getPLANT(long Row)
{
  return getString(CHD_RECIPE::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_RECIPE::setPLANT(const std::string& value)
{
  setString(CHD_RECIPE::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHD_RECIPE::getRECIPENAME(long Row)
{
  return getString(CHD_RECIPE::RECIPENAME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_RECIPE::setRECIPENAME(const std::string& value)
{
  setString(CHD_RECIPE::RECIPENAME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHD_RECIPE::getRECIPENO(long Row)
{
  return getLong(CHD_RECIPE::RECIPENO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_RECIPE::setRECIPENO(long value)
{
  setLong(CHD_RECIPE::RECIPENO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHD_RECIPE::getSOURCE(long Row)
{
  return getString(CHD_RECIPE::SOURCE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_RECIPE::setSOURCE(const std::string& value)
{
  setString(CHD_RECIPE::SOURCE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Batch Status number (Number in the L1/L2 Telgramm in the, Material handling report
long CHD_RECIPE::getBATCHSTATUSNO(long Row)
{
  return getLong(CHD_RECIPE::BATCHSTATUSNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_RECIPE::setBATCHSTATUSNO(long value)
{
  setLong(CHD_RECIPE::BATCHSTATUSNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Basis of the related model calculation
long CHD_RECIPE::getCALC_BASIS_NO(long Row)
{
  return getLong(CHD_RECIPE::CALC_BASIS_NO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_RECIPE::setCALC_BASIS_NO(long value)
{
  setLong(CHD_RECIPE::CALC_BASIS_NO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Date of last status change., Comment:, Weighed time = first Weighed for one recipe
CDateTime CHD_RECIPE::getBATCHSTATUSCHGDATE(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHD_RECIPE::BATCHSTATUSCHGDATE, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_RECIPE::setBATCHSTATUSCHGDATE(const CDateTime& value)
{
 setString(CHD_RECIPE::BATCHSTATUSCHGDATE, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Date and time of last revision
CDateTime CHD_RECIPE::getUPDTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHD_RECIPE::UPDTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_RECIPE::setUPDTIME(const CDateTime& value)
{
 setString(CHD_RECIPE::UPDTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHD_RECIPE::getWEIGHTTOTAL(long Row)
{
  return getDouble(CHD_RECIPE::WEIGHTTOTAL, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_RECIPE::setWEIGHTTOTAL(double value)
{
  setDouble(CHD_RECIPE::WEIGHTTOTAL, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Total Cost of the Batch
double CHD_RECIPE::getCOSTSBATCH(long Row)
{
  return getDouble(CHD_RECIPE::COSTSBATCH, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_RECIPE::setCOSTSBATCH(double value)
{
  setDouble(CHD_RECIPE::COSTSBATCH, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Bulk volume
double CHD_RECIPE::getBULKVOL(long Row)
{
  return getDouble(CHD_RECIPE::BULKVOL, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_RECIPE::setBULKVOL(double value)
{
  setDouble(CHD_RECIPE::BULKVOL, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Oxygen Moment, Only for AOD, BOF, Conarc and, Recipe Status, Enable, Processing Start, Weighing Complete, First Material in Charging Hopper, Discharge Start, Weighing Complete, Last Material In Chrging Hopper, Discharged
double CHD_RECIPE::getACTOXYGENMOMENT(long Row)
{
  return getDouble(CHD_RECIPE::ACTOXYGENMOMENT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_RECIPE::setACTOXYGENMOMENT(double value)
{
  setDouble(CHD_RECIPE::ACTOXYGENMOMENT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Ar Moment, Only for AOD, BOF, Conarc and, Recipe Status, Enable, Processing Start, Weighing Complete, First Material in Charging Hopper, Discharge Start, Weighing Complete, Last Material In Chrging Hopper, Discharged
double CHD_RECIPE::getACT_AR_MOMENT(long Row)
{
  return getDouble(CHD_RECIPE::ACT_AR_MOMENT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_RECIPE::setACT_AR_MOMENT(double value)
{
  setDouble(CHD_RECIPE::ACT_AR_MOMENT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##N2 Moment, Only for AOD, BOF, Conarc and, Recipe Status, Enable, Processing Start, Weighing Complete, First Material in Charging Hopper, Discharge Start, Weighing Complete, Last Material In Chrging Hopper, Discharged
double CHD_RECIPE::getACT_N2_MOMENT(long Row)
{
  return getDouble(CHD_RECIPE::ACT_N2_MOMENT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_RECIPE::setACT_N2_MOMENT(double value)
{
  setDouble(CHD_RECIPE::ACT_N2_MOMENT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Only for EAF/LF, Only for Recipe Status, Recipe Status, Enable, Processing Start, Weighing Complete, First Material in Charging Hopper, Discharge Start, Weighing Complete, Last Material In Chrging Hopper, Discharged
double CHD_RECIPE::getACT_EGY(long Row)
{
  return getDouble(CHD_RECIPE::ACT_EGY, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_RECIPE::setACT_EGY(double value)
{
  setDouble(CHD_RECIPE::ACT_EGY, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Duration since heat announcement
double CHD_RECIPE::getDURSINCEHEATANNOUNCEMENT(long Row)
{
  return getDouble(CHD_RECIPE::DURSINCEHEATANNOUNCEMENT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_RECIPE::setDURSINCEHEATANNOUNCEMENT(double value)
{
  setDouble(CHD_RECIPE::DURSINCEHEATANNOUNCEMENT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Duration since start of heat
double CHD_RECIPE::getDURSINCESTARTOFFHEAT(long Row)
{
  return getDouble(CHD_RECIPE::DURSINCESTARTOFFHEAT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_RECIPE::setDURSINCESTARTOFFHEAT(double value)
{
  setDouble(CHD_RECIPE::DURSINCESTARTOFFHEAT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Batch Material feed speed., BATCHMATFEEDSPEED=, TOTALBATCHWEIGHT/, Discharged Time Discharge Start Time, Only filled for Status 10!!!
double CHD_RECIPE::getBATCHFEEDSPEED(long Row)
{
  return getDouble(CHD_RECIPE::BATCHFEEDSPEED, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_RECIPE::setBATCHFEEDSPEED(double value)
{
  setDouble(CHD_RECIPE::BATCHFEEDSPEED, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Time since heat announcement if Batch status "Discharge Start" has been reached
CDateTime CHD_RECIPE::getDISCHARGESTARTTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHD_RECIPE::DISCHARGESTARTTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_RECIPE::setDISCHARGESTARTTIME(const CDateTime& value)
{
 setString(CHD_RECIPE::DISCHARGESTARTTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Time since heat announcement if Batch status "Discharge End" has been reached
CDateTime CHD_RECIPE::getDISCHARGEENDTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHD_RECIPE::DISCHARGEENDTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_RECIPE::setDISCHARGEENDTIME(const CDateTime& value)
{
 setString(CHD_RECIPE::DISCHARGEENDTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHD_RECIPE::getVOLUME(long Row)
{
  return getDouble(CHD_RECIPE::VOLUME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_RECIPE::setVOLUME(double value)
{
  setDouble(CHD_RECIPE::VOLUME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Charging destination name, e.g TapLadle, ladle
std::string CHD_RECIPE::getCHARGING_DEST_NAME(long Row)
{
  return getString(CHD_RECIPE::CHARGING_DEST_NAME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_RECIPE::setCHARGING_DEST_NAME(const std::string& value)
{
  setString(CHD_RECIPE::CHARGING_DEST_NAME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHD_RECIPE::getACT_O2_MOMENT(long Row)
{
  return getDouble(CHD_RECIPE::ACT_O2_MOMENT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_RECIPE::setACT_O2_MOMENT(double value)
{
  setDouble(CHD_RECIPE::ACT_O2_MOMENT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHD_RECIPE::getCHARGE_MOMENT(long Row)
{
  return getDouble(CHD_RECIPE::CHARGE_MOMENT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_RECIPE::setCHARGE_MOMENT(double value)
{
  setDouble(CHD_RECIPE::CHARGE_MOMENT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CHD_RECIPE::select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const std::string& RECIPENAME, long RECIPENO, const std::string& SOURCE, long BATCHSTATUSNO)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CHD_RECIPE::HEATID,HEATID);
  addWhereClause(CHD_RECIPE::TREATID,TREATID);
  addWhereClause(CHD_RECIPE::PLANT,PLANT);
  addWhereClause(CHD_RECIPE::RECIPENAME,RECIPENAME);
  addWhereClause(CHD_RECIPE::RECIPENO,RECIPENO);
  addWhereClause(CHD_RECIPE::SOURCE,SOURCE);
  addWhereClause(CHD_RECIPE::BATCHSTATUSNO,BATCHSTATUSNO);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CHD_RECIPE::copy(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, bool Commit, cCBS_ODBC_DBError &Error)
{
	bool result = !exists(HEATID, TREATID, PLANT);
	//some data found -> delete them
	if (!result)
	{
		result = deleteRows();
		if (!result)
			setLastError(std::string("ERROR_DELETE_DATA"), 0, getActStatement());
	}

  // preparing setting for source table
  CPD_RECIPE PD_RECIPE(m_pCBS_StdConnection);
  PD_RECIPE.addWhereClause(CPD_RECIPE::HEATID,HEATID);
  PD_RECIPE.addWhereClause(CPD_RECIPE::TREATID,TREATID);
  PD_RECIPE.addWhereClause(CPD_RECIPE::PLANT,PLANT);

  result = result && copyByInsert(&PD_RECIPE);

	if (!result)
		Error = getLastError();

	if(Commit)
  {
		if (result)
			this->commit();
		else
			rollback();
  }

	return result;
}

bool CHD_RECIPE::exists(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT)
{
	cleanWhereStatement();

	m_Statement = "Select HEATID from " + m_TableName;

	addWhereClause(CHD_RECIPE::HEATID,HEATID);
	addWhereClause(CHD_RECIPE::TREATID,TREATID);
	addWhereClause(CHD_RECIPE::PLANT,PLANT);
   
  std::string sWhereStatement = getWhereStatement();
  //to avoid the exception like 'Select HEATID from PP_HEAT AND ROWNUM = 1 '
  if(sWhereStatement.length() > 0 ) 
  {
    // do not use ROWNUM in "addWhereClause", ROWNUM is not a table column and where statement will be used for deletion at "deleteRows"
    m_Statement += sWhereStatement + " AND ROWNUM = 1 ;";
  }
  else
  {
    return false;
  }

	return CSMC_DBData::select();
}


