//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CPD_ELEC_SYSTEM.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_ELEC_SYSTEM::HEATID("HEATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_ELEC_SYSTEM::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_ELEC_SYSTEM::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_ELEC_SYSTEM::ELEC_SYSTEM_CODE("ELEC_SYSTEM_CODE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_ELEC_SYSTEM::DATECHANGE("DATECHANGE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_ELEC_SYSTEM::DURSINCEHEATANNOUNCE("DURSINCEHEATANNOUNCE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_ELEC_SYSTEM::DURSINCESTARTOFHEAT("DURSINCESTARTOFHEAT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_ELEC_SYSTEM::ELEC_EGYTOT("ELEC_EGYTOT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_ELEC_SYSTEM::STATUS("STATUS");

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_ELEC_SYSTEM::CPD_ELEC_SYSTEM(cCBS_StdConnection* Connection)
:CSMC_DBData("PD_ELEC_SYSTEM",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_ELEC_SYSTEM::CPD_ELEC_SYSTEM(cCBS_Connection* Connection)
:CSMC_DBData("PD_ELEC_SYSTEM",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_ELEC_SYSTEM::CPD_ELEC_SYSTEM()
:CSMC_DBData("PD_ELEC_SYSTEM")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_ELEC_SYSTEM::~CPD_ELEC_SYSTEM()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Internal heat identifier
std::string CPD_ELEC_SYSTEM::getHEATID(long Row)
{
  return getString(CPD_ELEC_SYSTEM::HEATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_ELEC_SYSTEM::setHEATID(const std::string& value)
{
  setString(CPD_ELEC_SYSTEM::HEATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Treatment identifier
std::string CPD_ELEC_SYSTEM::getTREATID(long Row)
{
  return getString(CPD_ELEC_SYSTEM::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_ELEC_SYSTEM::setTREATID(const std::string& value)
{
  setString(CPD_ELEC_SYSTEM::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Plant identifier
std::string CPD_ELEC_SYSTEM::getPLANT(long Row)
{
  return getString(CPD_ELEC_SYSTEM::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_ELEC_SYSTEM::setPLANT(const std::string& value)
{
  setString(CPD_ELEC_SYSTEM::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Electric system, e.g. Power Furnace breaker
std::string CPD_ELEC_SYSTEM::getELEC_SYSTEM_CODE(long Row)
{
  return getString(CPD_ELEC_SYSTEM::ELEC_SYSTEM_CODE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_ELEC_SYSTEM::setELEC_SYSTEM_CODE(const std::string& value)
{
  setString(CPD_ELEC_SYSTEM::ELEC_SYSTEM_CODE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Timestamp indication of the change
CDateTime CPD_ELEC_SYSTEM::getDATECHANGE(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CPD_ELEC_SYSTEM::DATECHANGE, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_ELEC_SYSTEM::setDATECHANGE(const CDateTime& value)
{
 setString(CPD_ELEC_SYSTEM::DATECHANGE, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Duration since heat announcement
double CPD_ELEC_SYSTEM::getDURSINCEHEATANNOUNCE(long Row)
{
  return getDouble(CPD_ELEC_SYSTEM::DURSINCEHEATANNOUNCE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_ELEC_SYSTEM::setDURSINCEHEATANNOUNCE(double value)
{
  setDouble(CPD_ELEC_SYSTEM::DURSINCEHEATANNOUNCE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Duration since start of heat
double CPD_ELEC_SYSTEM::getDURSINCESTARTOFHEAT(long Row)
{
  return getDouble(CPD_ELEC_SYSTEM::DURSINCESTARTOFHEAT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_ELEC_SYSTEM::setDURSINCESTARTOFHEAT(double value)
{
  setDouble(CPD_ELEC_SYSTEM::DURSINCESTARTOFHEAT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Total electric energy consumption in case of electric heating, kWh
double CPD_ELEC_SYSTEM::getELEC_EGYTOT(long Row)
{
  return getDouble(CPD_ELEC_SYSTEM::ELEC_EGYTOT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_ELEC_SYSTEM::setELEC_EGYTOT(double value)
{
  setDouble(CPD_ELEC_SYSTEM::ELEC_EGYTOT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPD_ELEC_SYSTEM::getSTATUS(long Row)
{
  return getLong(CPD_ELEC_SYSTEM::STATUS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_ELEC_SYSTEM::setSTATUS(long value)
{
  setLong(CPD_ELEC_SYSTEM::STATUS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CPD_ELEC_SYSTEM::select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const std::string& ELEC_SYSTEM_CODE, const CDateTime& DATECHANGE)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPD_ELEC_SYSTEM::HEATID,HEATID);
  addWhereClause(CPD_ELEC_SYSTEM::TREATID,TREATID);
  addWhereClause(CPD_ELEC_SYSTEM::PLANT,PLANT);
  addWhereClause(CPD_ELEC_SYSTEM::ELEC_SYSTEM_CODE,ELEC_SYSTEM_CODE);
  addWhereClause(CPD_ELEC_SYSTEM::DATECHANGE,DATECHANGE);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CPD_ELEC_SYSTEM::selectLastChanged(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const std::string& ELEC_SYSTEM_CODE)
{
	cleanWhereStatement();

	m_Statement = "Select * from " + m_TableName;

	addWhereClause(CPD_ELEC_SYSTEM::HEATID,HEATID);
	addWhereClause(CPD_ELEC_SYSTEM::TREATID,TREATID);
	addWhereClause(CPD_ELEC_SYSTEM::PLANT,PLANT);
	addWhereClause(CPD_ELEC_SYSTEM::ELEC_SYSTEM_CODE,ELEC_SYSTEM_CODE);

	m_Statement += getWhereStatement() + " and DATECHANGE = ";
	m_Statement += "(select max(DATECHANGE) from " + m_TableName;
	m_Statement += getWhereStatement() + ");";

	return CSMC_DBData::select();
}

bool CPD_ELEC_SYSTEM::selectLatest(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const std::string& ELEC_SYSTEM_CODE)
{
	cleanWhereStatement();

	m_Statement = "Select * from " + m_TableName;

	addWhereClause(CPD_ELEC_SYSTEM::HEATID,HEATID);
	addWhereClause(CPD_ELEC_SYSTEM::TREATID,TREATID);
	addWhereClause(CPD_ELEC_SYSTEM::PLANT,PLANT);
	addWhereClause(CPD_ELEC_SYSTEM::ELEC_SYSTEM_CODE,ELEC_SYSTEM_CODE);

	m_Statement += getWhereStatement() + " order by DATECHANGE desc;";

	return CSMC_DBData::select();
}

bool CPD_ELEC_SYSTEM::write(const std::string& HeatID, const std::string& TreatID, const std::string& SystemCode, const std::string& Plant, long Status,double DurSinceHeatAnnounce, double DurSinceHeatStart, double ElecEgy)
{
  bool          RetValue   = false;
  CDateTime     now;

  try
  {
    // provide constraint violation
    if ( Status == DEF::Inv_Long )
      Status = 0;

    setHEATID(HeatID);
    setTREATID(TreatID);
	  setELEC_SYSTEM_CODE(SystemCode);
	  setPLANT(Plant);
    setDATECHANGE(now);
    setSTATUS(Status);
    setDURSINCEHEATANNOUNCE(DurSinceHeatAnnounce);
    setDURSINCESTARTOFHEAT(DurSinceHeatStart);
    setELEC_EGYTOT(ElecEgy);

    RetValue = insert();
  }
  catch(...)
  {
    RetValue = false;
    rollback(); //something wrong, rollback transaction.
    return RetValue;
  }

  commit(); //if everything ok, commit transaction.

  return RetValue;
}


