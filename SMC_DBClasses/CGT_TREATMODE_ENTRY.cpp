//## Copyright (C) 2010 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CGT_TREATMODE_ENTRY.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_TREATMODE_ENTRY::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_TREATMODE_ENTRY::PLANTNO("PLANTNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_TREATMODE_ENTRY::TREATMODENO("TREATMODENO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_TREATMODE_ENTRY::TREATMENTPHASE("TREATMENTPHASE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_TREATMODE_ENTRY::TREATMENTPHASENO("TREATMENTPHASENO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_TREATMODE_ENTRY::TREATMENTPHASEORDER("TREATMENTPHASEORDER");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_TREATMODE_ENTRY::PRACPHASE("PRACPHASE");

//##DBClassCodeUtility ! DO NOT EDIT !
CGT_TREATMODE_ENTRY::CGT_TREATMODE_ENTRY(cCBS_StdConnection* Connection)
:CSMC_DBData("GT_TREATMODE_ENTRY",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGT_TREATMODE_ENTRY::CGT_TREATMODE_ENTRY(cCBS_Connection* Connection)
:CSMC_DBData("GT_TREATMODE_ENTRY",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGT_TREATMODE_ENTRY::CGT_TREATMODE_ENTRY()
:CSMC_DBData("GT_TREATMODE_ENTRY")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGT_TREATMODE_ENTRY::~CGT_TREATMODE_ENTRY()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Plant identifier
std::string CGT_TREATMODE_ENTRY::getPLANT(long Row)
{
  return getString(CGT_TREATMODE_ENTRY::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_TREATMODE_ENTRY::setPLANT(const std::string& value)
{
  setString(CGT_TREATMODE_ENTRY::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Plant number
long CGT_TREATMODE_ENTRY::getPLANTNO(long Row)
{
  return getLong(CGT_TREATMODE_ENTRY::PLANTNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_TREATMODE_ENTRY::setPLANTNO(long value)
{
  setLong(CGT_TREATMODE_ENTRY::PLANTNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Treatment mode number
long CGT_TREATMODE_ENTRY::getTREATMODENO(long Row)
{
  return getLong(CGT_TREATMODE_ENTRY::TREATMODENO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_TREATMODE_ENTRY::setTREATMODENO(long value)
{
  setLong(CGT_TREATMODE_ENTRY::TREATMODENO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Phases are e.g. Basket, LiqAdd for EAF
std::string CGT_TREATMODE_ENTRY::getTREATMENTPHASE(long Row)
{
  return getString(CGT_TREATMODE_ENTRY::TREATMENTPHASE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_TREATMODE_ENTRY::setTREATMENTPHASE(const std::string& value)
{
  setString(CGT_TREATMODE_ENTRY::TREATMENTPHASE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Counter for equal phases, e.g Basket number 1, Basket number 2
long CGT_TREATMODE_ENTRY::getTREATMENTPHASENO(long Row)
{
  return getLong(CGT_TREATMODE_ENTRY::TREATMENTPHASENO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_TREATMODE_ENTRY::setTREATMENTPHASENO(long value)
{
  setLong(CGT_TREATMODE_ENTRY::TREATMENTPHASENO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Display order in the HMI
long CGT_TREATMODE_ENTRY::getTREATMENTPHASEORDER(long Row)
{
  return getLong(CGT_TREATMODE_ENTRY::TREATMENTPHASEORDER, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_TREATMODE_ENTRY::setTREATMENTPHASEORDER(long value)
{
  setLong(CGT_TREATMODE_ENTRY::TREATMENTPHASEORDER, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Corresponding practice phase name, e.g. if the treatmode has only one basket it will be the LastBsk
std::string CGT_TREATMODE_ENTRY::getPRACPHASE(long Row)
{
  return getString(CGT_TREATMODE_ENTRY::PRACPHASE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_TREATMODE_ENTRY::setPRACPHASE(const std::string& value)
{
  setString(CGT_TREATMODE_ENTRY::PRACPHASE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CGT_TREATMODE_ENTRY::select(const std::string& PLANT, long PLANTNO, long TREATMODENO, const std::string& TREATMENTPHASE, long TREATMENTPHASENO)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CGT_TREATMODE_ENTRY::PLANT,PLANT);
  addWhereClause(CGT_TREATMODE_ENTRY::PLANTNO,PLANTNO);
  addWhereClause(CGT_TREATMODE_ENTRY::TREATMODENO,TREATMODENO);
  addWhereClause(CGT_TREATMODE_ENTRY::TREATMENTPHASE,TREATMENTPHASE);
  addWhereClause(CGT_TREATMODE_ENTRY::TREATMENTPHASENO,TREATMENTPHASENO);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CGT_TREATMODE_ENTRY::selectbyPracPhase(const std::string& PLANT, long PLANTNO, long TREATMODENO, const std::string& PRACPHASE)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CGT_TREATMODE_ENTRY::PLANT,PLANT);
  addWhereClause(CGT_TREATMODE_ENTRY::PLANTNO,PLANTNO);
  addWhereClause(CGT_TREATMODE_ENTRY::TREATMODENO,TREATMODENO);
  addWhereClause(CGT_TREATMODE_ENTRY::PRACPHASE,PRACPHASE);

  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

bool CGT_TREATMODE_ENTRY::selectOrdered(const std::string& PLANT, long PLANTNO, long TREATMODENO, const std::string& TREATMENTPHASE, long TREATMENTPHASENO)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CGT_TREATMODE_ENTRY::PLANT,PLANT);
  addWhereClause(CGT_TREATMODE_ENTRY::PLANTNO,PLANTNO);
  addWhereClause(CGT_TREATMODE_ENTRY::TREATMODENO,TREATMODENO);
  addWhereClause(CGT_TREATMODE_ENTRY::TREATMENTPHASE,TREATMENTPHASE);
  addWhereClause(CGT_TREATMODE_ENTRY::TREATMENTPHASENO,TREATMENTPHASENO);

  m_Statement += getWhereStatement() + " order by PLANT,PLANTNO,TREATMODENO,TREATMENTPHASEORDER ASC;";

  return CSMC_DBData::select();
}


