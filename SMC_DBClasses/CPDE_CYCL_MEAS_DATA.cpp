//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "iSMC_DataDefinitions_s.hh"
#include "cCBS_StdEventLogFrameController.h"
#include "CIntfData.h"
#include "DEF_GC_STIRR_GAS_TYPE.h"
#include "CPDE_CYCL_MEAS_DATA.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA::HEATID("HEATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA::REVTIME("REVTIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA::DURSINCEHEATANNOUNCE("DURSINCEHEATANNOUNCE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA::DURSINCESTARTOFHEAT("DURSINCESTARTOFHEAT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA::ELEC_CONS("ELEC_CONS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA::CURPHASE_L1("CURPHASE_L1");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA::COMPMODE_ELEC("COMPMODE_ELEC");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA::COMPMODE_MAT("COMPMODE_MAT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA::COMPMODE_STIRR("COMPMODE_STIRR");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA::COMPMODE_BURNER("COMPMODE_BURNER");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA::COMPMODE_INJ("COMPMODE_INJ");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA::REACTORTAP("REACTORTAP");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA::VOLTTAP("VOLTTAP");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA::IMPCURVE("IMPCURVE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA::BASKETCHARGED("BASKETCHARGED");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA::LIQADDCHARGED("LIQADDCHARGED");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA::ELECTRODEPOS("ELECTRODEPOS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA::FURNACEBREAKERSTATUS("FURNACEBREAKERSTATUS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA::TAPCHANGERSTATUS("TAPCHANGERSTATUS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA::POWERSTATUS("POWERSTATUS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA::ROOFPOS("ROOFPOS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA::GANTRYPOS("GANTRYPOS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA::SLAGDOORPOSITION("SLAGDOORPOSITION");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA::STIRRGASTYPE("STIRRGASTYPE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA::STIRR_N2_FLOW("STIRR_N2_FLOW");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA::STIRR_AR_FLOW("STIRR_AR_FLOW");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA::O2_AMOUNT("O2_AMOUNT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA::TEMP_ACT("TEMP_ACT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA::STIRR_N2_CONS("STIRR_N2_CONS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA::STIRR_AR_CONS("STIRR_AR_CONS");

//##DBClassCodeUtility ! DO NOT EDIT !
CPDE_CYCL_MEAS_DATA::CPDE_CYCL_MEAS_DATA(cCBS_StdConnection* Connection)
:CSMC_DBData("PDE_CYCL_MEAS_DATA",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPDE_CYCL_MEAS_DATA::CPDE_CYCL_MEAS_DATA(cCBS_Connection* Connection)
:CSMC_DBData("PDE_CYCL_MEAS_DATA",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPDE_CYCL_MEAS_DATA::CPDE_CYCL_MEAS_DATA()
:CSMC_DBData("PDE_CYCL_MEAS_DATA")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPDE_CYCL_MEAS_DATA::~CPDE_CYCL_MEAS_DATA()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDE_CYCL_MEAS_DATA::getHEATID(long Row)
{
  return getString(CPDE_CYCL_MEAS_DATA::HEATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA::setHEATID(const std::string& value)
{
  setString(CPDE_CYCL_MEAS_DATA::HEATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDE_CYCL_MEAS_DATA::getTREATID(long Row)
{
  return getString(CPDE_CYCL_MEAS_DATA::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA::setTREATID(const std::string& value)
{
  setString(CPDE_CYCL_MEAS_DATA::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDE_CYCL_MEAS_DATA::getPLANT(long Row)
{
  return getString(CPDE_CYCL_MEAS_DATA::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA::setPLANT(const std::string& value)
{
  setString(CPDE_CYCL_MEAS_DATA::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CPDE_CYCL_MEAS_DATA::getREVTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CPDE_CYCL_MEAS_DATA::REVTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA::setREVTIME(const CDateTime& value)
{
 setString(CPDE_CYCL_MEAS_DATA::REVTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDE_CYCL_MEAS_DATA::getDURSINCEHEATANNOUNCE(long Row)
{
  return getDouble(CPDE_CYCL_MEAS_DATA::DURSINCEHEATANNOUNCE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA::setDURSINCEHEATANNOUNCE(double value)
{
  setDouble(CPDE_CYCL_MEAS_DATA::DURSINCEHEATANNOUNCE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDE_CYCL_MEAS_DATA::getDURSINCESTARTOFHEAT(long Row)
{
  return getDouble(CPDE_CYCL_MEAS_DATA::DURSINCESTARTOFHEAT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA::setDURSINCESTARTOFHEAT(double value)
{
  setDouble(CPDE_CYCL_MEAS_DATA::DURSINCESTARTOFHEAT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDE_CYCL_MEAS_DATA::getELEC_CONS(long Row)
{
  return getDouble(CPDE_CYCL_MEAS_DATA::ELEC_CONS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA::setELEC_CONS(double value)
{
  setDouble(CPDE_CYCL_MEAS_DATA::ELEC_CONS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDE_CYCL_MEAS_DATA::getCURPHASE_L1(long Row)
{
  return getLong(CPDE_CYCL_MEAS_DATA::CURPHASE_L1, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA::setCURPHASE_L1(long value)
{
  setLong(CPDE_CYCL_MEAS_DATA::CURPHASE_L1, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDE_CYCL_MEAS_DATA::getCOMPMODE_ELEC(long Row)
{
  return getLong(CPDE_CYCL_MEAS_DATA::COMPMODE_ELEC, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA::setCOMPMODE_ELEC(long value)
{
  setLong(CPDE_CYCL_MEAS_DATA::COMPMODE_ELEC, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDE_CYCL_MEAS_DATA::getCOMPMODE_MAT(long Row)
{
  return getLong(CPDE_CYCL_MEAS_DATA::COMPMODE_MAT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA::setCOMPMODE_MAT(long value)
{
  setLong(CPDE_CYCL_MEAS_DATA::COMPMODE_MAT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDE_CYCL_MEAS_DATA::getCOMPMODE_STIRR(long Row)
{
  return getLong(CPDE_CYCL_MEAS_DATA::COMPMODE_STIRR, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA::setCOMPMODE_STIRR(long value)
{
  setLong(CPDE_CYCL_MEAS_DATA::COMPMODE_STIRR, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDE_CYCL_MEAS_DATA::getCOMPMODE_BURNER(long Row)
{
  return getLong(CPDE_CYCL_MEAS_DATA::COMPMODE_BURNER, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA::setCOMPMODE_BURNER(long value)
{
  setLong(CPDE_CYCL_MEAS_DATA::COMPMODE_BURNER, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDE_CYCL_MEAS_DATA::getCOMPMODE_INJ(long Row)
{
  return getLong(CPDE_CYCL_MEAS_DATA::COMPMODE_INJ, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA::setCOMPMODE_INJ(long value)
{
  setLong(CPDE_CYCL_MEAS_DATA::COMPMODE_INJ, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDE_CYCL_MEAS_DATA::getREACTORTAP(long Row)
{
  return getLong(CPDE_CYCL_MEAS_DATA::REACTORTAP, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA::setREACTORTAP(long value)
{
  setLong(CPDE_CYCL_MEAS_DATA::REACTORTAP, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDE_CYCL_MEAS_DATA::getVOLTTAP(long Row)
{
  return getLong(CPDE_CYCL_MEAS_DATA::VOLTTAP, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA::setVOLTTAP(long value)
{
  setLong(CPDE_CYCL_MEAS_DATA::VOLTTAP, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDE_CYCL_MEAS_DATA::getIMPCURVE(long Row)
{
  return getLong(CPDE_CYCL_MEAS_DATA::IMPCURVE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA::setIMPCURVE(long value)
{
  setLong(CPDE_CYCL_MEAS_DATA::IMPCURVE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDE_CYCL_MEAS_DATA::getBASKETCHARGED(long Row)
{
  return getLong(CPDE_CYCL_MEAS_DATA::BASKETCHARGED, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA::setBASKETCHARGED(long value)
{
  setLong(CPDE_CYCL_MEAS_DATA::BASKETCHARGED, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDE_CYCL_MEAS_DATA::getLIQADDCHARGED(long Row)
{
  return getLong(CPDE_CYCL_MEAS_DATA::LIQADDCHARGED, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA::setLIQADDCHARGED(long value)
{
  setLong(CPDE_CYCL_MEAS_DATA::LIQADDCHARGED, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDE_CYCL_MEAS_DATA::getELECTRODEPOS(long Row)
{
  return getLong(CPDE_CYCL_MEAS_DATA::ELECTRODEPOS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA::setELECTRODEPOS(long value)
{
  setLong(CPDE_CYCL_MEAS_DATA::ELECTRODEPOS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDE_CYCL_MEAS_DATA::getFURNACEBREAKERSTATUS(long Row)
{
  return getLong(CPDE_CYCL_MEAS_DATA::FURNACEBREAKERSTATUS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA::setFURNACEBREAKERSTATUS(long value)
{
  setLong(CPDE_CYCL_MEAS_DATA::FURNACEBREAKERSTATUS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDE_CYCL_MEAS_DATA::getTAPCHANGERSTATUS(long Row)
{
  return getLong(CPDE_CYCL_MEAS_DATA::TAPCHANGERSTATUS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA::setTAPCHANGERSTATUS(long value)
{
  setLong(CPDE_CYCL_MEAS_DATA::TAPCHANGERSTATUS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDE_CYCL_MEAS_DATA::getPOWERSTATUS(long Row)
{
  return getLong(CPDE_CYCL_MEAS_DATA::POWERSTATUS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA::setPOWERSTATUS(long value)
{
  setLong(CPDE_CYCL_MEAS_DATA::POWERSTATUS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDE_CYCL_MEAS_DATA::getROOFPOS(long Row)
{
  return getLong(CPDE_CYCL_MEAS_DATA::ROOFPOS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA::setROOFPOS(long value)
{
  setLong(CPDE_CYCL_MEAS_DATA::ROOFPOS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDE_CYCL_MEAS_DATA::getGANTRYPOS(long Row)
{
  return getLong(CPDE_CYCL_MEAS_DATA::GANTRYPOS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA::setGANTRYPOS(long value)
{
  setLong(CPDE_CYCL_MEAS_DATA::GANTRYPOS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDE_CYCL_MEAS_DATA::getSLAGDOORPOSITION(long Row)
{
  return getLong(CPDE_CYCL_MEAS_DATA::SLAGDOORPOSITION, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA::setSLAGDOORPOSITION(long value)
{
  setLong(CPDE_CYCL_MEAS_DATA::SLAGDOORPOSITION, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDE_CYCL_MEAS_DATA::getSTIRRGASTYPE(long Row)
{
  return getString(CPDE_CYCL_MEAS_DATA::STIRRGASTYPE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA::setSTIRRGASTYPE(const std::string& value)
{
  setString(CPDE_CYCL_MEAS_DATA::STIRRGASTYPE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDE_CYCL_MEAS_DATA::getSTIRR_N2_FLOW(long Row)
{
  return getDouble(CPDE_CYCL_MEAS_DATA::STIRR_N2_FLOW, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA::setSTIRR_N2_FLOW(double value)
{
  setDouble(CPDE_CYCL_MEAS_DATA::STIRR_N2_FLOW, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDE_CYCL_MEAS_DATA::getSTIRR_AR_FLOW(long Row)
{
  return getDouble(CPDE_CYCL_MEAS_DATA::STIRR_AR_FLOW, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA::setSTIRR_AR_FLOW(double value)
{
  setDouble(CPDE_CYCL_MEAS_DATA::STIRR_AR_FLOW, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDE_CYCL_MEAS_DATA::getO2_AMOUNT(long Row)
{
  return getDouble(CPDE_CYCL_MEAS_DATA::O2_AMOUNT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA::setO2_AMOUNT(double value)
{
  setDouble(CPDE_CYCL_MEAS_DATA::O2_AMOUNT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDE_CYCL_MEAS_DATA::getTEMP_ACT(long Row)
{
  return getDouble(CPDE_CYCL_MEAS_DATA::TEMP_ACT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA::setTEMP_ACT(double value)
{
  setDouble(CPDE_CYCL_MEAS_DATA::TEMP_ACT, value);
}


//##DBClassCodeUtility ! DO NOT EDIT !
double CPDE_CYCL_MEAS_DATA::getSTIRR_N2_CONS(long Row)
{
  return getDouble(CPDE_CYCL_MEAS_DATA::STIRR_N2_CONS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA::setSTIRR_N2_CONS(double value)
{
  setDouble(CPDE_CYCL_MEAS_DATA::STIRR_N2_CONS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDE_CYCL_MEAS_DATA::getSTIRR_AR_CONS(long Row)
{
  return getDouble(CPDE_CYCL_MEAS_DATA::STIRR_AR_CONS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA::setSTIRR_AR_CONS(double value)
{
  setDouble(CPDE_CYCL_MEAS_DATA::STIRR_AR_CONS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CPDE_CYCL_MEAS_DATA::select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const CDateTime& REVTIME)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPDE_CYCL_MEAS_DATA::HEATID,HEATID);
  addWhereClause(CPDE_CYCL_MEAS_DATA::TREATID,TREATID);
  addWhereClause(CPDE_CYCL_MEAS_DATA::PLANT,PLANT);
  addWhereClause(CPDE_CYCL_MEAS_DATA::REVTIME,REVTIME);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CPDE_CYCL_MEAS_DATA::selectByTime(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPDE_CYCL_MEAS_DATA::HEATID,HEATID);
  addWhereClause(CPDE_CYCL_MEAS_DATA::TREATID,TREATID);
  addWhereClause(CPDE_CYCL_MEAS_DATA::PLANT,PLANT);

  m_Statement += getWhereStatement() + "ORDER BY REVTIME;";

  return CSMC_DBData::select();
}

bool CPDE_CYCL_MEAS_DATA::selectCurrentElectricalDataByHeat(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT)
{
  cleanWhereStatement();

  m_Statement = "select max(ELEC_CONS) as ELEC_CONS from " + m_TableName;

  addWhereClause(CPDE_CYCL_MEAS_DATA::HEATID,HEATID);
  addWhereClause(CPDE_CYCL_MEAS_DATA::TREATID,TREATID);
  addWhereClause(CPDE_CYCL_MEAS_DATA::PLANT,PLANT);

  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

double CPDE_CYCL_MEAS_DATA::getCurrentElectricalDataByHeat(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT)
{
  double RetValue = CSMC_DBData::unspecDouble;

  if ( selectCurrentElectricalDataByHeat(HEATID, TREATID, PLANT) )
  {
    RetValue = getELEC_CONS(1);
  }

  return RetValue;
}

bool CPDE_CYCL_MEAS_DATA::writeData(const std::string& HeatID, const std::string& TreatID, const std::string& Plant, long ActPhaseL1,
                                    double durSinceA, double durSinceH, double ElecCons, long VoltTap, 
                                    long EltrdRegCurve, long BasketId, long LiqAddNo, long ElecPos, 
                                    long FurnBreakStat, long TapChangStat,long PowerStat, 
                                    long RoofPos, long GantryPos, long SlagDoor, long ReactTapNo)
{
  bool        RetValue   = false;
  long        PredLength = 0;
  CDateTime   now;

  std::stringstream Msg;
  Msg << "CPDE_CYCL_MEAS_DATA::writeData\n" << "HeatID: " << HeatID << " ,TreatID: " << TreatID << " ,Plant: " << Plant
      << ", ActPhaseL1: " << ActPhaseL1 << " ,durSinceA: " << durSinceA << " ,durSinceH: " << durSinceH
      << ", VoltTap: " << VoltTap << " ,EltrdRegCurve: " << EltrdRegCurve << ", ElecPos: " << ElecPos
      << ", FurnBreakStat: " << FurnBreakStat << "\nTapChangStat: " << TapChangStat << ", PowerStat: " << PowerStat
      << ", ElecCons: " << ElecCons << " ,RoofPos: " << RoofPos << ", GantryPos: " << GantryPos
      << ", SlagDoor: " << SlagDoor << ", ReactTap: " << ReactTapNo;

  log(Msg.str(), 4);

  try
  {
    setHEATID(HeatID);
    setTREATID(TreatID);
    setPLANT(Plant);
    setREVTIME(now);
    setDURSINCEHEATANNOUNCE(durSinceA);
    setDURSINCESTARTOFHEAT(durSinceH);
    setELEC_CONS(ElecCons);
    setCURPHASE_L1(ActPhaseL1);
    setVOLTTAP(VoltTap);
    setIMPCURVE(EltrdRegCurve);
    setBASKETCHARGED(BasketId);
    setLIQADDCHARGED(LiqAddNo); 
    setELECTRODEPOS(ElecPos);
    setFURNACEBREAKERSTATUS(FurnBreakStat);
    setTAPCHANGERSTATUS(TapChangStat);
    setPOWERSTATUS(PowerStat);
    setROOFPOS(RoofPos);
    setGANTRYPOS(GantryPos);
    setSLAGDOORPOSITION(SlagDoor);
    RetValue = insert();

    // commit only if own values are successfully written
    if (RetValue)
    {
      commit();
    }
    else
    {
      rollback();

  		cCBS_StdEventLogFrame *pEventLog = cCBS_StdEventLogFrameController::getInstance()->getpEventLog();
	  	sEventLogMessage sMessage = cCBS_StdEventLogFrame::initMessage(__FILE__,__LINE__);
      pEventLog->EL_DBWriteError(sMessage,"", m_TableName.c_str(), getActStatement().c_str());
    }
  }
  catch(...)
  {
    RetValue = false;
  }
  return RetValue;
}

bool CPDE_CYCL_MEAS_DATA::writeData(const std::string& heatID, const std::string& treatID, long ActPhaseL1, double durSinceA, double durSinceH,
                                    long VoltTap, long EltrdRegCurve, long ElecPos, long FurnBreakOn, long FurnTapChangOn, 
                                    long PowerOn, double ElecCons,
                                    long RoofPos, long GantryPos, long SlagDoor,
                                    const seqGasData & StirrFlow, const seqComputerModes &seqCompModes)
{
  bool        RetValue   = false;
  long        PredLength = 0;
  long        i;
  CDateTime   now;
  sGasData    GasData;
	string      Gas;
	string      Device;

  std::stringstream Msg;
  Msg << "CPDE_CYCL_MEAS_DATA::writeData\n" << "HeatID: " << heatID << " ,TreatID: " << treatID
      << ", ActPhaseL1: " << ActPhaseL1 << " ,durSinceA: " << durSinceA << " ,durSinceH: " << durSinceH
      << ", VoltTap: " << VoltTap << " ,EltrdRegCurve: " << EltrdRegCurve << ", ElecPos: " << ElecPos
      << ", FurnBreakOn: " << FurnBreakOn << "\nFurnTapChangOn: " << FurnTapChangOn << ", PowerOn: " << PowerOn
      << ", ElecCons: " << ElecCons << " ,RoofPos: " << RoofPos << ", GantryPos: " << GantryPos
      << ", SlagDoor: " << SlagDoor;

  log(Msg.str(), 2);
  log(CIntfData::getContent(CIntfData::ToAny(StirrFlow)),4);
  log(CIntfData::getContent(CIntfData::ToAny(seqCompModes)),4);

  try
  {
    setHEATID(heatID);
    setTREATID(treatID);
    setREVTIME(now);

    setDURSINCEHEATANNOUNCE(durSinceA);
    setDURSINCESTARTOFHEAT(durSinceH);

    setCURPHASE_L1(ActPhaseL1);

    setVOLTTAP(VoltTap);
    setIMPCURVE(EltrdRegCurve);
    setELECTRODEPOS(ElecPos);
    setFURNACEBREAKERSTATUS(FurnBreakOn);
    setTAPCHANGERSTATUS(FurnTapChangOn);
    setPOWERSTATUS(PowerOn);

    setELEC_CONS(ElecCons);

    setROOFPOS(RoofPos);
    setGANTRYPOS(GantryPos);
    setSLAGDOORPOSITION(SlagDoor);

    PredLength = CIntfData::getLength(StirrFlow);
    for (i = 0 ; i < PredLength ; ++i)
    {
      CIntfData::getAt(GasData,&StirrFlow,i);

      Gas         = GasData.GasType;  
	    if (Gas == DEF_GC_STIRR_GAS_TYPE::Ar) setSTIRR_AR_FLOW(GasData.GasValue);
	    if (Gas == DEF_GC_STIRR_GAS_TYPE::N2) setSTIRR_N2_FLOW(GasData.GasValue);
      setSTIRRGASTYPE(Gas);
    }

    long CompModeLength = CIntfData::getLength(seqCompModes);
    for ( long i = 0 ; i < CompModeLength ; ++i)
    {
      sComputerMode ComputerMode;
      CIntfData::getAt(ComputerMode,&seqCompModes,i);

      if (0 == strcmp(DEF_COMP_MODES::MatHandle,ComputerMode.Device))
      {
        setCOMPMODE_MAT(ComputerMode.Status);
      }
      else if (0 == strcmp(DEF_COMP_MODES::GasLance, ComputerMode.Device))
      {
        setCOMPMODE_BURNER(ComputerMode.Status);
      }
      else if (0 == strcmp(DEF_COMP_MODES::Injection, ComputerMode.Device))
      {
        setCOMPMODE_INJ(ComputerMode.Status);
      }
      else if (0 == strcmp(DEF_COMP_MODES::Electric, ComputerMode.Device))
      {
        setCOMPMODE_ELEC(ComputerMode.Status);
      }
    }

    // TODO
    setBASKETCHARGED(0); // not used at the moment
    setLIQADDCHARGED(0); 

    RetValue = insert();

    // commit only if own values are successfully written
    if (RetValue)
    {
      commit();
    }
    else
    {
      rollback();

  		cCBS_StdEventLogFrame *pEventLog = cCBS_StdEventLogFrameController::getInstance()->getpEventLog();
	  	sEventLogMessage sMessage = cCBS_StdEventLogFrame::initMessage(__FILE__,__LINE__);
      pEventLog->EL_DBWriteError(sMessage,"", m_TableName.c_str(), getActStatement().c_str());
    }
  }
  catch(...)
  {
    RetValue = false;
  }
  return RetValue;
}


