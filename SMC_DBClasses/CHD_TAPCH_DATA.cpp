//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CPD_TAPCH_DATA.h"
#include "CHD_TAPCH_DATA.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_TAPCH_DATA::HEATID("HEATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_TAPCH_DATA::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_TAPCH_DATA::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_TAPCH_DATA::STARTTIME("STARTTIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_TAPCH_DATA::ENDTIME("ENDTIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_TAPCH_DATA::VOLTTAP("VOLTTAP");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_TAPCH_DATA::IMPCURVE("IMPCURVE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_TAPCH_DATA::DURATION("DURATION");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_TAPCH_DATA::ELEC_EGY_TAP("ELEC_EGY_TAP");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_TAPCH_DATA::ELEC_EGYTOT("ELEC_EGYTOT");

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_TAPCH_DATA::CHD_TAPCH_DATA(cCBS_StdConnection* Connection)
:CSMC_DBData("HD_TAPCH_DATA",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_TAPCH_DATA::CHD_TAPCH_DATA(cCBS_Connection* Connection)
:CSMC_DBData("HD_TAPCH_DATA",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_TAPCH_DATA::CHD_TAPCH_DATA()
:CSMC_DBData("HD_TAPCH_DATA")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_TAPCH_DATA::~CHD_TAPCH_DATA()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Internal heat identifier
std::string CHD_TAPCH_DATA::getHEATID(long Row)
{
  return getString(CHD_TAPCH_DATA::HEATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_TAPCH_DATA::setHEATID(const std::string& value)
{
  setString(CHD_TAPCH_DATA::HEATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Treatment identifier
std::string CHD_TAPCH_DATA::getTREATID(long Row)
{
  return getString(CHD_TAPCH_DATA::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_TAPCH_DATA::setTREATID(const std::string& value)
{
  setString(CHD_TAPCH_DATA::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Plant identifier
std::string CHD_TAPCH_DATA::getPLANT(long Row)
{
  return getString(CHD_TAPCH_DATA::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_TAPCH_DATA::setPLANT(const std::string& value)
{
  setString(CHD_TAPCH_DATA::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Start time of either changed tap or imp-curve
CDateTime CHD_TAPCH_DATA::getSTARTTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHD_TAPCH_DATA::STARTTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_TAPCH_DATA::setSTARTTIME(const CDateTime& value)
{
 setString(CHD_TAPCH_DATA::STARTTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##end time of either changed tap or imp-curve before to another tap or imp-curve
CDateTime CHD_TAPCH_DATA::getENDTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHD_TAPCH_DATA::ENDTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_TAPCH_DATA::setENDTIME(const CDateTime& value)
{
 setString(CHD_TAPCH_DATA::ENDTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHD_TAPCH_DATA::getVOLTTAP(long Row)
{
  return getLong(CHD_TAPCH_DATA::VOLTTAP, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_TAPCH_DATA::setVOLTTAP(long value)
{
  setLong(CHD_TAPCH_DATA::VOLTTAP, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHD_TAPCH_DATA::getIMPCURVE(long Row)
{
  return getLong(CHD_TAPCH_DATA::IMPCURVE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_TAPCH_DATA::setIMPCURVE(long value)
{
  setLong(CHD_TAPCH_DATA::IMPCURVE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Duration the voltage step was active
double CHD_TAPCH_DATA::getDURATION(long Row)
{
  return getDouble(CHD_TAPCH_DATA::DURATION, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_TAPCH_DATA::setDURATION(double value)
{
  setDouble(CHD_TAPCH_DATA::DURATION, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Total electric energy consumption within this voltage tap, kWh
double CHD_TAPCH_DATA::getELEC_EGY_TAP(long Row)
{
  return getDouble(CHD_TAPCH_DATA::ELEC_EGY_TAP, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_TAPCH_DATA::setELEC_EGY_TAP(double value)
{
  setDouble(CHD_TAPCH_DATA::ELEC_EGY_TAP, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Total electric energy consumption in case of electric heating, kWh
double CHD_TAPCH_DATA::getELEC_EGYTOT(long Row)
{
  return getDouble(CHD_TAPCH_DATA::ELEC_EGYTOT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_TAPCH_DATA::setELEC_EGYTOT(double value)
{
  setDouble(CHD_TAPCH_DATA::ELEC_EGYTOT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CHD_TAPCH_DATA::select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const CDateTime& STARTTIME)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CHD_TAPCH_DATA::HEATID,HEATID);
  addWhereClause(CHD_TAPCH_DATA::TREATID,TREATID);
  addWhereClause(CHD_TAPCH_DATA::PLANT,PLANT);
  addWhereClause(CHD_TAPCH_DATA::STARTTIME,STARTTIME);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CHD_TAPCH_DATA::copy(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, bool Commit, cCBS_ODBC_DBError &Error)
{
	bool result = !exists(HEATID, TREATID, PLANT);
	//some data found -> delete them
	if (!result)
	{
		result = deleteRows();
		if (!result)
			setLastError(std::string("ERROR_DELETE_DATA"), 0, getActStatement());
	}

  // preparing setting for source table
  CPD_TAPCH_DATA PD_TAPCH_DATA(m_pCBS_StdConnection);
  PD_TAPCH_DATA.addWhereClause(CPD_TAPCH_DATA::HEATID,HEATID);
  PD_TAPCH_DATA.addWhereClause(CPD_TAPCH_DATA::TREATID,TREATID);
  PD_TAPCH_DATA.addWhereClause(CPD_TAPCH_DATA::PLANT,PLANT);

  result = result && copyByInsert(&PD_TAPCH_DATA);

	if (!result)
		Error = getLastError();

	if(Commit)
	{
		if (result)
			this->commit();
		else
			rollback();
	}

	return result;
}

bool CHD_TAPCH_DATA::exists(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT)
{
	cleanWhereStatement();

	m_Statement = "Select HEATID from " + m_TableName;

	addWhereClause(CHD_TAPCH_DATA::HEATID,HEATID);
	addWhereClause(CHD_TAPCH_DATA::TREATID,TREATID);
	addWhereClause(CHD_TAPCH_DATA::PLANT,PLANT);
   
  std::string sWhereStatement = getWhereStatement();
  //to avoid the exception like 'Select HEATID from PP_HEAT AND ROWNUM = 1 '
  if(sWhereStatement.length() > 0 ) 
  {
    // do not use ROWNUM in "addWhereClause", ROWNUM is not a table column and where statement will be used for deletion at "deleteRows"
    m_Statement += sWhereStatement + " AND ROWNUM = 1 ;";
  }
  else
  {
    return false;
  }

	return CSMC_DBData::select();
}


