//## Copyright (C) 2010 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 

#if defined (_MSC_VER) && (_MSC_VER >= 1000)
#pragma once
#endif
#ifndef _INC_CGT_RESTRI_ENTRY_INCLUDED
#define _INC_CGT_RESTRI_ENTRY_INCLUDED

#include "CSMC_DBData.h"

class CGT_RESTRI_ENTRY
: public CSMC_DBData
{

public:
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PLANT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PLANTNO;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string DESCR_PP;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PRACNO;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TREATMODENO;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string LIQ_ADD_AMOUNT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string LINENO;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string SOURCE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string RESTRITYPE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string RESTRI_VALMAX;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string RESTRI_VALMIN;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PURP_CODE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string MAT_CODE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string COMBINATION_NAME;

  //##DBClassCodeUtility ! DO NOT EDIT !
  CGT_RESTRI_ENTRY(cCBS_StdConnection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CGT_RESTRI_ENTRY(cCBS_Connection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CGT_RESTRI_ENTRY();

  //##DBClassCodeUtility ! DO NOT EDIT !
  ~CGT_RESTRI_ENTRY();

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Plant identifier
  std::string getPLANT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPLANT(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Plant number
  long getPLANTNO(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPLANTNO(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Name of practice pointer or practice group
  std::string getDESCR_PP(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setDESCR_PP(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Production Practice Number
  long getPRACNO(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPRACNO(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Treatment mode number
  long getTREATMODENO(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTREATMODENO(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Amount of  liquid addition relative to aim steel weight into EAF/Conarc, AOD, LF... = 0., Unit: % without presicion
  long getLIQ_ADD_AMOUNT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setLIQ_ADD_AMOUNT(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Number of restriction for PLANT,RECIPECOMBI,RECIPECOMBINO,SOURCE
  long getLINENO(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setLINENO(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Valid Sources of a Recipe., SOURCE = ALL means all SOURCES for the recipe
  std::string getSOURCE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSOURCE(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Restriction type according model interface., (eg. Relative, Absolute,...)
  std::string getRESTRITYPE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setRESTRITYPE(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##maximum Restriction Value
  double getRESTRI_VALMAX(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setRESTRI_VALMAX(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Minimum Restriction Value.
  double getRESTRI_VALMIN(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setRESTRI_VALMIN(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Purpose code
  std::string getPURP_CODE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPURP_CODE(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Material code
  std::string getMAT_CODE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setMAT_CODE(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getCOMBINATION_NAME(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setCOMBINATION_NAME(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  bool select(const std::string& PLANT, long PLANTNO, const std::string& DESCR_PP, long PRACNO, long TREATMODENO, long LIQ_ADD_AMOUNT, long LINENO);

  //## ----------------------------------END-GENERATED-CODE--------------------- 

  //## ----------------------------------YOUR-CODE------------------------------ 

  bool selectBySourceAndCombiName(const std::string& PLANT, long PLANTNO, const std::string& DESCR_PP, long PRACNO, long TREATMODENO, long LIQ_ADD_AMOUNT, long LINENO, const std::string& SOURCE, const std::string& COMBINATION_NAME);

  bool selectRestriction(const std::string& PLANT, long PLANTNO, const std::string& DESCR_PP, long PRACNO, long TREATMODENO, long LIQ_ADD_AMOUNT);

  bool selectSpecialized(const std::string& PLANT, long PLANTNO, const std::string& DESCR_PP, long PRACNO, long TREATMODENO, long LIQ_ADD_AMOUNT);

};

#endif /* _INC_CGT_RESTRI_ENTRY_INCLUDED */
