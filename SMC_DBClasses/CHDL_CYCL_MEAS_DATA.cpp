//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CSMC_EventLogFrameController.h"
#include "CPDL_CYCL_MEAS_DATA.h"
#include "CHDL_CYCL_MEAS_DATA.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_CYCL_MEAS_DATA::HEATID("HEATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_CYCL_MEAS_DATA::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_CYCL_MEAS_DATA::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_CYCL_MEAS_DATA::REVTIME("REVTIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_CYCL_MEAS_DATA::DURSINCEHEATANNOUNCE("DURSINCEHEATANNOUNCE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_CYCL_MEAS_DATA::DURSINCESTARTOFHEAT("DURSINCESTARTOFHEAT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_CYCL_MEAS_DATA::ELEC_CONS("ELEC_CONS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_CYCL_MEAS_DATA::CURACTIYITY_L1("CURACTIYITY_L1");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_CYCL_MEAS_DATA::COMPMODE_ELEC("COMPMODE_ELEC");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_CYCL_MEAS_DATA::COMPMODE_MAT("COMPMODE_MAT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_CYCL_MEAS_DATA::COMPMODE_STIRR("COMPMODE_STIRR");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_CYCL_MEAS_DATA::VOLTTAP("VOLTTAP");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_CYCL_MEAS_DATA::IMPCURVE("IMPCURVE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_CYCL_MEAS_DATA::ELECTRODEPOS("ELECTRODEPOS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_CYCL_MEAS_DATA::FURNACEBRAKERSTATUS("FURNACEBRAKERSTATUS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_CYCL_MEAS_DATA::TAPCHANGERSTATUS("TAPCHANGERSTATUS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_CYCL_MEAS_DATA::POWERSTATUS("POWERSTATUS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_CYCL_MEAS_DATA::ROOFPOS("ROOFPOS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_CYCL_MEAS_DATA::GANTRYPOS("GANTRYPOS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_CYCL_MEAS_DATA::HOIST_AVAIL("HOIST_AVAIL");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_CYCL_MEAS_DATA::STIRRGASTYPE("STIRRGASTYPE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_CYCL_MEAS_DATA::STIRR_N2_FLOW("STIRR_N2_FLOW");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_CYCL_MEAS_DATA::STIRR_AR_FLOW("STIRR_AR_FLOW");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_CYCL_MEAS_DATA::STIRR_N2_CONS("STIRR_N2_CONS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_CYCL_MEAS_DATA::STIRR_AR_CONS("STIRR_AR_CONS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_CYCL_MEAS_DATA::STIRR_INT("STIRR_INT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_CYCL_MEAS_DATA::ACTIVITYNAME("ACTIVITYNAME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_CYCL_MEAS_DATA::CURPHASE_L1("CURPHASE_L1");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_CYCL_MEAS_DATA::TEMP_ACT("TEMP_ACT");

//##DBClassCodeUtility ! DO NOT EDIT !
CHDL_CYCL_MEAS_DATA::CHDL_CYCL_MEAS_DATA(cCBS_StdConnection* Connection)
:CSMC_DBData("HDL_CYCL_MEAS_DATA",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHDL_CYCL_MEAS_DATA::CHDL_CYCL_MEAS_DATA(cCBS_Connection* Connection)
:CSMC_DBData("HDL_CYCL_MEAS_DATA",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHDL_CYCL_MEAS_DATA::CHDL_CYCL_MEAS_DATA()
:CSMC_DBData("HDL_CYCL_MEAS_DATA")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHDL_CYCL_MEAS_DATA::~CHDL_CYCL_MEAS_DATA()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDL_CYCL_MEAS_DATA::getHEATID(long Row)
{
  return getString(CHDL_CYCL_MEAS_DATA::HEATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_CYCL_MEAS_DATA::setHEATID(const std::string& value)
{
  setString(CHDL_CYCL_MEAS_DATA::HEATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDL_CYCL_MEAS_DATA::getTREATID(long Row)
{
  return getString(CHDL_CYCL_MEAS_DATA::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_CYCL_MEAS_DATA::setTREATID(const std::string& value)
{
  setString(CHDL_CYCL_MEAS_DATA::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDL_CYCL_MEAS_DATA::getPLANT(long Row)
{
  return getString(CHDL_CYCL_MEAS_DATA::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_CYCL_MEAS_DATA::setPLANT(const std::string& value)
{
  setString(CHDL_CYCL_MEAS_DATA::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CHDL_CYCL_MEAS_DATA::getREVTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHDL_CYCL_MEAS_DATA::REVTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_CYCL_MEAS_DATA::setREVTIME(const CDateTime& value)
{
 setString(CHDL_CYCL_MEAS_DATA::REVTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDL_CYCL_MEAS_DATA::getDURSINCEHEATANNOUNCE(long Row)
{
  return getDouble(CHDL_CYCL_MEAS_DATA::DURSINCEHEATANNOUNCE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_CYCL_MEAS_DATA::setDURSINCEHEATANNOUNCE(double value)
{
  setDouble(CHDL_CYCL_MEAS_DATA::DURSINCEHEATANNOUNCE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDL_CYCL_MEAS_DATA::getDURSINCESTARTOFHEAT(long Row)
{
  return getDouble(CHDL_CYCL_MEAS_DATA::DURSINCESTARTOFHEAT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_CYCL_MEAS_DATA::setDURSINCESTARTOFHEAT(double value)
{
  setDouble(CHDL_CYCL_MEAS_DATA::DURSINCESTARTOFHEAT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDL_CYCL_MEAS_DATA::getELEC_CONS(long Row)
{
  return getDouble(CHDL_CYCL_MEAS_DATA::ELEC_CONS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_CYCL_MEAS_DATA::setELEC_CONS(double value)
{
  setDouble(CHDL_CYCL_MEAS_DATA::ELEC_CONS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDL_CYCL_MEAS_DATA::getCURACTIYITY_L1(long Row)
{
  return getString(CHDL_CYCL_MEAS_DATA::CURACTIYITY_L1, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_CYCL_MEAS_DATA::setCURACTIYITY_L1(const std::string& value)
{
  setString(CHDL_CYCL_MEAS_DATA::CURACTIYITY_L1, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDL_CYCL_MEAS_DATA::getCOMPMODE_ELEC(long Row)
{
  return getLong(CHDL_CYCL_MEAS_DATA::COMPMODE_ELEC, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_CYCL_MEAS_DATA::setCOMPMODE_ELEC(long value)
{
  setLong(CHDL_CYCL_MEAS_DATA::COMPMODE_ELEC, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDL_CYCL_MEAS_DATA::getCOMPMODE_MAT(long Row)
{
  return getLong(CHDL_CYCL_MEAS_DATA::COMPMODE_MAT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_CYCL_MEAS_DATA::setCOMPMODE_MAT(long value)
{
  setLong(CHDL_CYCL_MEAS_DATA::COMPMODE_MAT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDL_CYCL_MEAS_DATA::getCOMPMODE_STIRR(long Row)
{
  return getLong(CHDL_CYCL_MEAS_DATA::COMPMODE_STIRR, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_CYCL_MEAS_DATA::setCOMPMODE_STIRR(long value)
{
  setLong(CHDL_CYCL_MEAS_DATA::COMPMODE_STIRR, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDL_CYCL_MEAS_DATA::getVOLTTAP(long Row)
{
  return getLong(CHDL_CYCL_MEAS_DATA::VOLTTAP, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_CYCL_MEAS_DATA::setVOLTTAP(long value)
{
  setLong(CHDL_CYCL_MEAS_DATA::VOLTTAP, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDL_CYCL_MEAS_DATA::getIMPCURVE(long Row)
{
  return getLong(CHDL_CYCL_MEAS_DATA::IMPCURVE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_CYCL_MEAS_DATA::setIMPCURVE(long value)
{
  setLong(CHDL_CYCL_MEAS_DATA::IMPCURVE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDL_CYCL_MEAS_DATA::getELECTRODEPOS(long Row)
{
  return getLong(CHDL_CYCL_MEAS_DATA::ELECTRODEPOS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_CYCL_MEAS_DATA::setELECTRODEPOS(long value)
{
  setLong(CHDL_CYCL_MEAS_DATA::ELECTRODEPOS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDL_CYCL_MEAS_DATA::getFURNACEBRAKERSTATUS(long Row)
{
  return getLong(CHDL_CYCL_MEAS_DATA::FURNACEBRAKERSTATUS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_CYCL_MEAS_DATA::setFURNACEBRAKERSTATUS(long value)
{
  setLong(CHDL_CYCL_MEAS_DATA::FURNACEBRAKERSTATUS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDL_CYCL_MEAS_DATA::getTAPCHANGERSTATUS(long Row)
{
  return getLong(CHDL_CYCL_MEAS_DATA::TAPCHANGERSTATUS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_CYCL_MEAS_DATA::setTAPCHANGERSTATUS(long value)
{
  setLong(CHDL_CYCL_MEAS_DATA::TAPCHANGERSTATUS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDL_CYCL_MEAS_DATA::getPOWERSTATUS(long Row)
{
  return getLong(CHDL_CYCL_MEAS_DATA::POWERSTATUS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_CYCL_MEAS_DATA::setPOWERSTATUS(long value)
{
  setLong(CHDL_CYCL_MEAS_DATA::POWERSTATUS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDL_CYCL_MEAS_DATA::getROOFPOS(long Row)
{
  return getLong(CHDL_CYCL_MEAS_DATA::ROOFPOS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_CYCL_MEAS_DATA::setROOFPOS(long value)
{
  setLong(CHDL_CYCL_MEAS_DATA::ROOFPOS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDL_CYCL_MEAS_DATA::getGANTRYPOS(long Row)
{
  return getLong(CHDL_CYCL_MEAS_DATA::GANTRYPOS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_CYCL_MEAS_DATA::setGANTRYPOS(long value)
{
  setLong(CHDL_CYCL_MEAS_DATA::GANTRYPOS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDL_CYCL_MEAS_DATA::getHOIST_AVAIL(long Row)
{
  return getLong(CHDL_CYCL_MEAS_DATA::HOIST_AVAIL, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_CYCL_MEAS_DATA::setHOIST_AVAIL(long value)
{
  setLong(CHDL_CYCL_MEAS_DATA::HOIST_AVAIL, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDL_CYCL_MEAS_DATA::getSTIRRGASTYPE(long Row)
{
  return getString(CHDL_CYCL_MEAS_DATA::STIRRGASTYPE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_CYCL_MEAS_DATA::setSTIRRGASTYPE(const std::string& value)
{
  setString(CHDL_CYCL_MEAS_DATA::STIRRGASTYPE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDL_CYCL_MEAS_DATA::getSTIRR_N2_FLOW(long Row)
{
  return getDouble(CHDL_CYCL_MEAS_DATA::STIRR_N2_FLOW, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_CYCL_MEAS_DATA::setSTIRR_N2_FLOW(double value)
{
  setDouble(CHDL_CYCL_MEAS_DATA::STIRR_N2_FLOW, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDL_CYCL_MEAS_DATA::getSTIRR_AR_FLOW(long Row)
{
  return getDouble(CHDL_CYCL_MEAS_DATA::STIRR_AR_FLOW, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_CYCL_MEAS_DATA::setSTIRR_AR_FLOW(double value)
{
  setDouble(CHDL_CYCL_MEAS_DATA::STIRR_AR_FLOW, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDL_CYCL_MEAS_DATA::getSTIRR_N2_CONS(long Row)
{
  return getDouble(CHDL_CYCL_MEAS_DATA::STIRR_N2_CONS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_CYCL_MEAS_DATA::setSTIRR_N2_CONS(double value)
{
  setDouble(CHDL_CYCL_MEAS_DATA::STIRR_N2_CONS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDL_CYCL_MEAS_DATA::getSTIRR_AR_CONS(long Row)
{
  return getDouble(CHDL_CYCL_MEAS_DATA::STIRR_AR_CONS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_CYCL_MEAS_DATA::setSTIRR_AR_CONS(double value)
{
  setDouble(CHDL_CYCL_MEAS_DATA::STIRR_AR_CONS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDL_CYCL_MEAS_DATA::getSTIRR_INT(long Row)
{
  return getLong(CHDL_CYCL_MEAS_DATA::STIRR_INT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_CYCL_MEAS_DATA::setSTIRR_INT(long value)
{
  setLong(CHDL_CYCL_MEAS_DATA::STIRR_INT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDL_CYCL_MEAS_DATA::getACTIVITYNAME(long Row)
{
  return getString(CHDL_CYCL_MEAS_DATA::ACTIVITYNAME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_CYCL_MEAS_DATA::setACTIVITYNAME(const std::string& value)
{
  setString(CHDL_CYCL_MEAS_DATA::ACTIVITYNAME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDL_CYCL_MEAS_DATA::getCURPHASE_L1(long Row)
{
  return getLong(CHDL_CYCL_MEAS_DATA::CURPHASE_L1, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_CYCL_MEAS_DATA::setCURPHASE_L1(long value)
{
  setLong(CHDL_CYCL_MEAS_DATA::CURPHASE_L1, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDL_CYCL_MEAS_DATA::getTEMP_ACT(long Row)
{
  return getDouble(CHDL_CYCL_MEAS_DATA::TEMP_ACT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_CYCL_MEAS_DATA::setTEMP_ACT(double value)
{
  setDouble(CHDL_CYCL_MEAS_DATA::TEMP_ACT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CHDL_CYCL_MEAS_DATA::select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const CDateTime& REVTIME)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CHDL_CYCL_MEAS_DATA::HEATID,HEATID);
  addWhereClause(CHDL_CYCL_MEAS_DATA::TREATID,TREATID);
  addWhereClause(CHDL_CYCL_MEAS_DATA::PLANT,PLANT);
  addWhereClause(CHDL_CYCL_MEAS_DATA::REVTIME,REVTIME);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CHDL_CYCL_MEAS_DATA::copy(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, bool Commit, cCBS_ODBC_DBError &Error)
{
  bool result = !exists(HEATID, TREATID, PLANT);
  //some data found -> delete them
  if (!result)
  {
    result = deleteRows();
    if (!result)
      setLastError(std::string("ERROR_DELETE_DATA"), 0, getActStatement());
  }

  // preparing setting for source table
  CPDL_CYCL_MEAS_DATA PDL_CYCL_MEAS_DATA(m_pCBS_StdConnection);
  PDL_CYCL_MEAS_DATA.addWhereClause(CPDL_CYCL_MEAS_DATA::HEATID,HEATID);
  PDL_CYCL_MEAS_DATA.addWhereClause(CPDL_CYCL_MEAS_DATA::TREATID,TREATID);
  PDL_CYCL_MEAS_DATA.addWhereClause(CPDL_CYCL_MEAS_DATA::PLANT,PLANT);

  result = result && copyByInsert(&PDL_CYCL_MEAS_DATA);

  if (!result)
    Error = getLastError();

  if(Commit)
  {
    if (result)
      this->commit();
    else
      rollback();
  }

  return result;
}

bool CHDL_CYCL_MEAS_DATA::exists(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT)
{
  cleanWhereStatement();

  m_Statement = "Select HEATID from " + m_TableName;

  addWhereClause(CHDL_CYCL_MEAS_DATA::HEATID,HEATID);
  addWhereClause(CHDL_CYCL_MEAS_DATA::TREATID,TREATID);
  addWhereClause(CHDL_CYCL_MEAS_DATA::PLANT,PLANT);
   
  std::string sWhereStatement = getWhereStatement();
  //to avoid the exception like 'Select HEATID from PP_HEAT AND ROWNUM = 1 '
  if(sWhereStatement.length() > 0 ) 
  {
    // do not use ROWNUM in "addWhereClause", ROWNUM is not a table column and where statement will be used for deletion at "deleteRows"
    m_Statement += sWhereStatement + " AND ROWNUM = 1 ;";
  }
  else
  {
    return false;
  }

  return CSMC_DBData::select();
}


