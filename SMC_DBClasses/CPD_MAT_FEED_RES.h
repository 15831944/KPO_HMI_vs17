//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 

#if defined (_MSC_VER) && (_MSC_VER >= 1000)
#pragma once
#endif
#ifndef _INC_CPD_MAT_FEED_RES_INCLUDED
#define _INC_CPD_MAT_FEED_RES_INCLUDED

#include "CSMC_DBData.h"

class CPD_MAT_FEED_RES
: public CSMC_DBData
{

public:
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string HEATID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TREATID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PLANT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PROCPHASE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PROCPHASENO;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string MAT_CODE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string STEPNO;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string STARTTIME;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string STEPDUR;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string ELECENERGY;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string MATWEIGHT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string FEEDINGRATE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string REVTIME;

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPD_MAT_FEED_RES(cCBS_StdConnection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPD_MAT_FEED_RES(cCBS_Connection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPD_MAT_FEED_RES();

  //##DBClassCodeUtility ! DO NOT EDIT !
  ~CPD_MAT_FEED_RES();

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Internal heat identifier
  std::string getHEATID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setHEATID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Treatment identifier
  std::string getTREATID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTREATID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Plant identifier
  std::string getPLANT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPLANT(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Phases are e.g. Basket, LiqAdd for EAF
  std::string getPROCPHASE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPROCPHASE(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##If process phases are countable we use ths as the counter. For EAF e.g, MeltDownBsk: 1
  long getPROCPHASENO(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPROCPHASENO(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Material code
  std::string getMAT_CODE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setMAT_CODE(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Energy step
  long getSTEPNO(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSTEPNO(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Relative start time since heat announcement
  double getSTARTTIME(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSTARTTIME(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Calculated duration of step in minutes
  double getSTEPDUR(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSTEPDUR(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Total electric energy consumption in case of electric heating, kWh
  double getELECENERGY(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setELECENERGY(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Actual weight
  double getMATWEIGHT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setMATWEIGHT(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Absolute feeding rate in kg/min
  double getFEEDINGRATE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setFEEDINGRATE(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Date and time of last revision
  CDateTime getREVTIME(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setREVTIME(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  bool select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const std::string& PROCPHASE, long PROCPHASENO, const std::string& MAT_CODE, long STEPNO);

  //## ----------------------------------END-GENERATED-CODE--------------------- 

  //## ----------------------------------YOUR-CODE------------------------------ 

  bool selectOrdered(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const std::string& PROCPHASE, long PROCPHASENO, const std::string& MAT_CODE);

  bool exists(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT);

  bool writeResults(const std::string & HeatID, const std::string & TreatID, const std::string & Plant, const seqEAFMatFeedPredRes &SeqEAFMatFeedPredRes);

};

#endif /* _INC_CPD_MAT_FEED_RES_INCLUDED */
