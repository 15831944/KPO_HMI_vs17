//## Copyright (C) 2010 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CSMC_EventLogFrameController.h"
#include "CGT_RESTRI_ENTRY.h"
#include "CHD_RESTRI_ENTRY.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_RESTRI_ENTRY::HEATID("HEATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_RESTRI_ENTRY::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_RESTRI_ENTRY::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_RESTRI_ENTRY::DESCR_PP("DESCR_PP");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_RESTRI_ENTRY::PRACNO("PRACNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_RESTRI_ENTRY::TREATMODENO("TREATMODENO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_RESTRI_ENTRY::LIQ_ADD_AMOUNT("LIQ_ADD_AMOUNT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_RESTRI_ENTRY::LINENO("LINENO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_RESTRI_ENTRY::SOURCE("SOURCE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_RESTRI_ENTRY::RESTRITYPE("RESTRITYPE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_RESTRI_ENTRY::RESTRI_VALMIN("RESTRI_VALMIN");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_RESTRI_ENTRY::RESTRI_VALMAX("RESTRI_VALMAX");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_RESTRI_ENTRY::PURP_CODE("PURP_CODE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_RESTRI_ENTRY::MAT_CODE("MAT_CODE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_RESTRI_ENTRY::COMBINATION_NAME("COMBINATION_NAME");

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_RESTRI_ENTRY::CHD_RESTRI_ENTRY(cCBS_StdConnection* Connection)
:CSMC_DBData("HD_RESTRI_ENTRY",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_RESTRI_ENTRY::CHD_RESTRI_ENTRY(cCBS_Connection* Connection)
:CSMC_DBData("HD_RESTRI_ENTRY",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_RESTRI_ENTRY::CHD_RESTRI_ENTRY()
:CSMC_DBData("HD_RESTRI_ENTRY")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_RESTRI_ENTRY::~CHD_RESTRI_ENTRY()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Internal heat identifier
std::string CHD_RESTRI_ENTRY::getHEATID(long Row)
{
  return getString(CHD_RESTRI_ENTRY::HEATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_RESTRI_ENTRY::setHEATID(const std::string& value)
{
  setString(CHD_RESTRI_ENTRY::HEATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Treatment identifier
std::string CHD_RESTRI_ENTRY::getTREATID(long Row)
{
  return getString(CHD_RESTRI_ENTRY::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_RESTRI_ENTRY::setTREATID(const std::string& value)
{
  setString(CHD_RESTRI_ENTRY::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Plant identifier
std::string CHD_RESTRI_ENTRY::getPLANT(long Row)
{
  return getString(CHD_RESTRI_ENTRY::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_RESTRI_ENTRY::setPLANT(const std::string& value)
{
  setString(CHD_RESTRI_ENTRY::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Name of practice pointer or practice group
std::string CHD_RESTRI_ENTRY::getDESCR_PP(long Row)
{
  return getString(CHD_RESTRI_ENTRY::DESCR_PP, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_RESTRI_ENTRY::setDESCR_PP(const std::string& value)
{
  setString(CHD_RESTRI_ENTRY::DESCR_PP, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Production Practice Number
long CHD_RESTRI_ENTRY::getPRACNO(long Row)
{
  return getLong(CHD_RESTRI_ENTRY::PRACNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_RESTRI_ENTRY::setPRACNO(long value)
{
  setLong(CHD_RESTRI_ENTRY::PRACNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Treatment mode number
long CHD_RESTRI_ENTRY::getTREATMODENO(long Row)
{
  return getLong(CHD_RESTRI_ENTRY::TREATMODENO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_RESTRI_ENTRY::setTREATMODENO(long value)
{
  setLong(CHD_RESTRI_ENTRY::TREATMODENO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Amount of  liquid addition relative to aim steel weight into EAF/Conarc., AOD, LF... = 0. Unit: % without precision
long CHD_RESTRI_ENTRY::getLIQ_ADD_AMOUNT(long Row)
{
  return getLong(CHD_RESTRI_ENTRY::LIQ_ADD_AMOUNT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_RESTRI_ENTRY::setLIQ_ADD_AMOUNT(long value)
{
  setLong(CHD_RESTRI_ENTRY::LIQ_ADD_AMOUNT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHD_RESTRI_ENTRY::getLINENO(long Row)
{
  return getLong(CHD_RESTRI_ENTRY::LINENO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_RESTRI_ENTRY::setLINENO(long value)
{
  setLong(CHD_RESTRI_ENTRY::LINENO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Valid Sources of a Recipe., SOURCE = ALL means all SOURCES for the recipe
std::string CHD_RESTRI_ENTRY::getSOURCE(long Row)
{
  return getString(CHD_RESTRI_ENTRY::SOURCE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_RESTRI_ENTRY::setSOURCE(const std::string& value)
{
  setString(CHD_RESTRI_ENTRY::SOURCE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Restriction type according model interface., (eg. Relative, Absolute,...)
std::string CHD_RESTRI_ENTRY::getRESTRITYPE(long Row)
{
  return getString(CHD_RESTRI_ENTRY::RESTRITYPE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_RESTRI_ENTRY::setRESTRITYPE(const std::string& value)
{
  setString(CHD_RESTRI_ENTRY::RESTRITYPE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHD_RESTRI_ENTRY::getRESTRI_VALMIN(long Row)
{
  return getDouble(CHD_RESTRI_ENTRY::RESTRI_VALMIN, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_RESTRI_ENTRY::setRESTRI_VALMIN(double value)
{
  setDouble(CHD_RESTRI_ENTRY::RESTRI_VALMIN, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHD_RESTRI_ENTRY::getRESTRI_VALMAX(long Row)
{
  return getDouble(CHD_RESTRI_ENTRY::RESTRI_VALMAX, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_RESTRI_ENTRY::setRESTRI_VALMAX(double value)
{
  setDouble(CHD_RESTRI_ENTRY::RESTRI_VALMAX, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Purpose code
std::string CHD_RESTRI_ENTRY::getPURP_CODE(long Row)
{
  return getString(CHD_RESTRI_ENTRY::PURP_CODE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_RESTRI_ENTRY::setPURP_CODE(const std::string& value)
{
  setString(CHD_RESTRI_ENTRY::PURP_CODE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Material code
std::string CHD_RESTRI_ENTRY::getMAT_CODE(long Row)
{
  return getString(CHD_RESTRI_ENTRY::MAT_CODE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_RESTRI_ENTRY::setMAT_CODE(const std::string& value)
{
  setString(CHD_RESTRI_ENTRY::MAT_CODE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHD_RESTRI_ENTRY::getCOMBINATION_NAME(long Row)
{
  return getString(CHD_RESTRI_ENTRY::COMBINATION_NAME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_RESTRI_ENTRY::setCOMBINATION_NAME(const std::string& value)
{
  setString(CHD_RESTRI_ENTRY::COMBINATION_NAME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CHD_RESTRI_ENTRY::select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const std::string& DESCR_PP, long PRACNO, long TREATMODENO, long LIQ_ADD_AMOUNT, long LINENO)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CHD_RESTRI_ENTRY::HEATID,HEATID);
  addWhereClause(CHD_RESTRI_ENTRY::TREATID,TREATID);
  addWhereClause(CHD_RESTRI_ENTRY::PLANT,PLANT);
  addWhereClause(CHD_RESTRI_ENTRY::DESCR_PP,DESCR_PP);
  addWhereClause(CHD_RESTRI_ENTRY::PRACNO,PRACNO);
  addWhereClause(CHD_RESTRI_ENTRY::TREATMODENO,TREATMODENO);
  addWhereClause(CHD_RESTRI_ENTRY::LIQ_ADD_AMOUNT,LIQ_ADD_AMOUNT);
  addWhereClause(CHD_RESTRI_ENTRY::LINENO,LINENO);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

// function returns all restrictions for source and combination name
bool CHD_RESTRI_ENTRY::selectBySourceAndCombiName(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long PLANTNO, const std::string& DESCR_PP, long PRACNO, long TREATMODENO, long LIQ_ADD_AMOUNT, long LINENO, const std::string& SOURCE, const std::string& COMBINATION_NAME)
{
  bool RetValue = false;

  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CHD_RESTRI_ENTRY::HEATID,HEATID);
  addWhereClause(CHD_RESTRI_ENTRY::TREATID,TREATID);
  addWhereClause(CHD_RESTRI_ENTRY::PLANT,PLANT);
  addWhereClause(CHD_RESTRI_ENTRY::DESCR_PP,DESCR_PP);
  addWhereClause(CHD_RESTRI_ENTRY::PRACNO,PRACNO);
  addWhereClause(CHD_RESTRI_ENTRY::TREATMODENO,TREATMODENO);
  addWhereClause(CHD_RESTRI_ENTRY::LIQ_ADD_AMOUNT,LIQ_ADD_AMOUNT);
  addWhereClause(CHD_RESTRI_ENTRY::LINENO,LINENO);
  addWhereClause(CHD_RESTRI_ENTRY::SOURCE,SOURCE);
  addWhereClause(CHD_RESTRI_ENTRY::COMBINATION_NAME,COMBINATION_NAME);
  m_Statement += getWhereStatement() + ";";

  RetValue = CSMC_DBData::select();

  if (!RetValue)
  {
    std::string ActStatement = m_Statement;

    cCBS_ODBC_DBError lastError;
    copy(HEATID, TREATID, PLANT, PLANTNO, DESCR_PP, PRACNO, TREATMODENO, LIQ_ADD_AMOUNT, true, lastError);
  
    m_Statement = ActStatement;

    if ( CSMC_DBData::select() )
      RetValue = true;
    else
      setLastError(lastError.m_MessageText, lastError.m_NativeErrorCode, lastError.m_SQLState);
  }

  return RetValue;


}

bool CHD_RESTRI_ENTRY::selectRestrictions(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long PLANTNO, const std::string& SOURCE, const std::string& DESCR_PP, const std::string& COMBINATION_NAME, long PRACNO, long LIQ_ADD_AMOUNT, long TREATMODENO)
{
  // function returns result set ordered by PRACNO desc.
  // 
  bool RetValue = false;

  if ( TREATMODENO == CSMC_DBData::unspecLong )
  {
    TREATMODENO = 0;
  }
  if ( LIQ_ADD_AMOUNT == CSMC_DBData::unspecLong )
  {
    LIQ_ADD_AMOUNT = 0;
  }

  std::stringstream MaxLiqAddSql;
  MaxLiqAddSql << "LIQ_ADD_AMOUNT = (SELECT MAX(LIQ_ADD_AMOUNT) FROM " << m_TableName << "  WHERE "
               << "HEATID = '" << HEATID << "' AND "
               << "TREATID = '" << TREATID << "' AND "
               << "PLANT = '" << PLANT << "' AND "
               << "DESCR_PP = '" << DESCR_PP << "' AND "
               << "TREATMODENO = " << TREATMODENO << " AND "
               << "LIQ_ADD_AMOUNT <= " << LIQ_ADD_AMOUNT << ")";

  cleanWhereStatement();
  
  m_Statement = "Select * from " + m_TableName;
  
  addWhereClause(CHD_RESTRI_ENTRY::HEATID,HEATID);
  addWhereClause(CHD_RESTRI_ENTRY::TREATID,TREATID);
  addWhereClause(CHD_RESTRI_ENTRY::PLANT,PLANT);
  addWhereClause(CHD_RESTRI_ENTRY::DESCR_PP,DESCR_PP);
  addWhereClause(CHD_RESTRI_ENTRY::PRACNO,PRACNO);
  addWhereClause(CHD_RESTRI_ENTRY::TREATMODENO,TREATMODENO);
  addWhereClause(MaxLiqAddSql.str());
  addWhereClause(CHD_RESTRI_ENTRY::SOURCE,SOURCE);
  addWhereClause(CHD_RESTRI_ENTRY::COMBINATION_NAME,COMBINATION_NAME);

  m_Statement += getWhereStatement() + ";";

  RetValue = CSMC_DBData::select();

  if (!RetValue)
  {
    std::stringstream Mess;
    Mess << "Try to copy it from 'GT_RESTRY_ENTRY'. ";
    log(Mess.str(),2);

    std::string ActStatement = m_Statement;

    cCBS_ODBC_DBError lastError;
    copy( HEATID, TREATID, PLANT, PLANTNO, DESCR_PP, PRACNO, TREATMODENO, LIQ_ADD_AMOUNT, true, lastError);
  
    m_Statement = ActStatement;
    if ( CSMC_DBData::select() )
      RetValue = true;
    else
      setLastError(lastError.m_MessageText, lastError.m_NativeErrorCode, lastError.m_SQLState);
  }

  return RetValue;
}

// function returns one pair of SOURCE and COMBINATION_NAME.
bool CHD_RESTRI_ENTRY::selectSourceAndCombiName(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long PLANTNO, const std::string& SOURCE, const std::string& DESCR_PP, const std::string& COMBINATION_NAME, long PRACNO, long LIQ_ADD_AMOUNT, long TREATMODENO)
{
  bool RetValue = false;

  if ( TREATMODENO == CSMC_DBData::unspecLong )
  {
    TREATMODENO = 0;
  }
  if ( LIQ_ADD_AMOUNT == CSMC_DBData::unspecLong )
  {
    LIQ_ADD_AMOUNT = 0;
  }

  std::stringstream MaxLiqAddSql;
  MaxLiqAddSql << "LIQ_ADD_AMOUNT = (SELECT MAX(LIQ_ADD_AMOUNT) FROM " << m_TableName << "  WHERE "
               << "HEATID = '" << HEATID << "' AND "
               << "TREATID = '" << TREATID << "' AND "
               << "PLANT = '" << PLANT << "' AND "
               << "DESCR_PP = '" << DESCR_PP << "' AND "
               << "TREATMODENO = " << TREATMODENO << " AND "
               << "LIQ_ADD_AMOUNT <= " << LIQ_ADD_AMOUNT << ")";

  cleanWhereStatement();
  
  m_Statement = "Select distinct SOURCE, COMBINATION_NAME from " + m_TableName;
  
  addWhereClause(CHD_RESTRI_ENTRY::HEATID,HEATID);
  addWhereClause(CHD_RESTRI_ENTRY::TREATID,TREATID);
  addWhereClause(CHD_RESTRI_ENTRY::PLANT,PLANT);
  addWhereClause(CHD_RESTRI_ENTRY::DESCR_PP,DESCR_PP);
  addWhereClause(CHD_RESTRI_ENTRY::PRACNO,PRACNO);
  addWhereClause(CHD_RESTRI_ENTRY::TREATMODENO,TREATMODENO);
  addWhereClause(MaxLiqAddSql.str());
  addWhereClause(CHD_RESTRI_ENTRY::SOURCE,SOURCE);
  addWhereClause(CHD_RESTRI_ENTRY::COMBINATION_NAME,COMBINATION_NAME);

  m_Statement += ";";

  RetValue = CSMC_DBData::select();

  if (!RetValue)
  {
    std::string ActStatement = m_Statement;

    cCBS_ODBC_DBError lastError;
    copy(HEATID, TREATID, PLANT, PLANTNO, DESCR_PP, PRACNO, TREATMODENO, LIQ_ADD_AMOUNT, true, lastError);
  
    m_Statement = ActStatement;

    if ( CSMC_DBData::select() )
      RetValue = true;
    else
      setLastError(lastError.m_MessageText, lastError.m_NativeErrorCode, lastError.m_SQLState);
  }

  return RetValue;
}

bool CHD_RESTRI_ENTRY::copy(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long PLANTNO, const std::string& DESCR_PP, long PRACNO, long TREATMODENO, long LIQ_ADD_AMOUNT, bool Commit, cCBS_ODBC_DBError &Error)
{
  bool result = !exists(HEATID, TREATID, PLANT, DESCR_PP);
  //some data found -> delete them
  if (!result)
  {
    result = deleteRows();
    if (!result)
      setLastError(std::string("ERROR_DELETE_DATA"), 0, getActStatement());
  }

  if ( TREATMODENO == CSMC_DBData::unspecLong )
  {
    TREATMODENO = 0;
  }
  if ( LIQ_ADD_AMOUNT == CSMC_DBData::unspecLong )
  {
    LIQ_ADD_AMOUNT = 0;
  }

  // preparing setting for source table
  CGT_RESTRI_ENTRY  GT_RESTRI_ENTRY (m_pCBS_StdConnection);

  // prepare sub-select statement for LiqAdd
  std::stringstream MaxLiqAddSql;
  MaxLiqAddSql << "LIQ_ADD_AMOUNT = (SELECT MAX(LIQ_ADD_AMOUNT) FROM GT_RESTRI_ENTRY ";



  //std::stringstream MaxLiqAddSql;
  //MaxLiqAddSql << "LIQ_ADD_AMOUNT = (SELECT MAX(LIQ_ADD_AMOUNT) FROM GT_RESTRI WHERE "
  //             << "PLANT = '" << PLANT << "' AND "
  //             << "DESCR_PP = '" << DESCR_PP << "' AND "
  //             << "TREATMODENO = " << TREATMODENO << " AND "
  //             << "LIQ_ADD_AMOUNT <= " << LIQ_ADD_AMOUNT << " AND ";

  if ( GT_RESTRI_ENTRY.selectRestriction(PLANT, PLANTNO, DESCR_PP, PRACNO, TREATMODENO, LIQ_ADD_AMOUNT) )
  {  
    GT_RESTRI_ENTRY.cleanWhereStatement();
    GT_RESTRI_ENTRY.addWhereClause(CGT_RESTRI_ENTRY::PLANT,PLANT);
    GT_RESTRI_ENTRY.addWhereClause(CGT_RESTRI_ENTRY::DESCR_PP,DESCR_PP);
		GT_RESTRI_ENTRY.addWhereClause(CGT_RESTRI_ENTRY::PRACNO,PRACNO); //SARS
    GT_RESTRI_ENTRY.addWhereClause(CGT_RESTRI_ENTRY::TREATMODENO,TREATMODENO);
    GT_RESTRI_ENTRY.addWhereClause(CGT_RESTRI_ENTRY::LIQ_ADD_AMOUNT,LIQ_ADD_AMOUNT,"<=");

    // finalize sub-select statement for LiqAdd
    GT_RESTRI_ENTRY.addWhereClause(CGT_RESTRI_ENTRY::PLANTNO,PLANTNO);
    MaxLiqAddSql << GT_RESTRI_ENTRY.getWhereStatement() << ")"; //close the brackets

    // copy cpezialized restriction
    GT_RESTRI_ENTRY.cleanWhereStatement();
    GT_RESTRI_ENTRY.addWhereClause(CGT_RESTRI_ENTRY::PLANT,PLANT);
    GT_RESTRI_ENTRY.addWhereClause(CGT_RESTRI_ENTRY::PLANTNO,PLANTNO);
    GT_RESTRI_ENTRY.addWhereClause(CGT_RESTRI_ENTRY::DESCR_PP,DESCR_PP);
    GT_RESTRI_ENTRY.addWhereClause(CGT_RESTRI_ENTRY::PRACNO,PRACNO);
    GT_RESTRI_ENTRY.addWhereClause(CGT_RESTRI_ENTRY::TREATMODENO,TREATMODENO);
    GT_RESTRI_ENTRY.addWhereClause(MaxLiqAddSql.str());
  }
  else
  {
    GT_RESTRI_ENTRY.cleanWhereStatement();
    GT_RESTRI_ENTRY.addWhereClause(CGT_RESTRI_ENTRY::PLANT,PLANT);
    GT_RESTRI_ENTRY.addWhereClause(CGT_RESTRI_ENTRY::DESCR_PP,DESCR_PP);
		GT_RESTRI_ENTRY.addWhereClause(CGT_RESTRI_ENTRY::PRACNO,PRACNO); //SARS
    GT_RESTRI_ENTRY.addWhereClause(CGT_RESTRI_ENTRY::TREATMODENO,TREATMODENO);
    GT_RESTRI_ENTRY.addWhereClause(CGT_RESTRI_ENTRY::LIQ_ADD_AMOUNT,LIQ_ADD_AMOUNT,"<=");

    // finalize sub-select statement for LiqAdd
    GT_RESTRI_ENTRY.addWhereClause(CGT_RESTRI_ENTRY::PLANTNO,(long)0);
    MaxLiqAddSql << GT_RESTRI_ENTRY.getWhereStatement() << ")";

    //copy default restriction
    GT_RESTRI_ENTRY.cleanWhereStatement();
    GT_RESTRI_ENTRY.addWhereClause(CGT_RESTRI_ENTRY::PLANT,PLANT);
    GT_RESTRI_ENTRY.addWhereClause(CGT_RESTRI_ENTRY::PLANTNO,(long)0);
    GT_RESTRI_ENTRY.addWhereClause(CGT_RESTRI_ENTRY::DESCR_PP,DESCR_PP);
    GT_RESTRI_ENTRY.addWhereClause(CGT_RESTRI_ENTRY::PRACNO,PRACNO);
    GT_RESTRI_ENTRY.addWhereClause(CGT_RESTRI_ENTRY::TREATMODENO,TREATMODENO);
    GT_RESTRI_ENTRY.addWhereClause(MaxLiqAddSql.str());
  }

  // preparing setting for aim table
  setHEATID (HEATID);
  setTREATID(TREATID);
  setPLANT  (PLANT);

  result = result && copyByInsert(&GT_RESTRI_ENTRY);

  if (!result)
    Error = getLastError();

  if(Commit)
  {
    if (result)
      this->commit();
    else
      rollback();
  }

  return result;
}

bool CHD_RESTRI_ENTRY::exists(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const std::string& DESCR_PP)
{
  cleanWhereStatement();

  m_Statement = "Select HEATID from " + m_TableName;

  addWhereClause(CHD_RESTRI_ENTRY::HEATID,HEATID);
  addWhereClause(CHD_RESTRI_ENTRY::TREATID,TREATID);
  addWhereClause(CHD_RESTRI_ENTRY::PLANT,PLANT);
  addWhereClause(CHD_RESTRI_ENTRY::DESCR_PP,DESCR_PP);

  std::string sWhereStatement = getWhereStatement();
  //to avoid the exception like 'Select HEATID from PP_HEAT AND ROWNUM = 1 '
  if(sWhereStatement.length() > 0 ) 
  {
    // do not use ROWNUM in "addWhereClause", ROWNUM is not a table column and where statement will be used for deletion at "deleteRows"
    m_Statement += sWhereStatement + " AND ROWNUM = 1 ;";
  }
  else
  {
    return false; //why not m_Statement +=  " where ROWNUM = 1 ;";
  }

  return CSMC_DBData::select();
}


