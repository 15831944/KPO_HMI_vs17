//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CGCL_EL_PHASE.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGCL_EL_PHASE::PRACPHASE("PRACPHASE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGCL_EL_PHASE::PRACPHASEDESCR("PRACPHASEDESCR");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGCL_EL_PHASE::DISPLAY_ORDER("DISPLAY_ORDER");

//##DBClassCodeUtility ! DO NOT EDIT !
CGCL_EL_PHASE::CGCL_EL_PHASE(cCBS_StdConnection* Connection)
:CSMC_DBData("GCL_EL_PHASE",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGCL_EL_PHASE::CGCL_EL_PHASE(cCBS_Connection* Connection)
:CSMC_DBData("GCL_EL_PHASE",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGCL_EL_PHASE::CGCL_EL_PHASE()
:CSMC_DBData("GCL_EL_PHASE")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGCL_EL_PHASE::~CGCL_EL_PHASE()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CGCL_EL_PHASE::getPRACPHASE(long Row)
{
  return getString(CGCL_EL_PHASE::PRACPHASE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGCL_EL_PHASE::setPRACPHASE(const std::string& value)
{
  setString(CGCL_EL_PHASE::PRACPHASE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CGCL_EL_PHASE::getPRACPHASEDESCR(long Row)
{
  return getString(CGCL_EL_PHASE::PRACPHASEDESCR, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGCL_EL_PHASE::setPRACPHASEDESCR(const std::string& value)
{
  setString(CGCL_EL_PHASE::PRACPHASEDESCR, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CGCL_EL_PHASE::getDISPLAY_ORDER(long Row)
{
  return getLong(CGCL_EL_PHASE::DISPLAY_ORDER, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGCL_EL_PHASE::setDISPLAY_ORDER(long value)
{
  setLong(CGCL_EL_PHASE::DISPLAY_ORDER, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CGCL_EL_PHASE::select(const std::string& PRACPHASE)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CGCL_EL_PHASE::PRACPHASE,PRACPHASE);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CGCL_EL_PHASE::selectByPracPhaseDescr(const std::string& PRACPHASEDESCR)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CGCL_EL_PHASE::PRACPHASEDESCR,PRACPHASEDESCR);

  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}


