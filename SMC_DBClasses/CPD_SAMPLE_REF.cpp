//## Copyright (C) 2010 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CPD_SAMPLE.h"
#include "DEF_GC_MEASUREMENT_TYPE.h"
#include "cCBS_StdEventLogFrameController.h"
#include "CSMC_EventLogFrameController.h"
#include "CIntfData.h"
#include "CDataConversion.h"
#include "CPD_SAMPLE_REF.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_SAMPLE_REF::SAMPLE_REF("SAMPLE_REF");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_SAMPLE_REF::HOT_METAL("HOT_METAL");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_SAMPLE_REF::STEEL("STEEL");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_SAMPLE_REF::STEEL_CALC("STEEL_CALC");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_SAMPLE_REF::STEEL_CALC_FINAL("STEEL_CALC_FINAL");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_SAMPLE_REF::SLAG("SLAG");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_SAMPLE_REF::SLAG_CALC("SLAG_CALC");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_SAMPLE_REF::SLAG_CALC_FINAL("SLAG_CALC_FINAL");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_SAMPLE_REF::TEMP("TEMP");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_SAMPLE_REF::TEMP_CALC("TEMP_CALC");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_SAMPLE_REF::TEMP_CALC_FINAL("TEMP_CALC_FINAL");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_SAMPLE_REF::CARBON("CARBON");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_SAMPLE_REF::OXYGEN("OXYGEN");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_SAMPLE_REF::HYDROGEN("HYDROGEN");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_SAMPLE_REF::CELOX_SLAG("CELOX_SLAG");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_SAMPLE_REF::ALUMINIUM("ALUMINIUM");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_SAMPLE_REF::EMF("EMF");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_SAMPLE_REF::REVTIME("REVTIME");

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_SAMPLE_REF::CPD_SAMPLE_REF(cCBS_StdConnection* Connection)
:CSMC_DBData("PD_SAMPLE_REF",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_SAMPLE_REF::CPD_SAMPLE_REF(cCBS_Connection* Connection)
:CSMC_DBData("PD_SAMPLE_REF",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_SAMPLE_REF::CPD_SAMPLE_REF()
:CSMC_DBData("PD_SAMPLE_REF")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_SAMPLE_REF::~CPD_SAMPLE_REF()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Unique sample reference
long CPD_SAMPLE_REF::getSAMPLE_REF(long Row)
{
  return getLong(CPD_SAMPLE_REF::SAMPLE_REF, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_SAMPLE_REF::setSAMPLE_REF(long value)
{
  setLong(CPD_SAMPLE_REF::SAMPLE_REF, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Reference to last measured hot metal analysis
long CPD_SAMPLE_REF::getHOT_METAL(long Row)
{
  return getLong(CPD_SAMPLE_REF::HOT_METAL, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_SAMPLE_REF::setHOT_METAL(long value)
{
  setLong(CPD_SAMPLE_REF::HOT_METAL, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Reference to last measured steel analysis
long CPD_SAMPLE_REF::getSTEEL(long Row)
{
  return getLong(CPD_SAMPLE_REF::STEEL, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_SAMPLE_REF::setSTEEL(long value)
{
  setLong(CPD_SAMPLE_REF::STEEL, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Reference to last calculated actual steel analysis
long CPD_SAMPLE_REF::getSTEEL_CALC(long Row)
{
  return getLong(CPD_SAMPLE_REF::STEEL_CALC, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_SAMPLE_REF::setSTEEL_CALC(long value)
{
  setLong(CPD_SAMPLE_REF::STEEL_CALC, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Reference to last calculated final steel analysis
long CPD_SAMPLE_REF::getSTEEL_CALC_FINAL(long Row)
{
  return getLong(CPD_SAMPLE_REF::STEEL_CALC_FINAL, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_SAMPLE_REF::setSTEEL_CALC_FINAL(long value)
{
  setLong(CPD_SAMPLE_REF::STEEL_CALC_FINAL, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Reference to last measured slag analysis
long CPD_SAMPLE_REF::getSLAG(long Row)
{
  return getLong(CPD_SAMPLE_REF::SLAG, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_SAMPLE_REF::setSLAG(long value)
{
  setLong(CPD_SAMPLE_REF::SLAG, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Reference to last calculated actual slag analysis
long CPD_SAMPLE_REF::getSLAG_CALC(long Row)
{
  return getLong(CPD_SAMPLE_REF::SLAG_CALC, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_SAMPLE_REF::setSLAG_CALC(long value)
{
  setLong(CPD_SAMPLE_REF::SLAG_CALC, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Reference to last calculated final slag analysis
long CPD_SAMPLE_REF::getSLAG_CALC_FINAL(long Row)
{
  return getLong(CPD_SAMPLE_REF::SLAG_CALC_FINAL, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_SAMPLE_REF::setSLAG_CALC_FINAL(long value)
{
  setLong(CPD_SAMPLE_REF::SLAG_CALC_FINAL, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Reference to last measured temperature
long CPD_SAMPLE_REF::getTEMP(long Row)
{
  return getLong(CPD_SAMPLE_REF::TEMP, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_SAMPLE_REF::setTEMP(long value)
{
  setLong(CPD_SAMPLE_REF::TEMP, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Reference to last calculated actual temperature
long CPD_SAMPLE_REF::getTEMP_CALC(long Row)
{
  return getLong(CPD_SAMPLE_REF::TEMP_CALC, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_SAMPLE_REF::setTEMP_CALC(long value)
{
  setLong(CPD_SAMPLE_REF::TEMP_CALC, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Reference to last calculated final temperature
long CPD_SAMPLE_REF::getTEMP_CALC_FINAL(long Row)
{
  return getLong(CPD_SAMPLE_REF::TEMP_CALC_FINAL, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_SAMPLE_REF::setTEMP_CALC_FINAL(long value)
{
  setLong(CPD_SAMPLE_REF::TEMP_CALC_FINAL, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Reference to last carbon measurement
long CPD_SAMPLE_REF::getCARBON(long Row)
{
  return getLong(CPD_SAMPLE_REF::CARBON, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_SAMPLE_REF::setCARBON(long value)
{
  setLong(CPD_SAMPLE_REF::CARBON, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Reference to last oxygen  measurement
long CPD_SAMPLE_REF::getOXYGEN(long Row)
{
  return getLong(CPD_SAMPLE_REF::OXYGEN, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_SAMPLE_REF::setOXYGEN(long value)
{
  setLong(CPD_SAMPLE_REF::OXYGEN, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Reference to last hydrogen measurement
long CPD_SAMPLE_REF::getHYDROGEN(long Row)
{
  return getLong(CPD_SAMPLE_REF::HYDROGEN, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_SAMPLE_REF::setHYDROGEN(long value)
{
  setLong(CPD_SAMPLE_REF::HYDROGEN, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Reference to last celox slag measurement
long CPD_SAMPLE_REF::getCELOX_SLAG(long Row)
{
  return getLong(CPD_SAMPLE_REF::CELOX_SLAG, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_SAMPLE_REF::setCELOX_SLAG(long value)
{
  setLong(CPD_SAMPLE_REF::CELOX_SLAG, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Reference to last aluminium measurement
long CPD_SAMPLE_REF::getALUMINIUM(long Row)
{
  return getLong(CPD_SAMPLE_REF::ALUMINIUM, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_SAMPLE_REF::setALUMINIUM(long value)
{
  setLong(CPD_SAMPLE_REF::ALUMINIUM, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Reference to last EMF measurement
long CPD_SAMPLE_REF::getEMF(long Row)
{
  return getLong(CPD_SAMPLE_REF::EMF, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_SAMPLE_REF::setEMF(long value)
{
  setLong(CPD_SAMPLE_REF::EMF, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Date and time of last revision
CDateTime CPD_SAMPLE_REF::getREVTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CPD_SAMPLE_REF::REVTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_SAMPLE_REF::setREVTIME(const CDateTime& value)
{
 setString(CPD_SAMPLE_REF::REVTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CPD_SAMPLE_REF::select(long SAMPLE_REF)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPD_SAMPLE_REF::SAMPLE_REF,SAMPLE_REF);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CPD_SAMPLE_REF::selectByREVTIME(const CDateTime& REVTIME, const std::string& Operator)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPD_SAMPLE_REF::REVTIME, REVTIME, Operator );

  m_Statement += getWhereStatement() + " order by REVTIME desc;";

  return CSMC_DBData::select();
}

bool CPD_SAMPLE_REF::copySampleRef(long fromSampleRef, long toSampleRef, bool Commit, cCBS_ODBC_DBError &Error)
{
  bool result = false;

  if ( fromSampleRef != CSMC_DBData::unspecLong &&
       fromSampleRef != CSMC_DBData::unspecLong   )
  {
	  cleanWhereStatement();

    std::stringstream sql;

	  sql << "update PD_SAMPLE_REF set ( STEEL, STEEL_CALC, SLAG,"
		  << "  SLAG_CALC, TEMP, TEMP_CALC, CARBON, OXYGEN," 
		  << "  HYDROGEN, CELOX_SLAG, ALUMINIUM, EMF) = "
		  << "  (select  STEEL, STEEL_CALC, SLAG, SLAG_CALC, TEMP, TEMP_CALC,"
      << "  CARBON, OXYGEN, HYDROGEN, CELOX_SLAG, ALUMINIUM, EMF " 
		  << "  from PD_SAMPLE_REF where SAMPLE_REF = " << fromSampleRef << ")"
		  << " where SAMPLE_REF = " << toSampleRef;
  	
	  result = executeSQL(sql.str());
	  if (!result)
		  Error = getLastError();
  	
	  if (Commit)
	  {
		  if (result)
			  commit();
		  else
			  rollback();
	  }

  }
  else
  {
    cCBS_StdEventLogFrame *pEventLog = cCBS_StdEventLogFrameController::getInstance()->getpEventLog();
    sEventLogMessage sMessage = cCBS_StdEventLog::initMessage(__FILE__,__LINE__);
    pEventLog->EL_DBWriteError(sMessage, "",m_TableName.c_str(),"CPD_SAMPLE_REF: invalid argument fromSampleRef/toSampleRef");
  }

	return result;
}

long CPD_SAMPLE_REF::copyToNextSAMPLE_REF(long SAMPLE_REF, bool Commit)
{
  long NextSAMPLE_REF = CSMC_DBData::unspecLong;

  if ( SAMPLE_REF != CSMC_DBData::unspecLong )
  {
    NextSAMPLE_REF = getNextSAMPLE_REF();
    if (NextSAMPLE_REF != CSMC_DBData::unspecLong)
    {
      if ( select ( SAMPLE_REF ) )
      {
        setSAMPLE_REF ( NextSAMPLE_REF );

        setSTEEL      ( getSTEEL(1) );
        setSTEEL_CALC ( getSTEEL_CALC(1) );
        setSLAG       ( getSLAG(1) );
        setSLAG_CALC  ( getSLAG_CALC(1) );
        setTEMP       ( getTEMP(1) );
        setTEMP_CALC  ( getTEMP_CALC(1) );
        setCARBON     ( getCARBON(1) );
        setOXYGEN     ( getOXYGEN(1) );
        setHYDROGEN   ( getHYDROGEN(1) );
        setCELOX_SLAG ( getCELOX_SLAG(1) );
        setALUMINIUM  ( getALUMINIUM(1) );
        setEMF        ( getEMF(1) );

        setREVTIME(CDateTime());

        bool done = true;
        if (!insert())
        {
          done = false;
          NextSAMPLE_REF =CSMC_DBData::unspecLong;
        }

        if (Commit)
        {
          if (done)
            commit();
          else
          {
            rollback();
          }
        }
      }
      else
      {
        CSMC_EventLogFrame *pEventLog = CSMC_EventLogFrameController::getInstance()->getpEventLog();
        sEventLogMessage sMessage = cCBS_StdEventLog::initMessage(__FILE__,__LINE__);
        pEventLog->EL_ErrorSearchingData(sMessage, CDataConversion::LongToString(SAMPLE_REF).c_str(), m_TableName.c_str());

        NextSAMPLE_REF =CSMC_DBData::unspecLong;
      }
    }
  }
  else
  {
    cCBS_StdEventLogFrame *pEventLog = cCBS_StdEventLogFrameController::getInstance()->getpEventLog();
    sEventLogMessage sMessage = cCBS_StdEventLog::initMessage(__FILE__,__LINE__);
    pEventLog->EL_DBWriteError(sMessage, "",m_TableName.c_str(),"CPD_SAMPLE_REF: invalid argument SAMPLE_REF");
  }

  return NextSAMPLE_REF;
}

void CPD_SAMPLE_REF::doOnConstruct()
{
  if (m_pCBS_StdConnection)
  {
    m_pPD_SAMPLE = new CPD_SAMPLE(m_pCBS_StdConnection);
  }
}

void CPD_SAMPLE_REF::doOnDestruct()
{
  if ( m_pPD_SAMPLE )
  {
    delete m_pPD_SAMPLE;
    m_pPD_SAMPLE = 0;
  }
}

long CPD_SAMPLE_REF::getCounterSLAG_CALC(long SAMPLE_REF)
{
  long SAMPLE_COUNTER = CSMC_DBData::unspecLong;

  if ( SAMPLE_REF != CSMC_DBData::unspecLong )
  {
    if ( select(SAMPLE_REF) )
    {
      SAMPLE_COUNTER = getSLAG_CALC(1);

    }
  }

  return SAMPLE_COUNTER;
}

long CPD_SAMPLE_REF::getCounterSTEEL_CALC(long SAMPLE_REF)
{
  long SAMPLE_COUNTER = CSMC_DBData::unspecLong;

  if ( SAMPLE_REF != CSMC_DBData::unspecLong )
  {
    if ( select(SAMPLE_REF) )
    {
      SAMPLE_COUNTER = getSTEEL_CALC(1);

    }
  }

  return SAMPLE_COUNTER;
}

long CPD_SAMPLE_REF::getCounterTEMP_CALC(long SAMPLE_REF)
{
  long SAMPLE_COUNTER = CSMC_DBData::unspecLong;

  if ( SAMPLE_REF != CSMC_DBData::unspecLong )
  {
    if ( select(SAMPLE_REF) )
    {
      SAMPLE_COUNTER = getTEMP_CALC(1);

    }
  }

  return SAMPLE_COUNTER;
}

long CPD_SAMPLE_REF::getNextSAMPLE_REF()
{
  long RetValue = CSMC_DBData::unspecLong;

  try
  {
	  m_Statement = "select SEQ_SAMPLE_REF.nextval as SAMPLE_REF from dual;" ;

	  if ( CSMC_DBData::select() )
    {
      RetValue = getSAMPLE_REF(1);
    }
  }
  catch(...)
  {
    cCBS_StdEventLogFrame *pEventLog = cCBS_StdEventLogFrameController::getInstance()->getpEventLog();
    sEventLogMessage sMessage = cCBS_StdEventLog::initMessage(__FILE__,__LINE__);
    pEventLog->EL_ExceptionCaught(sMessage, "Unknown", "CPD_SAMPLE_REF::getNextSAMPLE_REF()", "");

    RetValue = CSMC_DBData::unspecLong;
  }

  return RetValue;
}

bool CPD_SAMPLE_REF::getNextSAMPLE_REF(long &SAMPLE_REF, cCBS_ODBC_DBError &Error)
{
	
	m_Statement = "select SEQ_SAMPLE_REF.nextval as SAMPLE_REF from dual";

	bool result = CSMC_DBData::select();	

	if ( result )
  {
		SAMPLE_REF = getSAMPLE_REF(1);
  }
	else
	{
		setLastError(string("No SAMPLE_REF selected from sequence SEQ_SAMPLE_REF"), 0, 
			string("select SEQ_SAMPLE_REF.nextval as SAMPLE_REF from dual"));
	}

	return result;	
}

long CPD_SAMPLE_REF::getSampleCounter(long SAMPLE_REF, long MEASUREMENT_TYPE)
{
  long SAMPLE_COUNTER = CSMC_DBData::unspecLong;

  if ( SAMPLE_REF != CSMC_DBData::unspecLong )
  {
    if ( select(SAMPLE_REF) )
    {
      if ( MEASUREMENT_TYPE == DEF_GC_MEASUREMENT_TYPE::Celox )
      {
        SAMPLE_COUNTER = getOXYGEN(1);
      }
      else if ( MEASUREMENT_TYPE == DEF_GC_MEASUREMENT_TYPE::Celox_Slag )
      {
        SAMPLE_COUNTER = getCELOX_SLAG(1);
      }
      else if ( MEASUREMENT_TYPE == DEF_GC_MEASUREMENT_TYPE::HotHeel )
      {
        SAMPLE_COUNTER = getSTEEL(1);
      }
      else if ( MEASUREMENT_TYPE == DEF_GC_MEASUREMENT_TYPE::HM )
      {
        SAMPLE_COUNTER = getHOT_METAL(1);
      }
      else if ( MEASUREMENT_TYPE == DEF_GC_MEASUREMENT_TYPE::Hydris )
      {
      }
      else if ( MEASUREMENT_TYPE == DEF_GC_MEASUREMENT_TYPE::Slag )
      {
        SAMPLE_COUNTER = getSLAG(1);
      }
      //else if ( MEASUREMENT_TYPE ==  11 /*"Slag_Calc"*/ )
      //{
      //  SAMPLE_COUNTER = getSLAG_CALC(1);
      //}
      else if ( MEASUREMENT_TYPE == DEF_GC_MEASUREMENT_TYPE::Steel )
      {
        SAMPLE_COUNTER = getSTEEL(1);
      }
      //else if ( MEASUREMENT_TYPE == 10 /*"Steel_Calc"*/ )
      //{
      //  SAMPLE_COUNTER = getSTEEL_CALC(1);
      //} 
      else if ( MEASUREMENT_TYPE == DEF_GC_MEASUREMENT_TYPE::Temp )
      {
        SAMPLE_COUNTER = getTEMP(1);
      }
      //else if ( MEASUREMENT_TYPE == 12 /*"Temp_Calc"*/ )
      //{
      //  SAMPLE_COUNTER = getTEMP_CALC(1);
      //}
    }
  }

  return SAMPLE_COUNTER;
}

std::vector<long> CPD_SAMPLE_REF::getSampleCounterList(long SAMPLE_REF)
{

  std::vector<long> SampleCounterList;

  if ( SAMPLE_REF != CSMC_DBData::unspecLong && select ( SAMPLE_REF ) )
  {
    if (getSTEEL(1) != DEF::Inv_Long)
      SampleCounterList.push_back(getSTEEL(1));

    if (getSLAG(1) != DEF::Inv_Long)
      SampleCounterList.push_back(getSLAG(1));

    if (getTEMP(1) != DEF::Inv_Long)
      SampleCounterList.push_back(getTEMP(1));

    if (getCARBON(1) != DEF::Inv_Long)
      SampleCounterList.push_back(getCARBON(1));        

    if (getOXYGEN(1) != DEF::Inv_Long)
      SampleCounterList.push_back(getOXYGEN(1));

    if (getHYDROGEN(1) != DEF::Inv_Long)
      SampleCounterList.push_back(getHYDROGEN(1));

    if (getCELOX_SLAG(1) != DEF::Inv_Long)
      SampleCounterList.push_back(getCELOX_SLAG(1));

    if (getALUMINIUM(1) != DEF::Inv_Long)
      SampleCounterList.push_back(getALUMINIUM(1));

    if (getEMF(1) != DEF::Inv_Long)
      SampleCounterList.push_back(getEMF(1));

    if (getSLAG_CALC(1) != DEF::Inv_Long)
      SampleCounterList.push_back(getSLAG_CALC(1));

    if (getSTEEL_CALC(1) != DEF::Inv_Long)
      SampleCounterList.push_back(getSTEEL_CALC(1));

    if (getTEMP_CALC(1) != DEF::Inv_Long)
      SampleCounterList.push_back(getTEMP_CALC(1));
  }

  return SampleCounterList;
}

double CPD_SAMPLE_REF::getSampleMeasValueCALC(long SAMPLE_REF, const std::string& MEASUREMENT_NAME)
{
  double MeasValue = CSMC_DBData::unspecDouble;

  if ( SAMPLE_REF != CSMC_DBData::unspecLong && select ( SAMPLE_REF ) )
  {
    long SAMPLE_COUNTER = getSTEEL_CALC(1);

    if ( m_pPD_SAMPLE )
    {
      MeasValue = m_pPD_SAMPLE->getSampleMeasValue(SAMPLE_COUNTER,MEASUREMENT_NAME);
    }
  }

  return MeasValue;
}

double CPD_SAMPLE_REF::getSampleMeasValueSLAG(long SAMPLE_REF, const std::string& MEASUREMENT_NAME)
{
  double MeasValue = CSMC_DBData::unspecDouble;

  if ( SAMPLE_REF != CSMC_DBData::unspecLong && select ( SAMPLE_REF ) )
  {
    long SAMPLE_COUNTER = getSLAG(1);

    if ( m_pPD_SAMPLE )
    {
      MeasValue = m_pPD_SAMPLE->getSampleMeasValue(SAMPLE_COUNTER,MEASUREMENT_NAME);
    }
  }

  return MeasValue;
}

double CPD_SAMPLE_REF::getSampleMeasValueSTEEL(long SAMPLE_REF, const std::string& MEASUREMENT_NAME)
{
  double MeasValue = CSMC_DBData::unspecDouble;

  if ( SAMPLE_REF != CSMC_DBData::unspecLong && select ( SAMPLE_REF ) )
  {
    long SAMPLE_COUNTER = getSTEEL(1);

    if ( m_pPD_SAMPLE )
    {
      MeasValue = m_pPD_SAMPLE->getSampleMeasValue(SAMPLE_COUNTER,MEASUREMENT_NAME);
    }
  }

  return MeasValue;
}

double CPD_SAMPLE_REF::getSampleMeasValueTEMP(long SAMPLE_REF, const std::string& MEASUREMENT_NAME)
{
  double MeasValue = CSMC_DBData::unspecDouble;

  if ( SAMPLE_REF != CSMC_DBData::unspecLong && select ( SAMPLE_REF ) )
  {
    long SAMPLE_COUNTER = getTEMP(1);

    if ( m_pPD_SAMPLE )
    {
      MeasValue = m_pPD_SAMPLE->getSampleMeasValue(SAMPLE_COUNTER,MEASUREMENT_NAME);
    }
  }

  return MeasValue;
}

seqSample CPD_SAMPLE_REF::getSampleSlag(long SAMPLE_REF)
{
  seqSample SeqSample;

  if ( SAMPLE_REF != CSMC_DBData::unspecLong && select ( SAMPLE_REF ) )
  {
    long SAMPLE_COUNTER = getSLAG(1);

    if ( m_pPD_SAMPLE && SAMPLE_COUNTER != CSMC_DBData::unspecLong && 
         m_pPD_SAMPLE->select(SAMPLE_COUNTER) )
    {
      SeqSample = m_pPD_SAMPLE->getSample(SAMPLE_COUNTER);
    }
  }
  return SeqSample;
}

seqSample CPD_SAMPLE_REF::getSampleSTEEL(long SAMPLE_REF)
{
  seqSample SeqSample;

  if ( SAMPLE_REF != CSMC_DBData::unspecLong && select ( SAMPLE_REF ) )
  {
    long SAMPLE_COUNTER = getSTEEL(1);

    if ( m_pPD_SAMPLE && m_pPD_SAMPLE->select(SAMPLE_COUNTER) )
    {
      SeqSample = m_pPD_SAMPLE->getSample(SAMPLE_COUNTER);
    }
  }

  return SeqSample;
}

seqSample CPD_SAMPLE_REF::getSampleTEMP(long SAMPLE_REF)
{
  seqSample SeqSample;

  if ( SAMPLE_REF != CSMC_DBData::unspecLong && select ( SAMPLE_REF ) )
  {
    long SAMPLE_COUNTER = getTEMP(1);

    if ( m_pPD_SAMPLE && m_pPD_SAMPLE->select(SAMPLE_COUNTER) )
    {
      SeqSample = m_pPD_SAMPLE->getSample(SAMPLE_COUNTER);
    }
  }

  return SeqSample;
}

CDateTime CPD_SAMPLE_REF::getSampleTimeSTEEL(long SAMPLE_REF)
{
  CDateTime SampleTime = CSMC_DBData::unspecDate;

  if ( SAMPLE_REF != CSMC_DBData::unspecLong && select ( SAMPLE_REF ) )
  {
    long SAMPLE_COUNTER = getSTEEL(1);

    if ( m_pPD_SAMPLE && SAMPLE_COUNTER != CSMC_DBData::unspecLong && 
         m_pPD_SAMPLE->select(SAMPLE_COUNTER) )
    {
      SampleTime = m_pPD_SAMPLE->getSAMPLETIME(1);
    }
  }

  return SampleTime;
}

CDateTime CPD_SAMPLE_REF::getSampleTimeTEMP(long SAMPLE_REF)
{
  CDateTime SampleTime = CSMC_DBData::unspecDate;

  if ( SAMPLE_REF != CSMC_DBData::unspecLong && select ( SAMPLE_REF ) )
  {
    long SAMPLE_COUNTER = getTEMP(1);

    if ( m_pPD_SAMPLE && SAMPLE_COUNTER != CSMC_DBData::unspecLong && 
         m_pPD_SAMPLE->select(SAMPLE_COUNTER) )
    {
      SampleTime = m_pPD_SAMPLE->getSAMPLETIME(1);
    }
  }

  return SampleTime;
}

long CPD_SAMPLE_REF::insertNewSAMPLE_REF(bool Commit, cCBS_ODBC_DBError &Error)
{
  long RetValue = CSMC_DBData::unspecLong;

  bool proceed = true;

  try
  {
    do
    {
      RetValue = getNextSAMPLE_REF();

      if ( RetValue != CSMC_DBData::unspecLong && !select(RetValue) )
      {
        proceed = false;

        setSAMPLE_REF(RetValue);

        CDateTime Now;
        setREVTIME(Now);

        bool result = insert();

        if (!result)
        {
          Error = getLastError();

          cCBS_StdEventLogFrame *pEventLog = cCBS_StdEventLogFrameController::getInstance()->getpEventLog();
          sEventLogMessage sMessage = cCBS_StdEventLog::initMessage(__FILE__,__LINE__);
          pEventLog->EL_DBWriteError(sMessage, "",m_TableName.c_str(),"CPD_SAMPLE_REF::insertNewSAMPLE_REF");

          RetValue = CSMC_DBData::unspecLong;
        }

        if (Commit)
        {
          if (result)
          {
            commit();
          }
          else
          {
            rollback();
          }
        }
      }
      else
      {
        break;
      }

    } while ( proceed );

  }
  catch(...)
  {
    cCBS_StdEventLogFrame *pEventLog = cCBS_StdEventLogFrameController::getInstance()->getpEventLog();
    sEventLogMessage sMessage = cCBS_StdEventLog::initMessage(__FILE__,__LINE__);
    pEventLog->EL_ExceptionCaught(sMessage, "","CPD_SAMPLE_REF::insertNewSAMPLE_REF","");

    RetValue = CSMC_DBData::unspecLong;
  }

  return RetValue;
}

long CPD_SAMPLE_REF::insertNewSAMPLE_REF(bool Commit)
{
  long RetValue = CSMC_DBData::unspecLong;

  bool proceed = true;

  try
  {
    do
    {
      RetValue = getNextSAMPLE_REF();

      if ( RetValue != CSMC_DBData::unspecLong && !select(RetValue) )
      {
        proceed = false;

        setSAMPLE_REF(RetValue);

        CDateTime Now;
        setREVTIME(Now);

        bool result = insert(); 
        
        if (Commit)
        {
          if (result)
          {
            commit();
          }
          else
          {
            cCBS_StdEventLogFrame *pEventLog = cCBS_StdEventLogFrameController::getInstance()->getpEventLog();
            sEventLogMessage sMessage = cCBS_StdEventLog::initMessage(__FILE__,__LINE__);
            pEventLog->EL_DBWriteError(sMessage, "",m_TableName.c_str(),"CPD_SAMPLE_REF::insertNewSAMPLE_REF");

            RetValue = CSMC_DBData::unspecLong;

            rollback();
          }
        }
      }
      else
      {
        break;
      }

    } while ( proceed );

  }
  catch(...)
  {
    cCBS_StdEventLogFrame *pEventLog = cCBS_StdEventLogFrameController::getInstance()->getpEventLog();
    sEventLogMessage sMessage = cCBS_StdEventLog::initMessage(__FILE__,__LINE__);
    pEventLog->EL_ExceptionCaught(sMessage, "","CPD_SAMPLE_REF::insertNewSAMPLE_REF","");

    RetValue = CSMC_DBData::unspecLong;
  }

  return RetValue;
}

//delete when not used any more
long CPD_SAMPLE_REF::insertNewSAMPLE_REF()
{
  long RetValue = CSMC_DBData::unspecLong;

  bool proceed = true;

  try
  {
    do
    {
      RetValue = getNextSAMPLE_REF();

      if ( RetValue != CSMC_DBData::unspecLong && !select(RetValue) )
      {
        proceed = false;

        setSAMPLE_REF(RetValue);

        CDateTime Now;
        setREVTIME(Now);

        if ( insert() )
        {
          commit();
        }
        else
        {
          cCBS_StdEventLogFrame *pEventLog = cCBS_StdEventLogFrameController::getInstance()->getpEventLog();
          sEventLogMessage sMessage = cCBS_StdEventLog::initMessage(__FILE__,__LINE__);
          pEventLog->EL_DBWriteError(sMessage, "",m_TableName.c_str(),"CPD_SAMPLE_REF::insertNewSAMPLE_REF");

          RetValue = CSMC_DBData::unspecLong;

          rollback();
        }
      }
      else
      {
        break;
      }

    } while ( proceed );

  }
  catch(...)
  {
    cCBS_StdEventLogFrame *pEventLog = cCBS_StdEventLogFrameController::getInstance()->getpEventLog();
    sEventLogMessage sMessage = cCBS_StdEventLog::initMessage(__FILE__,__LINE__);
    pEventLog->EL_ExceptionCaught(sMessage, "","CPD_SAMPLE_REF::insertNewSAMPLE_REF","");

    RetValue = CSMC_DBData::unspecLong;
  }

  return RetValue;
}

bool CPD_SAMPLE_REF::updateSAMPLE_REF(long SAMPLE_REF, long SAMPLE_COUNTER, long MEASUREMENT_TYPE, bool Commit, cCBS_ODBC_DBError &Error)
{
  bool RetValue = false;

  if ( SAMPLE_REF != CSMC_DBData::unspecLong && select ( SAMPLE_REF ) )
  {
    if ( MEASUREMENT_TYPE == DEF_GC_MEASUREMENT_TYPE::Celox )
    {
      setTEMP(SAMPLE_COUNTER);
      setCARBON(SAMPLE_COUNTER);
      setOXYGEN(SAMPLE_COUNTER);
      setALUMINIUM(SAMPLE_COUNTER);
    }
    if ( MEASUREMENT_TYPE == DEF_GC_MEASUREMENT_TYPE::Celox_Slag )
    {
      setCELOX_SLAG(SAMPLE_COUNTER);
    }
    if ( MEASUREMENT_TYPE == DEF_GC_MEASUREMENT_TYPE::HotHeel )
    {
      setTEMP(SAMPLE_COUNTER);
      setSTEEL(SAMPLE_COUNTER);
      setSLAG(SAMPLE_COUNTER);
    }
    if ( MEASUREMENT_TYPE == DEF_GC_MEASUREMENT_TYPE::HM )
    {
      setHOT_METAL(SAMPLE_COUNTER);
    }
    if ( MEASUREMENT_TYPE == DEF_GC_MEASUREMENT_TYPE::Hydris )
    {
      setHYDROGEN(SAMPLE_COUNTER);
    }
    if ( MEASUREMENT_TYPE == DEF_GC_MEASUREMENT_TYPE::Slag )
    {
      setSLAG(SAMPLE_COUNTER);
    }
    if ( MEASUREMENT_TYPE == DEF_GC_MEASUREMENT_TYPE::Steel )
    {
      setSTEEL(SAMPLE_COUNTER);
    }
    if ( MEASUREMENT_TYPE == DEF_GC_MEASUREMENT_TYPE::Temp )
    {
      setTEMP(SAMPLE_COUNTER);
    }

    setREVTIME(CDateTime());

    RetValue = update();

    if (!RetValue)
      Error = getLastError();

    if (Commit)
    {
      if (RetValue)
        commit();
      else
        rollback();
    }
  }

  return RetValue;
}

bool CPD_SAMPLE_REF::updateSAMPLE_REF(long SAMPLE_REF, long SAMPLE_COUNTER, long MEASUREMENT_TYPE)
{
  bool RetValue = false;

  if ( SAMPLE_REF != CSMC_DBData::unspecLong && select ( SAMPLE_REF ) )
  {
    if ( MEASUREMENT_TYPE == DEF_GC_MEASUREMENT_TYPE::Celox )
    {
      setTEMP(SAMPLE_COUNTER);
      setCARBON(SAMPLE_COUNTER);
      setOXYGEN(SAMPLE_COUNTER);
      setALUMINIUM(SAMPLE_COUNTER);
    }
    if ( MEASUREMENT_TYPE == DEF_GC_MEASUREMENT_TYPE::Celox_Slag )
    {
      setCELOX_SLAG(SAMPLE_COUNTER);
    }
    if ( MEASUREMENT_TYPE == DEF_GC_MEASUREMENT_TYPE::HotHeel )
    {
      setTEMP(SAMPLE_COUNTER);
      setSTEEL(SAMPLE_COUNTER);
      setSLAG(SAMPLE_COUNTER);
    }
    if ( MEASUREMENT_TYPE == DEF_GC_MEASUREMENT_TYPE::HM )
    {
      setHOT_METAL(SAMPLE_COUNTER);
    }
    if ( MEASUREMENT_TYPE == DEF_GC_MEASUREMENT_TYPE::Hydris )
    {
      setHYDROGEN(SAMPLE_COUNTER);
    }
    if ( MEASUREMENT_TYPE == DEF_GC_MEASUREMENT_TYPE::Slag )
    {
      setSLAG(SAMPLE_COUNTER);
    }
    if ( MEASUREMENT_TYPE == DEF_GC_MEASUREMENT_TYPE::Steel )
    {
      setSTEEL(SAMPLE_COUNTER);
    }
    if ( MEASUREMENT_TYPE == DEF_GC_MEASUREMENT_TYPE::Temp )
    {
      setTEMP(SAMPLE_COUNTER);
    }

    setREVTIME(CDateTime());

    if ( CSMC_DBData::update() )
    {
      RetValue = true;
      commit();
    }
    else
    {
      rollback();
    }

  }

  return RetValue;
}

bool CPD_SAMPLE_REF::updateSampleHeatData(long SAMPLE_REF, const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long PLANTNO, cCBS_ODBC_DBError &Error)
{
  bool RetValue = true;

  if ( SAMPLE_REF != CSMC_DBData::unspecLong && select ( SAMPLE_REF ) )
  {
    RetValue = RetValue && m_pPD_SAMPLE->updateSampleHeatData(getSTEEL(1)      ,HEATID,TREATID,PLANT,PLANTNO,Error);
    RetValue = RetValue && m_pPD_SAMPLE->updateSampleHeatData(getSTEEL_CALC(1) ,HEATID,TREATID,PLANT,PLANTNO,Error);
    RetValue = RetValue && m_pPD_SAMPLE->updateSampleHeatData(getSLAG(1)       ,HEATID,TREATID,PLANT,PLANTNO,Error);
    RetValue = RetValue && m_pPD_SAMPLE->updateSampleHeatData(getSLAG_CALC(1)  ,HEATID,TREATID,PLANT,PLANTNO,Error);
    RetValue = RetValue && m_pPD_SAMPLE->updateSampleHeatData(getTEMP(1)       ,HEATID,TREATID,PLANT,PLANTNO,Error);
    RetValue = RetValue && m_pPD_SAMPLE->updateSampleHeatData(getTEMP_CALC(1)  ,HEATID,TREATID,PLANT,PLANTNO,Error);
    RetValue = RetValue && m_pPD_SAMPLE->updateSampleHeatData(getCARBON(1)     ,HEATID,TREATID,PLANT,PLANTNO,Error);
    RetValue = RetValue && m_pPD_SAMPLE->updateSampleHeatData(getOXYGEN(1)     ,HEATID,TREATID,PLANT,PLANTNO,Error);
    RetValue = RetValue && m_pPD_SAMPLE->updateSampleHeatData(getHYDROGEN(1)   ,HEATID,TREATID,PLANT,PLANTNO,Error);
    RetValue = RetValue && m_pPD_SAMPLE->updateSampleHeatData(getCELOX_SLAG(1) ,HEATID,TREATID,PLANT,PLANTNO,Error);
    RetValue = RetValue && m_pPD_SAMPLE->updateSampleHeatData(getALUMINIUM(1)  ,HEATID,TREATID,PLANT,PLANTNO,Error);
    RetValue = RetValue && m_pPD_SAMPLE->updateSampleHeatData(getEMF(1)        ,HEATID,TREATID,PLANT,PLANTNO,Error);
  }
  
  return RetValue;
}

bool CPD_SAMPLE_REF::updateSLAG_CALC(long SAMPLE_REF, long SAMPLE_COUNTER)
{
  bool RetValue = false;

  if ( SAMPLE_REF != CSMC_DBData::unspecLong && select ( SAMPLE_REF ) )
  {
    setSLAG_CALC(SAMPLE_COUNTER);

    setREVTIME(CDateTime());

    if ( update() )
    {
      RetValue = true;
      commit();
    }
    else
    {
      rollback();
    }
  }

  return RetValue;
}

bool CPD_SAMPLE_REF::updateSTEEL_CALC(long SAMPLE_REF, long SAMPLE_COUNTER)
{
  bool RetValue = false;

  if ( SAMPLE_REF != CSMC_DBData::unspecLong && select ( SAMPLE_REF ) )
  {
    setSTEEL_CALC(SAMPLE_COUNTER);

    setREVTIME(CDateTime());

    if ( update() )
    {
      RetValue = true;
      commit();
    }
    else
    {
      rollback();
    }
  }

  return RetValue;
}

bool CPD_SAMPLE_REF::updateTEMP_CALC(long SAMPLE_REF, long SAMPLE_COUNTER)
{
  bool RetValue = false;

  if ( SAMPLE_REF != CSMC_DBData::unspecLong && select ( SAMPLE_REF ) )
  {
    setTEMP_CALC(SAMPLE_COUNTER);

    setREVTIME(CDateTime());

    if ( update() )
    {
      RetValue = true;
      commit();
    }
    else
    {
      rollback();
    }
  }

  return RetValue;
}

bool CPD_SAMPLE_REF::writeSAMPLE_REF(long SAMPLE_REF, long SAMPLE_COUNTER, long MEASUREMENT_TYPE, bool Commit, cCBS_ODBC_DBError &Error)
{
  bool RetValue = false;

  if ( SAMPLE_REF != CSMC_DBData::unspecLong )
  {
    if ( MEASUREMENT_TYPE == DEF_GC_MEASUREMENT_TYPE::Celox )
    {
      setTEMP(SAMPLE_COUNTER);
      setCARBON(SAMPLE_COUNTER);
      setOXYGEN(SAMPLE_COUNTER);
      setALUMINIUM(SAMPLE_COUNTER);
    }
    else if ( MEASUREMENT_TYPE == DEF_GC_MEASUREMENT_TYPE::Celox_Slag )
    {
      setCELOX_SLAG(SAMPLE_COUNTER);
    }
    else if ( MEASUREMENT_TYPE == DEF_GC_MEASUREMENT_TYPE::HotHeel )
    {
      setTEMP(SAMPLE_COUNTER);
      setSTEEL(SAMPLE_COUNTER);
      setSLAG(SAMPLE_COUNTER);
    }
    else if ( MEASUREMENT_TYPE == DEF_GC_MEASUREMENT_TYPE::HM )
    {
      setHOT_METAL(SAMPLE_COUNTER);
    }
    else if ( MEASUREMENT_TYPE == DEF_GC_MEASUREMENT_TYPE::Hydris )
    {
    }
    else if ( MEASUREMENT_TYPE == DEF_GC_MEASUREMENT_TYPE::Slag )
    {
      setSLAG(SAMPLE_COUNTER);
    }
    else if ( MEASUREMENT_TYPE == DEF_GC_MEASUREMENT_TYPE::Steel )
    {
      setSTEEL(SAMPLE_COUNTER);
    }
    else if ( MEASUREMENT_TYPE == DEF_GC_MEASUREMENT_TYPE::Temp )
    {
      setTEMP(SAMPLE_COUNTER);
    }

    setREVTIME(CDateTime());

    if ( select(SAMPLE_REF) )
    {
      RetValue = update();
    }
    else
    {
      setSAMPLE_REF(SAMPLE_REF);

      RetValue = insert();
    }

    if (!RetValue)
      Error = getLastError();

    if (Commit)
    {
      if (RetValue)
        commit();
      else
        rollback();
    }
  }

  return RetValue;
}

bool CPD_SAMPLE_REF::writeSAMPLE_REF(long SAMPLE_REF, long SAMPLE_COUNTER, long MEASUREMENT_TYPE)
{
  log("++++++ CPD_SAMPLE_REF::writeSAMPLE_REF",3);

  bool RetValue = false;

  CDateTime Now;

  if ( SAMPLE_REF != CSMC_DBData::unspecLong )
  {
    if ( MEASUREMENT_TYPE == DEF_GC_MEASUREMENT_TYPE::Celox )
    {
      setTEMP(SAMPLE_COUNTER);
      setCARBON(SAMPLE_COUNTER);
      setOXYGEN(SAMPLE_COUNTER);
      setALUMINIUM(SAMPLE_COUNTER);
    }
    else if ( MEASUREMENT_TYPE == DEF_GC_MEASUREMENT_TYPE::Celox_Slag )
    {
      setCELOX_SLAG(SAMPLE_COUNTER);
    }
    else if ( MEASUREMENT_TYPE == DEF_GC_MEASUREMENT_TYPE::HotHeel )
    {
      setTEMP(SAMPLE_COUNTER);
      setSTEEL(SAMPLE_COUNTER);
      setSLAG(SAMPLE_COUNTER);
    }
    else if ( MEASUREMENT_TYPE == DEF_GC_MEASUREMENT_TYPE::HM )
    {
      setHOT_METAL(SAMPLE_COUNTER);
    }
    else if ( MEASUREMENT_TYPE == DEF_GC_MEASUREMENT_TYPE::Hydris )
    {
    }
    else if ( MEASUREMENT_TYPE == DEF_GC_MEASUREMENT_TYPE::Slag )
    {
      setSLAG(SAMPLE_COUNTER);
    }
    else if ( MEASUREMENT_TYPE == DEF_GC_MEASUREMENT_TYPE::Steel )
    {
      setSTEEL(SAMPLE_COUNTER);
    }
    else if ( MEASUREMENT_TYPE == DEF_GC_MEASUREMENT_TYPE::Temp )
    {
      setTEMP(SAMPLE_COUNTER);
    }

    setREVTIME(Now);

    if ( select(SAMPLE_REF) )
    {
      RetValue = update();
    }
    else
    {
      setSAMPLE_REF(SAMPLE_REF);

      RetValue = insert();
    }

    if ( RetValue )
    {
      commit();
    }
    else
    {
      cCBS_StdEventLogFrame *pEventLog = cCBS_StdEventLogFrameController::getInstance()->getpEventLog();
      sEventLogMessage sMessage = cCBS_StdEventLog::initMessage(__FILE__,__LINE__);
      pEventLog->EL_DBWriteError(sMessage,"", m_TableName.c_str(), "" );

      rollback();
    }
  }

  return RetValue;
}

bool CPD_SAMPLE_REF::evHMDAnalysis(const string &pHMId, const string &pTreatId, const string &pPlant,const string &pTYPE,long pMeasTypeNo, bool pCommit)
{
	std::stringstream sql;

	//update PD_SAMPLE_REF set  
	//temp = (select sample_counter from PD_SAMPLE where HM_ID = 'H00192' and TREATID = '001' and PLANT = 'HMD') 
	//where PD_SAMPLE_REF.sample_ref= (select PD_HOT_METAL.sample_ref from PD_HOT_METAL, PDH_HM_DATA  
	//where PDH_HM_DATA.hotmetal_counter= PD_HOT_METAL.hotmetal_counter 
	//and PDH_HM_DATA.HM_ID='H00192'  
	//and PDH_HM_DATA.TreatId ='001' 
	//and PDH_HM_DATA.Plant='HMD')
	sql << "update PD_SAMPLE_REF set "
		<< pTYPE << " = (select max(sample_counter) from PD_SAMPLE where HM_ID = '" <<  pHMId << "' and TREATID = '" << pTreatId  <<  "' and PLANT = '"  << pPlant  <<  "' and MEASTYPENO = " << pMeasTypeNo << ")"
		<< " where PD_SAMPLE_REF.sample_ref= (select PD_HOT_METAL.sample_ref from PD_HOT_METAL, PDH_HM_DATA "
		<< " where PDH_HM_DATA.hotmetal_counter= PD_HOT_METAL.hotmetal_counter "
		<< " and PDH_HM_DATA.HM_ID='" <<  pHMId << "'" 
		<< " and PDH_HM_DATA.TreatId ='" <<  pTreatId << "'"
		<< " and PDH_HM_DATA.Plant='" <<  pPlant << "')";
	
	bool result = executeSQL(sql.str());
	if (!result)
		//pError = getLastError();
	
	if (pCommit)
	{
		if (result)
			commit();
		else
			rollback();
	}

	return result;
}

