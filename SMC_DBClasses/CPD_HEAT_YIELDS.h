//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 

#if defined (_MSC_VER) && (_MSC_VER >= 1000)
#pragma once
#endif
#ifndef _INC_CPD_HEAT_YIELDS_INCLUDED
#define _INC_CPD_HEAT_YIELDS_INCLUDED

#include "CSMC_DBData.h"

class CGT_MAT_CHEM;
class CGT_MAT_EFF;
class CPD_HEAT_DATA_LIQADD;
class CPD_Actual_Res;
class CPD_SAMPLE;
class CPD_SAMPLE_REF;
class CPD_PHASE_RES;

class CPD_HEAT_YIELDS
: public CSMC_DBData
{

public:
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string HEATID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TREATID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PLANT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string ENAME;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string ELEMENTWEIGHTIN;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string ELEMENTWEIGHTOUT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string SPEC_CONS;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string ELEMENTYIELD;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string ELEMWEIGHTADDITIONS;

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPD_HEAT_YIELDS(cCBS_StdConnection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPD_HEAT_YIELDS(cCBS_Connection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPD_HEAT_YIELDS();

  //##DBClassCodeUtility ! DO NOT EDIT !
  ~CPD_HEAT_YIELDS();

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Internal heat identifier
  std::string getHEATID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setHEATID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Treatment identifier
  std::string getTREATID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTREATID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Plant identifier
  std::string getPLANT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPLANT(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Element or slag compound name
  std::string getENAME(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setENAME(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getELEMENTWEIGHTIN(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setELEMENTWEIGHTIN(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getELEMENTWEIGHTOUT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setELEMENTWEIGHTOUT(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##kg/Ton Final Steel
  double getSPEC_CONS(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSPEC_CONS(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Yield in %
  double getELEMENTYIELD(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setELEMENTYIELD(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getELEMWEIGHTADDITIONS(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setELEMWEIGHTADDITIONS(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  bool select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const std::string& ENAME);

  //## ----------------------------------END-GENERATED-CODE--------------------- 

  //## ----------------------------------YOUR-CODE------------------------------ 

  bool calculateYields(std::string& Heatid, std::string& Treatid, std::string& Plant);

  virtual void doOnConstruct();

  virtual void doOnDestruct();

  CGT_MAT_CHEM*         m_pGT_MAT_CHEM;
  CGT_MAT_EFF*          m_pGT_MAT_EFF;
  CPD_HEAT_DATA_LIQADD* m_pPD_HEAT_DATA_LIQADD;
  CPD_PHASE_RES*        m_pPD_PHASE_RES;
  CPD_SAMPLE*           m_pPD_SAMPLE;
  CPD_SAMPLE_REF*       m_pPD_SAMPLE_REF;
};

#endif /* _INC_CPD_HEAT_YIELDS_INCLUDED */
