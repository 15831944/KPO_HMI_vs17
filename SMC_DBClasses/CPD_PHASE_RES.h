//## Copyright (C) 2010 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 

#if defined (_MSC_VER) && (_MSC_VER >= 1000)
#pragma once
#endif
#ifndef _INC_CPD_PHASE_RES_INCLUDED
#define _INC_CPD_PHASE_RES_INCLUDED

#include "CSMC_DBData.h"

class CPD_PHASE_RES_ANL;

class CPD_PHASE_RES
: public CSMC_DBData
{

public:
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string HEATID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TREATID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PLANT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string RES_PHASENO;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string REVTIME;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string STEELMASS;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string SLAGMASS;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TEMP;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string DURUNTENDOFPHASE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string DATEUNTENDOFPHASE;

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPD_PHASE_RES(cCBS_StdConnection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPD_PHASE_RES(cCBS_Connection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPD_PHASE_RES();

  //##DBClassCodeUtility ! DO NOT EDIT !
  ~CPD_PHASE_RES();

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Internal heat identifier
  std::string getHEATID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setHEATID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Treatment identifier
  std::string getTREATID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTREATID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Plant identifier
  std::string getPLANT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPLANT(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Result Phase No for storing into the Result tables
  long getRES_PHASENO(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setRES_PHASENO(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Date and time of last revision
  CDateTime getREVTIME(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setREVTIME(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getSTEELMASS(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSTEELMASS(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getSLAGMASS(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSLAGMASS(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getTEMP(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTEMP(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Duration from Heat announcment until end of phase
  double getDURUNTENDOFPHASE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setDURUNTENDOFPHASE(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Calculated DATE of END of Phase
  CDateTime getDATEUNTENDOFPHASE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setDATEUNTENDOFPHASE(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  bool select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long RES_PHASENO);

  //## ----------------------------------END-GENERATED-CODE--------------------- 

  //## ----------------------------------YOUR-CODE------------------------------ 

  bool selectOrderedByDuration(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, bool ASC);

  bool selectOrderedByResPhaseNo(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, bool ASC);

  virtual void doOnConstruct();

  virtual void doOnDestruct();

  bool exists(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT);

  bool exists(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long Res_PhaseNo);

  bool write(const std::string& HeatID, const std::string& TreatID, const std::string& Plant, const seqPredRes &SeqPredRes, CDateTime HeatAnnounceTime, bool Commit);

  bool write(const std::string& HeatID, const std::string& TreatID, const std::string& Plant, const seqRHModelResult &SeqPredRes, CDateTime HeatAnnounceTime, bool Commit);

  // old method.. when not used delete it
  bool write(const std::string& HeatID, const std::string& TreatID, const std::string& Plant, long Res_PhaseNo, const sPredRes& PredRes, CDateTime HeatAnnounceTime);

  bool write(const std::string& HeatID, const std::string& TreatID, const std::string& Plant, long Res_PhaseNo, const sAODPredBlowRes& PredRes);

  bool write(const std::string& HeatID, const std::string& TreatID, const std::string& Plant, long Res_PhaseNo, const sBOFPredBlowRes& PredRes);

  // old method.. when not used delete it
  bool write(const std::string& HeatID, const std::string& TreatID, const std::string& Plant, const sRHModelResult& RHModelResult);

  bool writeActPhase(const std::string& HeatID, const std::string& TreatID, const std::string& Plant, const seqPredRes &SeqPredRes, CDateTime HeatAnnounceTime, bool Commit);

  CPD_PHASE_RES_ANL * m_PD_PHASE_RES_ANL;
};

#endif /* _INC_CPD_PHASE_RES_INCLUDED */
