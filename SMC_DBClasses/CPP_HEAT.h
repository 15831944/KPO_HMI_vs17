//## Copyright (C) 2010 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 

#if defined (_MSC_VER) && (_MSC_VER >= 1000)
#pragma once
#endif
#ifndef _INC_CPP_HEAT_INCLUDED
#define _INC_CPP_HEAT_INCLUDED

#include "CSMC_DBData.h"

class CPP_HEAT
: public CSMC_DBData
{

public:
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string HEATID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PRODORDERID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string ROUTECODE_PLAN;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string LADLETYPE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string LADLENO;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string CASTERSEQNO;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string NOHEATSEQ;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PRESET_HEATID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PLANNED;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string ON_REQUEST;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string REVTIME;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string USERCODE;

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPP_HEAT(cCBS_StdConnection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPP_HEAT(cCBS_Connection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPP_HEAT();

  //##DBClassCodeUtility ! DO NOT EDIT !
  ~CPP_HEAT();

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Internal heat identifier
  std::string getHEATID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setHEATID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Production oder identification
  std::string getPRODORDERID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPRODORDERID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Planned route code
  std::string getROUTECODE_PLAN(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setROUTECODE_PLAN(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Planned teeming ladle
  std::string getLADLETYPE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setLADLETYPE(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Unique ladle number
  long getLADLENO(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setLADLENO(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Caster sequence number
  long getCASTERSEQNO(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setCASTERSEQNO(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Heat in planned caster sequence
  long getNOHEATSEQ(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setNOHEATSEQ(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Customer HeatId is presetted by L3 and must not be considered by HeatId generation. 1 -> is presetted
  long getPRESET_HEATID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPRESET_HEATID(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Indicator for planned heats at melting unit. Used for generation of the HEATID_CUST_PLAN together with PRESETTING and gives the possibility to select all heats wich are in a pure planning state (The heat does not exist physically). Modified after heat announcement at the melting unit (1 -> 0). If the heat is cancelled at the melting unit the flag is set to '1' again and is considered again for generation of the HEATID_CUST_PLAN in the PP_HEAT_PLANT
  long getPLANNED(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPLANNED(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Manually (1) entered by operator if no schedule is available at the melting unit The entry is deleted in case of heat cancellation.
  long getON_REQUEST(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setON_REQUEST(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Date and time of last revision
  CDateTime getREVTIME(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setREVTIME(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##User Code if user change heat schedule
  std::string getUSERCODE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setUSERCODE(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  bool select(const std::string& HEATID);
  bool selectOrderBy(const std::string& HEATID, bool ASC = true);
	


  //## ----------------------------------END-GENERATED-CODE--------------------- 

  //## ----------------------------------YOUR-CODE------------------------------ 

  bool selectByREVTIME(const CDateTime& REVTIME, const std::string& Operator);

  bool selectOrder(const std::string& PRODORDERID);

  bool selectPlanned(long PLANNED);

  bool selectPlannedAndPreset(long PLANNED, long PRESET_HEATID);

  bool deleteRow(const std::string &HEATID, bool Commit, cCBS_ODBC_DBError &Error);

  bool doOrderChange(const std::string& PRODORDERID_1, const std::string& PRODORDERID_2, bool Commit, cCBS_ODBC_DBError& Error);

  bool exists(const std::string& HEATID);

  bool exists(const std::string& HEATID,  const std::string &PRODORDERID);

  std::vector<std::string> getHeatsByPlanningState(long PLANNED);

  std::vector<std::string> getHeatsByPlanningStateAndPreset(long PLANNED, long PRESET_HEATID);

  bool getNextHeatId(string &HEATID, cCBS_ODBC_DBError &Error);

  bool isPlanned(const std::string& HEATID);

  bool isPlannedOrder(const std::string& PRODORDERID);

  bool isPreset(const std::string& HEATID);

  bool setPlanned(const std::string& HEATID, const long pPlanned, bool Commit, cCBS_ODBC_DBError &Error);

  // to be backward compatible
  bool updateInsertPP(std::string &HEATID, const std::string &PRODORDERID, const std::string &ROUTECODE_PLAN, const long &CASTERSEQNO, const long &NOHEATSEQ, const std::string &USERCODE, bool Commit, cCBS_ODBC_DBError &Error);

  bool updateInsertPP(std::string &HEATID, const std::string &PRODORDERID, const std::string &ROUTECODE_PLAN, const long &CASTERSEQNO, const long &NOHEATSEQ, const std::string &USERCODE, long PRESET_HEATID, long PLANNED, long ON_REQUEST, const std::string& LADLETYPE, long LADLENO, bool Commit, cCBS_ODBC_DBError &Error);

};

#endif /* _INC_CPP_HEAT_INCLUDED */
