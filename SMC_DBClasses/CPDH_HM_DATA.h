//## Copyright (C) 2013 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 

#if defined (_MSC_VER) && (_MSC_VER >= 1000)
#pragma once
#endif
#ifndef _INC_CPDH_HM_DATA_INCLUDED
#define _INC_CPDH_HM_DATA_INCLUDED

#include "CSMC_DBData.h"

class CPDH_HM_DATA
: public CSMC_DBData

{

public:
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string HM_ID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TREATID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PLANT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string HOTMETAL_COUNTER;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string CAST_ID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string HEATID_CUST;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PRODORDERID_PLAN;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PRODORDERID_ACT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string STEELGRADECODE_PLAN;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string STEELGRADECODE_ACT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string HM_ANNOUNCE_ACT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TREATSTART_PLAN;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TREATSTART_MOD;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TREATSTART_ACT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TREATEND_PLAN;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TREATEND_MOD;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TREATEND_ACT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string HM_DEPARTURE_ACT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TREATEND_PREV;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string MAT_CODE_CARBIDE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string MAT_CODE_LIME;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string MAT_CODE_MG;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string SHIFT_CODE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string CREW_CODE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string USERCODE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string LADLE_FREEBOARD_BF;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string HM_WEIGHTSTART_MOD;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string HM_WEIGHT_END;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string SLAG_WEIGHT_START;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string SLAG_WEIGHT_START_OPER;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string SLAG_WEIGHT_END;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string DISCHARGE_TIME_ACT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string DISCHARGE_TIME_PLAN;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string HM_TEMP_START;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string AIM_S_GRADE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string AIM_S_OPER;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TEMP_INITIAL;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string HM_TEMP_END;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string HM_WEIGHT_START;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string CALC_MODE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TREAT_TYPE_OPER;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TREAT_TYPE_MODEL;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string INJECT_END_TIME;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string INJECT_START_TIME;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string REVTIME;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string COMMENTS;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string CREW_RESPONSIBILITY;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string HEAT_RESPONSIBILITY;
  //##DBClassCodeUtility ! DO NOT EDIT !
  CPDH_HM_DATA(cCBS_StdConnection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPDH_HM_DATA(cCBS_Connection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPDH_HM_DATA();

  //##DBClassCodeUtility ! DO NOT EDIT !
  ~CPDH_HM_DATA();

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getHM_ID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setHM_ID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getTREATID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTREATID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getPLANT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPLANT(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  long getHOTMETAL_COUNTER(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setHOTMETAL_COUNTER(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getCAST_ID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setCAST_ID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getHEATID_CUST(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setHEATID_CUST(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getPRODORDERID_PLAN(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPRODORDERID_PLAN(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getPRODORDERID_ACT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPRODORDERID_ACT(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getSTEELGRADECODE_PLAN(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSTEELGRADECODE_PLAN(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getSTEELGRADECODE_ACT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSTEELGRADECODE_ACT(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CDateTime getHM_ANNOUNCE_ACT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setHM_ANNOUNCE_ACT(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CDateTime getTREATSTART_PLAN(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTREATSTART_PLAN(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CDateTime getTREATSTART_MOD(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTREATSTART_MOD(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CDateTime getTREATSTART_ACT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTREATSTART_ACT(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CDateTime getTREATEND_PLAN(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTREATEND_PLAN(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CDateTime getTREATEND_MOD(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTREATEND_MOD(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CDateTime getTREATEND_ACT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTREATEND_ACT(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CDateTime getHM_DEPARTURE_ACT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setHM_DEPARTURE_ACT(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CDateTime getTREATEND_PREV(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTREATEND_PREV(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getMAT_CODE_CARBIDE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setMAT_CODE_CARBIDE(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getMAT_CODE_LIME(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setMAT_CODE_LIME(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getMAT_CODE_MG(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setMAT_CODE_MG(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getSHIFT_CODE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSHIFT_CODE(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getCREW_CODE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setCREW_CODE(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getUSERCODE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setUSERCODE(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  long getLADLE_FREEBOARD_BF(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setLADLE_FREEBOARD_BF(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getHM_WEIGHTSTART_MOD(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setHM_WEIGHTSTART_MOD(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getHM_WEIGHT_END(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setHM_WEIGHT_END(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getSLAG_WEIGHT_START(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSLAG_WEIGHT_START(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getSLAG_WEIGHT_START_OPER(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSLAG_WEIGHT_START_OPER(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getSLAG_WEIGHT_END(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSLAG_WEIGHT_END(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CDateTime getDISCHARGE_TIME_ACT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setDISCHARGE_TIME_ACT(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CDateTime getDISCHARGE_TIME_PLAN(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setDISCHARGE_TIME_PLAN(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getHM_TEMP_START(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setHM_TEMP_START(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getAIM_S_GRADE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setAIM_S_GRADE(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getAIM_S_OPER(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setAIM_S_OPER(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getTEMP_INITIAL(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTEMP_INITIAL(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getHM_TEMP_END(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setHM_TEMP_END(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getHM_WEIGHT_START(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setHM_WEIGHT_START(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  long getCALC_MODE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setCALC_MODE(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  long getTREAT_TYPE_OPER(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTREAT_TYPE_OPER(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  long getTREAT_TYPE_MODEL(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTREAT_TYPE_MODEL(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CDateTime getINJECT_END_TIME(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setINJECT_END_TIME(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CDateTime getINJECT_START_TIME(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setINJECT_START_TIME(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CDateTime getREVTIME(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setREVTIME(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getCOMMENTS(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setCOMMENTS(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getCREW_RESPONSIBILITY(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setCREW_RESPONSIBILITY(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Crew member (MEMBER_ID), reponsible for the heat, if required
  std::string getHEAT_RESPONSIBILITY(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setHEAT_RESPONSIBILITY(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  bool select(const std::string& HM_ID, const std::string& TREATID, const std::string& PLANT);

  //## ----------------------------------END-GENERATED-CODE--------------------- 

  //## ----------------------------------YOUR-CODE------------------------------ 

  bool doAnnouncement(const std::string& HM_ID, const std::string& TREATID, const std::string& PLANT, sDate &pTreatStartOper,sDate &pTreatEndOper, long HMCounter,const std::string& PRODORDERID, long LADLEFREEBOARD, double HMWEIGHT, double SLAGWEIGHT,double HMTEMP, double SAIM,long CALCMODE, long TREATTYPE, double SACT);

  bool doCancelHeat(const std::string& HM_ID, const std::string& TREATID, const std::string& PLANT);

  bool doHeatDeparture(const std::string& HM_ID, const std::string& TREATID, const std::string& PLANT, const std::string& TREATENDOPER, double HMWEIGHT, double SLAGWEIGHT,double HMTEMP);

  bool doHeatStart(const std::string& HM_ID, const std::string& TREATID, const std::string& PLANT, const std::string& TREATENDOPER);
  bool update_InjectStartTime(const string& pHMId, const string& pTreatId, const string& pPlant,bool pCommit);
  bool update_InjectEndTime(const string& pHMId, const string& pTreatId, const string& pPlant,bool pCommit);
	bool selectFinishedHeat(bool ASC /* = true*/);

};

#endif /* _INC_CPDH_HM_DATA_INCLUDED */
