//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CGC_GRAPH_GROUPS.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_GRAPH_GROUPS::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_GRAPH_GROUPS::DATAGROUPID("DATAGROUPID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_GRAPH_GROUPS::DATAGROUPNAME("DATAGROUPNAME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_GRAPH_GROUPS::USERGRAPH("USERGRAPH");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_GRAPH_GROUPS::PROFILEID("PROFILEID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_GRAPH_GROUPS::Y_AXIS_1_MIN("Y_AXIS_1_MIN");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_GRAPH_GROUPS::Y_AXIS_1_MAX("Y_AXIS_1_MAX");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_GRAPH_GROUPS::Y_AXIS_1_LOG("Y_AXIS_1_LOG");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_GRAPH_GROUPS::Y_AXIS_2_MIN("Y_AXIS_2_MIN");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_GRAPH_GROUPS::Y_AXIS_2_MAX("Y_AXIS_2_MAX");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_GRAPH_GROUPS::Y_AXIS_2_LOG("Y_AXIS_2_LOG");

//##DBClassCodeUtility ! DO NOT EDIT !
CGC_GRAPH_GROUPS::CGC_GRAPH_GROUPS(cCBS_StdConnection* Connection)
:CSMC_DBData("GC_GRAPH_GROUPS",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGC_GRAPH_GROUPS::CGC_GRAPH_GROUPS(cCBS_Connection* Connection)
:CSMC_DBData("GC_GRAPH_GROUPS",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGC_GRAPH_GROUPS::CGC_GRAPH_GROUPS()
:CSMC_DBData("GC_GRAPH_GROUPS")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGC_GRAPH_GROUPS::~CGC_GRAPH_GROUPS()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Plant identifier
std::string CGC_GRAPH_GROUPS::getPLANT(long Row)
{
  return getString(CGC_GRAPH_GROUPS::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_GRAPH_GROUPS::setPLANT(const std::string& value)
{
  setString(CGC_GRAPH_GROUPS::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Data group identification
long CGC_GRAPH_GROUPS::getDATAGROUPID(long Row)
{
  return getLong(CGC_GRAPH_GROUPS::DATAGROUPID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_GRAPH_GROUPS::setDATAGROUPID(long value)
{
  setLong(CGC_GRAPH_GROUPS::DATAGROUPID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Data group display name
std::string CGC_GRAPH_GROUPS::getDATAGROUPNAME(long Row)
{
  return getString(CGC_GRAPH_GROUPS::DATAGROUPNAME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_GRAPH_GROUPS::setDATAGROUPNAME(const std::string& value)
{
  setString(CGC_GRAPH_GROUPS::DATAGROUPNAME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##User graph flag
long CGC_GRAPH_GROUPS::getUSERGRAPH(long Row)
{
  return getLong(CGC_GRAPH_GROUPS::USERGRAPH, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_GRAPH_GROUPS::setUSERGRAPH(long value)
{
  setLong(CGC_GRAPH_GROUPS::USERGRAPH, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Owner Profile Id
long CGC_GRAPH_GROUPS::getPROFILEID(long Row)
{
  return getLong(CGC_GRAPH_GROUPS::PROFILEID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_GRAPH_GROUPS::setPROFILEID(long value)
{
  setLong(CGC_GRAPH_GROUPS::PROFILEID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Minimal value first y axis
double CGC_GRAPH_GROUPS::getY_AXIS_1_MIN(long Row)
{
  return getDouble(CGC_GRAPH_GROUPS::Y_AXIS_1_MIN, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_GRAPH_GROUPS::setY_AXIS_1_MIN(double value)
{
  setDouble(CGC_GRAPH_GROUPS::Y_AXIS_1_MIN, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Maximal value first y axis
double CGC_GRAPH_GROUPS::getY_AXIS_1_MAX(long Row)
{
  return getDouble(CGC_GRAPH_GROUPS::Y_AXIS_1_MAX, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_GRAPH_GROUPS::setY_AXIS_1_MAX(double value)
{
  setDouble(CGC_GRAPH_GROUPS::Y_AXIS_1_MAX, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Logarithmic scale flag first y axis. 0 - linear, 1 - logarithmic
long CGC_GRAPH_GROUPS::getY_AXIS_1_LOG(long Row)
{
  return getLong(CGC_GRAPH_GROUPS::Y_AXIS_1_LOG, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_GRAPH_GROUPS::setY_AXIS_1_LOG(long value)
{
  setLong(CGC_GRAPH_GROUPS::Y_AXIS_1_LOG, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Minimum value second y axis
double CGC_GRAPH_GROUPS::getY_AXIS_2_MIN(long Row)
{
  return getDouble(CGC_GRAPH_GROUPS::Y_AXIS_2_MIN, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_GRAPH_GROUPS::setY_AXIS_2_MIN(double value)
{
  setDouble(CGC_GRAPH_GROUPS::Y_AXIS_2_MIN, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Maximal value second y axis
double CGC_GRAPH_GROUPS::getY_AXIS_2_MAX(long Row)
{
  return getDouble(CGC_GRAPH_GROUPS::Y_AXIS_2_MAX, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_GRAPH_GROUPS::setY_AXIS_2_MAX(double value)
{
  setDouble(CGC_GRAPH_GROUPS::Y_AXIS_2_MAX, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Logarithmic scale flag second y axis. 0 - linear, 1 - logarithmic
long CGC_GRAPH_GROUPS::getY_AXIS_2_LOG(long Row)
{
  return getLong(CGC_GRAPH_GROUPS::Y_AXIS_2_LOG, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_GRAPH_GROUPS::setY_AXIS_2_LOG(long value)
{
  setLong(CGC_GRAPH_GROUPS::Y_AXIS_2_LOG, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CGC_GRAPH_GROUPS::select(const std::string& PLANT, long DATAGROUPID)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CGC_GRAPH_GROUPS::PLANT,PLANT);
  addWhereClause(CGC_GRAPH_GROUPS::DATAGROUPID,DATAGROUPID);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 


