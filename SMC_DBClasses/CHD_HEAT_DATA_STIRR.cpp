//## Copyright (C) 2011 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CPD_HEAT_DATA_STIRR.h"
#include "CHD_HEAT_DATA_STIRR.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_HEAT_DATA_STIRR::HEATID("HEATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_HEAT_DATA_STIRR::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_HEAT_DATA_STIRR::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_HEAT_DATA_STIRR::TREATMENTPOSITION("TREATMENTPOSITION");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_HEAT_DATA_STIRR::DEVICENAME("DEVICENAME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_HEAT_DATA_STIRR::IS_BYPASS("IS_BYPASS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_HEAT_DATA_STIRR::STIRRGASTYPE("STIRRGASTYPE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_HEAT_DATA_STIRR::STARTTIME("STARTTIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_HEAT_DATA_STIRR::ENDTIME("ENDTIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_HEAT_DATA_STIRR::CONS("CONS");

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_HEAT_DATA_STIRR::CHD_HEAT_DATA_STIRR(cCBS_StdConnection* Connection)
:CSMC_DBData("HD_HEAT_DATA_STIRR",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_HEAT_DATA_STIRR::CHD_HEAT_DATA_STIRR(cCBS_Connection* Connection)
:CSMC_DBData("HD_HEAT_DATA_STIRR",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_HEAT_DATA_STIRR::CHD_HEAT_DATA_STIRR()
:CSMC_DBData("HD_HEAT_DATA_STIRR")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_HEAT_DATA_STIRR::~CHD_HEAT_DATA_STIRR()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Internal heat identifier
std::string CHD_HEAT_DATA_STIRR::getHEATID(long Row)
{
  return getString(CHD_HEAT_DATA_STIRR::HEATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_HEAT_DATA_STIRR::setHEATID(const std::string& value)
{
  setString(CHD_HEAT_DATA_STIRR::HEATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Treatment identifier
std::string CHD_HEAT_DATA_STIRR::getTREATID(long Row)
{
  return getString(CHD_HEAT_DATA_STIRR::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_HEAT_DATA_STIRR::setTREATID(const std::string& value)
{
  setString(CHD_HEAT_DATA_STIRR::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Plant specifier
std::string CHD_HEAT_DATA_STIRR::getPLANT(long Row)
{
  return getString(CHD_HEAT_DATA_STIRR::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_HEAT_DATA_STIRR::setPLANT(const std::string& value)
{
  setString(CHD_HEAT_DATA_STIRR::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Identification of treatment position to handle heats at Twin-LF (1-> car 1, 2-> car 2) and melting units with tapping area (1-> furnace, 2-> TapLadle)
long CHD_HEAT_DATA_STIRR::getTREATMENTPOSITION(long Row)
{
  return getLong(CHD_HEAT_DATA_STIRR::TREATMENTPOSITION, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_HEAT_DATA_STIRR::setTREATMENTPOSITION(long value)
{
  setLong(CHD_HEAT_DATA_STIRR::TREATMENTPOSITION, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Device name, plug ore emergency lance
std::string CHD_HEAT_DATA_STIRR::getDEVICENAME(long Row)
{
  return getString(CHD_HEAT_DATA_STIRR::DEVICENAME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_HEAT_DATA_STIRR::setDEVICENAME(const std::string& value)
{
  setString(CHD_HEAT_DATA_STIRR::DEVICENAME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Flag for bypass stirring 0-> normal stirring, 1-> bypass stirring. During bypass stirring the consumption is not measured by device but estimated on the Level 1.
long CHD_HEAT_DATA_STIRR::getIS_BYPASS(long Row)
{
  return getLong(CHD_HEAT_DATA_STIRR::IS_BYPASS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_HEAT_DATA_STIRR::setIS_BYPASS(long value)
{
  setLong(CHD_HEAT_DATA_STIRR::IS_BYPASS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Values are e.g. N2, Ar
std::string CHD_HEAT_DATA_STIRR::getSTIRRGASTYPE(long Row)
{
  return getString(CHD_HEAT_DATA_STIRR::STIRRGASTYPE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_HEAT_DATA_STIRR::setSTIRRGASTYPE(const std::string& value)
{
  setString(CHD_HEAT_DATA_STIRR::STIRRGASTYPE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CHD_HEAT_DATA_STIRR::getSTARTTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHD_HEAT_DATA_STIRR::STARTTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_HEAT_DATA_STIRR::setSTARTTIME(const CDateTime& value)
{
 setString(CHD_HEAT_DATA_STIRR::STARTTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CHD_HEAT_DATA_STIRR::getENDTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHD_HEAT_DATA_STIRR::ENDTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_HEAT_DATA_STIRR::setENDTIME(const CDateTime& value)
{
 setString(CHD_HEAT_DATA_STIRR::ENDTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Total consumption stirring
double CHD_HEAT_DATA_STIRR::getCONS(long Row)
{
  return getDouble(CHD_HEAT_DATA_STIRR::CONS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_HEAT_DATA_STIRR::setCONS(double value)
{
  setDouble(CHD_HEAT_DATA_STIRR::CONS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CHD_HEAT_DATA_STIRR::select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long TREATMENTPOSITION, const std::string& DEVICENAME, long IS_BYPASS, const std::string& STIRRGASTYPE, const CDateTime& STARTTIME)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CHD_HEAT_DATA_STIRR::HEATID,HEATID);
  addWhereClause(CHD_HEAT_DATA_STIRR::TREATID,TREATID);
  addWhereClause(CHD_HEAT_DATA_STIRR::PLANT,PLANT);
  addWhereClause(CHD_HEAT_DATA_STIRR::TREATMENTPOSITION,TREATMENTPOSITION);
  addWhereClause(CHD_HEAT_DATA_STIRR::DEVICENAME,DEVICENAME);
  addWhereClause(CHD_HEAT_DATA_STIRR::IS_BYPASS,IS_BYPASS);
  addWhereClause(CHD_HEAT_DATA_STIRR::STIRRGASTYPE,STIRRGASTYPE);
  addWhereClause(CHD_HEAT_DATA_STIRR::STARTTIME,STARTTIME);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 
bool CHD_HEAT_DATA_STIRR::copy(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, bool Commit, cCBS_ODBC_DBError &Error)
{
	bool result = !exists(HEATID, TREATID, PLANT);
	//some data found -> delete them
	if (!result)
	{
		result = deleteRows();
		if (!result)
			setLastError(std::string("ERROR_DELETE_DATA"), 0, getActStatement());
	}

  // preparing setting for source table
  CPD_HEAT_DATA_STIRR PD_HEAT_DATA_STIRR(getpCBSConnection());
  PD_HEAT_DATA_STIRR.addWhereClause("HEATID"  ,HEATID);
  PD_HEAT_DATA_STIRR.addWhereClause("TREATID" ,TREATID);
  PD_HEAT_DATA_STIRR.addWhereClause("PLANT"   ,PLANT);

  result = result && copyByInsert(&PD_HEAT_DATA_STIRR);

  if (!result)
    Error = getLastError();

  if(Commit)
  {
    if (result)
      commit();
    else
      rollback();
  }

  return result;

}

bool CHD_HEAT_DATA_STIRR::exists(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT)
{
	cleanWhereStatement();

	m_Statement = "Select HEATID from " + m_TableName;

	addWhereClause("HEATID",HEATID);
	addWhereClause("TREATID",TREATID);
	addWhereClause("PLANT",PLANT);
   

  // do not use ROWNUM in "addWhereClause", ROWNUM is not a table column and where statement will be used for deletion at "deleteRows"
	m_Statement += getWhereStatement() + " AND ROWNUM = 1 ;";


	return CSMC_DBData::select();
}
