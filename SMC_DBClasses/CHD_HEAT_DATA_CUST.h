//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 

#if defined (_MSC_VER) && (_MSC_VER >= 1000)
#pragma once
#endif
#ifndef _INC_CHD_HEAT_DATA_CUST_INCLUDED
#define _INC_CHD_HEAT_DATA_CUST_INCLUDED

#include "CSMC_DBData.h"

class CPD_HEAT_DATA_CUST;

class CHD_HEAT_DATA_CUST
: public CSMC_DBData
{

public:
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string HEATID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TREATID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PLANT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string REVTIME;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string FREEBORD;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string LF_COOLING_WATER;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string LF_PLUG1_STATUS;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string LF_PLUG2_STATUS;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string LF_OPERATOR;

  //##DBClassCodeUtility ! DO NOT EDIT !
  CHD_HEAT_DATA_CUST(cCBS_StdConnection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CHD_HEAT_DATA_CUST(cCBS_Connection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CHD_HEAT_DATA_CUST();

  //##DBClassCodeUtility ! DO NOT EDIT !
  ~CHD_HEAT_DATA_CUST();

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getHEATID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setHEATID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getTREATID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTREATID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getPLANT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPLANT(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Date and time of last revision
  CDateTime getREVTIME(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setREVTIME(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Freeboard of ladle
  double getFREEBORD(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setFREEBORD(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Total cooling water in m3
  double getLF_COOLING_WATER(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setLF_COOLING_WATER(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Plug status as from confirmation
  std::string getLF_PLUG1_STATUS(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setLF_PLUG1_STATUS(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Plug status as from confirmation
  std::string getLF_PLUG2_STATUS(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setLF_PLUG2_STATUS(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Name of operator at LF
  std::string getLF_OPERATOR(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setLF_OPERATOR(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  bool select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT);

  //## ----------------------------------END-GENERATED-CODE--------------------- 

  //## ----------------------------------YOUR-CODE------------------------------ 

  bool copy(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, bool Commit, cCBS_ODBC_DBError &Error);

  bool exists(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT);

};

#endif /* _INC_CHD_HEAT_DATA_CUST_INCLUDED */
