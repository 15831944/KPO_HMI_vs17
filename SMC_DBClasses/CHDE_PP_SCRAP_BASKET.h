//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 

#if defined (_MSC_VER) && (_MSC_VER >= 1000)
#pragma once
#endif
#ifndef _INC_CHDE_PP_SCRAP_BASKET_INCLUDED
#define _INC_CHDE_PP_SCRAP_BASKET_INCLUDED

#include "CSMC_DBData.h"

class CHDE_PP_SCRAP_BASKET
: public CSMC_DBData
{

public:
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string HEATID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TREATID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PLANT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PRACNO;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TREATMODENO;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string LIQ_ADD_AMOUNT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PROCPHASE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PROCPHASENO;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string BASKET_SEQUENCE_NO;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string LOADINGSEQUENCE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string MAT_CODE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string MAT_WEIGHT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string DISPLAY_ORDER;

  //##DBClassCodeUtility ! DO NOT EDIT !
  CHDE_PP_SCRAP_BASKET(cCBS_StdConnection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CHDE_PP_SCRAP_BASKET(cCBS_Connection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CHDE_PP_SCRAP_BASKET();

  //##DBClassCodeUtility ! DO NOT EDIT !
  ~CHDE_PP_SCRAP_BASKET();

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getHEATID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setHEATID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getTREATID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTREATID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getPLANT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPLANT(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  long getPRACNO(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPRACNO(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  long getTREATMODENO(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTREATMODENO(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  long getLIQ_ADD_AMOUNT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setLIQ_ADD_AMOUNT(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getPROCPHASE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPROCPHASE(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  long getPROCPHASENO(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPROCPHASENO(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  long getBASKET_SEQUENCE_NO(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setBASKET_SEQUENCE_NO(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  long getLOADINGSEQUENCE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setLOADINGSEQUENCE(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getMAT_CODE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setMAT_CODE(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getMAT_WEIGHT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setMAT_WEIGHT(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  long getDISPLAY_ORDER(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setDISPLAY_ORDER(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  bool select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long PRACNO, long TREATMODENO, long LIQ_ADD_AMOUNT, const std::string& PROCPHASE, long PROCPHASENO, long BASKET_SEQUENCE_NO, long LOADINGSEQUENCE);

  //## ----------------------------------END-GENERATED-CODE--------------------- 

  //## ----------------------------------YOUR-CODE------------------------------ 

  bool copy(const std::string& HEATID,const std::string& TREATID,const std::string& PLANT,long PLANTNO,long PRACNO, long TREATMODENO, long LIQ_ADD_AMOUNT, bool Commit, cCBS_ODBC_DBError &Error);

  bool exists(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT);

};

#endif /* _INC_CHDE_PP_SCRAP_BASKET_INCLUDED */
