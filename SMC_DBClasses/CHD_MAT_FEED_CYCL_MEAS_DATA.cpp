//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CPD_MAT_FEED_CYCL_MEAS_DATA.h"
#include "CHD_MAT_FEED_CYCL_MEAS_DATA.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_MAT_FEED_CYCL_MEAS_DATA::HEATID("HEATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_MAT_FEED_CYCL_MEAS_DATA::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_MAT_FEED_CYCL_MEAS_DATA::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_MAT_FEED_CYCL_MEAS_DATA::MAT_CODE("MAT_CODE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_MAT_FEED_CYCL_MEAS_DATA::FEEDERNO("FEEDERNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_MAT_FEED_CYCL_MEAS_DATA::REVTIME("REVTIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_MAT_FEED_CYCL_MEAS_DATA::DURSINCEHEATANNOUNCE("DURSINCEHEATANNOUNCE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_MAT_FEED_CYCL_MEAS_DATA::FEEDINGRATE("FEEDINGRATE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_MAT_FEED_CYCL_MEAS_DATA::MATWEIGHT("MATWEIGHT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_MAT_FEED_CYCL_MEAS_DATA::ELECENERGY("ELECENERGY");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_MAT_FEED_CYCL_MEAS_DATA::O2_AMOUNT("O2_AMOUNT");

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_MAT_FEED_CYCL_MEAS_DATA::CHD_MAT_FEED_CYCL_MEAS_DATA(cCBS_StdConnection* Connection)
:CSMC_DBData("HD_MAT_FEED_CYCL_MEAS_DATA",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_MAT_FEED_CYCL_MEAS_DATA::CHD_MAT_FEED_CYCL_MEAS_DATA(cCBS_Connection* Connection)
:CSMC_DBData("HD_MAT_FEED_CYCL_MEAS_DATA",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_MAT_FEED_CYCL_MEAS_DATA::CHD_MAT_FEED_CYCL_MEAS_DATA()
:CSMC_DBData("HD_MAT_FEED_CYCL_MEAS_DATA")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_MAT_FEED_CYCL_MEAS_DATA::~CHD_MAT_FEED_CYCL_MEAS_DATA()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Internal heat identifier
std::string CHD_MAT_FEED_CYCL_MEAS_DATA::getHEATID(long Row)
{
  return getString(CHD_MAT_FEED_CYCL_MEAS_DATA::HEATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_MAT_FEED_CYCL_MEAS_DATA::setHEATID(const std::string& value)
{
  setString(CHD_MAT_FEED_CYCL_MEAS_DATA::HEATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Treatment identifier
std::string CHD_MAT_FEED_CYCL_MEAS_DATA::getTREATID(long Row)
{
  return getString(CHD_MAT_FEED_CYCL_MEAS_DATA::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_MAT_FEED_CYCL_MEAS_DATA::setTREATID(const std::string& value)
{
  setString(CHD_MAT_FEED_CYCL_MEAS_DATA::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Plant identifier
std::string CHD_MAT_FEED_CYCL_MEAS_DATA::getPLANT(long Row)
{
  return getString(CHD_MAT_FEED_CYCL_MEAS_DATA::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_MAT_FEED_CYCL_MEAS_DATA::setPLANT(const std::string& value)
{
  setString(CHD_MAT_FEED_CYCL_MEAS_DATA::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHD_MAT_FEED_CYCL_MEAS_DATA::getMAT_CODE(long Row)
{
  return getString(CHD_MAT_FEED_CYCL_MEAS_DATA::MAT_CODE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_MAT_FEED_CYCL_MEAS_DATA::setMAT_CODE(const std::string& value)
{
  setString(CHD_MAT_FEED_CYCL_MEAS_DATA::MAT_CODE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Feeder number
long CHD_MAT_FEED_CYCL_MEAS_DATA::getFEEDERNO(long Row)
{
  return getLong(CHD_MAT_FEED_CYCL_MEAS_DATA::FEEDERNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_MAT_FEED_CYCL_MEAS_DATA::setFEEDERNO(long value)
{
  setLong(CHD_MAT_FEED_CYCL_MEAS_DATA::FEEDERNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Date and time of last revision
CDateTime CHD_MAT_FEED_CYCL_MEAS_DATA::getREVTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHD_MAT_FEED_CYCL_MEAS_DATA::REVTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_MAT_FEED_CYCL_MEAS_DATA::setREVTIME(const CDateTime& value)
{
 setString(CHD_MAT_FEED_CYCL_MEAS_DATA::REVTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Duration since heat announcement
double CHD_MAT_FEED_CYCL_MEAS_DATA::getDURSINCEHEATANNOUNCE(long Row)
{
  return getDouble(CHD_MAT_FEED_CYCL_MEAS_DATA::DURSINCEHEATANNOUNCE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_MAT_FEED_CYCL_MEAS_DATA::setDURSINCEHEATANNOUNCE(double value)
{
  setDouble(CHD_MAT_FEED_CYCL_MEAS_DATA::DURSINCEHEATANNOUNCE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Absolute feeding rate in kg/min
double CHD_MAT_FEED_CYCL_MEAS_DATA::getFEEDINGRATE(long Row)
{
  return getDouble(CHD_MAT_FEED_CYCL_MEAS_DATA::FEEDINGRATE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_MAT_FEED_CYCL_MEAS_DATA::setFEEDINGRATE(double value)
{
  setDouble(CHD_MAT_FEED_CYCL_MEAS_DATA::FEEDINGRATE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Actual weight of charged material
double CHD_MAT_FEED_CYCL_MEAS_DATA::getMATWEIGHT(long Row)
{
  return getDouble(CHD_MAT_FEED_CYCL_MEAS_DATA::MATWEIGHT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_MAT_FEED_CYCL_MEAS_DATA::setMATWEIGHT(double value)
{
  setDouble(CHD_MAT_FEED_CYCL_MEAS_DATA::MATWEIGHT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Total electric energy consumption in case of electric heating, kWh
double CHD_MAT_FEED_CYCL_MEAS_DATA::getELECENERGY(long Row)
{
  return getDouble(CHD_MAT_FEED_CYCL_MEAS_DATA::ELECENERGY, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_MAT_FEED_CYCL_MEAS_DATA::setELECENERGY(double value)
{
  setDouble(CHD_MAT_FEED_CYCL_MEAS_DATA::ELECENERGY, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Metallurgical Nm3 since start of heat
double CHD_MAT_FEED_CYCL_MEAS_DATA::getO2_AMOUNT(long Row)
{
  return getDouble(CHD_MAT_FEED_CYCL_MEAS_DATA::O2_AMOUNT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_MAT_FEED_CYCL_MEAS_DATA::setO2_AMOUNT(double value)
{
  setDouble(CHD_MAT_FEED_CYCL_MEAS_DATA::O2_AMOUNT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CHD_MAT_FEED_CYCL_MEAS_DATA::select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const std::string& MAT_CODE, long FEEDERNO, const CDateTime& REVTIME)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CHD_MAT_FEED_CYCL_MEAS_DATA::HEATID,HEATID);
  addWhereClause(CHD_MAT_FEED_CYCL_MEAS_DATA::TREATID,TREATID);
  addWhereClause(CHD_MAT_FEED_CYCL_MEAS_DATA::PLANT,PLANT);
  addWhereClause(CHD_MAT_FEED_CYCL_MEAS_DATA::MAT_CODE,MAT_CODE);
  addWhereClause(CHD_MAT_FEED_CYCL_MEAS_DATA::FEEDERNO,FEEDERNO);
  addWhereClause(CHD_MAT_FEED_CYCL_MEAS_DATA::REVTIME,REVTIME);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CHD_MAT_FEED_CYCL_MEAS_DATA::copy(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long PLANTNO, bool Commit, cCBS_ODBC_DBError &Error)
{
	bool result = true;
	//some data found -> delete them
	if (exists(HEATID, TREATID, PLANT))
	{
		result = deleteRows();
		if (!result)
      setLastError(std::string("ERROR_DELETE_DATA"), 0, getActStatement());
	}

  // preparing setting for source table
  CPD_MAT_FEED_CYCL_MEAS_DATA PD_MAT_FEED_CYCL_MEAS_DATA(m_pCBS_StdConnection);
  PD_MAT_FEED_CYCL_MEAS_DATA.addWhereClause(CPD_MAT_FEED_CYCL_MEAS_DATA::HEATID,HEATID);
  PD_MAT_FEED_CYCL_MEAS_DATA.addWhereClause(CPD_MAT_FEED_CYCL_MEAS_DATA::TREATID,TREATID);
  PD_MAT_FEED_CYCL_MEAS_DATA.addWhereClause(CPD_MAT_FEED_CYCL_MEAS_DATA::PLANT,PLANT);

  result = result && copyByInsert(&PD_MAT_FEED_CYCL_MEAS_DATA);

	if (!result)
		Error = getLastError();

	if(Commit)
  {
		if (result)
			commit();
		else
			rollback();
  }

	return result;
}

bool CHD_MAT_FEED_CYCL_MEAS_DATA::exists(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT)
{
	cleanWhereStatement();

	m_Statement = "Select HEATID from " + m_TableName;

	addWhereClause(CHD_MAT_FEED_CYCL_MEAS_DATA::HEATID,HEATID);
	addWhereClause(CHD_MAT_FEED_CYCL_MEAS_DATA::TREATID,TREATID);
	addWhereClause(CHD_MAT_FEED_CYCL_MEAS_DATA::PLANT,PLANT);
   
  std::string sWhereStatement = getWhereStatement();
  //to avoid the exception like 'Select HEATID from PP_HEAT AND ROWNUM = 1 '
  if(sWhereStatement.length() > 0 ) 
  {
    // do not use ROWNUM in "addWhereClause", ROWNUM is not a table column and where statement will be used for deletion at "deleteRows"
    m_Statement += sWhereStatement + " AND ROWNUM = 1 ;";
  }
  else
  {
    return false;
  }

	return CSMC_DBData::select();
}


