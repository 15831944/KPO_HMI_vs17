//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CSMC_EventLogFrameController.h"
#include "CPD_ACTION.h"
#include "CHD_ACTION.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_ACTION::HEATID("HEATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_ACTION::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_ACTION::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_ACTION::ACTIONNO("ACTIONNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_ACTION::REVTIME("REVTIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_ACTION::DURSINCEHEATANNOUNCEMENT("DURSINCEHEATANNOUNCEMENT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_ACTION::O2_MOMENT("O2_MOMENT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_ACTION::N2_MOMENT("N2_MOMENT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_ACTION::AR_MOMENT("AR_MOMENT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_ACTION::DURSINCESTARTOFHEAT("DURSINCESTARTOFHEAT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_ACTION::ELECEGY("ELECEGY");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_ACTION::ACTIONNAME("ACTIONNAME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_ACTION::ACTIONUNIT("ACTIONUNIT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_ACTION::ACTIONVALUE("ACTIONVALUE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_ACTION::ACTIONSTATUS("ACTIONSTATUS");

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_ACTION::CHD_ACTION(cCBS_StdConnection* Connection)
:CSMC_DBData("HD_ACTION",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_ACTION::CHD_ACTION(cCBS_Connection* Connection)
:CSMC_DBData("HD_ACTION",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_ACTION::CHD_ACTION()
:CSMC_DBData("HD_ACTION")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_ACTION::~CHD_ACTION()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Internal heat identifier
std::string CHD_ACTION::getHEATID(long Row)
{
  return getString(CHD_ACTION::HEATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_ACTION::setHEATID(const std::string& value)
{
  setString(CHD_ACTION::HEATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Treatment identifier
std::string CHD_ACTION::getTREATID(long Row)
{
  return getString(CHD_ACTION::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_ACTION::setTREATID(const std::string& value)
{
  setString(CHD_ACTION::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Plant identifier
std::string CHD_ACTION::getPLANT(long Row)
{
  return getString(CHD_ACTION::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_ACTION::setPLANT(const std::string& value)
{
  setString(CHD_ACTION::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Unique action number
long CHD_ACTION::getACTIONNO(long Row)
{
  return getLong(CHD_ACTION::ACTIONNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_ACTION::setACTIONNO(long value)
{
  setLong(CHD_ACTION::ACTIONNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Date and time of last revision
CDateTime CHD_ACTION::getREVTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHD_ACTION::REVTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_ACTION::setREVTIME(const CDateTime& value)
{
 setString(CHD_ACTION::REVTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Duration since heat announcement
double CHD_ACTION::getDURSINCEHEATANNOUNCEMENT(long Row)
{
  return getDouble(CHD_ACTION::DURSINCEHEATANNOUNCEMENT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_ACTION::setDURSINCEHEATANNOUNCEMENT(double value)
{
  setDouble(CHD_ACTION::DURSINCEHEATANNOUNCEMENT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Metallurgical Nm3 since start of heat
double CHD_ACTION::getO2_MOMENT(long Row)
{
  return getDouble(CHD_ACTION::O2_MOMENT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_ACTION::setO2_MOMENT(double value)
{
  setDouble(CHD_ACTION::O2_MOMENT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Metallurgical Nm3 since start of heat
double CHD_ACTION::getN2_MOMENT(long Row)
{
  return getDouble(CHD_ACTION::N2_MOMENT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_ACTION::setN2_MOMENT(double value)
{
  setDouble(CHD_ACTION::N2_MOMENT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Argon consumption
double CHD_ACTION::getAR_MOMENT(long Row)
{
  return getDouble(CHD_ACTION::AR_MOMENT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_ACTION::setAR_MOMENT(double value)
{
  setDouble(CHD_ACTION::AR_MOMENT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Duration since start of heat
double CHD_ACTION::getDURSINCESTARTOFHEAT(long Row)
{
  return getDouble(CHD_ACTION::DURSINCESTARTOFHEAT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_ACTION::setDURSINCESTARTOFHEAT(double value)
{
  setDouble(CHD_ACTION::DURSINCESTARTOFHEAT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Total electric energy consumption when action occurs in case of electric heating, kWh
double CHD_ACTION::getELECEGY(long Row)
{
  return getDouble(CHD_ACTION::ELECEGY, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_ACTION::setELECEGY(double value)
{
  setDouble(CHD_ACTION::ELECEGY, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Action name
std::string CHD_ACTION::getACTIONNAME(long Row)
{
  return getString(CHD_ACTION::ACTIONNAME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_ACTION::setACTIONNAME(const std::string& value)
{
  setString(CHD_ACTION::ACTIONNAME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHD_ACTION::getACTIONUNIT(long Row)
{
  return getString(CHD_ACTION::ACTIONUNIT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_ACTION::setACTIONUNIT(const std::string& value)
{
  setString(CHD_ACTION::ACTIONUNIT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHD_ACTION::getACTIONVALUE(long Row)
{
  return getString(CHD_ACTION::ACTIONVALUE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_ACTION::setACTIONVALUE(const std::string& value)
{
  setString(CHD_ACTION::ACTIONVALUE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##0=Not Finished, 1=Finished
long CHD_ACTION::getACTIONSTATUS(long Row)
{
  return getLong(CHD_ACTION::ACTIONSTATUS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_ACTION::setACTIONSTATUS(long value)
{
  setLong(CHD_ACTION::ACTIONSTATUS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CHD_ACTION::select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long ACTIONNO, const CDateTime& REVTIME)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CHD_ACTION::HEATID,HEATID);
  addWhereClause(CHD_ACTION::TREATID,TREATID);
  addWhereClause(CHD_ACTION::PLANT,PLANT);
  addWhereClause(CHD_ACTION::ACTIONNO,ACTIONNO);
  addWhereClause(CHD_ACTION::REVTIME,REVTIME);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CHD_ACTION::copy(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, bool Commit, cCBS_ODBC_DBError &Error)
{
	bool result = !exists(HEATID, TREATID, PLANT);
	//some data found -> delete them
	if (!result)
	{
		result = deleteRows();
		if (!result)
			setLastError(std::string("ERROR_DELETE_DATA"), 0, getActStatement());
	}
	
  // preparing setting for source table
  CPD_ACTION PD_ACTION(m_pCBS_StdConnection);
  PD_ACTION.addWhereClause(CPD_ACTION::HEATID,HEATID);
  PD_ACTION.addWhereClause(CPD_ACTION::TREATID,TREATID);
  PD_ACTION.addWhereClause(CPD_ACTION::PLANT,PLANT);

  result = result && copyByInsert(&PD_ACTION);

	if (!result)
		Error = getLastError();

	if(Commit)
  {
		if (result)
			this->commit();
		else
			rollback();
  }

	return result;
}

bool CHD_ACTION::exists(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT)
{
	cleanWhereStatement();

	m_Statement = "Select HEATID from " + m_TableName;

	addWhereClause(CHD_ACTION::HEATID,HEATID);
	addWhereClause(CHD_ACTION::TREATID,TREATID);
	addWhereClause(CHD_ACTION::PLANT,PLANT);
   
  std::string sWhereStatement = getWhereStatement();
  //to avoid the exception like 'Select HEATID from PP_HEAT AND ROWNUM = 1 '
  if(sWhereStatement.length() > 0 ) 
  {
    // do not use ROWNUM in "addWhereClause", ROWNUM is not a table column and where statement will be used for deletion at "deleteRows"
    m_Statement += sWhereStatement + " AND ROWNUM = 1 ;";
  }
  else
  {
    return false;
  }

	return CSMC_DBData::select();
}


