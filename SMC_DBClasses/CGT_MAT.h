//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 

#if defined (_MSC_VER) && (_MSC_VER >= 1000)
#pragma once
#endif
#ifndef _INC_CGT_MAT_INCLUDED
#define _INC_CGT_MAT_INCLUDED

#include "CSMC_DBData.h"

class CGT_MAT
: public CSMC_DBData
{

public:
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string MAT_CODE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string DESCRIPTION;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string CHARGE_PRIORITY;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PRICE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string DENSITY;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string BULK_DENSITY;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string WIRE_DENSITY;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string ENTHALPY;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string SPEC_HEAT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string HOMOG;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string DISTRIB_STEEL_SLAG;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string FEED_SPEED;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string FEED_TEMP_FACT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string DESCR_C;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string MG_EQUIVALENT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string MULTIPLE_ADDITION;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string AVAIL;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string MINWEIGHT;

  //##DBClassCodeUtility ! DO NOT EDIT !
  CGT_MAT(cCBS_StdConnection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CGT_MAT(cCBS_Connection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CGT_MAT();

  //##DBClassCodeUtility ! DO NOT EDIT !
  ~CGT_MAT();

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Material code
  std::string getMAT_CODE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setMAT_CODE(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Description, length to be defined
  std::string getDESCRIPTION(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setDESCRIPTION(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##A lower value indicates a greater priority
  long getCHARGE_PRIORITY(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setCHARGE_PRIORITY(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Price
  double getPRICE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPRICE(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Eng.Unit : kg/m3, Density
  long getDENSITY(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setDENSITY(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Used for normal materials (kg/m3)
  long getBULK_DENSITY(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setBULK_DENSITY(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Used for wire materials (kg/m)
  double getWIRE_DENSITY(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setWIRE_DENSITY(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Eng.Unit : kWh/kg, Enthalpy at 1600 Ã‚Â°C
  double getENTHALPY(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setENTHALPY(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Eng.Unit : kWh/(kg*K), pecific heat
  double getSPEC_HEAT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSPEC_HEAT(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Homogenisation factor
  long getHOMOG(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setHOMOG(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Eng.Unit : %, Percent of material that will go into the steel
  double getDISTRIB_STEEL_SLAG(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setDISTRIB_STEEL_SLAG(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Eng.Unit : m/min, Feeding Speed for wire feeder
  double getFEED_SPEED(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setFEED_SPEED(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Temperature coefficient for feeding speed
  double getFEED_TEMP_FACT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setFEED_TEMP_FACT(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Description Customer
  std::string getDESCR_C(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setDESCR_C(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Value needed for HMD only. For the model to see, how Mg can be replaced.
  long getMG_EQUIVALENT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setMG_EQUIVALENT(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Flag if multiple addition is allowed or not. (1= allowed, 0= not allowed)
  long getMULTIPLE_ADDITION(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setMULTIPLE_ADDITION(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Indicates the genreal availability in the plant. 0,1. Availabilities in the individual bin systems are controlled by purpose codes.
  long getAVAIL(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setAVAIL(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##This MINWEIGHT indicates that the material should not be considered for a charging instruction if the model calculates less than this weight. See also MINWEIGTH in PD_MAT_AVAIL with is based on Level 1 information and indicates the minimum chargeable weight due to physical restrictions of the bin/weighing system. The maximum of these weigths is to be used.
  double getMINWEIGHT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setMINWEIGHT(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  bool select(const std::string& MAT_CODE);

  //## ----------------------------------END-GENERATED-CODE--------------------- 

  //## ----------------------------------YOUR-CODE------------------------------ 

  bool selectAvailable(const std::string& MAT_CODE);

  bool deleteRow(const std::string& MAT_CODE);

  std::string getMatDescrforMatCode(const std::string MAT_CODE);

  double getMinWeightOfMatCode(const std::string& MAT_CODE);

  bool updateInsertMat(const std::string &MAT_CODE, const std::string &DESCRIPTION, long CHARGE_PRIORITY, double PRICE, 
                       long DENSITY, long BULK_DENSITY, double WIRE_DENSITY, double ENTHALPY, double SPEC_HEAT, 
                       long HOMOG, double DISTRIB_STEEL_SLAG, 
                       double FEED_SPEED, double FEED_TEMP_FACT, const std::string& DESCR_C, long MG_EQUIVALENT, 
                       long MULTIPLE_ADDITION, long AVAIL, double MINWEIGHT, bool Commit, cCBS_ODBC_DBError &Error);

};

#endif /* _INC_CGT_MAT_INCLUDED */
