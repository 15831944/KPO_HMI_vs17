//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 

#if defined (_MSC_VER) && (_MSC_VER >= 1000)
#pragma once
#endif
#ifndef _INC_CGTE_PP_STIRR_SPEC_INCLUDED
#define _INC_CGTE_PP_STIRR_SPEC_INCLUDED

#include "CSMC_DBData.h"

class CGTE_PP_STIRR_SPEC
: public CSMC_DBData
{

public:
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PLANT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PLANTNO;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PRACNO;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TREATMODENO;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string LIQ_ADD_AMOUNT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PRACPHASE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string STEPNO;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string SPECEGY;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string ELEC_ENERGY;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string STIRRFLOW;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string STIRRGASTYPE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string DISPLAY_ORDER;

  //##DBClassCodeUtility ! DO NOT EDIT !
  CGTE_PP_STIRR_SPEC(cCBS_StdConnection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CGTE_PP_STIRR_SPEC(cCBS_Connection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CGTE_PP_STIRR_SPEC();

  //##DBClassCodeUtility ! DO NOT EDIT !
  ~CGTE_PP_STIRR_SPEC();

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getPLANT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPLANT(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  long getPLANTNO(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPLANTNO(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  long getPRACNO(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPRACNO(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  long getTREATMODENO(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTREATMODENO(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  long getLIQ_ADD_AMOUNT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setLIQ_ADD_AMOUNT(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getPRACPHASE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPRACPHASE(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  long getSTEPNO(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSTEPNO(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getSPECEGY(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSPECEGY(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  long getELEC_ENERGY(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setELEC_ENERGY(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getSTIRRFLOW(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSTIRRFLOW(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getSTIRRGASTYPE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSTIRRGASTYPE(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  long getDISPLAY_ORDER(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setDISPLAY_ORDER(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  bool select(const std::string& PLANT, long PLANTNO, long PRACNO, long TREATMODENO, long LIQ_ADD_AMOUNT, const std::string& PRACPHASE, long STEPNO);

  //## ----------------------------------END-GENERATED-CODE--------------------- 

  //## ----------------------------------YOUR-CODE------------------------------ 

};

#endif /* _INC_CGTE_PP_STIRR_SPEC_INCLUDED */
