//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CSMC_EventLogFrameController.h"
#include "CPD_PHASE_RES_PLANT.h"
#include "CHD_PHASE_RES_PLANT.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_PHASE_RES_PLANT::HEATID("HEATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_PHASE_RES_PLANT::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_PHASE_RES_PLANT::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_PHASE_RES_PLANT::RES_PHASENO("RES_PHASENO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_PHASE_RES_PLANT::RESULTVALNO("RESULTVALNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_PHASE_RES_PLANT::RESULTVALUE("RESULTVALUE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_PHASE_RES_PLANT::REVTIME("REVTIME");

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_PHASE_RES_PLANT::CHD_PHASE_RES_PLANT(cCBS_StdConnection* Connection)
:CSMC_DBData("HD_PHASE_RES_PLANT",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_PHASE_RES_PLANT::CHD_PHASE_RES_PLANT(cCBS_Connection* Connection)
:CSMC_DBData("HD_PHASE_RES_PLANT",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_PHASE_RES_PLANT::CHD_PHASE_RES_PLANT()
:CSMC_DBData("HD_PHASE_RES_PLANT")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_PHASE_RES_PLANT::~CHD_PHASE_RES_PLANT()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Internal heat identifier
std::string CHD_PHASE_RES_PLANT::getHEATID(long Row)
{
  return getString(CHD_PHASE_RES_PLANT::HEATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_PHASE_RES_PLANT::setHEATID(const std::string& value)
{
  setString(CHD_PHASE_RES_PLANT::HEATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Treatment identifier
std::string CHD_PHASE_RES_PLANT::getTREATID(long Row)
{
  return getString(CHD_PHASE_RES_PLANT::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_PHASE_RES_PLANT::setTREATID(const std::string& value)
{
  setString(CHD_PHASE_RES_PLANT::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Plant identifier
std::string CHD_PHASE_RES_PLANT::getPLANT(long Row)
{
  return getString(CHD_PHASE_RES_PLANT::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_PHASE_RES_PLANT::setPLANT(const std::string& value)
{
  setString(CHD_PHASE_RES_PLANT::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Result Phase No for storing into the Result tables
long CHD_PHASE_RES_PLANT::getRES_PHASENO(long Row)
{
  return getLong(CHD_PHASE_RES_PLANT::RES_PHASENO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_PHASE_RES_PLANT::setRES_PHASENO(long value)
{
  setLong(CHD_PHASE_RES_PLANT::RES_PHASENO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHD_PHASE_RES_PLANT::getRESULTVALNO(long Row)
{
  return getLong(CHD_PHASE_RES_PLANT::RESULTVALNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_PHASE_RES_PLANT::setRESULTVALNO(long value)
{
  setLong(CHD_PHASE_RES_PLANT::RESULTVALNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHD_PHASE_RES_PLANT::getRESULTVALUE(long Row)
{
  return getDouble(CHD_PHASE_RES_PLANT::RESULTVALUE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_PHASE_RES_PLANT::setRESULTVALUE(double value)
{
  setDouble(CHD_PHASE_RES_PLANT::RESULTVALUE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Date and time of last revision
CDateTime CHD_PHASE_RES_PLANT::getREVTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHD_PHASE_RES_PLANT::REVTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_PHASE_RES_PLANT::setREVTIME(const CDateTime& value)
{
 setString(CHD_PHASE_RES_PLANT::REVTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CHD_PHASE_RES_PLANT::select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long RES_PHASENO, long RESULTVALNO)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CHD_PHASE_RES_PLANT::HEATID,HEATID);
  addWhereClause(CHD_PHASE_RES_PLANT::TREATID,TREATID);
  addWhereClause(CHD_PHASE_RES_PLANT::PLANT,PLANT);
  addWhereClause(CHD_PHASE_RES_PLANT::RES_PHASENO,RES_PHASENO);
  addWhereClause(CHD_PHASE_RES_PLANT::RESULTVALNO,RESULTVALNO);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CHD_PHASE_RES_PLANT::copy(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, bool Commit, cCBS_ODBC_DBError &Error)
{
	bool result = !exists(HEATID, TREATID, PLANT);
	//some data found -> delete them
	if (!result)
	{
		result = deleteRows();
		if (!result)
			setLastError(std::string("ERROR_DELETE_DATA"), 0, getActStatement());
	}

  // preparing setting for source table
  CPD_PHASE_RES_PLANT PD_PHASE_RES_PLANT(m_pCBS_StdConnection);
  PD_PHASE_RES_PLANT.addWhereClause(CPD_PHASE_RES_PLANT::HEATID,HEATID);
  PD_PHASE_RES_PLANT.addWhereClause(CPD_PHASE_RES_PLANT::TREATID,TREATID);
  PD_PHASE_RES_PLANT.addWhereClause(CPD_PHASE_RES_PLANT::PLANT,PLANT);

  result = result && copyByInsert(&PD_PHASE_RES_PLANT);

	if (!result)
		Error = getLastError();

	if(Commit)
	{
		if (result)
			this->commit();
		else
			rollback();
	}

	return result;
}

bool CHD_PHASE_RES_PLANT::exists(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT)
{
	cleanWhereStatement();

	m_Statement = "Select HEATID from " + m_TableName;

	addWhereClause(CHD_PHASE_RES_PLANT::HEATID,HEATID);
	addWhereClause(CHD_PHASE_RES_PLANT::TREATID,TREATID);
	addWhereClause(CHD_PHASE_RES_PLANT::PLANT,PLANT);
   
  std::string sWhereStatement = getWhereStatement();
  //to avoid the exception like 'Select HEATID from PP_HEAT AND ROWNUM = 1 '
  if(sWhereStatement.length() > 0 ) 
  {
    // do not use ROWNUM in "addWhereClause", ROWNUM is not a table column and where statement will be used for deletion at "deleteRows"
    m_Statement += sWhereStatement + " AND ROWNUM = 1 ;";
  }
  else
  {
    return false;
  }

	return CSMC_DBData::select();
}


