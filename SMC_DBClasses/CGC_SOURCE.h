//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 

#if defined (_MSC_VER) && (_MSC_VER >= 1000)
#pragma once
#endif
#ifndef _INC_CGC_SOURCE_INCLUDED
#define _INC_CGC_SOURCE_INCLUDED

#include "CSMC_DBData.h"

class CGC_SOURCE
: public CSMC_DBData
{

public:
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PLANT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string SOURCE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string SOURCE_NO;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PURP_SOURCE_AVAIL;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PURP_SOURCE_DEFAULT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string DISPLAY_ORDER;

  //##DBClassCodeUtility ! DO NOT EDIT !
  CGC_SOURCE(cCBS_StdConnection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CGC_SOURCE(cCBS_Connection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CGC_SOURCE();

  //##DBClassCodeUtility ! DO NOT EDIT !
  ~CGC_SOURCE();

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Plant identifier
  std::string getPLANT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPLANT(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##E.g. Bin, Hand, Wire
  std::string getSOURCE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSOURCE(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Source number according telegram definition
  long getSOURCE_NO(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSOURCE_NO(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Purpose name of materials which are available at the source
  std::string getPURP_SOURCE_AVAIL(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPURP_SOURCE_AVAIL(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Purpose name of materials which should be taken by default at the source.
  std::string getPURP_SOURCE_DEFAULT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPURP_SOURCE_DEFAULT(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Display order on the HMI
  long getDISPLAY_ORDER(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setDISPLAY_ORDER(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  bool select(const std::string& PLANT, const std::string& SOURCE);

  //## ----------------------------------END-GENERATED-CODE--------------------- 

  //## ----------------------------------YOUR-CODE------------------------------ 

  std::map < long, std::string> & getL1SourceNoList(const std::string & Plant, long PlantNo);

  std::map < std::string, long > &  getL2SourceNameList(const std::string &Plant, long PlantNo);

};

#endif /* _INC_CGC_SOURCE_INCLUDED */
