//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 

#if defined (_MSC_VER) && (_MSC_VER >= 1000)
#pragma once
#endif
#ifndef _INC_CHD_RECIPE_ENTRY_INCLUDED
#define _INC_CHD_RECIPE_ENTRY_INCLUDED

#include "CSMC_DBData.h"

class CHD_RECIPE_ENTRY
: public CSMC_DBData
{

public:
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string HEATID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TREATID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PLANT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string RECIPENAME;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string RECIPENO;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string SOURCE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string BATCHSTATUSNO;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string MAT_CODE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string MATWEIGHT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string CHARGINGPRIO;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string MATFEEDSPEED;

  //##DBClassCodeUtility ! DO NOT EDIT !
  CHD_RECIPE_ENTRY(cCBS_StdConnection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CHD_RECIPE_ENTRY(cCBS_Connection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CHD_RECIPE_ENTRY();

  //##DBClassCodeUtility ! DO NOT EDIT !
  ~CHD_RECIPE_ENTRY();

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Internal heat identifier
  std::string getHEATID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setHEATID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Treatment identifier
  std::string getTREATID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTREATID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Plant identifier
  std::string getPLANT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPLANT(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getRECIPENAME(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setRECIPENAME(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  long getRECIPENO(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setRECIPENO(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getSOURCE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSOURCE(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Batch Status number (Number in the L1/L2 Telgramm in the, Material handling report
  long getBATCHSTATUSNO(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setBATCHSTATUSNO(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Material code
  std::string getMAT_CODE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setMAT_CODE(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Material weight in kg.
  double getMATWEIGHT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setMATWEIGHT(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Charging Priority (Defined in Materila data)
  long getCHARGINGPRIO(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setCHARGINGPRIO(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Batch Material feed speed., BATCHMATFEEDSPEED=, TOTALBATCHWEIGHT/, Discharged Time Discharge Start Time, Only filled for Status 10!!!
  double getMATFEEDSPEED(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setMATFEEDSPEED(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  bool select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const std::string& RECIPENAME, long RECIPENO, const std::string& SOURCE, long BATCHSTATUSNO, const std::string& MAT_CODE);

  //## ----------------------------------END-GENERATED-CODE--------------------- 

  //## ----------------------------------YOUR-CODE------------------------------ 

  bool select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT);

  bool copy(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, bool Commit, cCBS_ODBC_DBError &Error);

  bool exists(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT);

};

#endif /* _INC_CHD_RECIPE_ENTRY_INCLUDED */
