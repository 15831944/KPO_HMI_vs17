//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CGC_PURPOSE_TYPE.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_PURPOSE_TYPE::PURP_TYPENO("PURP_TYPENO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_PURPOSE_TYPE::DESCR_SHORT("DESCR_SHORT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_PURPOSE_TYPE::EDIT_ACTIVATION("EDIT_ACTIVATION");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_PURPOSE_TYPE::MAT_MIN("MAT_MIN");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_PURPOSE_TYPE::MAT_MAX("MAT_MAX");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_PURPOSE_TYPE::DESCRIPTION_C("DESCRIPTION_C");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_PURPOSE_TYPE::DESCRIPTION("DESCRIPTION");

//##DBClassCodeUtility ! DO NOT EDIT !
CGC_PURPOSE_TYPE::CGC_PURPOSE_TYPE(cCBS_StdConnection* Connection)
:CSMC_DBData("GC_PURPOSE_TYPE",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGC_PURPOSE_TYPE::CGC_PURPOSE_TYPE(cCBS_Connection* Connection)
:CSMC_DBData("GC_PURPOSE_TYPE",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGC_PURPOSE_TYPE::CGC_PURPOSE_TYPE()
:CSMC_DBData("GC_PURPOSE_TYPE")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGC_PURPOSE_TYPE::~CGC_PURPOSE_TYPE()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Type of purpose, e.g. Material Class, Recipe
long CGC_PURPOSE_TYPE::getPURP_TYPENO(long Row)
{
  return getLong(CGC_PURPOSE_TYPE::PURP_TYPENO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_PURPOSE_TYPE::setPURP_TYPENO(long value)
{
  setLong(CGC_PURPOSE_TYPE::PURP_TYPENO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CGC_PURPOSE_TYPE::getDESCR_SHORT(long Row)
{
  return getString(CGC_PURPOSE_TYPE::DESCR_SHORT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_PURPOSE_TYPE::setDESCR_SHORT(const std::string& value)
{
  setString(CGC_PURPOSE_TYPE::DESCR_SHORT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##HMI: Defines if the purpose can be edited or deleted by the user. The related material can always be edited., 1- edit not possible, 2 - edit possible
long CGC_PURPOSE_TYPE::getEDIT_ACTIVATION(long Row)
{
  return getLong(CGC_PURPOSE_TYPE::EDIT_ACTIVATION, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_PURPOSE_TYPE::setEDIT_ACTIVATION(long value)
{
  setLong(CGC_PURPOSE_TYPE::EDIT_ACTIVATION, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Defines minimum number of material allowed to be assigned to a purpose
long CGC_PURPOSE_TYPE::getMAT_MIN(long Row)
{
  return getLong(CGC_PURPOSE_TYPE::MAT_MIN, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_PURPOSE_TYPE::setMAT_MIN(long value)
{
  setLong(CGC_PURPOSE_TYPE::MAT_MIN, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Defines maximum number of material allowed to be assigned to a purpose
long CGC_PURPOSE_TYPE::getMAT_MAX(long Row)
{
  return getLong(CGC_PURPOSE_TYPE::MAT_MAX, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_PURPOSE_TYPE::setMAT_MAX(long value)
{
  setLong(CGC_PURPOSE_TYPE::MAT_MAX, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CGC_PURPOSE_TYPE::getDESCRIPTION_C(long Row)
{
  return getString(CGC_PURPOSE_TYPE::DESCRIPTION_C, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_PURPOSE_TYPE::setDESCRIPTION_C(const std::string& value)
{
  setString(CGC_PURPOSE_TYPE::DESCRIPTION_C, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CGC_PURPOSE_TYPE::getDESCRIPTION(long Row)
{
  return getString(CGC_PURPOSE_TYPE::DESCRIPTION, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_PURPOSE_TYPE::setDESCRIPTION(const std::string& value)
{
  setString(CGC_PURPOSE_TYPE::DESCRIPTION, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CGC_PURPOSE_TYPE::select(long PURP_TYPENO)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CGC_PURPOSE_TYPE::PURP_TYPENO,PURP_TYPENO);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 


