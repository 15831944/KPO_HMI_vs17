//## Copyright (C) 2010 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 

#if defined (_MSC_VER) && (_MSC_VER >= 1000)
#pragma once
#endif
#ifndef _INC_CPDE_ACTUAL_RES_INCLUDED
#define _INC_CPDE_ACTUAL_RES_INCLUDED

#include "CSMC_DBData.h"

class CPDE_ACTUAL_RES
: public CSMC_DBData
{

public:
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string HEATID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TREATID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PLANT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string REVTIME;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string UPDATENO;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string ELEC_CONS;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string DURSINCEHEATANNOUNCEMENT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string DURSINCESTARTOFFHEAT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string STEELMASS;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string SLAGMASS;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TEMP;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string REACTORTAP;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string VOLTTAP;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string IMPCURVE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string CURPHASE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string CURELECSTEPNO;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string REMELECENERGY;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string COMPAVAIL_MAT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string COMPAVAIL_BURNER;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string COMPAVAIL_PROCESS;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string COMPAVAIL_INJECTION;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string COMPAVAIL_STIRRING;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string ELECTRODEPULLREQ;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string ELECTRODELOCKREQ;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string GASTYPE_BURNER_1;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string GASTYPE_BURNER_2;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string GASFLOW_BURNER_1;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string GASFLOW_BURNER_2;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string O2FLOW_BURNER_1;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string O2FLOW_BURNER_2;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string INJ_MATFEED_4;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string INJ_MATFEED_3;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string INJ_MATFEED_2;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string INJ_MATFEED_1;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string ACTBASKETDATAREQ;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string O2FLOW_DOORLANCE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string GASAMOUNTREM_LANCE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string INJ_MAT_CODE_DEV_1;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string INJ_MAT_CODE_DEV_2;

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPDE_ACTUAL_RES(cCBS_StdConnection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPDE_ACTUAL_RES(cCBS_Connection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPDE_ACTUAL_RES();

  //##DBClassCodeUtility ! DO NOT EDIT !
  ~CPDE_ACTUAL_RES();

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getHEATID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setHEATID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getTREATID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTREATID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getPLANT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPLANT(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CDateTime getREVTIME(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setREVTIME(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  long getUPDATENO(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setUPDATENO(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getELEC_CONS(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setELEC_CONS(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getDURSINCEHEATANNOUNCEMENT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setDURSINCEHEATANNOUNCEMENT(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getDURSINCESTARTOFFHEAT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setDURSINCESTARTOFFHEAT(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getSTEELMASS(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSTEELMASS(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getSLAGMASS(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSLAGMASS(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getTEMP(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTEMP(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  long getREACTORTAP(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setREACTORTAP(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  long getVOLTTAP(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setVOLTTAP(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  long getIMPCURVE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setIMPCURVE(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getCURPHASE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setCURPHASE(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  long getCURELECSTEPNO(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setCURELECSTEPNO(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getREMELECENERGY(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setREMELECENERGY(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  long getCOMPAVAIL_MAT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setCOMPAVAIL_MAT(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  long getCOMPAVAIL_BURNER(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setCOMPAVAIL_BURNER(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  long getCOMPAVAIL_PROCESS(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setCOMPAVAIL_PROCESS(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  long getCOMPAVAIL_INJECTION(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setCOMPAVAIL_INJECTION(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  long getCOMPAVAIL_STIRRING(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setCOMPAVAIL_STIRRING(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  long getELECTRODEPULLREQ(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setELECTRODEPULLREQ(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  long getELECTRODELOCKREQ(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setELECTRODELOCKREQ(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getGASTYPE_BURNER_1(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setGASTYPE_BURNER_1(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getGASTYPE_BURNER_2(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setGASTYPE_BURNER_2(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getGASFLOW_BURNER_1(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setGASFLOW_BURNER_1(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getGASFLOW_BURNER_2(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setGASFLOW_BURNER_2(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getO2FLOW_BURNER_1(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setO2FLOW_BURNER_1(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getO2FLOW_BURNER_2(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setO2FLOW_BURNER_2(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getINJ_MATFEED_4(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setINJ_MATFEED_4(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getINJ_MATFEED_3(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setINJ_MATFEED_3(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getINJ_MATFEED_2(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setINJ_MATFEED_2(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getINJ_MATFEED_1(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setINJ_MATFEED_1(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  long getACTBASKETDATAREQ(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setACTBASKETDATAREQ(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getO2FLOW_DOORLANCE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setO2FLOW_DOORLANCE(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getGASAMOUNTREM_LANCE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setGASAMOUNTREM_LANCE(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getINJ_MAT_CODE_DEV_1(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setINJ_MAT_CODE_DEV_1(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getINJ_MAT_CODE_DEV_2(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setINJ_MAT_CODE_DEV_2(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  bool select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const CDateTime& REVTIME);

  //## ----------------------------------END-GENERATED-CODE--------------------- 

  //## ----------------------------------YOUR-CODE------------------------------ 

  bool writeResults(const std::string &heatID, const std::string &treatID, const std::string &plant, double DurSinceHeatAnnounce, double DurSinceHeatStart, long ElecPullReq, long ElecLockReq, const seqPredRes &sqcPredRes, const seqComputerModes &seqCompModes,long VoltTap,long ImpCurve,double ElecCons,const std::string &currentPhase, long currentPhaseNo, const seqGasLanceData &sqGasLanceData, const seqInjectLanceData  &sqInjectLanceData);

};

#endif /* _INC_CPDE_ACTUAL_RES_INCLUDED */
