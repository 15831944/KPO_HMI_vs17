//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CPD_HEAT_DATA_MAT_FEED.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_HEAT_DATA_MAT_FEED::HEATID("HEATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_HEAT_DATA_MAT_FEED::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_HEAT_DATA_MAT_FEED::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_HEAT_DATA_MAT_FEED::FEEDERNO("FEEDERNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_HEAT_DATA_MAT_FEED::MAT_CODE("MAT_CODE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_HEAT_DATA_MAT_FEED::STARTTIME("STARTTIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_HEAT_DATA_MAT_FEED::ENDTIME("ENDTIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_HEAT_DATA_MAT_FEED::FEEDINGRATE("FEEDINGRATE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_HEAT_DATA_MAT_FEED::MAT_WEIGHT("MAT_WEIGHT");

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_HEAT_DATA_MAT_FEED::CPD_HEAT_DATA_MAT_FEED(cCBS_StdConnection* Connection)
:CSMC_DBData("PD_HEAT_DATA_MAT_FEED",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_HEAT_DATA_MAT_FEED::CPD_HEAT_DATA_MAT_FEED(cCBS_Connection* Connection)
:CSMC_DBData("PD_HEAT_DATA_MAT_FEED",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_HEAT_DATA_MAT_FEED::CPD_HEAT_DATA_MAT_FEED()
:CSMC_DBData("PD_HEAT_DATA_MAT_FEED")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_HEAT_DATA_MAT_FEED::~CPD_HEAT_DATA_MAT_FEED()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Internal heat identifier
std::string CPD_HEAT_DATA_MAT_FEED::getHEATID(long Row)
{
  return getString(CPD_HEAT_DATA_MAT_FEED::HEATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_HEAT_DATA_MAT_FEED::setHEATID(const std::string& value)
{
  setString(CPD_HEAT_DATA_MAT_FEED::HEATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Treatment identifier
std::string CPD_HEAT_DATA_MAT_FEED::getTREATID(long Row)
{
  return getString(CPD_HEAT_DATA_MAT_FEED::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_HEAT_DATA_MAT_FEED::setTREATID(const std::string& value)
{
  setString(CPD_HEAT_DATA_MAT_FEED::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Plant identifier
std::string CPD_HEAT_DATA_MAT_FEED::getPLANT(long Row)
{
  return getString(CPD_HEAT_DATA_MAT_FEED::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_HEAT_DATA_MAT_FEED::setPLANT(const std::string& value)
{
  setString(CPD_HEAT_DATA_MAT_FEED::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Basket number
long CPD_HEAT_DATA_MAT_FEED::getFEEDERNO(long Row)
{
  return getLong(CPD_HEAT_DATA_MAT_FEED::FEEDERNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_HEAT_DATA_MAT_FEED::setFEEDERNO(long value)
{
  setLong(CPD_HEAT_DATA_MAT_FEED::FEEDERNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPD_HEAT_DATA_MAT_FEED::getMAT_CODE(long Row)
{
  return getString(CPD_HEAT_DATA_MAT_FEED::MAT_CODE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_HEAT_DATA_MAT_FEED::setMAT_CODE(const std::string& value)
{
  setString(CPD_HEAT_DATA_MAT_FEED::MAT_CODE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CPD_HEAT_DATA_MAT_FEED::getSTARTTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CPD_HEAT_DATA_MAT_FEED::STARTTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_HEAT_DATA_MAT_FEED::setSTARTTIME(const CDateTime& value)
{
 setString(CPD_HEAT_DATA_MAT_FEED::STARTTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CPD_HEAT_DATA_MAT_FEED::getENDTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CPD_HEAT_DATA_MAT_FEED::ENDTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_HEAT_DATA_MAT_FEED::setENDTIME(const CDateTime& value)
{
 setString(CPD_HEAT_DATA_MAT_FEED::ENDTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Absolute feeding rate in kg/min
double CPD_HEAT_DATA_MAT_FEED::getFEEDINGRATE(long Row)
{
  return getDouble(CPD_HEAT_DATA_MAT_FEED::FEEDINGRATE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_HEAT_DATA_MAT_FEED::setFEEDINGRATE(double value)
{
  setDouble(CPD_HEAT_DATA_MAT_FEED::FEEDINGRATE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPD_HEAT_DATA_MAT_FEED::getMAT_WEIGHT(long Row)
{
  return getDouble(CPD_HEAT_DATA_MAT_FEED::MAT_WEIGHT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_HEAT_DATA_MAT_FEED::setMAT_WEIGHT(double value)
{
  setDouble(CPD_HEAT_DATA_MAT_FEED::MAT_WEIGHT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CPD_HEAT_DATA_MAT_FEED::select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long FEEDERNO, const std::string& MAT_CODE, const CDateTime& STARTTIME)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPD_HEAT_DATA_MAT_FEED::HEATID,HEATID);
  addWhereClause(CPD_HEAT_DATA_MAT_FEED::TREATID,TREATID);
  addWhereClause(CPD_HEAT_DATA_MAT_FEED::PLANT,PLANT);
  addWhereClause(CPD_HEAT_DATA_MAT_FEED::FEEDERNO,FEEDERNO);
  addWhereClause(CPD_HEAT_DATA_MAT_FEED::MAT_CODE,MAT_CODE);
  addWhereClause(CPD_HEAT_DATA_MAT_FEED::STARTTIME,STARTTIME);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

double CPD_HEAT_DATA_MAT_FEED::getDRIweight(const std::string& PLANT, const std::string& HEATID, const std::string& TREATID, const std::string& mat_code )
{
  double RetVal = CSMC_DBData::unspecDouble;

  if (getpCBSConnection())
  {
    try
    {
      std::stringstream WhereStatement;

      initStatements();

      m_Statement = "SELECT sum(MAT_WEIGHT) as COUNTER from PD_HEAT_DATA_MAT_FEED ";

      WhereStatement << " WHERE PLANT = '"<< PLANT << "'";		  
      WhereStatement << " and heatid = '"<<  HEATID << "'";
      WhereStatement << " and TREATID = '"<<  TREATID << "'";
	  WhereStatement << " and MAT_CODE = '"<< mat_code <<"'";

      m_pStatement = getpCBSConnection()->createPtStatement();
      m_Statement += WhereStatement.str();

      if (m_pStatement)
      {
        log(m_Statement,3);
        cCBS_ResultSet *ptRS1 = m_pStatement->executePtQuery(m_Statement);
        ptRS1->setTruncateChar(" ");

        ptRS1->beforeFirst();
        if (ptRS1->next())
        {	
          RetVal = ptRS1->getDouble("COUNTER");
        }
        getpCBSConnection()->freeStatement(m_pStatement);
      }
    }
    catch(cCBS_DBExc &e) 
    {
      setLastError(std::string("getDRIweight"), 0, m_Statement);

      doOnCBS_DBExc(e,"CPD_HEAT_DATA_MAT_FEED::getDRIweight");

      if (m_pStatement)
      {
        getpCBSConnection()->freeStatement(m_pStatement);
      }
    }
  }

  return RetVal;
}


