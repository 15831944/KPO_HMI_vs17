//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "cCBS_StdEventLogFrameController.h"
#include "CGC_LADLE_DEF.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_LADLE_DEF::LADLENO("LADLENO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_LADLE_DEF::LADLETYPE("LADLETYPE");

//##DBClassCodeUtility ! DO NOT EDIT !
CGC_LADLE_DEF::CGC_LADLE_DEF(cCBS_StdConnection* Connection)
:CSMC_DBData("GC_LADLE_DEF",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGC_LADLE_DEF::CGC_LADLE_DEF(cCBS_Connection* Connection)
:CSMC_DBData("GC_LADLE_DEF",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGC_LADLE_DEF::CGC_LADLE_DEF()
:CSMC_DBData("GC_LADLE_DEF")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGC_LADLE_DEF::~CGC_LADLE_DEF()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Unique ladle number
long CGC_LADLE_DEF::getLADLENO(long Row)
{
  return getLong(CGC_LADLE_DEF::LADLENO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_LADLE_DEF::setLADLENO(long value)
{
  setLong(CGC_LADLE_DEF::LADLENO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##e.g. Hot Metal -> H, Teeming -> T
std::string CGC_LADLE_DEF::getLADLETYPE(long Row)
{
  return getString(CGC_LADLE_DEF::LADLETYPE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_LADLE_DEF::setLADLETYPE(const std::string& value)
{
  setString(CGC_LADLE_DEF::LADLETYPE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CGC_LADLE_DEF::select(long LADLENO, const std::string& LADLETYPE)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CGC_LADLE_DEF::LADLENO,LADLENO);
  addWhereClause(CGC_LADLE_DEF::LADLETYPE,LADLETYPE);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CGC_LADLE_DEF::isValidLadle(long LADLENO, const std::string& LADLETYPE)
{
  bool RetValue = false;

  // invalid data may not be checked againt GC table -> we will proceed with programm
  // this will force setting database field to NULL in most cases
  
  if ( LADLENO   == CSMC_DBData::unspecLong && 
       LADLETYPE == CSMC_DBData::unspecString )
  {
    RetValue = true;
  }
  else
  {
    RetValue = select(LADLENO, LADLETYPE);

    if ( !RetValue )
    {
      std::stringstream Message;
      Message << "Undefined Ladle Detected " << LADLETYPE << LADLENO ;

		  cCBS_StdEventLogFrame *pEventLog = cCBS_StdEventLogFrameController::getInstance()->getpEventLog();
		  sEventLogMessage sMessage = cCBS_StdEventLogFrame::initMessage(__FILE__,__LINE__);
      pEventLog->EL_DBReadError(sMessage,"", m_TableName.c_str(), Message.str().c_str());
    }
  }

  return RetValue;
}


