//## Copyright (C) 2012 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CPDL_ACTUAL_RES_ANL.h"
#include "CHDL_ACTUAL_RES_ANL.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_ACTUAL_RES_ANL::HEATID("HEATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_ACTUAL_RES_ANL::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_ACTUAL_RES_ANL::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_ACTUAL_RES_ANL::REVTIME("REVTIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_ACTUAL_RES_ANL::ENAME("ENAME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_ACTUAL_RES_ANL::ANL("ANL");

//##DBClassCodeUtility ! DO NOT EDIT !
CHDL_ACTUAL_RES_ANL::CHDL_ACTUAL_RES_ANL(cCBS_StdConnection* Connection)
:CSMC_DBData("HDL_ACTUAL_RES_ANL",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHDL_ACTUAL_RES_ANL::CHDL_ACTUAL_RES_ANL(cCBS_Connection* Connection)
:CSMC_DBData("HDL_ACTUAL_RES_ANL",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHDL_ACTUAL_RES_ANL::CHDL_ACTUAL_RES_ANL()
:CSMC_DBData("HDL_ACTUAL_RES_ANL")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHDL_ACTUAL_RES_ANL::~CHDL_ACTUAL_RES_ANL()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDL_ACTUAL_RES_ANL::getHEATID(long Row)
{
  return getString(CHDL_ACTUAL_RES_ANL::HEATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_ACTUAL_RES_ANL::setHEATID(const std::string& value)
{
  setString(CHDL_ACTUAL_RES_ANL::HEATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDL_ACTUAL_RES_ANL::getTREATID(long Row)
{
  return getString(CHDL_ACTUAL_RES_ANL::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_ACTUAL_RES_ANL::setTREATID(const std::string& value)
{
  setString(CHDL_ACTUAL_RES_ANL::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDL_ACTUAL_RES_ANL::getPLANT(long Row)
{
  return getString(CHDL_ACTUAL_RES_ANL::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_ACTUAL_RES_ANL::setPLANT(const std::string& value)
{
  setString(CHDL_ACTUAL_RES_ANL::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CHDL_ACTUAL_RES_ANL::getREVTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHDL_ACTUAL_RES_ANL::REVTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_ACTUAL_RES_ANL::setREVTIME(const CDateTime& value)
{
 setString(CHDL_ACTUAL_RES_ANL::REVTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDL_ACTUAL_RES_ANL::getENAME(long Row)
{
  return getString(CHDL_ACTUAL_RES_ANL::ENAME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_ACTUAL_RES_ANL::setENAME(const std::string& value)
{
  setString(CHDL_ACTUAL_RES_ANL::ENAME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDL_ACTUAL_RES_ANL::getANL(long Row)
{
  return getDouble(CHDL_ACTUAL_RES_ANL::ANL, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_ACTUAL_RES_ANL::setANL(double value)
{
  setDouble(CHDL_ACTUAL_RES_ANL::ANL, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CHDL_ACTUAL_RES_ANL::select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const CDateTime& REVTIME, const std::string& ENAME)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CHDL_ACTUAL_RES_ANL::HEATID,HEATID);
  addWhereClause(CHDL_ACTUAL_RES_ANL::TREATID,TREATID);
  addWhereClause(CHDL_ACTUAL_RES_ANL::PLANT,PLANT);
  addWhereClause(CHDL_ACTUAL_RES_ANL::REVTIME,REVTIME);
  addWhereClause(CHDL_ACTUAL_RES_ANL::ENAME,ENAME);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CHDL_ACTUAL_RES_ANL::copy(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, bool Commit, cCBS_ODBC_DBError &Error)
{
	bool result = !exists(HEATID, TREATID, PLANT);
	//some data found -> delete them
	if (!result)
	{
		result = deleteRows();
		if (!result)
			setLastError(std::string("ERROR_DELETE_DATA"), 0, getActStatement());
	}
	
  // preparing setting for source table
  CPDL_ACTUAL_RES_ANL PDL_ACTUAL_RES_ANL(m_pCBS_StdConnection);
  PDL_ACTUAL_RES_ANL.addWhereClause(CPDL_ACTUAL_RES_ANL::HEATID,HEATID);
  PDL_ACTUAL_RES_ANL.addWhereClause(CPDL_ACTUAL_RES_ANL::TREATID,TREATID);
  PDL_ACTUAL_RES_ANL.addWhereClause(CPDL_ACTUAL_RES_ANL::PLANT,PLANT);

  result = result && copyByInsert(&PDL_ACTUAL_RES_ANL);

	if (!result)
		Error = getLastError();

	if(Commit)
  {
		if (result)
			this->commit();
		else
			rollback();
  }

	return result;
}

bool CHDL_ACTUAL_RES_ANL::exists(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT)
{
	cleanWhereStatement();

	m_Statement = "Select HEATID from " + m_TableName;

	addWhereClause(CHDL_ACTUAL_RES_ANL::HEATID,HEATID);
	addWhereClause(CHDL_ACTUAL_RES_ANL::TREATID,TREATID);
	addWhereClause(CHDL_ACTUAL_RES_ANL::PLANT,PLANT);
   
  std::string sWhereStatement = getWhereStatement();
  //to avoid the exception like 'Select HEATID from PP_HEAT AND ROWNUM = 1 '
  if(sWhereStatement.length() > 0 ) 
  {
    // do not use ROWNUM in "addWhereClause", ROWNUM is not a table column and where statement will be used for deletion at "deleteRows"
    m_Statement += sWhereStatement + " AND ROWNUM = 1 ;";
  }
  else
  {
    return false;
  }

	return CSMC_DBData::select();
}


