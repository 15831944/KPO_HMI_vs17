//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CGT_GRADE_SINGLE_AIMS.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_GRADE_SINGLE_AIMS::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_GRADE_SINGLE_AIMS::STEELGRADECODE("STEELGRADECODE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_GRADE_SINGLE_AIMS::AIMTEMP("AIMTEMP");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_GRADE_SINGLE_AIMS::AIMBASCY("AIMBASCY");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_GRADE_SINGLE_AIMS::INFO("INFO");

//##DBClassCodeUtility ! DO NOT EDIT !
CGT_GRADE_SINGLE_AIMS::CGT_GRADE_SINGLE_AIMS(cCBS_StdConnection* Connection)
:CSMC_DBData("GT_GRADE_SINGLE_AIMS",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGT_GRADE_SINGLE_AIMS::CGT_GRADE_SINGLE_AIMS(cCBS_Connection* Connection)
:CSMC_DBData("GT_GRADE_SINGLE_AIMS",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGT_GRADE_SINGLE_AIMS::CGT_GRADE_SINGLE_AIMS()
:CSMC_DBData("GT_GRADE_SINGLE_AIMS")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGT_GRADE_SINGLE_AIMS::~CGT_GRADE_SINGLE_AIMS()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Plant identifier
std::string CGT_GRADE_SINGLE_AIMS::getPLANT(long Row)
{
  return getString(CGT_GRADE_SINGLE_AIMS::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_GRADE_SINGLE_AIMS::setPLANT(const std::string& value)
{
  setString(CGT_GRADE_SINGLE_AIMS::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Steel grade code
std::string CGT_GRADE_SINGLE_AIMS::getSTEELGRADECODE(long Row)
{
  return getString(CGT_GRADE_SINGLE_AIMS::STEELGRADECODE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_GRADE_SINGLE_AIMS::setSTEELGRADECODE(const std::string& value)
{
  setString(CGT_GRADE_SINGLE_AIMS::STEELGRADECODE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Aim temperature at caster, 
double CGT_GRADE_SINGLE_AIMS::getAIMTEMP(long Row)
{
  return getDouble(CGT_GRADE_SINGLE_AIMS::AIMTEMP, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_GRADE_SINGLE_AIMS::setAIMTEMP(double value)
{
  setDouble(CGT_GRADE_SINGLE_AIMS::AIMTEMP, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Aim CaO/SiO2
double CGT_GRADE_SINGLE_AIMS::getAIMBASCY(long Row)
{
  return getDouble(CGT_GRADE_SINGLE_AIMS::AIMBASCY, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_GRADE_SINGLE_AIMS::setAIMBASCY(double value)
{
  setDouble(CGT_GRADE_SINGLE_AIMS::AIMBASCY, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Plant specific production information
std::string CGT_GRADE_SINGLE_AIMS::getINFO(long Row)
{
  return getString(CGT_GRADE_SINGLE_AIMS::INFO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_GRADE_SINGLE_AIMS::setINFO(const std::string& value)
{
  setString(CGT_GRADE_SINGLE_AIMS::INFO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CGT_GRADE_SINGLE_AIMS::select(const std::string& PLANT, const std::string& STEELGRADECODE)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CGT_GRADE_SINGLE_AIMS::PLANT,PLANT);
  addWhereClause(CGT_GRADE_SINGLE_AIMS::STEELGRADECODE,STEELGRADECODE);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CGT_GRADE_SINGLE_AIMS::deleteAims(const std::string& PLANT, const std::string& STEELGRADECODE )
{
  cleanWhereStatement();
  
  addWhereClause(CGT_GRADE_SINGLE_AIMS::PLANT, PLANT);
  addWhereClause(CGT_GRADE_SINGLE_AIMS::STEELGRADECODE, STEELGRADECODE);

  return deleteRows();
}

bool CGT_GRADE_SINGLE_AIMS::writeAims(const std::string& PLANT, const std::string& STEELGRADECODE, double AIMTEMP, double AIMBASCY, bool Commit)
{
  bool RetValue = false;

  setAIMTEMP(AIMTEMP);
  setAIMBASCY(AIMBASCY);

  if ( select(PLANT, STEELGRADECODE) )
  {
    RetValue = update();
  }
  else
  {
    setPLANT(PLANT);
    setSTEELGRADECODE(STEELGRADECODE);

    RetValue = insert();
  }

  if ( Commit )
  {
    if ( RetValue )
    {
      commit();
    }
    else
    {
      rollback();
    }
  }

  return RetValue;
}


