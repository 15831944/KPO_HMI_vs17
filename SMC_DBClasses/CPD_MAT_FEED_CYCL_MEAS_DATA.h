//## Copyright (C) 2010 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 

#if defined (_MSC_VER) && (_MSC_VER >= 1000)
#pragma once
#endif
#ifndef _INC_CPD_MAT_FEED_CYCL_MEAS_DATA_INCLUDED
#define _INC_CPD_MAT_FEED_CYCL_MEAS_DATA_INCLUDED

#include "CSMC_DBData.h"

class CPD_MAT_FEED_CYCL_MEAS_DATA
: public CSMC_DBData
{

public:
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string HEATID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TREATID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PLANT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string MAT_CODE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string FEEDERNO;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string REVTIME;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string DURSINCEHEATANNOUNCE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string FEEDINGRATE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string MATWEIGHT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string ELECENERGY;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string O2_AMOUNT;

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPD_MAT_FEED_CYCL_MEAS_DATA(cCBS_StdConnection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPD_MAT_FEED_CYCL_MEAS_DATA(cCBS_Connection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPD_MAT_FEED_CYCL_MEAS_DATA();

  //##DBClassCodeUtility ! DO NOT EDIT !
  ~CPD_MAT_FEED_CYCL_MEAS_DATA();

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Internal heat identifier
  std::string getHEATID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setHEATID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Treatment identifier
  std::string getTREATID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTREATID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Plant identifier
  std::string getPLANT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPLANT(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getMAT_CODE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setMAT_CODE(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Feeder number
  long getFEEDERNO(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setFEEDERNO(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Date and time of last revision
  CDateTime getREVTIME(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setREVTIME(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Duration since heat announcement
  double getDURSINCEHEATANNOUNCE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setDURSINCEHEATANNOUNCE(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Absolute feeding rate in kg/min
  double getFEEDINGRATE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setFEEDINGRATE(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Actual weight of charged material
  double getMATWEIGHT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setMATWEIGHT(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Total electric energy consumption in case of electric heating, kWh
  double getELECENERGY(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setELECENERGY(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Metallurgical Nm3 since start of heat
  double getO2_AMOUNT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setO2_AMOUNT(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  bool select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const std::string& MAT_CODE, long FEEDERNO, const CDateTime& REVTIME);

  //## ----------------------------------END-GENERATED-CODE--------------------- 

  //## ----------------------------------YOUR-CODE------------------------------ 

  bool writeBatch(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, seqBatch &SeqBatch, double MomentElec, double MomentO2, double DurSinceHeatAnnounce, bool Commit);

};

#endif /* _INC_CPD_MAT_FEED_CYCL_MEAS_DATA_INCLUDED */
