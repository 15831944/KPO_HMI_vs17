//## Copyright (C) 2010 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 

#if defined (_MSC_VER) && (_MSC_VER >= 1000)
#pragma once
#endif
#ifndef _INC_CGC_COMBI_RECIPE_ENTRY_INCLUDED
#define _INC_CGC_COMBI_RECIPE_ENTRY_INCLUDED

#include "CSMC_DBData.h"

class CGC_COMBI_RECIPE_ENTRY
: public CSMC_DBData
{

public:
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PLANT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string COMBINATION_NAME;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string RECIPENAME;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string SOURCE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string RESTRITYPE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string DESCR_PP;

  //##DBClassCodeUtility ! DO NOT EDIT !
  CGC_COMBI_RECIPE_ENTRY(cCBS_StdConnection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CGC_COMBI_RECIPE_ENTRY(cCBS_Connection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CGC_COMBI_RECIPE_ENTRY();

  //##DBClassCodeUtility ! DO NOT EDIT !
  ~CGC_COMBI_RECIPE_ENTRY();

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Plant identifier
  std::string getPLANT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPLANT(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Name of this combination
  std::string getCOMBINATION_NAME(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setCOMBINATION_NAME(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Recipes defined for this group.
  std::string getRECIPENAME(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setRECIPENAME(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Valid Sources of a Recipe., SOURCE = ALL means all SOURCES for the recipe
  std::string getSOURCE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSOURCE(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Restriction type according model interface., (eg. Relative, Absolute,...)
  std::string getRESTRITYPE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setRESTRITYPE(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Name of practice pointer or practice group
  std::string getDESCR_PP(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setDESCR_PP(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  bool select(const std::string& PLANT, const std::string& COMBINATION_NAME, const std::string& RECIPENAME, const std::string& SOURCE, const std::string& RESTRITYPE);

  //## ----------------------------------END-GENERATED-CODE--------------------- 

  //## ----------------------------------YOUR-CODE------------------------------ 

  bool selectByPlant(const std::string& PLANT);

};

#endif /* _INC_CGC_COMBI_RECIPE_ENTRY_INCLUDED */
