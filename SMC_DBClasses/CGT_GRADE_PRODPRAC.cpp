//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CGT_GRADE_PRODPRAC.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_GRADE_PRODPRAC::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_GRADE_PRODPRAC::PLANTNO("PLANTNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_GRADE_PRODPRAC::STEELGRADECODE("STEELGRADECODE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_GRADE_PRODPRAC::DESCR_PP("DESCR_PP");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_GRADE_PRODPRAC::HEATING_MODE_NO("HEATING_MODE_NO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_GRADE_PRODPRAC::PRODPRAC_ID("PRODPRAC_ID");

//##DBClassCodeUtility ! DO NOT EDIT !
CGT_GRADE_PRODPRAC::CGT_GRADE_PRODPRAC(cCBS_StdConnection* Connection)
:CSMC_DBData("GT_GRADE_PRODPRAC",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGT_GRADE_PRODPRAC::CGT_GRADE_PRODPRAC(cCBS_Connection* Connection)
:CSMC_DBData("GT_GRADE_PRODPRAC",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGT_GRADE_PRODPRAC::CGT_GRADE_PRODPRAC()
:CSMC_DBData("GT_GRADE_PRODPRAC")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGT_GRADE_PRODPRAC::~CGT_GRADE_PRODPRAC()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Plant identifier
std::string CGT_GRADE_PRODPRAC::getPLANT(long Row)
{
  return getString(CGT_GRADE_PRODPRAC::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_GRADE_PRODPRAC::setPLANT(const std::string& value)
{
  setString(CGT_GRADE_PRODPRAC::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Plant number
long CGT_GRADE_PRODPRAC::getPLANTNO(long Row)
{
  return getLong(CGT_GRADE_PRODPRAC::PLANTNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_GRADE_PRODPRAC::setPLANTNO(long value)
{
  setLong(CGT_GRADE_PRODPRAC::PLANTNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Steel grade code
std::string CGT_GRADE_PRODPRAC::getSTEELGRADECODE(long Row)
{
  return getString(CGT_GRADE_PRODPRAC::STEELGRADECODE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_GRADE_PRODPRAC::setSTEELGRADECODE(const std::string& value)
{
  setString(CGT_GRADE_PRODPRAC::STEELGRADECODE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Name of practice pointer or practice group
std::string CGT_GRADE_PRODPRAC::getDESCR_PP(long Row)
{
  return getString(CGT_GRADE_PRODPRAC::DESCR_PP, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_GRADE_PRODPRAC::setDESCR_PP(const std::string& value)
{
  setString(CGT_GRADE_PRODPRAC::DESCR_PP, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CGT_GRADE_PRODPRAC::getHEATING_MODE_NO(long Row)
{
  return getLong(CGT_GRADE_PRODPRAC::HEATING_MODE_NO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_GRADE_PRODPRAC::setHEATING_MODE_NO(long value)
{
  setLong(CGT_GRADE_PRODPRAC::HEATING_MODE_NO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Production Practice related to Production Description
long CGT_GRADE_PRODPRAC::getPRODPRAC_ID(long Row)
{
  return getLong(CGT_GRADE_PRODPRAC::PRODPRAC_ID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_GRADE_PRODPRAC::setPRODPRAC_ID(long value)
{
  setLong(CGT_GRADE_PRODPRAC::PRODPRAC_ID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CGT_GRADE_PRODPRAC::select(const std::string& PLANT, long PLANTNO, const std::string& STEELGRADECODE, const std::string& DESCR_PP, long HEATING_MODE_NO)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CGT_GRADE_PRODPRAC::PLANT,PLANT);
  addWhereClause(CGT_GRADE_PRODPRAC::PLANTNO,PLANTNO);
  addWhereClause(CGT_GRADE_PRODPRAC::STEELGRADECODE,STEELGRADECODE);
  addWhereClause(CGT_GRADE_PRODPRAC::DESCR_PP,DESCR_PP);
  addWhereClause(CGT_GRADE_PRODPRAC::HEATING_MODE_NO,HEATING_MODE_NO);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CGT_GRADE_PRODPRAC::selectByPlant(const std::string& PLANT, long PLANTNO, long HEATING_MODE_NO)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CGT_GRADE_PRODPRAC::PLANT,PLANT);
  addWhereClause(CGT_GRADE_PRODPRAC::PLANTNO,PLANTNO);
  addWhereClause(CGT_GRADE_PRODPRAC::HEATING_MODE_NO,HEATING_MODE_NO);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

bool CGT_GRADE_PRODPRAC::selectBySteelGrade(const std::string& STEELGRADECODE, const std::string& DESCR_PP, long HEATING_MODE_NO)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CGT_GRADE_PRODPRAC::STEELGRADECODE,STEELGRADECODE);
  addWhereClause(CGT_GRADE_PRODPRAC::DESCR_PP,DESCR_PP);
  addWhereClause(CGT_GRADE_PRODPRAC::HEATING_MODE_NO,HEATING_MODE_NO);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

bool CGT_GRADE_PRODPRAC::deleteProdPrac(const std::string& PLANT, long PLANTNO, const std::string& STEELGRADECODE, const std::string& DESCR_PP, long HEATING_MODE_NO)
{
  cleanWhereStatement();

  addWhereClause(CGT_GRADE_PRODPRAC::PLANT,PLANT);
  addWhereClause(CGT_GRADE_PRODPRAC::PLANTNO,PLANTNO);
  addWhereClause(CGT_GRADE_PRODPRAC::STEELGRADECODE,STEELGRADECODE);
  addWhereClause(CGT_GRADE_PRODPRAC::DESCR_PP,DESCR_PP);
  addWhereClause(CGT_GRADE_PRODPRAC::HEATING_MODE_NO,HEATING_MODE_NO);

  return deleteRows();
}

bool CGT_GRADE_PRODPRAC::writeProdPrac(const std::string& PLANT, long PLANTNO, const std::string& STEELGRADECODE, long HEATING_MODE_NO, std::map< std::string, long> PRODPRAC_ID_LIST , bool Commit)
{
  bool RetValue = false;

  std::map< std::string, long>::iterator it;

  for ( it = PRODPRAC_ID_LIST.begin(); it != PRODPRAC_ID_LIST.end(); ++it )
  {
    std::string DESCR_PP  = it->first;
    long PRODPRAC_ID      = it->second;

    RetValue = writeProdPrac(PLANT, PLANTNO, STEELGRADECODE, DESCR_PP, HEATING_MODE_NO, PRODPRAC_ID, Commit);

    if ( !RetValue )
    {
      break;
    }
  }

  return RetValue;

}

bool CGT_GRADE_PRODPRAC::writeProdPrac(const std::string& PLANT, long PLANTNO, const std::string& STEELGRADECODE, const std::string& DESCR_PP, long HEATING_MODE_NO, long PRODPRAC_ID, bool Commit)
{
  bool RetValue = false;

  setPRODPRAC_ID(PRODPRAC_ID);

  if ( select(PLANT, PLANTNO, STEELGRADECODE, DESCR_PP, HEATING_MODE_NO) )
  {
    RetValue = update();
  }
  else
  {
    setPLANT(PLANT);
    setPLANTNO(PLANTNO);
    setSTEELGRADECODE(STEELGRADECODE);
    setDESCR_PP(DESCR_PP);
    setHEATING_MODE_NO(HEATING_MODE_NO);

    RetValue = insert();
  }

  if ( Commit )
  {
    if ( RetValue )
    {
      commit();
    }
    else
    {
      rollback();
    }
  }

  return RetValue;
}


