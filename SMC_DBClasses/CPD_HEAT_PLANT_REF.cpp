//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CDataConversion.h"
#include "CGC_STATUS.h"
#include "CPD_HEAT_DATA.h"
#include "CPP_HEAT_PLANT.h"
#include "CPD_HEAT_REF.h"
#include "CPD_HEAT_PLANT_REF.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_HEAT_PLANT_REF::HEATID("HEATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_HEAT_PLANT_REF::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_HEAT_PLANT_REF::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_HEAT_PLANT_REF::PLANTNO("PLANTNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_HEAT_PLANT_REF::STATUSNO("STATUSNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_HEAT_PLANT_REF::HEATID_CUST("HEATID_CUST");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_HEAT_PLANT_REF::TREATID_CUST("TREATID_CUST");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_HEAT_PLANT_REF::EXPIRATIONDATE("EXPIRATIONDATE");

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_HEAT_PLANT_REF::CPD_HEAT_PLANT_REF(cCBS_StdConnection* Connection)
:CSMC_DBData("PD_HEAT_PLANT_REF",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_HEAT_PLANT_REF::CPD_HEAT_PLANT_REF(cCBS_Connection* Connection)
:CSMC_DBData("PD_HEAT_PLANT_REF",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_HEAT_PLANT_REF::CPD_HEAT_PLANT_REF()
:CSMC_DBData("PD_HEAT_PLANT_REF")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_HEAT_PLANT_REF::~CPD_HEAT_PLANT_REF()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Internal heat identifier
std::string CPD_HEAT_PLANT_REF::getHEATID(long Row)
{
  return getString(CPD_HEAT_PLANT_REF::HEATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_HEAT_PLANT_REF::setHEATID(const std::string& value)
{
  setString(CPD_HEAT_PLANT_REF::HEATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Treatment identifier
std::string CPD_HEAT_PLANT_REF::getTREATID(long Row)
{
  return getString(CPD_HEAT_PLANT_REF::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_HEAT_PLANT_REF::setTREATID(const std::string& value)
{
  setString(CPD_HEAT_PLANT_REF::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Plant identifier
std::string CPD_HEAT_PLANT_REF::getPLANT(long Row)
{
  return getString(CPD_HEAT_PLANT_REF::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_HEAT_PLANT_REF::setPLANT(const std::string& value)
{
  setString(CPD_HEAT_PLANT_REF::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Plant number
long CPD_HEAT_PLANT_REF::getPLANTNO(long Row)
{
  return getLong(CPD_HEAT_PLANT_REF::PLANTNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_HEAT_PLANT_REF::setPLANTNO(long value)
{
  setLong(CPD_HEAT_PLANT_REF::PLANTNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##All major and minor heat status relevant for the buttons in the HMI are maintained in this table
long CPD_HEAT_PLANT_REF::getSTATUSNO(long Row)
{
  return getLong(CPD_HEAT_PLANT_REF::STATUSNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_HEAT_PLANT_REF::setSTATUSNO(long value)
{
  setLong(CPD_HEAT_PLANT_REF::STATUSNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##The customer representation of the HeatID
std::string CPD_HEAT_PLANT_REF::getHEATID_CUST(long Row)
{
  return getString(CPD_HEAT_PLANT_REF::HEATID_CUST, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_HEAT_PLANT_REF::setHEATID_CUST(const std::string& value)
{
  setString(CPD_HEAT_PLANT_REF::HEATID_CUST, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Customer TreaID
std::string CPD_HEAT_PLANT_REF::getTREATID_CUST(long Row)
{
  return getString(CPD_HEAT_PLANT_REF::TREATID_CUST, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_HEAT_PLANT_REF::setTREATID_CUST(const std::string& value)
{
  setString(CPD_HEAT_PLANT_REF::TREATID_CUST, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CPD_HEAT_PLANT_REF::getEXPIRATIONDATE(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CPD_HEAT_PLANT_REF::EXPIRATIONDATE, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_HEAT_PLANT_REF::setEXPIRATIONDATE(const CDateTime& value)
{
 setString(CPD_HEAT_PLANT_REF::EXPIRATIONDATE, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CPD_HEAT_PLANT_REF::select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPD_HEAT_PLANT_REF::HEATID,HEATID);
  addWhereClause(CPD_HEAT_PLANT_REF::TREATID,TREATID);
  addWhereClause(CPD_HEAT_PLANT_REF::PLANT,PLANT);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CPD_HEAT_PLANT_REF::selectByCustHeatData(const std::string& HEATID_CUST, const std::string& TREATID_CUST, const std::string& PLANT, bool ASC /* = true */)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPD_HEAT_PLANT_REF::HEATID_CUST,HEATID_CUST);
  addWhereClause(CPD_HEAT_PLANT_REF::TREATID_CUST,TREATID_CUST);
  addWhereClause(CPD_HEAT_PLANT_REF::PLANT,PLANT);

  if (ASC)
  {
    m_Statement += getWhereStatement() + " ORDER BY HEATID_CUST, TREATID_CUST;";
  }
  else
  {
    m_Statement += getWhereStatement() + " ORDER BY HEATID_CUST DESC, TREATID_CUST DESC, EXPIRATIONDATE DESC;";
  }

  return CSMC_DBData::select();
}

bool CPD_HEAT_PLANT_REF::selectByEXPIRATIONDATE(const CDateTime& EXPIRATIONDATE, const std::string& Operator)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPD_HEAT_PLANT_REF::EXPIRATIONDATE, EXPIRATIONDATE, Operator );

  m_Statement += getWhereStatement() + " order by EXPIRATIONDATE desc;";

  return CSMC_DBData::select();
}

bool CPD_HEAT_PLANT_REF::selectByHEATID_CUST(const std::string& HEATID_CUST, const std::string& PLANT)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName ;

  addWhereClause(CPD_HEAT_PLANT_REF::HEATID_CUST, HEATID_CUST);  
  addWhereClause(CPD_HEAT_PLANT_REF::PLANT,PLANT);  
  
  m_Statement += getWhereStatement();
  m_Statement += " order by HEATID desc,TREATID desc;";

  return CSMC_DBData::select();
}

bool CPD_HEAT_PLANT_REF::selectDataByExpirationDate(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long PLANTNO, bool ASC /* = true*/)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPD_HEAT_PLANT_REF::HEATID,HEATID);
  addWhereClause(CPD_HEAT_PLANT_REF::TREATID,TREATID);
  addWhereClause(CPD_HEAT_PLANT_REF::PLANT,PLANT);
  addWhereClause(CPD_HEAT_PLANT_REF::PLANTNO,PLANTNO);

  if (ASC)
  {
    m_Statement += getWhereStatement() + " ORDER BY EXPIRATIONDATE;";
  }
  else
  {
    m_Statement += getWhereStatement() + " ORDER BY EXPIRATIONDATE DESC, HEATID DESC, TREATID DESC;";
  }

  return CSMC_DBData::select();
}

//Warning: not every DB knows decode and substr
bool CPD_HEAT_PLANT_REF::selectOrderedByCounter(long CounterStartPosition, long CounterEndPosition,
                                                long YearStartPosition, long YearEndPosition, const std::string& Year,
                                                long ShopStartPosition, long ShopEndPosition, const std::string& Shop,
                                                long PlantStartPosition, long PlantEndPosition, const std::string& Plant,
                                                long UnitStartPosition, long UnitEndPosition, const std::string& Unit,
                                                long DefaultStartPosition, long DefaultEndPosition, const std::string& Default,
                                                std::vector<std::string> HeatCounterPrefixes, const CDateTime Since, bool ASC)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPD_HEAT_PLANT_REF::EXPIRATIONDATE + " is NULL");

  if (Since != CSMC_DBData::unspecDate)
  {
    addWhereClause("exists (select 1 from PD_HEAT_REF where PD_HEAT_REF.HEATID = PD_HEAT_PLANT_REF.HEATID and PD_HEAT_REF.REVTIME > '" 
      + Since.toDBString() + "')");
  }

  if ( YearStartPosition < YearEndPosition
    && CSMC_DBData::unspecString != Year)
  {
    addWhereClause("substr(HEATID_CUST," + CDataConversion::LongToString(YearStartPosition) 
      + "," + CDataConversion::LongToString(YearEndPosition-YearStartPosition) + ") = '" + Year + "'");
  }

  if ( ShopStartPosition < ShopEndPosition
    && CSMC_DBData::unspecString != Shop)
  {
    addWhereClause("substr(HEATID_CUST," + CDataConversion::LongToString(ShopStartPosition) 
      + "," + CDataConversion::LongToString(ShopEndPosition-ShopStartPosition) + ") = '" + Shop + "'");
  }

  if ( PlantStartPosition < PlantEndPosition
    && CSMC_DBData::unspecString != Plant)
  {
    addWhereClause("substr(HEATID_CUST," + CDataConversion::LongToString(PlantStartPosition) 
      + "," + CDataConversion::LongToString(PlantEndPosition-PlantStartPosition) + ") = '" + Plant + "'");
  }

  if ( UnitStartPosition < UnitEndPosition
    && CSMC_DBData::unspecString != Unit)
  {
    addWhereClause("substr(HEATID_CUST," + CDataConversion::LongToString(UnitStartPosition) 
      + "," + CDataConversion::LongToString(UnitEndPosition-UnitStartPosition) + ") = '" + Unit + "'");
  }

  if ( DefaultStartPosition < DefaultEndPosition
    && CSMC_DBData::unspecString != Default)
  {
    addWhereClause("substr(HEATID_CUST," + CDataConversion::LongToString(DefaultStartPosition) 
      + "," + CDataConversion::LongToString(DefaultEndPosition-DefaultStartPosition) + ") = '" + Default + "'");
  }

  m_Statement += getWhereStatement();

  if ( CounterStartPosition < CounterEndPosition )
  {
    if (HeatCounterPrefixes.empty()) //numeric counter
    {
      m_Statement += " ORDER BY substr(HEATID_CUST,"; 
      m_Statement += CDataConversion::LongToString(CounterStartPosition); 
      m_Statement += ",";
      m_Statement += CDataConversion::LongToString(CounterEndPosition-CounterStartPosition);
      m_Statement += ") ";
    }//if (HeatCounterPrefixes.empty())
    else //assume no more than 99-10 prefixes
    {
      m_Statement += " ORDER BY decode(substr(HEATID_CUST,"; 
      m_Statement += CDataConversion::LongToString(CounterStartPosition); 
      m_Statement += ",";
      m_Statement += CDataConversion::LongToString(CounterEndPosition-CounterStartPosition);
      m_Statement += "), '";

      std::vector<std::string>::const_iterator iter = HeatCounterPrefixes.begin();
      std::vector<std::string>::const_iterator end = HeatCounterPrefixes.end();
  
      for (long i = 10; iter!=end; i++)
      {
        m_Statement += *iter;
        m_Statement += "', '";
        m_Statement += CDataConversion::LongToString(i);
        m_Statement += "', '";
        iter++;
      }

      m_Statement += "0'||substr(HEATID_CUST,";
      m_Statement += CDataConversion::LongToString(CounterStartPosition); 
      m_Statement += ",";
      m_Statement += CDataConversion::LongToString(CounterEndPosition-CounterStartPosition);
      m_Statement += ")) ";
    }//else of if (HeatCounterPrefixes.empty()) i.e. alphanumeric counter

    if (ASC)
      m_Statement += " ASC, TREATID_CUST ASC, HEATID ASC, TREATID ASC;";
    else
      m_Statement += " DESC, TREATID_CUST DESC, HEATID DESC, TREATID DESC;";
  }//if ( CounterStartPosition < CounterEndPosition )
  else
  {
    log("Counter length smaller one. No ordering will be done.",2);
    m_Statement += ";";
  }

  
  return CSMC_DBData::select();
}

bool CPD_HEAT_PLANT_REF::selectOrderedByMaxTreatID(const std::string& HEATID, const std::string& PLANT)
{
  cleanWhereStatement();
  m_Statement = "Select Max(TREATID) as TREATID from " + m_TableName ;

  addWhereClause(CPD_HEAT_PLANT_REF::HEATID, HEATID);  
  addWhereClause(CPD_HEAT_PLANT_REF::PLANT,PLANT);  

  m_Statement += getWhereStatement();
  m_Statement += " ORDER BY TREATID DESC;";
  return CSMC_DBData::select();
}

bool CPD_HEAT_PLANT_REF::selectValidCustData(const std::string& HEATID_CUST, const std::string& TREATID_CUST, const std::string& PLANT, bool ASC /* = true */)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPD_HEAT_PLANT_REF::HEATID_CUST,HEATID_CUST);
  addWhereClause(CPD_HEAT_PLANT_REF::TREATID_CUST,TREATID_CUST);
  addWhereClause(CPD_HEAT_PLANT_REF::PLANT,PLANT);
  addWhereClause(CPD_HEAT_PLANT_REF::EXPIRATIONDATE + " is NULL");

  if (ASC)
  {
    m_Statement += getWhereStatement() + " ORDER BY HEATID_CUST ASC, TREATID_CUST ASC;";
  }
  else
  {
    m_Statement += getWhereStatement() + " ORDER BY HEATID_CUST DESC, TREATID_CUST DESC;";
  }

  return CSMC_DBData::select();
}

bool CPD_HEAT_PLANT_REF::selectValidCustDataInProduction(const std::string& HEATID_CUST, const std::string& TREATID_CUST, const std::string& PLANT, long PLANTNO, bool ASC /* = true */)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName + ",PD_HEAT_DATA";

  addWhereClause(CPD_HEAT_PLANT_REF::HEATID_CUST, HEATID_CUST);
  addWhereClause(CPD_HEAT_PLANT_REF::TREATID_CUST, TREATID_CUST);
  addWhereClause(CPD_HEAT_PLANT_REF::PLANT, PLANT);
  addWhereClause(CPD_HEAT_PLANT_REF::PLANTNO, PLANTNO);
  addWhereClause(CPD_HEAT_PLANT_REF::EXPIRATIONDATE + " is NULL");

  addWhereClause(CPD_HEAT_DATA::HEATANNOUNCE_ACT + " is NOT NULL");

  addWhereClauseforJoin(CPD_HEAT_PLANT_REF::HEATID, "PD_HEAT_DATA", CPD_HEAT_DATA::HEATID);
  addWhereClauseforJoin(CPD_HEAT_PLANT_REF::TREATID,"PD_HEAT_DATA", CPD_HEAT_DATA::TREATID);
  addWhereClauseforJoin(CPD_HEAT_PLANT_REF::PLANT,  "PD_HEAT_DATA", CPD_HEAT_DATA::PLANT);

  m_Statement += getWhereStatement();

  if (ASC)
  {
    m_Statement += " order by PD_HEAT_DATA.HEATANNOUNCE_ACT ASC;";

  }
  else
  {
    m_Statement += " order by PD_HEAT_DATA.HEATANNOUNCE_ACT DESC;";
  }

  return CSMC_DBData::select();
}

bool CPD_HEAT_PLANT_REF::selectValidData(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, bool ASC /* = true */)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPD_HEAT_PLANT_REF::HEATID,HEATID);
  addWhereClause(CPD_HEAT_PLANT_REF::TREATID,TREATID);
  addWhereClause(CPD_HEAT_PLANT_REF::PLANT,PLANT);
  addWhereClause(CPD_HEAT_PLANT_REF::EXPIRATIONDATE + " is NULL");

  if (ASC)
  {
    m_Statement += getWhereStatement() + " ORDER BY HEATID ASC, TREATID ASC;";
  }
  else
  {
    m_Statement += getWhereStatement() + " ORDER BY HEATID DESC, TREATID DESC;";
  }

  return CSMC_DBData::select();
}

bool CPD_HEAT_PLANT_REF::doCancelHeat(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, bool Commit, cCBS_ODBC_DBError &Error)
{
  std::stringstream sql;
  
  bool result = false;
    
  if (select(HEATID, TREATID, PLANT))
  {
    setEXPIRATIONDATE(CDateTime());

    result = update();
  }
  else
  {
    setLastError("NO_PRODUCTION_DATA_FOUND", 0, getActStatement() );
  }

  if (!result)
	  Error = getLastError();

  if (Commit)
  {
	  if (result)
		  commit();
	  else
		  rollback();
  }

	return result;
}

void CPD_HEAT_PLANT_REF::doOnConstruct()
{
  m_pPP_HEAT_PLANT = new CPP_HEAT_PLANT( m_pCBS_StdConnection );
}

void CPD_HEAT_PLANT_REF::doOnDestruct()
{
  if ( m_pPP_HEAT_PLANT )
  {
    delete m_pPP_HEAT_PLANT;
    m_pPP_HEAT_PLANT = 0;
  }
}

bool CPD_HEAT_PLANT_REF::exists(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT)
{
	cleanWhereStatement();

	m_Statement = "Select HEATID from " + m_TableName;

	addWhereClause(CPD_HEAT_PLANT_REF::HEATID,HEATID);
	addWhereClause(CPD_HEAT_PLANT_REF::TREATID,TREATID);
	addWhereClause(CPD_HEAT_PLANT_REF::PLANT,PLANT);
   
  std::string sWhereStatement = getWhereStatement();
  //to avoid the exception like 'Select HEATID from PP_HEAT AND ROWNUM = 1 '
  if(sWhereStatement.length() > 0 ) 
  {
    // do not use ROWNUM in "addWhereClause", ROWNUM is not a table column and where statement will be used for deletion at "deleteRows"
    m_Statement += sWhereStatement + " AND ROWNUM = 1 ;";
  }
  else
  {
    return false;
  }

	return CSMC_DBData::select();
}

bool CPD_HEAT_PLANT_REF::exists(const std::string& HEATID_CUST)
{
	cleanWhereStatement();

	m_Statement = "Select HEATID_CUST from " + m_TableName;

	addWhereClause(CPD_HEAT_PLANT_REF::HEATID_CUST,HEATID_CUST);
   
  std::string sWhereStatement = getWhereStatement();
  //to avoid the exception like 'Select HEATID from PP_HEAT AND ROWNUM = 1 '
  if(sWhereStatement.length() > 0 ) 
  {
    // do not use ROWNUM in "addWhereClause", ROWNUM is not a table column and where statement will be used for deletion at "deleteRows"
    m_Statement += sWhereStatement + " AND ROWNUM = 1 ;";
  }
  else
  {
    return false;
  }

	return CSMC_DBData::select();
}

bool CPD_HEAT_PLANT_REF::exists(const std::string& HEATID_CUST, const CDateTime Since, bool ValidOnly)
{
  CPD_HEAT_REF PD_HEAT_REF(m_pCBS_StdConnection);

  std::vector<std::string> HeatsByREVTIME = PD_HEAT_REF.getHeatsByREVTIME(Since, ">=");

	m_Statement = "Select HEATID_CUST from " + m_TableName;

	addWhereClause(CPD_HEAT_PLANT_REF::HEATID_CUST,HEATID_CUST);
  addWhereClause(CPD_HEAT_PLANT_REF::HEATID, HeatsByREVTIME, "IN");
  
  if (ValidOnly)
  {
    addWhereClause(CPD_HEAT_PLANT_REF::EXPIRATIONDATE + " IS NULL");
  }

  // do not use ROWNUM in "addWhereClause", ROWNUM is not a table column and where statement will be used for deletion at "deleteRows"
	m_Statement += getWhereStatement() + " AND ROWNUM = 1 ;";

	return CSMC_DBData::select();
}

bool CPD_HEAT_PLANT_REF::getCustData(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, std::string& HEATID_CUST, std::string& TREATID_CUST)
{
	bool result = false;

  HEATID_CUST   = CSMC_DBData::unspecString;
  TREATID_CUST  = CSMC_DBData::unspecString;

  if ( select(HEATID, TREATID, PLANT) )
  {
    result        = true;
    HEATID_CUST   = getHEATID_CUST(1);
    TREATID_CUST  = getTREATID_CUST(1);
  }

	return result;
}

CDateTime CPD_HEAT_PLANT_REF::getFirstStartTimeByCustomerHeatID(const std::string& HEATID_CUST, const CDateTime Since, bool ASC)
{
  CDateTime ReturnValue = CSMC_DBData::unspecDate;

  cCBS_Statement *ptGetStmt = 0;
  cCBS_ResultSet *ptRS1 = 0;

  if (getpCBSConnection()) 
  {
    try
    {
      std::string Statement = "select nvl(TREATSTART_ACT,TREATSTART_MOD) as START_TIME from PD_HEAT_PLANT_REF h, PD_HEAT_DATA d where h.HEATID = d.HEATID";
      Statement += " and h.TREATID = d.TREATID and h.PLANT = d.PLANT and h.HEATID_CUST = '";
      Statement += HEATID_CUST;
      Statement += "' ";

      if (Since != CSMC_DBData::unspecDate)
      {
        Statement += " and exists (select 1 from PD_HEAT_REF where PD_HEAT_REF.HEATID = h.HEATID and PD_HEAT_REF.REVTIME > '" 
                  + Since.toDBString() + "')";
      }

      Statement += " order by 1 ";

      if (ASC)
        Statement += " ASC nulls last;";
      else
        Statement += " DESC nulls last;";

      ptGetStmt = getpCBSConnection()->createPtStatement();
      ptRS1 = ptGetStmt->executePtQuery(Statement);
      ptRS1->setTruncateChar(" ");
      ptRS1->beforeFirst();
      if ( ptRS1->next() )
      {
        ReturnValue.fromDBString(ptRS1->getString(std::string("START_TIME")));
      }
    }
    catch(...)
    {
      log("Unknown error while executing CPD_HEAT_PLANT_REF::getFirstStartTimeByCustomerHeatID.",1);
    }
  }//if (getpCBSConnection())

  if (ptGetStmt)
    getpCBSConnection()->freeStatement(ptGetStmt);

  return ReturnValue;
}

std::string CPD_HEAT_PLANT_REF::getLastProducedHeatIdCust(const std::string& PLANT, long PLANTNO)
{
  std::string LastHeatIdCust = CSMC_DBData::unspecString;

  if ( selectValidCustDataInProduction(CSMC_DBData::unspecString, CSMC_DBData::unspecString, PLANT, PLANTNO, false) )
  {
    LastHeatIdCust = getHEATID_CUST(1);
  }

  return LastHeatIdCust;
}

long CPD_HEAT_PLANT_REF::getStatusNo(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT)
{
  long StatusNo = CSMC_DBData::unspecLong;

  if ( select (HEATID, TREATID, PLANT) )
  {
    StatusNo = getSTATUSNO(1);
  }

  return StatusNo;
  
}

std::string CPD_HEAT_PLANT_REF::getValidTreatId(const std::string& HEATID, const std::string& PLANT)
{
  std::string ValidTreatId = CSMC_DBData::unspecString;

  if (selectValidData(HEATID, CSMC_DBData::unspecString, PLANT, false) )
  {
    ValidTreatId = getTREATID(1);
  }

  return ValidTreatId;
}


bool CPD_HEAT_PLANT_REF::isHandledAtPlant(const std::string& HEATID, const std::string& PLANT)
{
  bool retValue = false;

  CGC_STATUS GC_STATUS(m_pCBS_StdConnection);

  std::vector<long> PlantRelatedStates = GC_STATUS.getPlantRelatedStates(PLANT);

  return isHandledAtPlant(HEATID, PLANT, PlantRelatedStates);
}

// checks if heat has any state related to the specific plant
bool CPD_HEAT_PLANT_REF::isHandledAtPlant(const std::string& HEATID, const std::string& PLANT, std::vector<long> PlantRelatedStates)
{
  bool retValue = false;

  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPD_HEAT_PLANT_REF::HEATID, HEATID );
  addWhereClause(CPD_HEAT_PLANT_REF::STATUSNO, PlantRelatedStates, "IN" );
  addWhereClause(CPD_HEAT_PLANT_REF::EXPIRATIONDATE + " is NULL");

  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

bool CPD_HEAT_PLANT_REF::setStatus(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long STATUSNO, bool checkGreater, bool Commit, cCBS_ODBC_DBError &Error)
{
	bool result = false;

  if ( selectValidData(HEATID, TREATID, PLANT) )
  {
    if ( checkGreater )
    {
      if (STATUSNO > getSTATUSNO(1))
      {
        setSTATUSNO(STATUSNO);
      }
    }
    else
    {
      setSTATUSNO(STATUSNO);
    }

    result = update();
  }
  else
  {
    setLastError("NO_PRODUCTION_DATA_FOUND", 0, getActStatement());
  }

  if (!result)
		Error = getLastError();

	if (Commit)
	{
		if (result)
			commit();
		else
			rollback();
	}
	return result;
}

bool CPD_HEAT_PLANT_REF::setStatus(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const std::string& HEATSTATUS, bool Commit, cCBS_ODBC_DBError &Error)
{
  return setStatus(HEATID, TREATID, PLANT, HEATSTATUS, false, Commit, Error);
}

bool CPD_HEAT_PLANT_REF::setStatus(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const std::string& HEATSTATUS, bool checkGreater, bool Commit, cCBS_ODBC_DBError &Error)
{
  bool result = false;

  CGC_STATUS GC_STATUS(m_pCBS_StdConnection);

  long STATUSNO = GC_STATUS.getStatusNo(PLANT, HEATSTATUS);

  if ( STATUSNO != CSMC_DBData::unspecLong )
  {
    result = setStatus(HEATID, TREATID, PLANT, STATUSNO, checkGreater, Commit, Error);
  }
	else
  {
    setLastError("NO_PRODUCTION_DATA_FOUND", 0, GC_STATUS.getActStatement());
  }

  if (!result)
		Error = getLastError();

  return result;
}

bool CPD_HEAT_PLANT_REF::write(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const std::string& HEATSTATUS, bool Commit, cCBS_ODBC_DBError &Error)
{
  CGC_STATUS     GC_STATUS        (m_pCBS_StdConnection);

  long STATUSNO = GC_STATUS.getStatusNo(PLANT, HEATSTATUS);

	return write(HEATID, TREATID, PLANT, STATUSNO, Commit, Error);
}

bool CPD_HEAT_PLANT_REF::write(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long STATUSNO, bool Commit, cCBS_ODBC_DBError &Error)
{
	bool result = false;

  if ( select(HEATID, TREATID, PLANT) )
	{
    std::string PREV_HEATID  = getHEATID_CUST(1);
    std::string PREV_TREATID = getTREATID_CUST(1);

    std::string CURRENT_HEATID  = PREV_HEATID;
    std::string CURRENT_TREATID = PREV_TREATID;

    if ( m_pPP_HEAT_PLANT->select(HEATID, TREATID, PLANT) )
    {
      CURRENT_HEATID  = m_pPP_HEAT_PLANT->getHEATID_CUST_PLAN(1);
      CURRENT_TREATID = m_pPP_HEAT_PLANT->getTREATID_CUST_PLAN(1);

      setHEATID_CUST  (CURRENT_HEATID);
      setTREATID_CUST (CURRENT_TREATID);
      setSTATUSNO     (STATUSNO);
    }

    setEXPIRATIONDATE(CSMC_DBData::unspecDate);

    result = update();

    if ( result )
    {
      CSMC_EventLogFrame *pEventLog = CSMC_EventLogFrameController::getInstance()->getpEventLog();
      sEventLogMessage sMessage = cCBS_StdEventLog::initMessage(__FILE__,__LINE__);
      pEventLog->EL_ResettingData(sMessage,"PD_HEAT_PLANT_REF.EXPIRATIONDATE to NULL",CURRENT_HEATID.c_str(),CURRENT_TREATID.c_str(),PLANT.c_str());

      if ( PREV_HEATID != CURRENT_HEATID)
      {
        pEventLog->EL_ResettingData(sMessage,"PD_HEAT_PLANT_REF.HEATID_CUST",PREV_HEATID.c_str(),PREV_TREATID.c_str(),PLANT.c_str());
      }
    }
	}
	else
	{
    if ( m_pPP_HEAT_PLANT->select(HEATID, TREATID, PLANT) )
		{
      setHEATID       (HEATID);
      setTREATID      (TREATID);
      setPLANT        (PLANT);
      setPLANTNO      (m_pPP_HEAT_PLANT->getPLANTNO(1));
      setHEATID_CUST  (m_pPP_HEAT_PLANT->getHEATID_CUST_PLAN(1));
      setTREATID_CUST (m_pPP_HEAT_PLANT->getTREATID_CUST_PLAN(1));
      setSTATUSNO     (STATUSNO);

      result = insert();
		}
		else
    {
      setLastError("NO_PRODUCTION_DATA_FOUND", 0, m_pPP_HEAT_PLANT->getActStatement());
    }
	}
	
	if (!result)
		Error = getLastError();

	if (Commit)
	{
		if (result)
			commit();
		else
			rollback();
	}
	return result;
}
