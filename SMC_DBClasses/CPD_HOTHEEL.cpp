//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CPD_SAMPLE_REF.h"
#include "CPD_HOTHEEL.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_HOTHEEL::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_HOTHEEL::PLANTNO("PLANTNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_HOTHEEL::HEATID("HEATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_HOTHEEL::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_HOTHEEL::SAMPLE_REF("SAMPLE_REF");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_HOTHEEL::STEELMASS("STEELMASS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_HOTHEEL::SLAGMASS("SLAGMASS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_HOTHEEL::REVDATE("REVDATE");

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_HOTHEEL::CPD_HOTHEEL(cCBS_StdConnection* Connection)
:CSMC_DBData("PD_HOTHEEL",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_HOTHEEL::CPD_HOTHEEL(cCBS_Connection* Connection)
:CSMC_DBData("PD_HOTHEEL",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_HOTHEEL::CPD_HOTHEEL()
:CSMC_DBData("PD_HOTHEEL")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_HOTHEEL::~CPD_HOTHEEL()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Plant identifier
std::string CPD_HOTHEEL::getPLANT(long Row)
{
  return getString(CPD_HOTHEEL::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_HOTHEEL::setPLANT(const std::string& value)
{
  setString(CPD_HOTHEEL::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Plant number
long CPD_HOTHEEL::getPLANTNO(long Row)
{
  return getLong(CPD_HOTHEEL::PLANTNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_HOTHEEL::setPLANTNO(long value)
{
  setLong(CPD_HOTHEEL::PLANTNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Internal identifier of finished heat
std::string CPD_HOTHEEL::getHEATID(long Row)
{
  return getString(CPD_HOTHEEL::HEATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_HOTHEEL::setHEATID(const std::string& value)
{
  setString(CPD_HOTHEEL::HEATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Treatment identifier
std::string CPD_HOTHEEL::getTREATID(long Row)
{
  return getString(CPD_HOTHEEL::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_HOTHEEL::setTREATID(const std::string& value)
{
  setString(CPD_HOTHEEL::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Unique sample reference
long CPD_HOTHEEL::getSAMPLE_REF(long Row)
{
  return getLong(CPD_HOTHEEL::SAMPLE_REF, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_HOTHEEL::setSAMPLE_REF(long value)
{
  setLong(CPD_HOTHEEL::SAMPLE_REF, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Last Calc/measured Steel weight in Furnace
double CPD_HOTHEEL::getSTEELMASS(long Row)
{
  return getDouble(CPD_HOTHEEL::STEELMASS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_HOTHEEL::setSTEELMASS(double value)
{
  setDouble(CPD_HOTHEEL::STEELMASS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Last Calc/measured Slag weight in Furnace
double CPD_HOTHEEL::getSLAGMASS(long Row)
{
  return getDouble(CPD_HOTHEEL::SLAGMASS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_HOTHEEL::setSLAGMASS(double value)
{
  setDouble(CPD_HOTHEEL::SLAGMASS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Last revision Data
CDateTime CPD_HOTHEEL::getREVDATE(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CPD_HOTHEEL::REVDATE, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_HOTHEEL::setREVDATE(const CDateTime& value)
{
 setString(CPD_HOTHEEL::REVDATE, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CPD_HOTHEEL::select(const std::string& PLANT, long PLANTNO)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPD_HOTHEEL::PLANT,PLANT);
  addWhereClause(CPD_HOTHEEL::PLANTNO,PLANTNO);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CPD_HOTHEEL::write(const std::string& PLANT, long PLANTNO, const std::string& HEATID, const std::string& TREATID, long& SAMPLE_REF, double STEELMASS, double SLAGMASS, bool Commit, cCBS_ODBC_DBError &Error)
{
  bool result  = true;

  CPD_SAMPLE_REF PD_SAMPLE_REF  (m_pCBS_StdConnection);

  if ( STEELMASS > 0. &&  STEELMASS != CSMC_DBData::unspecDouble)
  {
    setSTEELMASS(STEELMASS);
  }
  else
  {
    setSTEELMASS(CSMC_DBData::unspecDouble);
  }

  if ( SLAGMASS > 0. && SLAGMASS != CSMC_DBData::unspecDouble)
  {
    setSLAGMASS(SLAGMASS);
  }
  else
  {
    setSLAGMASS(CSMC_DBData::unspecDouble);
  }

  setHEATID(HEATID);
  setTREATID(TREATID);
  setREVDATE(CDateTime());

  if( select(PLANT, PLANTNO) )
  {
    SAMPLE_REF = getSAMPLE_REF(1);

    if ( SAMPLE_REF == CSMC_DBData::unspecLong )
    {
      SAMPLE_REF = PD_SAMPLE_REF.insertNewSAMPLE_REF(false);
      setSAMPLE_REF(SAMPLE_REF);
    }

    result = result && update();
  }
  else 
  { 
    setPLANT(PLANT);
    setPLANTNO(PLANTNO);

    if ( SAMPLE_REF == CSMC_DBData::unspecLong )
    {
      SAMPLE_REF = PD_SAMPLE_REF.insertNewSAMPLE_REF(false);
    }

    setSAMPLE_REF(SAMPLE_REF);

    result = result && insert();
  }

  if (!result)
    Error = getLastError();

  if (Commit)
  {
    if (result)
      commit();
    else
      rollback();
  }

  return result;
}


