//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 

#if defined (_MSC_VER) && (_MSC_VER >= 1000)
#pragma once
#endif
#ifndef _INC_CHD_RECIPE_INCLUDED
#define _INC_CHD_RECIPE_INCLUDED

#include "CSMC_DBData.h"

class CHD_RECIPE
: public CSMC_DBData
{

public:
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string HEATID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TREATID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PLANT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string RECIPENAME;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string RECIPENO;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string SOURCE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string BATCHSTATUSNO;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string CALC_BASIS_NO;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string BATCHSTATUSCHGDATE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string UPDTIME;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string WEIGHTTOTAL;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string COSTSBATCH;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string BULKVOL;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string ACTOXYGENMOMENT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string ACT_AR_MOMENT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string ACT_N2_MOMENT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string ACT_EGY;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string DURSINCEHEATANNOUNCEMENT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string DURSINCESTARTOFFHEAT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string BATCHFEEDSPEED;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string DISCHARGESTARTTIME;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string DISCHARGEENDTIME;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string VOLUME;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string CHARGING_DEST_NAME;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string ACT_O2_MOMENT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string CHARGE_MOMENT;

  //##DBClassCodeUtility ! DO NOT EDIT !
  CHD_RECIPE(cCBS_StdConnection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CHD_RECIPE(cCBS_Connection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CHD_RECIPE();

  //##DBClassCodeUtility ! DO NOT EDIT !
  ~CHD_RECIPE();

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Internal heat identifier
  std::string getHEATID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setHEATID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Treatment identifier
  std::string getTREATID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTREATID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Plant identifier
  std::string getPLANT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPLANT(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getRECIPENAME(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setRECIPENAME(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  long getRECIPENO(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setRECIPENO(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getSOURCE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSOURCE(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Batch Status number (Number in the L1/L2 Telgramm in the, Material handling report
  long getBATCHSTATUSNO(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setBATCHSTATUSNO(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Basis of the related model calculation
  long getCALC_BASIS_NO(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setCALC_BASIS_NO(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Date of last status change., Comment:, Weighed time = first Weighed for one recipe
  CDateTime getBATCHSTATUSCHGDATE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setBATCHSTATUSCHGDATE(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Date and time of last revision
  CDateTime getUPDTIME(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setUPDTIME(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getWEIGHTTOTAL(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setWEIGHTTOTAL(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Total Cost of the Batch
  double getCOSTSBATCH(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setCOSTSBATCH(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Bulk volume
  double getBULKVOL(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setBULKVOL(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Oxygen Moment, Only for AOD, BOF, Conarc and, Recipe Status, Enable, Processing Start, Weighing Complete, First Material in Charging Hopper, Discharge Start, Weighing Complete, Last Material In Chrging Hopper, Discharged
  double getACTOXYGENMOMENT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setACTOXYGENMOMENT(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Ar Moment, Only for AOD, BOF, Conarc and, Recipe Status, Enable, Processing Start, Weighing Complete, First Material in Charging Hopper, Discharge Start, Weighing Complete, Last Material In Chrging Hopper, Discharged
  double getACT_AR_MOMENT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setACT_AR_MOMENT(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##N2 Moment, Only for AOD, BOF, Conarc and, Recipe Status, Enable, Processing Start, Weighing Complete, First Material in Charging Hopper, Discharge Start, Weighing Complete, Last Material In Chrging Hopper, Discharged
  double getACT_N2_MOMENT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setACT_N2_MOMENT(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Only for EAF/LF, Only for Recipe Status, Recipe Status, Enable, Processing Start, Weighing Complete, First Material in Charging Hopper, Discharge Start, Weighing Complete, Last Material In Chrging Hopper, Discharged
  double getACT_EGY(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setACT_EGY(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Duration since heat announcement
  double getDURSINCEHEATANNOUNCEMENT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setDURSINCEHEATANNOUNCEMENT(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Duration since start of heat
  double getDURSINCESTARTOFFHEAT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setDURSINCESTARTOFFHEAT(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Batch Material feed speed., BATCHMATFEEDSPEED=, TOTALBATCHWEIGHT/, Discharged Time Discharge Start Time, Only filled for Status 10!!!
  double getBATCHFEEDSPEED(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setBATCHFEEDSPEED(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Time since heat announcement if Batch status "Discharge Start" has been reached
  CDateTime getDISCHARGESTARTTIME(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setDISCHARGESTARTTIME(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Time since heat announcement if Batch status "Discharge End" has been reached
  CDateTime getDISCHARGEENDTIME(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setDISCHARGEENDTIME(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getVOLUME(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setVOLUME(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Charging destination name, e.g TapLadle, ladle
  std::string getCHARGING_DEST_NAME(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setCHARGING_DEST_NAME(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getACT_O2_MOMENT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setACT_O2_MOMENT(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getCHARGE_MOMENT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setCHARGE_MOMENT(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  bool select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const std::string& RECIPENAME, long RECIPENO, const std::string& SOURCE, long BATCHSTATUSNO);

  //## ----------------------------------END-GENERATED-CODE--------------------- 

  //## ----------------------------------YOUR-CODE------------------------------ 

  bool copy(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, bool Commit, cCBS_ODBC_DBError &Error);

  bool exists(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT);

};

#endif /* _INC_CHD_RECIPE_INCLUDED */
