//## Copyright (C) 2010 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CIntfData.h"
#include "CPD_MAT_FEED_CYCL_MEAS_DATA.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_MAT_FEED_CYCL_MEAS_DATA::HEATID("HEATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_MAT_FEED_CYCL_MEAS_DATA::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_MAT_FEED_CYCL_MEAS_DATA::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_MAT_FEED_CYCL_MEAS_DATA::MAT_CODE("MAT_CODE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_MAT_FEED_CYCL_MEAS_DATA::FEEDERNO("FEEDERNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_MAT_FEED_CYCL_MEAS_DATA::REVTIME("REVTIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_MAT_FEED_CYCL_MEAS_DATA::DURSINCEHEATANNOUNCE("DURSINCEHEATANNOUNCE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_MAT_FEED_CYCL_MEAS_DATA::FEEDINGRATE("FEEDINGRATE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_MAT_FEED_CYCL_MEAS_DATA::MATWEIGHT("MATWEIGHT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_MAT_FEED_CYCL_MEAS_DATA::ELECENERGY("ELECENERGY");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_MAT_FEED_CYCL_MEAS_DATA::O2_AMOUNT("O2_AMOUNT");

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_MAT_FEED_CYCL_MEAS_DATA::CPD_MAT_FEED_CYCL_MEAS_DATA(cCBS_StdConnection* Connection)
:CSMC_DBData("PD_MAT_FEED_CYCL_MEAS_DATA",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_MAT_FEED_CYCL_MEAS_DATA::CPD_MAT_FEED_CYCL_MEAS_DATA(cCBS_Connection* Connection)
:CSMC_DBData("PD_MAT_FEED_CYCL_MEAS_DATA",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_MAT_FEED_CYCL_MEAS_DATA::CPD_MAT_FEED_CYCL_MEAS_DATA()
:CSMC_DBData("PD_MAT_FEED_CYCL_MEAS_DATA")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_MAT_FEED_CYCL_MEAS_DATA::~CPD_MAT_FEED_CYCL_MEAS_DATA()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Internal heat identifier
std::string CPD_MAT_FEED_CYCL_MEAS_DATA::getHEATID(long Row)
{
  return getString(CPD_MAT_FEED_CYCL_MEAS_DATA::HEATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_MAT_FEED_CYCL_MEAS_DATA::setHEATID(const std::string& value)
{
  setString(CPD_MAT_FEED_CYCL_MEAS_DATA::HEATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Treatment identifier
std::string CPD_MAT_FEED_CYCL_MEAS_DATA::getTREATID(long Row)
{
  return getString(CPD_MAT_FEED_CYCL_MEAS_DATA::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_MAT_FEED_CYCL_MEAS_DATA::setTREATID(const std::string& value)
{
  setString(CPD_MAT_FEED_CYCL_MEAS_DATA::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Plant identifier
std::string CPD_MAT_FEED_CYCL_MEAS_DATA::getPLANT(long Row)
{
  return getString(CPD_MAT_FEED_CYCL_MEAS_DATA::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_MAT_FEED_CYCL_MEAS_DATA::setPLANT(const std::string& value)
{
  setString(CPD_MAT_FEED_CYCL_MEAS_DATA::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPD_MAT_FEED_CYCL_MEAS_DATA::getMAT_CODE(long Row)
{
  return getString(CPD_MAT_FEED_CYCL_MEAS_DATA::MAT_CODE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_MAT_FEED_CYCL_MEAS_DATA::setMAT_CODE(const std::string& value)
{
  setString(CPD_MAT_FEED_CYCL_MEAS_DATA::MAT_CODE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Feeder number
long CPD_MAT_FEED_CYCL_MEAS_DATA::getFEEDERNO(long Row)
{
  return getLong(CPD_MAT_FEED_CYCL_MEAS_DATA::FEEDERNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_MAT_FEED_CYCL_MEAS_DATA::setFEEDERNO(long value)
{
  setLong(CPD_MAT_FEED_CYCL_MEAS_DATA::FEEDERNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Date and time of last revision
CDateTime CPD_MAT_FEED_CYCL_MEAS_DATA::getREVTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CPD_MAT_FEED_CYCL_MEAS_DATA::REVTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_MAT_FEED_CYCL_MEAS_DATA::setREVTIME(const CDateTime& value)
{
 setString(CPD_MAT_FEED_CYCL_MEAS_DATA::REVTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Duration since heat announcement
double CPD_MAT_FEED_CYCL_MEAS_DATA::getDURSINCEHEATANNOUNCE(long Row)
{
  return getDouble(CPD_MAT_FEED_CYCL_MEAS_DATA::DURSINCEHEATANNOUNCE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_MAT_FEED_CYCL_MEAS_DATA::setDURSINCEHEATANNOUNCE(double value)
{
  setDouble(CPD_MAT_FEED_CYCL_MEAS_DATA::DURSINCEHEATANNOUNCE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Absolute feeding rate in kg/min
double CPD_MAT_FEED_CYCL_MEAS_DATA::getFEEDINGRATE(long Row)
{
  return getDouble(CPD_MAT_FEED_CYCL_MEAS_DATA::FEEDINGRATE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_MAT_FEED_CYCL_MEAS_DATA::setFEEDINGRATE(double value)
{
  setDouble(CPD_MAT_FEED_CYCL_MEAS_DATA::FEEDINGRATE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Actual weight of charged material
double CPD_MAT_FEED_CYCL_MEAS_DATA::getMATWEIGHT(long Row)
{
  return getDouble(CPD_MAT_FEED_CYCL_MEAS_DATA::MATWEIGHT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_MAT_FEED_CYCL_MEAS_DATA::setMATWEIGHT(double value)
{
  setDouble(CPD_MAT_FEED_CYCL_MEAS_DATA::MATWEIGHT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Total electric energy consumption in case of electric heating, kWh
double CPD_MAT_FEED_CYCL_MEAS_DATA::getELECENERGY(long Row)
{
  return getDouble(CPD_MAT_FEED_CYCL_MEAS_DATA::ELECENERGY, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_MAT_FEED_CYCL_MEAS_DATA::setELECENERGY(double value)
{
  setDouble(CPD_MAT_FEED_CYCL_MEAS_DATA::ELECENERGY, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Metallurgical Nm3 since start of heat
double CPD_MAT_FEED_CYCL_MEAS_DATA::getO2_AMOUNT(long Row)
{
  return getDouble(CPD_MAT_FEED_CYCL_MEAS_DATA::O2_AMOUNT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_MAT_FEED_CYCL_MEAS_DATA::setO2_AMOUNT(double value)
{
  setDouble(CPD_MAT_FEED_CYCL_MEAS_DATA::O2_AMOUNT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CPD_MAT_FEED_CYCL_MEAS_DATA::select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const std::string& MAT_CODE, long FEEDERNO, const CDateTime& REVTIME)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPD_MAT_FEED_CYCL_MEAS_DATA::HEATID,HEATID);
  addWhereClause(CPD_MAT_FEED_CYCL_MEAS_DATA::TREATID,TREATID);
  addWhereClause(CPD_MAT_FEED_CYCL_MEAS_DATA::PLANT,PLANT);
  addWhereClause(CPD_MAT_FEED_CYCL_MEAS_DATA::MAT_CODE,MAT_CODE);
  addWhereClause(CPD_MAT_FEED_CYCL_MEAS_DATA::FEEDERNO,FEEDERNO);
  addWhereClause(CPD_MAT_FEED_CYCL_MEAS_DATA::REVTIME,REVTIME);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CPD_MAT_FEED_CYCL_MEAS_DATA::writeBatch(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, seqBatch &SeqBatch, double MomentElec, double MomentO2, double DurSinceHeatAnnounce, bool Commit)
{
  bool RetValue = true;

  CDateTime Now;

  for(long i = 0; i < CIntfData::getLength(SeqBatch); i++)
  {
    sBatch Batch;
    CIntfData::getAt(Batch,SeqBatch,i);

    if ( string(Batch.MatCode) != string(DEF::Inv_String) && !string(Batch.MatCode).empty() )
    {
      setHEATID(HEATID);
      setTREATID(TREATID);
      setPLANT(PLANT);
      setMAT_CODE((std::string)Batch.MatCode);
      setFEEDERNO(Batch.Source);
      setREVTIME(Now);

      setFEEDINGRATE(Batch.MatFeedSpeed);
      setMATWEIGHT(Batch.Mass);
      setELECENERGY(MomentElec);
      setO2_AMOUNT(MomentO2);

      setDURSINCEHEATANNOUNCE(DurSinceHeatAnnounce);

      RetValue = RetValue && insert();

      if(!RetValue)
      {
        break;
      }
    }//  if ( string(Batch.MatCode) != string(DEF::Inv_String) && !string(Batch.MatCode).empty() )
  }// for(long i = 0; i < CIntfData::getLength(SeqBatch); i++)

  if(Commit)
  {
    if (RetValue)
      this->commit();
    else
      rollback();
  }


  return RetValue;
}


