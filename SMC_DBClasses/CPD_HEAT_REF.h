//## Copyright (C) 2010 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 

#if defined (_MSC_VER) && (_MSC_VER >= 1000)
#pragma once
#endif
#ifndef _INC_CPD_HEAT_REF_INCLUDED
#define _INC_CPD_HEAT_REF_INCLUDED

#include "CSMC_DBData.h"

class CPP_HEAT;

class CPD_HEAT_REF
: public CSMC_DBData
{

public:
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string HEATID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string HEATSTATUSNO;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string ROUTECODE_ACT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string HEATSTATUSNO_LAST;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string USERCODE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string REVTIME;

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPD_HEAT_REF(cCBS_StdConnection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPD_HEAT_REF(cCBS_Connection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPD_HEAT_REF();

  //##DBClassCodeUtility ! DO NOT EDIT !
  ~CPD_HEAT_REF();

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Internal heat identifier
  std::string getHEATID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setHEATID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Heat Status as defined in the Requirement Book Naming standard specification.
  long getHEATSTATUSNO(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setHEATSTATUSNO(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Actual route information, use GC_PLANT:ROUTECODEID
  std::string getROUTECODE_ACT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setROUTECODE_ACT(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Last status at last plant. This status is used after heat cancellation.
  long getHEATSTATUSNO_LAST(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setHEATSTATUSNO_LAST(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##User Code if user change heat schedule
  std::string getUSERCODE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setUSERCODE(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Date and time of last revision
  CDateTime getREVTIME(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setREVTIME(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  bool select(const std::string& HEATID);

  //## ----------------------------------END-GENERATED-CODE--------------------- 

  //## ----------------------------------YOUR-CODE------------------------------ 

  bool selectByREVTIME(const CDateTime& REVTIME, const std::string& Operator);

  bool doAnnouncement(const std::string& HEATID, const std::string& PLANT, const std::string &USERCODE, bool Commit, cCBS_ODBC_DBError &Error);

  bool doCancelHeat(const std::string& HEATID, bool Commit, cCBS_ODBC_DBError &Error);

  bool doDeparture(const std::string& HEATID, const std::string& PLANT, const std::string &USERCODE, bool Commit, cCBS_ODBC_DBError &Error);

  bool doHeatStart(const std::string& HEATID, const string& TREATID,const std::string& PLANT, const std::string &USERCODE, bool Commit, cCBS_ODBC_DBError &Error);

  bool doNewHeat(const std::string& HEATID, long HEATSTATUSNO, const std::string& USERCODE, bool Commit, cCBS_ODBC_DBError &Error);

  bool doSetupHeat(const std::string& HEATID, const std::string& PLANT, long HEATSTATUSNO, const std::string &USERCODE, bool Commit, cCBS_ODBC_DBError &Error);

  bool exists(const std::string& HEATID);

  // operator as >, <, =
  std::vector<std::string> getHeatsByREVTIME(const CDateTime& REVTIME, const std::string& Operator);

  bool hasState(const std::string& HEATID, long HEATSTATUSNO);

  bool isHandledAtPlant(const std::string& HEATID, const std::string& PLANT);

  bool isHandledAtPlant(const std::string& HEATID, const std::string& PLANT, std::vector<long> PlantRelatedStates);

  bool isPlanned(const std::string& HEATID);

  bool switchHeatStatusNo(const std::string& HEATID, long HEATSTATUSNO, const std::string &USERCODE, bool Commit, cCBS_ODBC_DBError &Error);

  bool switchHeatStatusNo(const std::string& HEATID, long HEATSTATUSNO, const std::string &USERCODE, bool checkGreater, bool Commit, cCBS_ODBC_DBError &Error);

	bool deleteRow(const std::string &HEATID, bool Commit, cCBS_ODBC_DBError &Error); //sankar
};

#endif /* _INC_CPD_HEAT_REF_INCLUDED */
