//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "DEF_GC_SHIFT_TYPE.h"
#include "CPP_SHIFT_CREW_ASSIGNMENT.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPP_SHIFT_CREW_ASSIGNMENT::SHIFT_TYPE("SHIFT_TYPE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPP_SHIFT_CREW_ASSIGNMENT::SHIFT_ID("SHIFT_ID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPP_SHIFT_CREW_ASSIGNMENT::SHIFT_START_DATE("SHIFT_START_DATE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPP_SHIFT_CREW_ASSIGNMENT::CREW_ID("CREW_ID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPP_SHIFT_CREW_ASSIGNMENT::PATTERN_NO("PATTERN_NO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPP_SHIFT_CREW_ASSIGNMENT::DAY_IN_PATTERN("DAY_IN_PATTERN");

//##DBClassCodeUtility ! DO NOT EDIT !
CPP_SHIFT_CREW_ASSIGNMENT::CPP_SHIFT_CREW_ASSIGNMENT(cCBS_StdConnection* Connection)
:CSMC_DBData("PP_SHIFT_CREW_ASSIGNMENT",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPP_SHIFT_CREW_ASSIGNMENT::CPP_SHIFT_CREW_ASSIGNMENT(cCBS_Connection* Connection)
:CSMC_DBData("PP_SHIFT_CREW_ASSIGNMENT",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPP_SHIFT_CREW_ASSIGNMENT::CPP_SHIFT_CREW_ASSIGNMENT()
:CSMC_DBData("PP_SHIFT_CREW_ASSIGNMENT")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPP_SHIFT_CREW_ASSIGNMENT::~CPP_SHIFT_CREW_ASSIGNMENT()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Shift type
long CPP_SHIFT_CREW_ASSIGNMENT::getSHIFT_TYPE(long Row)
{
  return getLong(CPP_SHIFT_CREW_ASSIGNMENT::SHIFT_TYPE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPP_SHIFT_CREW_ASSIGNMENT::setSHIFT_TYPE(long value)
{
  setLong(CPP_SHIFT_CREW_ASSIGNMENT::SHIFT_TYPE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Identifier for the shift (e.g. 1=early/2=late/3=night shift)
std::string CPP_SHIFT_CREW_ASSIGNMENT::getSHIFT_ID(long Row)
{
  return getString(CPP_SHIFT_CREW_ASSIGNMENT::SHIFT_ID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPP_SHIFT_CREW_ASSIGNMENT::setSHIFT_ID(const std::string& value)
{
  setString(CPP_SHIFT_CREW_ASSIGNMENT::SHIFT_ID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Start date of shift as: yyyy-mm-dd
std::string CPP_SHIFT_CREW_ASSIGNMENT::getSHIFT_START_DATE(long Row)
{
  return getString(CPP_SHIFT_CREW_ASSIGNMENT::SHIFT_START_DATE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPP_SHIFT_CREW_ASSIGNMENT::setSHIFT_START_DATE(const std::string& value)
{
  setString(CPP_SHIFT_CREW_ASSIGNMENT::SHIFT_START_DATE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Id of working crew
std::string CPP_SHIFT_CREW_ASSIGNMENT::getCREW_ID(long Row)
{
  return getString(CPP_SHIFT_CREW_ASSIGNMENT::CREW_ID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPP_SHIFT_CREW_ASSIGNMENT::setCREW_ID(const std::string& value)
{
  setString(CPP_SHIFT_CREW_ASSIGNMENT::CREW_ID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Id of shift pattern
long CPP_SHIFT_CREW_ASSIGNMENT::getPATTERN_NO(long Row)
{
  return getLong(CPP_SHIFT_CREW_ASSIGNMENT::PATTERN_NO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPP_SHIFT_CREW_ASSIGNMENT::setPATTERN_NO(long value)
{
  setLong(CPP_SHIFT_CREW_ASSIGNMENT::PATTERN_NO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Day in pattern from GC_SHIFT_PATTERN
long CPP_SHIFT_CREW_ASSIGNMENT::getDAY_IN_PATTERN(long Row)
{
  return getLong(CPP_SHIFT_CREW_ASSIGNMENT::DAY_IN_PATTERN, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPP_SHIFT_CREW_ASSIGNMENT::setDAY_IN_PATTERN(long value)
{
  setLong(CPP_SHIFT_CREW_ASSIGNMENT::DAY_IN_PATTERN, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CPP_SHIFT_CREW_ASSIGNMENT::select(long SHIFT_TYPE, const std::string& SHIFT_ID, const std::string& SHIFT_START_DATE)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPP_SHIFT_CREW_ASSIGNMENT::SHIFT_TYPE,SHIFT_TYPE);
  addWhereClause(CPP_SHIFT_CREW_ASSIGNMENT::SHIFT_ID,SHIFT_ID);
  addWhereClause(CPP_SHIFT_CREW_ASSIGNMENT::SHIFT_START_DATE,SHIFT_START_DATE);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CPP_SHIFT_CREW_ASSIGNMENT::selectOrdered(long SHIFT_TYPE, const std::string& SHIFT_ID, const CDateTime& SHIFT_START_DATE)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPP_SHIFT_CREW_ASSIGNMENT::SHIFT_TYPE,SHIFT_TYPE);
  addWhereClause(CPP_SHIFT_CREW_ASSIGNMENT::SHIFT_ID,SHIFT_ID);
  addWhereClause(CPP_SHIFT_CREW_ASSIGNMENT::SHIFT_START_DATE,SHIFT_START_DATE);

  m_Statement += getWhereStatement() + " ORDER BY " + CPP_SHIFT_CREW_ASSIGNMENT::SHIFT_START_DATE + ";";

  return CSMC_DBData::select();
}

bool CPP_SHIFT_CREW_ASSIGNMENT::selectOrderedBeforeTime(const CDateTime& DATE)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPP_SHIFT_CREW_ASSIGNMENT::SHIFT_START_DATE,DATE,"<");

  m_Statement += getWhereStatement() + " ORDER BY " + CPP_SHIFT_CREW_ASSIGNMENT::SHIFT_START_DATE + " DESC;";

  return CSMC_DBData::select();
}


