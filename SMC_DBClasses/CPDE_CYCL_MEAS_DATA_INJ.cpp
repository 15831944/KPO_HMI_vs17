//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CPDE_CYCL_MEAS_DATA_INJ.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA_INJ::HEATID("HEATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA_INJ::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA_INJ::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA_INJ::DEVICENAME("DEVICENAME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA_INJ::INJ_MAT("INJ_MAT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA_INJ::REVTIME("REVTIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA_INJ::INJ_FLOW("INJ_FLOW");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA_INJ::INJ_AMOUNT("INJ_AMOUNT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA_INJ::DURSINCEHEATANNOUNCE("DURSINCEHEATANNOUNCE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA_INJ::DURSINCESTARTOFHEAT("DURSINCESTARTOFHEAT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA_INJ::ELEC_CONS("ELEC_CONS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA_INJ::STATUS("STATUS");

//##DBClassCodeUtility ! DO NOT EDIT !
CPDE_CYCL_MEAS_DATA_INJ::CPDE_CYCL_MEAS_DATA_INJ(cCBS_StdConnection* Connection)
:CSMC_DBData("PDE_CYCL_MEAS_DATA_INJ",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPDE_CYCL_MEAS_DATA_INJ::CPDE_CYCL_MEAS_DATA_INJ(cCBS_Connection* Connection)
:CSMC_DBData("PDE_CYCL_MEAS_DATA_INJ",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPDE_CYCL_MEAS_DATA_INJ::CPDE_CYCL_MEAS_DATA_INJ()
:CSMC_DBData("PDE_CYCL_MEAS_DATA_INJ")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPDE_CYCL_MEAS_DATA_INJ::~CPDE_CYCL_MEAS_DATA_INJ()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDE_CYCL_MEAS_DATA_INJ::getHEATID(long Row)
{
  return getString(CPDE_CYCL_MEAS_DATA_INJ::HEATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA_INJ::setHEATID(const std::string& value)
{
  setString(CPDE_CYCL_MEAS_DATA_INJ::HEATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDE_CYCL_MEAS_DATA_INJ::getTREATID(long Row)
{
  return getString(CPDE_CYCL_MEAS_DATA_INJ::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA_INJ::setTREATID(const std::string& value)
{
  setString(CPDE_CYCL_MEAS_DATA_INJ::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDE_CYCL_MEAS_DATA_INJ::getPLANT(long Row)
{
  return getString(CPDE_CYCL_MEAS_DATA_INJ::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA_INJ::setPLANT(const std::string& value)
{
  setString(CPDE_CYCL_MEAS_DATA_INJ::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDE_CYCL_MEAS_DATA_INJ::getDEVICENAME(long Row)
{
  return getString(CPDE_CYCL_MEAS_DATA_INJ::DEVICENAME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA_INJ::setDEVICENAME(const std::string& value)
{
  setString(CPDE_CYCL_MEAS_DATA_INJ::DEVICENAME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDE_CYCL_MEAS_DATA_INJ::getINJ_MAT(long Row)
{
  return getString(CPDE_CYCL_MEAS_DATA_INJ::INJ_MAT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA_INJ::setINJ_MAT(const std::string& value)
{
  setString(CPDE_CYCL_MEAS_DATA_INJ::INJ_MAT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CPDE_CYCL_MEAS_DATA_INJ::getREVTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CPDE_CYCL_MEAS_DATA_INJ::REVTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA_INJ::setREVTIME(const CDateTime& value)
{
 setString(CPDE_CYCL_MEAS_DATA_INJ::REVTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDE_CYCL_MEAS_DATA_INJ::getINJ_FLOW(long Row)
{
  return getDouble(CPDE_CYCL_MEAS_DATA_INJ::INJ_FLOW, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA_INJ::setINJ_FLOW(double value)
{
  setDouble(CPDE_CYCL_MEAS_DATA_INJ::INJ_FLOW, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDE_CYCL_MEAS_DATA_INJ::getINJ_AMOUNT(long Row)
{
  return getDouble(CPDE_CYCL_MEAS_DATA_INJ::INJ_AMOUNT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA_INJ::setINJ_AMOUNT(double value)
{
  setDouble(CPDE_CYCL_MEAS_DATA_INJ::INJ_AMOUNT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDE_CYCL_MEAS_DATA_INJ::getDURSINCEHEATANNOUNCE(long Row)
{
  return getDouble(CPDE_CYCL_MEAS_DATA_INJ::DURSINCEHEATANNOUNCE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA_INJ::setDURSINCEHEATANNOUNCE(double value)
{
  setDouble(CPDE_CYCL_MEAS_DATA_INJ::DURSINCEHEATANNOUNCE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDE_CYCL_MEAS_DATA_INJ::getDURSINCESTARTOFHEAT(long Row)
{
  return getDouble(CPDE_CYCL_MEAS_DATA_INJ::DURSINCESTARTOFHEAT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA_INJ::setDURSINCESTARTOFHEAT(double value)
{
  setDouble(CPDE_CYCL_MEAS_DATA_INJ::DURSINCESTARTOFHEAT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDE_CYCL_MEAS_DATA_INJ::getELEC_CONS(long Row)
{
  return getDouble(CPDE_CYCL_MEAS_DATA_INJ::ELEC_CONS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA_INJ::setELEC_CONS(double value)
{
  setDouble(CPDE_CYCL_MEAS_DATA_INJ::ELEC_CONS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDE_CYCL_MEAS_DATA_INJ::getSTATUS(long Row)
{
  return getLong(CPDE_CYCL_MEAS_DATA_INJ::STATUS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA_INJ::setSTATUS(long value)
{
  setLong(CPDE_CYCL_MEAS_DATA_INJ::STATUS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CPDE_CYCL_MEAS_DATA_INJ::select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const std::string& DEVICENAME, const std::string& INJ_MAT, const CDateTime& REVTIME)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPDE_CYCL_MEAS_DATA_INJ::HEATID,HEATID);
  addWhereClause(CPDE_CYCL_MEAS_DATA_INJ::TREATID,TREATID);
  addWhereClause(CPDE_CYCL_MEAS_DATA_INJ::PLANT,PLANT);
  addWhereClause(CPDE_CYCL_MEAS_DATA_INJ::DEVICENAME,DEVICENAME);
  addWhereClause(CPDE_CYCL_MEAS_DATA_INJ::INJ_MAT,INJ_MAT);
  addWhereClause(CPDE_CYCL_MEAS_DATA_INJ::REVTIME,REVTIME);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CPDE_CYCL_MEAS_DATA_INJ::selectCurrentDataByHeat(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT)
{
  cleanWhereStatement();

  std::stringstream sql;

  sql << "select max(t.INJ_AMOUNT) as INJ_AMOUNT,DEVICENAME as DEVICENAME"
    << "  from l2smc_eaf.pde_cycl_meas_data_inj t"
    << " where t.heatid = '"  << HEATID << "'"
    << "   and t.treatid = '" << TREATID << "'"
    << "   and t.plant = '"   << PLANT << "'"
    << " group by t.heatid, t.treatid, t.plant, t.DEVICENAME";

  m_Statement = sql.str();

  bool result = CSMC_DBData::select();

  return result;
}


