//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 

#if defined (_MSC_VER) && (_MSC_VER >= 1000)
#pragma once
#endif
#ifndef _INC_CGT_GRADE_INCLUDED
#define _INC_CGT_GRADE_INCLUDED

#include "CSMC_DBData.h"

class CGT_GRADE
: public CSMC_DBData
{

public:
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string STEELGRADECODE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string STEELGRADECODEDESCR;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string STEELGRADECODEDESCR_C;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string LIQTEMP;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string USERCODE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string REVTIME;

  //##DBClassCodeUtility ! DO NOT EDIT !
  CGT_GRADE(cCBS_StdConnection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CGT_GRADE(cCBS_Connection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CGT_GRADE();

  //##DBClassCodeUtility ! DO NOT EDIT !
  ~CGT_GRADE();

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Steel grade code
  std::string getSTEELGRADECODE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSTEELGRADECODE(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Steel grade code description
  std::string getSTEELGRADECODEDESCR(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSTEELGRADECODEDESCR(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Steel grade code description
  std::string getSTEELGRADECODEDESCR_C(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSTEELGRADECODEDESCR_C(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Liquidus temperature
  double getLIQTEMP(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setLIQTEMP(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##User who entered/changed entry. User code <> L3 indicates manual entered.
  std::string getUSERCODE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setUSERCODE(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Date and time of last revision
  CDateTime getREVTIME(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setREVTIME(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  bool select(const std::string& STEELGRADECODE);

  //## ----------------------------------END-GENERATED-CODE--------------------- 

  //## ----------------------------------YOUR-CODE------------------------------ 

  bool deleteGrade(const std::string& STEELGRADECODE );

  bool writeGrade(const std::string& STEELGRADECODE, const std::string& STEELGRADECODEDESCR, const std::string& STEELGRADECODEDESCR_C, double LIQTEMP, const std::string& USERCODE, long VERSION, const CDateTime & REVTIME, bool Commit);

};

#endif /* _INC_CGT_GRADE_INCLUDED */
