//## Copyright (C) 2012 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CGT_GRADE_SAMPLE_FLAG.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_GRADE_SAMPLE_FLAG::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_GRADE_SAMPLE_FLAG::STEELGRADECODE("STEELGRADECODE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_GRADE_SAMPLE_FLAG::FLAGNAME("FLAGNAME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_GRADE_SAMPLE_FLAG::FLAG("FLAG");

//##DBClassCodeUtility ! DO NOT EDIT !
CGT_GRADE_SAMPLE_FLAG::CGT_GRADE_SAMPLE_FLAG(cCBS_StdConnection* Connection)
:CSMC_DBData("GT_GRADE_SAMPLE_FLAG",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGT_GRADE_SAMPLE_FLAG::CGT_GRADE_SAMPLE_FLAG(cCBS_Connection* Connection)
:CSMC_DBData("GT_GRADE_SAMPLE_FLAG",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGT_GRADE_SAMPLE_FLAG::CGT_GRADE_SAMPLE_FLAG()
:CSMC_DBData("GT_GRADE_SAMPLE_FLAG")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGT_GRADE_SAMPLE_FLAG::~CGT_GRADE_SAMPLE_FLAG()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Plant identifier
std::string CGT_GRADE_SAMPLE_FLAG::getPLANT(long Row)
{
  return getString(CGT_GRADE_SAMPLE_FLAG::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_GRADE_SAMPLE_FLAG::setPLANT(const std::string& value)
{
  setString(CGT_GRADE_SAMPLE_FLAG::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Steel grade code
std::string CGT_GRADE_SAMPLE_FLAG::getSTEELGRADECODE(long Row)
{
  return getString(CGT_GRADE_SAMPLE_FLAG::STEELGRADECODE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_GRADE_SAMPLE_FLAG::setSTEELGRADECODE(const std::string& value)
{
  setString(CGT_GRADE_SAMPLE_FLAG::STEELGRADECODE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Names as defined by L3
std::string CGT_GRADE_SAMPLE_FLAG::getFLAGNAME(long Row)
{
  return getString(CGT_GRADE_SAMPLE_FLAG::FLAGNAME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_GRADE_SAMPLE_FLAG::setFLAGNAME(const std::string& value)
{
  setString(CGT_GRADE_SAMPLE_FLAG::FLAGNAME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Status: 0 = not used, 1 = used
long CGT_GRADE_SAMPLE_FLAG::getFLAG(long Row)
{
  return getLong(CGT_GRADE_SAMPLE_FLAG::FLAG, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_GRADE_SAMPLE_FLAG::setFLAG(long value)
{
  setLong(CGT_GRADE_SAMPLE_FLAG::FLAG, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CGT_GRADE_SAMPLE_FLAG::select(const std::string& PLANT, const std::string& STEELGRADECODE, const std::string& FLAGNAME)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CGT_GRADE_SAMPLE_FLAG::PLANT,PLANT);
  addWhereClause(CGT_GRADE_SAMPLE_FLAG::STEELGRADECODE,STEELGRADECODE);
  addWhereClause(CGT_GRADE_SAMPLE_FLAG::FLAGNAME,FLAGNAME);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CGT_GRADE_SAMPLE_FLAG::deleteFlag(std::string STEELGRADECODE )
{
  cleanWhereStatement();
  
  addWhereClause(CGT_GRADE_SAMPLE_FLAG::STEELGRADECODE, STEELGRADECODE);

  return deleteRows();
}

long CGT_GRADE_SAMPLE_FLAG::getFLAG(const std::string& PLANT, const std::string& STEELGRADECODE, const std::string& FLAGNAME)
{
  long SAMPLEFLAG;
  if (select(PLANT,STEELGRADECODE,FLAGNAME))
  {
    SAMPLEFLAG = getFLAG(1);
  }
  else
  {
    SAMPLEFLAG = DEF::Inv_Long;
  }
  return SAMPLEFLAG;
}

bool CGT_GRADE_SAMPLE_FLAG::writeFLAG(std::string Plant, std::string SteelGradeCode,std::string FlagName,int Flag,bool Commit)
{
  bool RetValue = false;

  setSTEELGRADECODE(SteelGradeCode);
  setPLANT(Plant);
  setFLAGNAME(FlagName);
  setFLAG(Flag);

  if ( select(Plant,SteelGradeCode,FlagName) )
  {
    RetValue = update();
  }
  else
  {
    setFLAG(Flag);
    RetValue = insert();
  }

  if ( Commit )
  {
    if ( RetValue )
    {
      commit();
    }
    else
    {
      rollback();
    }
  }

  return RetValue;
}


