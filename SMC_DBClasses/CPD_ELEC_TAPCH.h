//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 

#if defined (_MSC_VER) && (_MSC_VER >= 1000)
#pragma once
#endif
#ifndef _INC_CPD_ELEC_TAPCH_INCLUDED
#define _INC_CPD_ELEC_TAPCH_INCLUDED

#include "CSMC_DBData.h"

class CPD_ELEC_TAPCH
: public CSMC_DBData
{

public:
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string HEATID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TREATID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PLANT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string DATECHANGE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string VOLTTAP;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string IMPCURVE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TAPCHANGERSTATUS;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string DURSINCEHEATANNOUNCE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string DURSINCESTARTOFHEAT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string ELEC_EGYTOT;

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPD_ELEC_TAPCH(cCBS_StdConnection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPD_ELEC_TAPCH(cCBS_Connection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPD_ELEC_TAPCH();

  //##DBClassCodeUtility ! DO NOT EDIT !
  ~CPD_ELEC_TAPCH();

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Internal heat identifier
  std::string getHEATID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setHEATID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Treatment identifier
  std::string getTREATID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTREATID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Plant identifier
  std::string getPLANT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPLANT(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Timestamp indication of the change
  CDateTime getDATECHANGE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setDATECHANGE(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Transformer Voltage Tap
  long getVOLTTAP(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setVOLTTAP(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Impedance curve
  long getIMPCURVE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setIMPCURVE(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Tap Changer Status, 1 = Tapchanger Active, O = Tapchanger Not Active
  long getTAPCHANGERSTATUS(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTAPCHANGERSTATUS(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Duration since heat announcement
  double getDURSINCEHEATANNOUNCE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setDURSINCEHEATANNOUNCE(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Duration since start of heat
  double getDURSINCESTARTOFHEAT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setDURSINCESTARTOFHEAT(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Total electric energy consumption in case of electric heating, kWh
  double getELEC_EGYTOT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setELEC_EGYTOT(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  bool select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const CDateTime& DATECHANGE);

  //## ----------------------------------END-GENERATED-CODE--------------------- 

  //## ----------------------------------YOUR-CODE------------------------------ 

  bool selectLatest( long  lngVoltTapNo );

  bool selectLatestVolTap(const std::string& PLANT,const std::string& HEATID, const std::string& TREATID);

  bool getElecConsumAtStartTime( const std::string& HeatID, const std::string& TreatID, const std::string& ActPlant, long VoltTap,CDateTime dtStartTime,double& dbElecEgyTot,CDateTime& dtActuralStartTime );

  bool handleTapChange(const std::string& HeatID, const std::string& TreatID, const std::string& Plant, long VoltTap, long ImpCurve, double ElecEgy, long Status, double DurSinceHeatAnnounce, double DurSinceHeatStart, bool Commit, cCBS_ODBC_DBError &Error);

};

#endif /* _INC_CPD_ELEC_TAPCH_INCLUDED */
