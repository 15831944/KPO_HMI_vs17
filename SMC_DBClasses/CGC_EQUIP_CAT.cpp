//## Copyright (C) 2011 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CGC_EQUIP_CAT.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_EQUIP_CAT::EQUIP_ID("EQUIP_ID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_EQUIP_CAT::EQUIP_TYPE("EQUIP_TYPE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_EQUIP_CAT::EQUIP_ID_CUST("EQUIP_ID_CUST");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_EQUIP_CAT::EQUIP_NO("EQUIP_NO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_EQUIP_CAT::TEXT_("TEXT");

//##DBClassCodeUtility ! DO NOT EDIT !
CGC_EQUIP_CAT::CGC_EQUIP_CAT(cCBS_StdConnection* Connection)
:CSMC_DBData("GC_EQUIP_CAT",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGC_EQUIP_CAT::CGC_EQUIP_CAT(cCBS_Connection* Connection)
:CSMC_DBData("GC_EQUIP_CAT",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGC_EQUIP_CAT::CGC_EQUIP_CAT()
:CSMC_DBData("GC_EQUIP_CAT")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGC_EQUIP_CAT::~CGC_EQUIP_CAT()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Equipment identification 
long CGC_EQUIP_CAT::getEQUIP_ID(long Row)
{
  return getLong(CGC_EQUIP_CAT::EQUIP_ID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_EQUIP_CAT::setEQUIP_ID(long value)
{
  setLong(CGC_EQUIP_CAT::EQUIP_ID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Equipment type 
std::string CGC_EQUIP_CAT::getEQUIP_TYPE(long Row)
{
  return getString(CGC_EQUIP_CAT::EQUIP_TYPE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_EQUIP_CAT::setEQUIP_TYPE(const std::string& value)
{
  setString(CGC_EQUIP_CAT::EQUIP_TYPE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Customer specific equipment identification
std::string CGC_EQUIP_CAT::getEQUIP_ID_CUST(long Row)
{
  return getString(CGC_EQUIP_CAT::EQUIP_ID_CUST, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_EQUIP_CAT::setEQUIP_ID_CUST(const std::string& value)
{
  setString(CGC_EQUIP_CAT::EQUIP_ID_CUST, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Counter for equipment type
long CGC_EQUIP_CAT::getEQUIP_NO(long Row)
{
  return getLong(CGC_EQUIP_CAT::EQUIP_NO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_EQUIP_CAT::setEQUIP_NO(long value)
{
  setLong(CGC_EQUIP_CAT::EQUIP_NO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Description of equipment
std::string CGC_EQUIP_CAT::getTEXT(long Row)
{
  return getString(CGC_EQUIP_CAT::TEXT_, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_EQUIP_CAT::setTEXT(const std::string& value)
{
  setString(CGC_EQUIP_CAT::TEXT_, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CGC_EQUIP_CAT::select(long EQUIP_ID)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CGC_EQUIP_CAT::EQUIP_ID,EQUIP_ID);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CGC_EQUIP_CAT::selectByEquipIdList(std::vector<long> EQUIP_ID_LIST)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CGC_EQUIP_CAT::EQUIP_ID, EQUIP_ID_LIST, "IN");
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

std::vector<long> CGC_EQUIP_CAT::getEquipIdList(const std::string& EQUIP_ID_CUST, const std::string& EQUIP_TYPE)
{
  std::vector<long> EQUIP_ID_LIST;

  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CGC_EQUIP_CAT::EQUIP_ID_CUST, EQUIP_ID_CUST);
  addWhereClause(CGC_EQUIP_CAT::EQUIP_TYPE , EQUIP_TYPE);

  m_Statement += getWhereStatement() + ";";

  if ( CSMC_DBData::select() )
  {
    for ( long i = 1; i <= getLastRow(); ++i )
    {
      EQUIP_ID_LIST.push_back(getEQUIP_ID(i));
    }
  }

  return EQUIP_ID_LIST;
}

bool CGC_EQUIP_CAT::InsertData(long EQUIP_ID,const std::string &EQUIP_TYPE, const std::string &EQUIP_ID_CUST, long EQUIP_NO,const std::string &TEXT, bool Commit, cCBS_ODBC_DBError &Error)
{
  bool RetValue = true;

  setEQUIP_ID           (EQUIP_ID);
  setEQUIP_TYPE         (EQUIP_TYPE);
  setEQUIP_ID_CUST      (EQUIP_ID_CUST);
  setEQUIP_NO           (EQUIP_NO);
  setTEXT               (TEXT);

  RetValue = RetValue && insert();

  if (!RetValue)
    Error = getLastError();

  if (Commit)
  {
    if (RetValue)
      commit();
    else
      rollback();
  }

  return RetValue;
}

long CGC_EQUIP_CAT::GetMaxEQUIP_ID()
{
	long EQUIP_ID;

	cleanWhereStatement();

  m_Statement = "Select max(EQUIP_ID) as EQUIP_ID from " + m_TableName;

  //m_Statement += getWhereStatement();

  if ( CSMC_DBData::select() )
  {
    EQUIP_ID = getEQUIP_ID(1);
  }

  return EQUIP_ID;
}


