//## Copyright (C) 2010 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CPD_SCRAP_CONTAINER_ENTRY.h"
#include "CPD_SCRAP_CONTAINER.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_SCRAP_CONTAINER::CONTAINERNO("CONTAINERNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_SCRAP_CONTAINER::CONTAINERTYPE("CONTAINERTYPE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_SCRAP_CONTAINER::STATUSNO("STATUSNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_SCRAP_CONTAINER::LOCATIONNO("LOCATIONNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_SCRAP_CONTAINER::LOADINGSTARTTIME("LOADINGSTARTTIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_SCRAP_CONTAINER::LOADINGENDTIME("LOADINGENDTIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_SCRAP_CONTAINER::CHARGINGTIME("CHARGINGTIME");

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_SCRAP_CONTAINER::CPD_SCRAP_CONTAINER(cCBS_StdConnection* Connection)
:CSMC_DBData("PD_SCRAP_CONTAINER",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_SCRAP_CONTAINER::CPD_SCRAP_CONTAINER(cCBS_Connection* Connection)
:CSMC_DBData("PD_SCRAP_CONTAINER",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_SCRAP_CONTAINER::CPD_SCRAP_CONTAINER()
:CSMC_DBData("PD_SCRAP_CONTAINER")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_SCRAP_CONTAINER::~CPD_SCRAP_CONTAINER()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Unique identification number
long CPD_SCRAP_CONTAINER::getCONTAINERNO(long Row)
{
  return getLong(CPD_SCRAP_CONTAINER::CONTAINERNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_SCRAP_CONTAINER::setCONTAINERNO(long value)
{
  setLong(CPD_SCRAP_CONTAINER::CONTAINERNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##basket or chute
std::string CPD_SCRAP_CONTAINER::getCONTAINERTYPE(long Row)
{
  return getString(CPD_SCRAP_CONTAINER::CONTAINERTYPE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_SCRAP_CONTAINER::setCONTAINERTYPE(const std::string& value)
{
  setString(CPD_SCRAP_CONTAINER::CONTAINERTYPE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPD_SCRAP_CONTAINER::getSTATUSNO(long Row)
{
  return getLong(CPD_SCRAP_CONTAINER::STATUSNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_SCRAP_CONTAINER::setSTATUSNO(long value)
{
  setLong(CPD_SCRAP_CONTAINER::STATUSNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Location identification
long CPD_SCRAP_CONTAINER::getLOCATIONNO(long Row)
{
  return getLong(CPD_SCRAP_CONTAINER::LOCATIONNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_SCRAP_CONTAINER::setLOCATIONNO(long value)
{
  setLong(CPD_SCRAP_CONTAINER::LOCATIONNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Timestamp, when loading has started
CDateTime CPD_SCRAP_CONTAINER::getLOADINGSTARTTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CPD_SCRAP_CONTAINER::LOADINGSTARTTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_SCRAP_CONTAINER::setLOADINGSTARTTIME(const CDateTime& value)
{
 setString(CPD_SCRAP_CONTAINER::LOADINGSTARTTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Timestamp, when loading has finished
CDateTime CPD_SCRAP_CONTAINER::getLOADINGENDTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CPD_SCRAP_CONTAINER::LOADINGENDTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_SCRAP_CONTAINER::setLOADINGENDTIME(const CDateTime& value)
{
 setString(CPD_SCRAP_CONTAINER::LOADINGENDTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Timestamp, when container was discharged
CDateTime CPD_SCRAP_CONTAINER::getCHARGINGTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CPD_SCRAP_CONTAINER::CHARGINGTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_SCRAP_CONTAINER::setCHARGINGTIME(const CDateTime& value)
{
 setString(CPD_SCRAP_CONTAINER::CHARGINGTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CPD_SCRAP_CONTAINER::select(long CONTAINERNO, const std::string& CONTAINERTYPE)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPD_SCRAP_CONTAINER::CONTAINERNO,CONTAINERNO);
  addWhereClause(CPD_SCRAP_CONTAINER::CONTAINERTYPE,CONTAINERTYPE);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CPD_SCRAP_CONTAINER::deleteRow(long CONTAINERNO, const std::string& CONTAINERTYPE)
{
  cleanWhereStatement();

  addWhereClause(CPD_SCRAP_CONTAINER::CONTAINERNO, CONTAINERNO);
  addWhereClause(CPD_SCRAP_CONTAINER::CONTAINERTYPE, CONTAINERTYPE);

  return deleteRows();
}

double CPD_SCRAP_CONTAINER::getContainerWeight(long CONTAINERID, const std::string& CONTAINERTYPE)
{
  double dContainerWeight = 0.;

  CPD_SCRAP_CONTAINER_ENTRY  PD_SCRAP_CONTAINER_ENTRY (m_pCBS_StdConnection);
         
  if ( PD_SCRAP_CONTAINER_ENTRY.select(CONTAINERID, CONTAINERTYPE, CSMC_DBData::unspecLong) )
  {
    for (long i=1; i <= PD_SCRAP_CONTAINER_ENTRY.getLastRow(); i++)
    {
      dContainerWeight += PD_SCRAP_CONTAINER_ENTRY.getMATWEIGHT(i);
    }
  }

  return dContainerWeight;
}

bool CPD_SCRAP_CONTAINER::updateDischargeTime(long CONTAINERNO, const std::string& CONTAINERTYPE,const CDateTime& dateTime)
{
  bool  result = false;
  std::stringstream sql;
  sql << " update pd_scrap_container"
    <<"       set chargingtime = '"<< dateTime.toDBString()<<"'"
    << "    where containerno = " << CONTAINERNO
    << "          and containertype = '" << CONTAINERTYPE<<"'";
  result = executeSQL(sql.str());

  if(result)
    commit();
  else 
    rollback();

  return result;
}


