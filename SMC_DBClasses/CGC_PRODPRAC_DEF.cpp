//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CGC_PRODPRAC_DEF.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_PRODPRAC_DEF::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_PRODPRAC_DEF::DESCR_PP("DESCR_PP");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_PRODPRAC_DEF::RESTRICTION("RESTRICTION");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_PRODPRAC_DEF::DISPLAY_ORDER("DISPLAY_ORDER");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_PRODPRAC_DEF::RESTRICTION_STANDARD("RESTRICTION_STANDARD");

//##DBClassCodeUtility ! DO NOT EDIT !
CGC_PRODPRAC_DEF::CGC_PRODPRAC_DEF(cCBS_StdConnection* Connection)
:CSMC_DBData("GC_PRODPRAC_DEF",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGC_PRODPRAC_DEF::CGC_PRODPRAC_DEF(cCBS_Connection* Connection)
:CSMC_DBData("GC_PRODPRAC_DEF",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGC_PRODPRAC_DEF::CGC_PRODPRAC_DEF()
:CSMC_DBData("GC_PRODPRAC_DEF")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGC_PRODPRAC_DEF::~CGC_PRODPRAC_DEF()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Plant identifier
std::string CGC_PRODPRAC_DEF::getPLANT(long Row)
{
  return getString(CGC_PRODPRAC_DEF::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_PRODPRAC_DEF::setPLANT(const std::string& value)
{
  setString(CGC_PRODPRAC_DEF::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Name of practice pointer or practice group
std::string CGC_PRODPRAC_DEF::getDESCR_PP(long Row)
{
  return getString(CGC_PRODPRAC_DEF::DESCR_PP, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_PRODPRAC_DEF::setDESCR_PP(const std::string& value)
{
  setString(CGC_PRODPRAC_DEF::DESCR_PP, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Indication that this practice pointer is usable for a restriction
long CGC_PRODPRAC_DEF::getRESTRICTION(long Row)
{
  return getLong(CGC_PRODPRAC_DEF::RESTRICTION, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_PRODPRAC_DEF::setRESTRICTION(long value)
{
  setLong(CGC_PRODPRAC_DEF::RESTRICTION, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Display order for HMI
long CGC_PRODPRAC_DEF::getDISPLAY_ORDER(long Row)
{
  return getLong(CGC_PRODPRAC_DEF::DISPLAY_ORDER, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_PRODPRAC_DEF::setDISPLAY_ORDER(long value)
{
  setLong(CGC_PRODPRAC_DEF::DISPLAY_ORDER, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Indication that this practice is used as standard material restriction independent of grade code
long CGC_PRODPRAC_DEF::getRESTRICTION_STANDARD(long Row)
{
  return getLong(CGC_PRODPRAC_DEF::RESTRICTION_STANDARD, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_PRODPRAC_DEF::setRESTRICTION_STANDARD(long value)
{
  setLong(CGC_PRODPRAC_DEF::RESTRICTION_STANDARD, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CGC_PRODPRAC_DEF::select(const std::string& PLANT, const std::string& DESCR_PP)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CGC_PRODPRAC_DEF::PLANT,PLANT);
  addWhereClause(CGC_PRODPRAC_DEF::DESCR_PP,DESCR_PP);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CGC_PRODPRAC_DEF::selectOnlyStandard(const std::string& PLANT)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CGC_PRODPRAC_DEF::PLANT,PLANT);
  addWhereClause(CGC_PRODPRAC_DEF::RESTRICTION_STANDARD,(long)1);

  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

bool CGC_PRODPRAC_DEF::selectRestriction(const std::string& PLANT, bool WithDefault)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CGC_PRODPRAC_DEF::PLANT,PLANT);
  addWhereClause(CGC_PRODPRAC_DEF::RESTRICTION,(long)1);
  addWhereClause(CGC_PRODPRAC_DEF::RESTRICTION_STANDARD,(long)0);

  if ( WithDefault )
  {
    m_Statement += getWhereStatement() + " UNION Select * from " + m_TableName;
    cleanWhereStatement();

    addWhereClause(CGC_PRODPRAC_DEF::PLANT,PLANT);
    addWhereClause(CGC_PRODPRAC_DEF::RESTRICTION,(long)0);
    addWhereClause(CGC_PRODPRAC_DEF::RESTRICTION_STANDARD,(long)1);
  }
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}


