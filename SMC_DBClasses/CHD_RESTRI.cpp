//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CGT_RESTRI.h"
#include "CHD_RESTRI.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_RESTRI::HEATID("HEATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_RESTRI::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_RESTRI::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_RESTRI::DESCR_PP("DESCR_PP");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_RESTRI::PRACNO("PRACNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_RESTRI::TREATMODENO("TREATMODENO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_RESTRI::LIQ_ADD_AMOUNT("LIQ_ADD_AMOUNT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_RESTRI::DESCR_E("DESCR_E");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_RESTRI::DESCR_C("DESCR_C");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_RESTRI::REVTIME("REVTIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_RESTRI::USERCODE("USERCODE");

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_RESTRI::CHD_RESTRI(cCBS_StdConnection* Connection)
:CSMC_DBData("HD_RESTRI",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_RESTRI::CHD_RESTRI(cCBS_Connection* Connection)
:CSMC_DBData("HD_RESTRI",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_RESTRI::CHD_RESTRI()
:CSMC_DBData("HD_RESTRI")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_RESTRI::~CHD_RESTRI()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Internal heat identifier
std::string CHD_RESTRI::getHEATID(long Row)
{
  return getString(CHD_RESTRI::HEATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_RESTRI::setHEATID(const std::string& value)
{
  setString(CHD_RESTRI::HEATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Treatment identifier
std::string CHD_RESTRI::getTREATID(long Row)
{
  return getString(CHD_RESTRI::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_RESTRI::setTREATID(const std::string& value)
{
  setString(CHD_RESTRI::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Plant identifier
std::string CHD_RESTRI::getPLANT(long Row)
{
  return getString(CHD_RESTRI::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_RESTRI::setPLANT(const std::string& value)
{
  setString(CHD_RESTRI::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Name of practice pointer or practice group
std::string CHD_RESTRI::getDESCR_PP(long Row)
{
  return getString(CHD_RESTRI::DESCR_PP, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_RESTRI::setDESCR_PP(const std::string& value)
{
  setString(CHD_RESTRI::DESCR_PP, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Production Practice Number
long CHD_RESTRI::getPRACNO(long Row)
{
  return getLong(CHD_RESTRI::PRACNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_RESTRI::setPRACNO(long value)
{
  setLong(CHD_RESTRI::PRACNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Treatment mode number
long CHD_RESTRI::getTREATMODENO(long Row)
{
  return getLong(CHD_RESTRI::TREATMODENO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_RESTRI::setTREATMODENO(long value)
{
  setLong(CHD_RESTRI::TREATMODENO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Amount of  liquid addition relative to aim steel weight into EAF/Conarc., AOD, LF... = 0. Unit: % without precision
long CHD_RESTRI::getLIQ_ADD_AMOUNT(long Row)
{
  return getLong(CHD_RESTRI::LIQ_ADD_AMOUNT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_RESTRI::setLIQ_ADD_AMOUNT(long value)
{
  setLong(CHD_RESTRI::LIQ_ADD_AMOUNT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Practice restriction description
std::string CHD_RESTRI::getDESCR_E(long Row)
{
  return getString(CHD_RESTRI::DESCR_E, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_RESTRI::setDESCR_E(const std::string& value)
{
  setString(CHD_RESTRI::DESCR_E, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Practice restriction description Customer
std::string CHD_RESTRI::getDESCR_C(long Row)
{
  return getString(CHD_RESTRI::DESCR_C, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_RESTRI::setDESCR_C(const std::string& value)
{
  setString(CHD_RESTRI::DESCR_C, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Date and time of last revision
CDateTime CHD_RESTRI::getREVTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHD_RESTRI::REVTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_RESTRI::setREVTIME(const CDateTime& value)
{
 setString(CHD_RESTRI::REVTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHD_RESTRI::getUSERCODE(long Row)
{
  return getString(CHD_RESTRI::USERCODE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_RESTRI::setUSERCODE(const std::string& value)
{
  setString(CHD_RESTRI::USERCODE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CHD_RESTRI::select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const std::string& DESCR_PP, long PRACNO, long TREATMODENO, long LIQ_ADD_AMOUNT)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CHD_RESTRI::HEATID,HEATID);
  addWhereClause(CHD_RESTRI::TREATID,TREATID);
  addWhereClause(CHD_RESTRI::PLANT,PLANT);
  addWhereClause(CHD_RESTRI::DESCR_PP,DESCR_PP);
  addWhereClause(CHD_RESTRI::PRACNO,PRACNO);
  addWhereClause(CHD_RESTRI::TREATMODENO,TREATMODENO);
  addWhereClause(CHD_RESTRI::LIQ_ADD_AMOUNT,LIQ_ADD_AMOUNT);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CHD_RESTRI::copy(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long PLANTNO, const std::string& DESCR_PP, long PRACNO, long TREATMODENO, long LIQ_ADD_AMOUNT, bool Commit, cCBS_ODBC_DBError &Error)
{
  bool result = !exists(HEATID, TREATID, PLANT, DESCR_PP);
  //some data found -> delete them
  if (!result)
  {
    result = deleteRows();
    if (!result)
      setLastError(std::string("ERROR_DELETE_DATA"), 0, getActStatement());
  }

  // preparing setting for source table
  CGT_RESTRI GT_RESTRI(m_pCBS_StdConnection);

  if ( TREATMODENO == CSMC_DBData::unspecLong )
  {
    TREATMODENO = 0;
  }
  if ( LIQ_ADD_AMOUNT == CSMC_DBData::unspecLong )
  {
    LIQ_ADD_AMOUNT = 0;
  }

  //std::stringstream MaxLiqAddSql;
  //MaxLiqAddSql << "LIQ_ADD_AMOUNT = (SELECT MAX(LIQ_ADD_AMOUNT) FROM GT_RESTRI WHERE "
  //             << "PLANT = '" << PLANT << "' AND "
  //             << "DESCR_PP = '" << DESCR_PP << "' AND "
  //             << "TREATMODENO = " << TREATMODENO << " AND "
  //             << "LIQ_ADD_AMOUNT <= " << LIQ_ADD_AMOUNT << " AND ";

  // prepare sub-select statement for LiqAdd
  std::stringstream MaxLiqAddSql;
  MaxLiqAddSql << "LIQ_ADD_AMOUNT = (SELECT MAX(LIQ_ADD_AMOUNT) FROM GT_RESTRI ";

  //the select will clean the where statement
  if ( GT_RESTRI.selectRestriction(PLANT, PLANTNO, DESCR_PP, PRACNO, TREATMODENO, LIQ_ADD_AMOUNT ) )
  { 
    //we need to clean again here

    GT_RESTRI.cleanWhereStatement();
    GT_RESTRI.addWhereClause(CGT_RESTRI::PLANT,PLANT);
    GT_RESTRI.addWhereClause(CGT_RESTRI::DESCR_PP,DESCR_PP);
		GT_RESTRI.addWhereClause(CGT_RESTRI::PRACNO,PRACNO); //SARS
    GT_RESTRI.addWhereClause(CGT_RESTRI::TREATMODENO,TREATMODENO);
    GT_RESTRI.addWhereClause(CGT_RESTRI::LIQ_ADD_AMOUNT,LIQ_ADD_AMOUNT,"<=");
    
    // finalize sub-select statement for LiqAdd
    GT_RESTRI.addWhereClause(CGT_RESTRI::PLANTNO,PLANTNO);
    MaxLiqAddSql << GT_RESTRI.getWhereStatement() << ")"; //close the brackets

    // copy spezialized restriction
    GT_RESTRI.cleanWhereStatement();
    GT_RESTRI.addWhereClause(CGT_RESTRI::PLANT,PLANT);
    GT_RESTRI.addWhereClause(CGT_RESTRI::PLANTNO,PLANTNO);
    GT_RESTRI.addWhereClause(CGT_RESTRI::DESCR_PP,DESCR_PP);
    GT_RESTRI.addWhereClause(CGT_RESTRI::PRACNO,PRACNO);
    GT_RESTRI.addWhereClause(CGT_RESTRI::TREATMODENO,TREATMODENO);
    GT_RESTRI.addWhereClause(MaxLiqAddSql.str());
  }
  else
  {
    GT_RESTRI.cleanWhereStatement();
    GT_RESTRI.addWhereClause(CGT_RESTRI::PLANT,PLANT);
    GT_RESTRI.addWhereClause(CGT_RESTRI::DESCR_PP,DESCR_PP);
		GT_RESTRI.addWhereClause(CGT_RESTRI::PRACNO,PRACNO); //SARS
    GT_RESTRI.addWhereClause(CGT_RESTRI::TREATMODENO,TREATMODENO);
    GT_RESTRI.addWhereClause(CGT_RESTRI::LIQ_ADD_AMOUNT,LIQ_ADD_AMOUNT,"<=");

    // finalize sub-select statement for LiqAdd
    GT_RESTRI.addWhereClause(CGT_RESTRI::PLANTNO,(long)0);
    MaxLiqAddSql << GT_RESTRI.getWhereStatement() << ")";

    //copy default restriction
    GT_RESTRI.cleanWhereStatement();
    GT_RESTRI.addWhereClause(CGT_RESTRI::PLANT,PLANT);
    GT_RESTRI.addWhereClause(CGT_RESTRI::PLANTNO,(long)0);
    GT_RESTRI.addWhereClause(CGT_RESTRI::DESCR_PP,DESCR_PP);
    GT_RESTRI.addWhereClause(CGT_RESTRI::PRACNO,PRACNO);
    GT_RESTRI.addWhereClause(CGT_RESTRI::TREATMODENO,TREATMODENO);
    GT_RESTRI.addWhereClause(MaxLiqAddSql.str());
  }
  // preparing setting for aim table
  setHEATID (HEATID);
  setTREATID(TREATID);
  setPLANT  (PLANT);

  result = result && copyByInsert(&GT_RESTRI);

  if (!result)
    Error = getLastError();

  if(Commit)
  {
    if (result)
      this->commit();
    else
      rollback();
  }

  return result;
}

bool CHD_RESTRI::exists(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const std::string& DESCR_PP)
{
  cleanWhereStatement();

  m_Statement = "Select HEATID from " + m_TableName;

  addWhereClause(CHD_RESTRI::HEATID,HEATID);
  addWhereClause(CHD_RESTRI::TREATID,TREATID);
  addWhereClause(CHD_RESTRI::PLANT,PLANT);  
  addWhereClause(CHD_RESTRI::DESCR_PP,DESCR_PP);  

  std::string sWhereStatement = getWhereStatement();
  //to avoid the exception like 'Select HEATID from PP_HEAT AND ROWNUM = 1 '
  if(sWhereStatement.length() > 0 ) 
  {
    // do not use ROWNUM in "addWhereClause", ROWNUM is not a table column and where statement will be used for deletion at "deleteRows"
    m_Statement += sWhereStatement + " AND ROWNUM = 1 ;";
  }
  else
  {
    return false; //should we not use m_Statement += " where ROWNUM = 1 ;"; and select?
  }

  return CSMC_DBData::select();
}


