//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CGCL_ACTIVITY.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGCL_ACTIVITY::ACTIVITYNAME("ACTIVITYNAME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGCL_ACTIVITY::ACTIVITYDESCR("ACTIVITYDESCR");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGCL_ACTIVITY::PRIORITY("PRIORITY");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGCL_ACTIVITY::VISIBLE("VISIBLE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGCL_ACTIVITY::COLOUR_RED("COLOUR_RED");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGCL_ACTIVITY::COLOUR_GREEN("COLOUR_GREEN");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGCL_ACTIVITY::COLOUR_BLUE("COLOUR_BLUE");

//##DBClassCodeUtility ! DO NOT EDIT !
CGCL_ACTIVITY::CGCL_ACTIVITY(cCBS_StdConnection* Connection)
:CSMC_DBData("GCL_ACTIVITY",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGCL_ACTIVITY::CGCL_ACTIVITY(cCBS_Connection* Connection)
:CSMC_DBData("GCL_ACTIVITY",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGCL_ACTIVITY::CGCL_ACTIVITY()
:CSMC_DBData("GCL_ACTIVITY")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGCL_ACTIVITY::~CGCL_ACTIVITY()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CGCL_ACTIVITY::getACTIVITYNAME(long Row)
{
  return getString(CGCL_ACTIVITY::ACTIVITYNAME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGCL_ACTIVITY::setACTIVITYNAME(const std::string& value)
{
  setString(CGCL_ACTIVITY::ACTIVITYNAME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CGCL_ACTIVITY::getACTIVITYDESCR(long Row)
{
  return getString(CGCL_ACTIVITY::ACTIVITYDESCR, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGCL_ACTIVITY::setACTIVITYDESCR(const std::string& value)
{
  setString(CGCL_ACTIVITY::ACTIVITYDESCR, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CGCL_ACTIVITY::getPRIORITY(long Row)
{
  return getLong(CGCL_ACTIVITY::PRIORITY, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGCL_ACTIVITY::setPRIORITY(long value)
{
  setLong(CGCL_ACTIVITY::PRIORITY, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CGCL_ACTIVITY::getVISIBLE(long Row)
{
  return getLong(CGCL_ACTIVITY::VISIBLE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGCL_ACTIVITY::setVISIBLE(long value)
{
  setLong(CGCL_ACTIVITY::VISIBLE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CGCL_ACTIVITY::getCOLOUR_RED(long Row)
{
  return getLong(CGCL_ACTIVITY::COLOUR_RED, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGCL_ACTIVITY::setCOLOUR_RED(long value)
{
  setLong(CGCL_ACTIVITY::COLOUR_RED, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CGCL_ACTIVITY::getCOLOUR_GREEN(long Row)
{
  return getLong(CGCL_ACTIVITY::COLOUR_GREEN, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGCL_ACTIVITY::setCOLOUR_GREEN(long value)
{
  setLong(CGCL_ACTIVITY::COLOUR_GREEN, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CGCL_ACTIVITY::getCOLOUR_BLUE(long Row)
{
  return getLong(CGCL_ACTIVITY::COLOUR_BLUE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGCL_ACTIVITY::setCOLOUR_BLUE(long value)
{
  setLong(CGCL_ACTIVITY::COLOUR_BLUE, value);
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CGCL_ACTIVITY::select(const std::string& ACTIVITYNAME)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CGCL_ACTIVITY::ACTIVITYNAME,ACTIVITYNAME);

  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}


