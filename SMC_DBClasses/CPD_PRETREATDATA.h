//## Copyright (C) 2010 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 

#if defined (_MSC_VER) && (_MSC_VER >= 1000)
#pragma once
#endif
#ifndef _INC_CPD_PRETREATDATA_INCLUDED
#define _INC_CPD_PRETREATDATA_INCLUDED

#include "CSMC_DBData.h"

class CPD_SAMPLE_REF;

class CPD_PRETREATDATA
: public CSMC_DBData
{

public:
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PRETREAT_COUNTER;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string HEATID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TREATID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PLANT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PLANTNO;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PRODORDERID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string STEELGRADECODE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string HEATID_EXT_CUST;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TREATID_EXT_CUST;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string STEELWEIGHT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string SLAGWEIGHT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string HEATSTATUSNO;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string SAMPLE_REF;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string LADLENO;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string LADLETYPE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string USERCODE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string SLAB_PRODUCED;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string FREEBOARD;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string SLAGTHICKNESS;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string REVTIME;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string EXPIRATIONDATE;

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPD_PRETREATDATA(cCBS_StdConnection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPD_PRETREATDATA(cCBS_Connection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPD_PRETREATDATA();

  //##DBClassCodeUtility ! DO NOT EDIT !
  ~CPD_PRETREATDATA();

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Unique number
  long getPRETREAT_COUNTER(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPRETREAT_COUNTER(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##In case the heat was at SMSD plant before, we have already an internal id
  std::string getHEATID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setHEATID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Treatment Id last station
  std::string getTREATID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTREATID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Plant identifier of last treatment station
  std::string getPLANT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPLANT(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Plant number
  long getPLANTNO(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPLANTNO(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Production oder identification
  std::string getPRODORDERID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPRODORDERID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Steel grade code
  std::string getSTEELGRADECODE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSTEELGRADECODE(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##In case the heat was not produced at SMSD plant before, we have only that
  std::string getHEATID_EXT_CUST(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setHEATID_EXT_CUST(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Customer treatment Id at last station
  std::string getTREATID_EXT_CUST(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTREATID_EXT_CUST(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Steel weight in kg
  double getSTEELWEIGHT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSTEELWEIGHT(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Slag weight in kg
  double getSLAGWEIGHT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSLAGWEIGHT(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Defined in GC_HEAT_STAT
  long getHEATSTATUSNO(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setHEATSTATUSNO(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Unique sample reference
  long getSAMPLE_REF(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSAMPLE_REF(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Unique ladle number
  long getLADLENO(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setLADLENO(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##e.g. Hot Metal -> H, Teeming -> T
  std::string getLADLETYPE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setLADLETYPE(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##User of last revision
  std::string getUSERCODE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setUSERCODE(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Planning issue, flag for return heats: In case a slab was produced at the CCS with that heat, the flag is 1, if no slabs are produced 0, if no information is available from CCS it remains NULL
  long getSLAB_PRODUCED(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSLAB_PRODUCED(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Measured freebord from previous plant
  double getFREEBOARD(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setFREEBOARD(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Measured slag thickness from previous plant
  double getSLAGTHICKNESS(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSLAGTHICKNESS(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Date and time of last revision
  CDateTime getREVTIME(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setREVTIME(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Real entry as DATETIME indicates that the heat is not longer in production and should not be considered during announcement
  CDateTime getEXPIRATIONDATE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setEXPIRATIONDATE(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  bool select(long PRETREAT_COUNTER);

  //## ----------------------------------END-GENERATED-CODE--------------------- 

  //## ----------------------------------YOUR-CODE------------------------------ 

  bool selectByHeatDataExtCust(const std::string& HEATID_EXT_CUST, const std::string& TREATID_EXT_CUST);

  bool selectByRevTime(const CDateTime& REVTIME, const std::string& Operator);

  bool selectReturnHeat(const string &PLANT,const long &PLANTNO,const string &LADLETYPE,const long &LADLENO);

  bool selectValidDataByHeat(const std::string &pHeat, const std::string &pTreat);

  bool selectValidDataByProdOrderId(const std::string &PRODORDERID);

  bool selectValidDataByProdOrderIdAndPlant(const std::string &PRODORDERID, const std::string &PLANT);

  bool addCommentsForHeatDataExtCust(const std::string& HEATID_EXT_CUST, const std::string& TREATID_EXT_CUST, const std::string& NewComment);

  bool addCommentsForProdOrderId(const std::string& PRODORDERID, const std::string& NewComment);

  bool assignSample(const std::string& HEATID_EXT_CUST, const std::string& TREATID_EXT_CUST, long SAMPLE_COUNTER, long MEASUREMENT_TYPE);

  bool assignSample(long PRETREAT_COUNTER, long SAMPLE_COUNTER, long MEASUREMENT_TYPE);

  bool deleteRowsbyPretreatCounter(long PRETREAT_COUNTER);

  bool doAnnouncement(const std::string& HEATID, const std::string &PLANT, const std::string& NextTreatID, bool Commit, cCBS_ODBC_DBError &Error);

  virtual void doOnConstruct();

  virtual void doOnDestruct();

  bool exists(const std::string &PRODORDERID, const std::string &PLANT);

  std::string getCOMMENTS(long Row);

  bool getNextPRETREAT_COUNTER(long &pPredtreatCounter, cCBS_ODBC_DBError &Error);

  long getSampleRefByHeatData(const std::string& HEATID, const std::string & TREATID);

  long getSampleRefByProdOrderId(const std::string& PRODORDERID);

  std::vector<long> getSampleRefList();

  bool updateInsert(const std::string &HEATID, const std::string &TREATID, const string PRODORDERID, const std::string &PLANT, long PLANTNO, const string STEELGRADECODE, const string HEATID_EXT_CUST, const string TREATID_EXT_CUST, double STEELMASS,	double SLAGMASS, long SAMPLE_REF, const std::string &LADLETYPE, long LADLENO, const std::string &USERCODE, long HEATSTATUSNO, bool Commit, cCBS_ODBC_DBError &Error);

  bool updateSampleRefForHeatData(const std::string& HEATID, const std::string& TREATID, long SAMPLE_REF);

  CPD_SAMPLE_REF *m_pPD_SAMPLE_REF;
};

#endif /* _INC_CPD_PRETREATDATA_INCLUDED */
