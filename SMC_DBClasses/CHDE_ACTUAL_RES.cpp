//## Copyright (C) 2013 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 

#include "CPDE_ACTUAL_RES.h"

#include "CHDE_ACTUAL_RES.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_ACTUAL_RES::HEATID("HEATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_ACTUAL_RES::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_ACTUAL_RES::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_ACTUAL_RES::REVTIME("REVTIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_ACTUAL_RES::UPDATENO("UPDATENO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_ACTUAL_RES::ELEC_CONS("ELEC_CONS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_ACTUAL_RES::DURSINCEHEATANNOUNCEMENT("DURSINCEHEATANNOUNCEMENT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_ACTUAL_RES::DURSINCESTARTOFFHEAT("DURSINCESTARTOFFHEAT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_ACTUAL_RES::STEELMASS("STEELMASS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_ACTUAL_RES::SLAGMASS("SLAGMASS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_ACTUAL_RES::TEMP("TEMP");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_ACTUAL_RES::REACTORTAP("REACTORTAP");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_ACTUAL_RES::VOLTTAP("VOLTTAP");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_ACTUAL_RES::IMPCURVE("IMPCURVE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_ACTUAL_RES::CURPHASE("CURPHASE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_ACTUAL_RES::CURELECSTEPNO("CURELECSTEPNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_ACTUAL_RES::REMELECENERGY("REMELECENERGY");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_ACTUAL_RES::COMPAVAIL_MAT("COMPAVAIL_MAT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_ACTUAL_RES::COMPAVAIL_BURNER("COMPAVAIL_BURNER");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_ACTUAL_RES::COMPAVAIL_PROCESS("COMPAVAIL_PROCESS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_ACTUAL_RES::COMPAVAIL_INJECTION("COMPAVAIL_INJECTION");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_ACTUAL_RES::COMPAVAIL_STIRRING("COMPAVAIL_STIRRING");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_ACTUAL_RES::ELECTRODEPULLREQ("ELECTRODEPULLREQ");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_ACTUAL_RES::ELECTRODELOCKREQ("ELECTRODELOCKREQ");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_ACTUAL_RES::GASTYPE_BURNER_1("GASTYPE_BURNER_1");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_ACTUAL_RES::GASTYPE_BURNER_2("GASTYPE_BURNER_2");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_ACTUAL_RES::GASFLOW_BURNER_1("GASFLOW_BURNER_1");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_ACTUAL_RES::GASFLOW_BURNER_2("GASFLOW_BURNER_2");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_ACTUAL_RES::O2FLOW_BURNER_1("O2FLOW_BURNER_1");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_ACTUAL_RES::O2FLOW_BURNER_2("O2FLOW_BURNER_2");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_ACTUAL_RES::INJ_MATFEED_4("INJ_MATFEED_4");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_ACTUAL_RES::INJ_MATFEED_3("INJ_MATFEED_3");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_ACTUAL_RES::INJ_MATFEED_2("INJ_MATFEED_2");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_ACTUAL_RES::INJ_MATFEED_1("INJ_MATFEED_1");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_ACTUAL_RES::ACTBASKETDATAREQ("ACTBASKETDATAREQ");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_ACTUAL_RES::O2FLOW_DOORLANCE("O2FLOW_DOORLANCE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_ACTUAL_RES::GASAMOUNTREM_LANCE("GASAMOUNTREM_LANCE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_ACTUAL_RES::INJ_MAT_CODE_DEV_1("INJ_MAT_CODE_DEV_1");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_ACTUAL_RES::INJ_MAT_CODE_DEV_2("INJ_MAT_CODE_DEV_2");

//##DBClassCodeUtility ! DO NOT EDIT !
CHDE_ACTUAL_RES::CHDE_ACTUAL_RES(cCBS_StdConnection* Connection)
:CSMC_DBData("HDE_ACTUAL_RES",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHDE_ACTUAL_RES::CHDE_ACTUAL_RES(cCBS_Connection* Connection)
:CSMC_DBData("HDE_ACTUAL_RES",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHDE_ACTUAL_RES::CHDE_ACTUAL_RES()
:CSMC_DBData("HDE_ACTUAL_RES")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHDE_ACTUAL_RES::~CHDE_ACTUAL_RES()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDE_ACTUAL_RES::getHEATID(long Row)
{
  return getString(CHDE_ACTUAL_RES::HEATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_ACTUAL_RES::setHEATID(const std::string& value)
{
  setString(CHDE_ACTUAL_RES::HEATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDE_ACTUAL_RES::getTREATID(long Row)
{
  return getString(CHDE_ACTUAL_RES::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_ACTUAL_RES::setTREATID(const std::string& value)
{
  setString(CHDE_ACTUAL_RES::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDE_ACTUAL_RES::getPLANT(long Row)
{
  return getString(CHDE_ACTUAL_RES::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_ACTUAL_RES::setPLANT(const std::string& value)
{
  setString(CHDE_ACTUAL_RES::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CHDE_ACTUAL_RES::getREVTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHDE_ACTUAL_RES::REVTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_ACTUAL_RES::setREVTIME(const CDateTime& value)
{
 setString(CHDE_ACTUAL_RES::REVTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDE_ACTUAL_RES::getUPDATENO(long Row)
{
  return getLong(CHDE_ACTUAL_RES::UPDATENO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_ACTUAL_RES::setUPDATENO(long value)
{
  setLong(CHDE_ACTUAL_RES::UPDATENO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_ACTUAL_RES::getELEC_CONS(long Row)
{
  return getDouble(CHDE_ACTUAL_RES::ELEC_CONS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_ACTUAL_RES::setELEC_CONS(double value)
{
  setDouble(CHDE_ACTUAL_RES::ELEC_CONS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_ACTUAL_RES::getDURSINCEHEATANNOUNCEMENT(long Row)
{
  return getDouble(CHDE_ACTUAL_RES::DURSINCEHEATANNOUNCEMENT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_ACTUAL_RES::setDURSINCEHEATANNOUNCEMENT(double value)
{
  setDouble(CHDE_ACTUAL_RES::DURSINCEHEATANNOUNCEMENT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_ACTUAL_RES::getDURSINCESTARTOFFHEAT(long Row)
{
  return getDouble(CHDE_ACTUAL_RES::DURSINCESTARTOFFHEAT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_ACTUAL_RES::setDURSINCESTARTOFFHEAT(double value)
{
  setDouble(CHDE_ACTUAL_RES::DURSINCESTARTOFFHEAT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_ACTUAL_RES::getSTEELMASS(long Row)
{
  return getDouble(CHDE_ACTUAL_RES::STEELMASS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_ACTUAL_RES::setSTEELMASS(double value)
{
  setDouble(CHDE_ACTUAL_RES::STEELMASS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_ACTUAL_RES::getSLAGMASS(long Row)
{
  return getDouble(CHDE_ACTUAL_RES::SLAGMASS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_ACTUAL_RES::setSLAGMASS(double value)
{
  setDouble(CHDE_ACTUAL_RES::SLAGMASS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_ACTUAL_RES::getTEMP(long Row)
{
  return getDouble(CHDE_ACTUAL_RES::TEMP, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_ACTUAL_RES::setTEMP(double value)
{
  setDouble(CHDE_ACTUAL_RES::TEMP, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDE_ACTUAL_RES::getREACTORTAP(long Row)
{
  return getLong(CHDE_ACTUAL_RES::REACTORTAP, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_ACTUAL_RES::setREACTORTAP(long value)
{
  setLong(CHDE_ACTUAL_RES::REACTORTAP, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDE_ACTUAL_RES::getVOLTTAP(long Row)
{
  return getLong(CHDE_ACTUAL_RES::VOLTTAP, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_ACTUAL_RES::setVOLTTAP(long value)
{
  setLong(CHDE_ACTUAL_RES::VOLTTAP, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDE_ACTUAL_RES::getIMPCURVE(long Row)
{
  return getLong(CHDE_ACTUAL_RES::IMPCURVE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_ACTUAL_RES::setIMPCURVE(long value)
{
  setLong(CHDE_ACTUAL_RES::IMPCURVE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDE_ACTUAL_RES::getCURPHASE(long Row)
{
  return getString(CHDE_ACTUAL_RES::CURPHASE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_ACTUAL_RES::setCURPHASE(const std::string& value)
{
  setString(CHDE_ACTUAL_RES::CURPHASE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDE_ACTUAL_RES::getCURELECSTEPNO(long Row)
{
  return getLong(CHDE_ACTUAL_RES::CURELECSTEPNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_ACTUAL_RES::setCURELECSTEPNO(long value)
{
  setLong(CHDE_ACTUAL_RES::CURELECSTEPNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_ACTUAL_RES::getREMELECENERGY(long Row)
{
  return getDouble(CHDE_ACTUAL_RES::REMELECENERGY, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_ACTUAL_RES::setREMELECENERGY(double value)
{
  setDouble(CHDE_ACTUAL_RES::REMELECENERGY, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDE_ACTUAL_RES::getCOMPAVAIL_MAT(long Row)
{
  return getLong(CHDE_ACTUAL_RES::COMPAVAIL_MAT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_ACTUAL_RES::setCOMPAVAIL_MAT(long value)
{
  setLong(CHDE_ACTUAL_RES::COMPAVAIL_MAT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDE_ACTUAL_RES::getCOMPAVAIL_BURNER(long Row)
{
  return getLong(CHDE_ACTUAL_RES::COMPAVAIL_BURNER, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_ACTUAL_RES::setCOMPAVAIL_BURNER(long value)
{
  setLong(CHDE_ACTUAL_RES::COMPAVAIL_BURNER, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDE_ACTUAL_RES::getCOMPAVAIL_PROCESS(long Row)
{
  return getLong(CHDE_ACTUAL_RES::COMPAVAIL_PROCESS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_ACTUAL_RES::setCOMPAVAIL_PROCESS(long value)
{
  setLong(CHDE_ACTUAL_RES::COMPAVAIL_PROCESS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDE_ACTUAL_RES::getCOMPAVAIL_INJECTION(long Row)
{
  return getLong(CHDE_ACTUAL_RES::COMPAVAIL_INJECTION, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_ACTUAL_RES::setCOMPAVAIL_INJECTION(long value)
{
  setLong(CHDE_ACTUAL_RES::COMPAVAIL_INJECTION, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDE_ACTUAL_RES::getCOMPAVAIL_STIRRING(long Row)
{
  return getLong(CHDE_ACTUAL_RES::COMPAVAIL_STIRRING, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_ACTUAL_RES::setCOMPAVAIL_STIRRING(long value)
{
  setLong(CHDE_ACTUAL_RES::COMPAVAIL_STIRRING, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDE_ACTUAL_RES::getELECTRODEPULLREQ(long Row)
{
  return getLong(CHDE_ACTUAL_RES::ELECTRODEPULLREQ, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_ACTUAL_RES::setELECTRODEPULLREQ(long value)
{
  setLong(CHDE_ACTUAL_RES::ELECTRODEPULLREQ, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDE_ACTUAL_RES::getELECTRODELOCKREQ(long Row)
{
  return getLong(CHDE_ACTUAL_RES::ELECTRODELOCKREQ, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_ACTUAL_RES::setELECTRODELOCKREQ(long value)
{
  setLong(CHDE_ACTUAL_RES::ELECTRODELOCKREQ, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDE_ACTUAL_RES::getGASTYPE_BURNER_1(long Row)
{
  return getString(CHDE_ACTUAL_RES::GASTYPE_BURNER_1, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_ACTUAL_RES::setGASTYPE_BURNER_1(const std::string& value)
{
  setString(CHDE_ACTUAL_RES::GASTYPE_BURNER_1, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDE_ACTUAL_RES::getGASTYPE_BURNER_2(long Row)
{
  return getString(CHDE_ACTUAL_RES::GASTYPE_BURNER_2, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_ACTUAL_RES::setGASTYPE_BURNER_2(const std::string& value)
{
  setString(CHDE_ACTUAL_RES::GASTYPE_BURNER_2, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_ACTUAL_RES::getGASFLOW_BURNER_1(long Row)
{
  return getDouble(CHDE_ACTUAL_RES::GASFLOW_BURNER_1, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_ACTUAL_RES::setGASFLOW_BURNER_1(double value)
{
  setDouble(CHDE_ACTUAL_RES::GASFLOW_BURNER_1, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_ACTUAL_RES::getGASFLOW_BURNER_2(long Row)
{
  return getDouble(CHDE_ACTUAL_RES::GASFLOW_BURNER_2, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_ACTUAL_RES::setGASFLOW_BURNER_2(double value)
{
  setDouble(CHDE_ACTUAL_RES::GASFLOW_BURNER_2, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_ACTUAL_RES::getO2FLOW_BURNER_1(long Row)
{
  return getDouble(CHDE_ACTUAL_RES::O2FLOW_BURNER_1, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_ACTUAL_RES::setO2FLOW_BURNER_1(double value)
{
  setDouble(CHDE_ACTUAL_RES::O2FLOW_BURNER_1, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_ACTUAL_RES::getO2FLOW_BURNER_2(long Row)
{
  return getDouble(CHDE_ACTUAL_RES::O2FLOW_BURNER_2, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_ACTUAL_RES::setO2FLOW_BURNER_2(double value)
{
  setDouble(CHDE_ACTUAL_RES::O2FLOW_BURNER_2, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_ACTUAL_RES::getINJ_MATFEED_4(long Row)
{
  return getDouble(CHDE_ACTUAL_RES::INJ_MATFEED_4, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_ACTUAL_RES::setINJ_MATFEED_4(double value)
{
  setDouble(CHDE_ACTUAL_RES::INJ_MATFEED_4, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_ACTUAL_RES::getINJ_MATFEED_3(long Row)
{
  return getDouble(CHDE_ACTUAL_RES::INJ_MATFEED_3, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_ACTUAL_RES::setINJ_MATFEED_3(double value)
{
  setDouble(CHDE_ACTUAL_RES::INJ_MATFEED_3, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_ACTUAL_RES::getINJ_MATFEED_2(long Row)
{
  return getDouble(CHDE_ACTUAL_RES::INJ_MATFEED_2, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_ACTUAL_RES::setINJ_MATFEED_2(double value)
{
  setDouble(CHDE_ACTUAL_RES::INJ_MATFEED_2, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_ACTUAL_RES::getINJ_MATFEED_1(long Row)
{
  return getDouble(CHDE_ACTUAL_RES::INJ_MATFEED_1, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_ACTUAL_RES::setINJ_MATFEED_1(double value)
{
  setDouble(CHDE_ACTUAL_RES::INJ_MATFEED_1, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDE_ACTUAL_RES::getACTBASKETDATAREQ(long Row)
{
  return getLong(CHDE_ACTUAL_RES::ACTBASKETDATAREQ, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_ACTUAL_RES::setACTBASKETDATAREQ(long value)
{
  setLong(CHDE_ACTUAL_RES::ACTBASKETDATAREQ, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_ACTUAL_RES::getO2FLOW_DOORLANCE(long Row)
{
  return getDouble(CHDE_ACTUAL_RES::O2FLOW_DOORLANCE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_ACTUAL_RES::setO2FLOW_DOORLANCE(double value)
{
  setDouble(CHDE_ACTUAL_RES::O2FLOW_DOORLANCE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_ACTUAL_RES::getGASAMOUNTREM_LANCE(long Row)
{
  return getDouble(CHDE_ACTUAL_RES::GASAMOUNTREM_LANCE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_ACTUAL_RES::setGASAMOUNTREM_LANCE(double value)
{
  setDouble(CHDE_ACTUAL_RES::GASAMOUNTREM_LANCE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDE_ACTUAL_RES::getINJ_MAT_CODE_DEV_1(long Row)
{
  return getString(CHDE_ACTUAL_RES::INJ_MAT_CODE_DEV_1, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_ACTUAL_RES::setINJ_MAT_CODE_DEV_1(const std::string& value)
{
  setString(CHDE_ACTUAL_RES::INJ_MAT_CODE_DEV_1, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDE_ACTUAL_RES::getINJ_MAT_CODE_DEV_2(long Row)
{
  return getString(CHDE_ACTUAL_RES::INJ_MAT_CODE_DEV_2, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_ACTUAL_RES::setINJ_MAT_CODE_DEV_2(const std::string& value)
{
  setString(CHDE_ACTUAL_RES::INJ_MAT_CODE_DEV_2, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CHDE_ACTUAL_RES::select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const CDateTime& REVTIME)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CHDE_ACTUAL_RES::HEATID,HEATID);
  addWhereClause(CHDE_ACTUAL_RES::TREATID,TREATID);
  addWhereClause(CHDE_ACTUAL_RES::PLANT,PLANT);
  addWhereClause(CHDE_ACTUAL_RES::REVTIME,REVTIME);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 


bool CHDE_ACTUAL_RES::copy(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, bool Commit, cCBS_ODBC_DBError &Error)
{
	bool result = !exists(HEATID, TREATID, PLANT);
	//some data found -> delete them
	if (!result)
	{
		result = deleteRows();
		if (!result)
			setLastError(std::string("ERROR_DELETE_DATA"), 0, getActStatement());
	}
	
  // preparing setting for source table
  CPDE_ACTUAL_RES PDA_ACTUAL_RES(m_pCBS_StdConnection);
  PDA_ACTUAL_RES.addWhereClause(CPDE_ACTUAL_RES::HEATID,HEATID);
  PDA_ACTUAL_RES.addWhereClause(CPDE_ACTUAL_RES::TREATID,TREATID);
  PDA_ACTUAL_RES.addWhereClause(CPDE_ACTUAL_RES::PLANT,PLANT);

  result = result && copyByInsert(&PDA_ACTUAL_RES);

	if (!result)
		Error = getLastError();

	if(Commit)
  {
		if (result)
			this->commit();
		else
			rollback();
  }

	return result;
}

bool CHDE_ACTUAL_RES::exists(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT)
{
	cleanWhereStatement();

	m_Statement = "Select HEATID from " + m_TableName;

	addWhereClause(CHDE_ACTUAL_RES::HEATID,HEATID);
	addWhereClause(CHDE_ACTUAL_RES::TREATID,TREATID);
	addWhereClause(CHDE_ACTUAL_RES::PLANT,PLANT);
   
  std::string sWhereStatement = getWhereStatement();
  //to avoid the exception like 'Select HEATID from PP_HEAT AND ROWNUM = 1 '
  if(sWhereStatement.length() > 0 ) 
  {
    // do not use ROWNUM in "addWhereClause", ROWNUM is not a table column and where statement will be used for deletion at "deleteRows"
    m_Statement += sWhereStatement + " AND ROWNUM = 1 ;";
  }
  else
  {
    return false;
  }

	return CSMC_DBData::select();
}


