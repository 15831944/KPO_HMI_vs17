//## Copyright (C) 2010 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CGT_RESTRI_ENTRY.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_RESTRI_ENTRY::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_RESTRI_ENTRY::PLANTNO("PLANTNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_RESTRI_ENTRY::DESCR_PP("DESCR_PP");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_RESTRI_ENTRY::PRACNO("PRACNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_RESTRI_ENTRY::TREATMODENO("TREATMODENO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_RESTRI_ENTRY::LIQ_ADD_AMOUNT("LIQ_ADD_AMOUNT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_RESTRI_ENTRY::LINENO("LINENO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_RESTRI_ENTRY::SOURCE("SOURCE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_RESTRI_ENTRY::RESTRITYPE("RESTRITYPE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_RESTRI_ENTRY::RESTRI_VALMAX("RESTRI_VALMAX");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_RESTRI_ENTRY::RESTRI_VALMIN("RESTRI_VALMIN");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_RESTRI_ENTRY::PURP_CODE("PURP_CODE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_RESTRI_ENTRY::MAT_CODE("MAT_CODE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_RESTRI_ENTRY::COMBINATION_NAME("COMBINATION_NAME");

//##DBClassCodeUtility ! DO NOT EDIT !
CGT_RESTRI_ENTRY::CGT_RESTRI_ENTRY(cCBS_StdConnection* Connection)
:CSMC_DBData("GT_RESTRI_ENTRY",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGT_RESTRI_ENTRY::CGT_RESTRI_ENTRY(cCBS_Connection* Connection)
:CSMC_DBData("GT_RESTRI_ENTRY",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGT_RESTRI_ENTRY::CGT_RESTRI_ENTRY()
:CSMC_DBData("GT_RESTRI_ENTRY")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGT_RESTRI_ENTRY::~CGT_RESTRI_ENTRY()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Plant identifier
std::string CGT_RESTRI_ENTRY::getPLANT(long Row)
{
  return getString(CGT_RESTRI_ENTRY::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_RESTRI_ENTRY::setPLANT(const std::string& value)
{
  setString(CGT_RESTRI_ENTRY::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Plant number
long CGT_RESTRI_ENTRY::getPLANTNO(long Row)
{
  return getLong(CGT_RESTRI_ENTRY::PLANTNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_RESTRI_ENTRY::setPLANTNO(long value)
{
  setLong(CGT_RESTRI_ENTRY::PLANTNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Name of practice pointer or practice group
std::string CGT_RESTRI_ENTRY::getDESCR_PP(long Row)
{
  return getString(CGT_RESTRI_ENTRY::DESCR_PP, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_RESTRI_ENTRY::setDESCR_PP(const std::string& value)
{
  setString(CGT_RESTRI_ENTRY::DESCR_PP, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Production Practice Number
long CGT_RESTRI_ENTRY::getPRACNO(long Row)
{
  return getLong(CGT_RESTRI_ENTRY::PRACNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_RESTRI_ENTRY::setPRACNO(long value)
{
  setLong(CGT_RESTRI_ENTRY::PRACNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Treatment mode number
long CGT_RESTRI_ENTRY::getTREATMODENO(long Row)
{
  return getLong(CGT_RESTRI_ENTRY::TREATMODENO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_RESTRI_ENTRY::setTREATMODENO(long value)
{
  setLong(CGT_RESTRI_ENTRY::TREATMODENO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Amount of  liquid addition relative to aim steel weight into EAF/Conarc, AOD, LF... = 0., Unit: % without presicion
long CGT_RESTRI_ENTRY::getLIQ_ADD_AMOUNT(long Row)
{
  return getLong(CGT_RESTRI_ENTRY::LIQ_ADD_AMOUNT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_RESTRI_ENTRY::setLIQ_ADD_AMOUNT(long value)
{
  setLong(CGT_RESTRI_ENTRY::LIQ_ADD_AMOUNT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Number of restriction for PLANT,RECIPECOMBI,RECIPECOMBINO,SOURCE
long CGT_RESTRI_ENTRY::getLINENO(long Row)
{
  return getLong(CGT_RESTRI_ENTRY::LINENO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_RESTRI_ENTRY::setLINENO(long value)
{
  setLong(CGT_RESTRI_ENTRY::LINENO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Valid Sources of a Recipe., SOURCE = ALL means all SOURCES for the recipe
std::string CGT_RESTRI_ENTRY::getSOURCE(long Row)
{
  return getString(CGT_RESTRI_ENTRY::SOURCE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_RESTRI_ENTRY::setSOURCE(const std::string& value)
{
  setString(CGT_RESTRI_ENTRY::SOURCE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Restriction type according model interface., (eg. Relative, Absolute,...)
std::string CGT_RESTRI_ENTRY::getRESTRITYPE(long Row)
{
  return getString(CGT_RESTRI_ENTRY::RESTRITYPE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_RESTRI_ENTRY::setRESTRITYPE(const std::string& value)
{
  setString(CGT_RESTRI_ENTRY::RESTRITYPE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##maximum Restriction Value
double CGT_RESTRI_ENTRY::getRESTRI_VALMAX(long Row)
{
  return getDouble(CGT_RESTRI_ENTRY::RESTRI_VALMAX, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_RESTRI_ENTRY::setRESTRI_VALMAX(double value)
{
  setDouble(CGT_RESTRI_ENTRY::RESTRI_VALMAX, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Minimum Restriction Value.
double CGT_RESTRI_ENTRY::getRESTRI_VALMIN(long Row)
{
  return getDouble(CGT_RESTRI_ENTRY::RESTRI_VALMIN, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_RESTRI_ENTRY::setRESTRI_VALMIN(double value)
{
  setDouble(CGT_RESTRI_ENTRY::RESTRI_VALMIN, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Purpose code
std::string CGT_RESTRI_ENTRY::getPURP_CODE(long Row)
{
  return getString(CGT_RESTRI_ENTRY::PURP_CODE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_RESTRI_ENTRY::setPURP_CODE(const std::string& value)
{
  setString(CGT_RESTRI_ENTRY::PURP_CODE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Material code
std::string CGT_RESTRI_ENTRY::getMAT_CODE(long Row)
{
  return getString(CGT_RESTRI_ENTRY::MAT_CODE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_RESTRI_ENTRY::setMAT_CODE(const std::string& value)
{
  setString(CGT_RESTRI_ENTRY::MAT_CODE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CGT_RESTRI_ENTRY::getCOMBINATION_NAME(long Row)
{
  return getString(CGT_RESTRI_ENTRY::COMBINATION_NAME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_RESTRI_ENTRY::setCOMBINATION_NAME(const std::string& value)
{
  setString(CGT_RESTRI_ENTRY::COMBINATION_NAME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CGT_RESTRI_ENTRY::select(const std::string& PLANT, long PLANTNO, const std::string& DESCR_PP, long PRACNO, long TREATMODENO, long LIQ_ADD_AMOUNT, long LINENO)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CGT_RESTRI_ENTRY::PLANT,PLANT);
  addWhereClause(CGT_RESTRI_ENTRY::PLANTNO,PLANTNO);
  addWhereClause(CGT_RESTRI_ENTRY::DESCR_PP,DESCR_PP);
  addWhereClause(CGT_RESTRI_ENTRY::PRACNO,PRACNO);
  addWhereClause(CGT_RESTRI_ENTRY::TREATMODENO,TREATMODENO);
  addWhereClause(CGT_RESTRI_ENTRY::LIQ_ADD_AMOUNT,LIQ_ADD_AMOUNT);
  addWhereClause(CGT_RESTRI_ENTRY::LINENO,LINENO);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CGT_RESTRI_ENTRY::selectBySourceAndCombiName(const std::string& PLANT, long PLANTNO, const std::string& DESCR_PP, long PRACNO, long TREATMODENO, long LIQ_ADD_AMOUNT, long LINENO, const std::string& SOURCE, const std::string& COMBINATION_NAME)
{
  bool RetValue = false;

  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CGT_RESTRI_ENTRY::PLANT,PLANT);
  addWhereClause(CGT_RESTRI_ENTRY::PLANTNO,PLANTNO);
  addWhereClause(CGT_RESTRI_ENTRY::DESCR_PP,DESCR_PP);
  addWhereClause(CGT_RESTRI_ENTRY::PRACNO,PRACNO);
  addWhereClause(CGT_RESTRI_ENTRY::TREATMODENO,TREATMODENO);
  addWhereClause(CGT_RESTRI_ENTRY::LIQ_ADD_AMOUNT,LIQ_ADD_AMOUNT);
  addWhereClause(CGT_RESTRI_ENTRY::LINENO,LINENO);
  addWhereClause(CGT_RESTRI_ENTRY::SOURCE,SOURCE);
  addWhereClause(CGT_RESTRI_ENTRY::COMBINATION_NAME,COMBINATION_NAME);
  m_Statement += getWhereStatement() + ";";

  RetValue = CSMC_DBData::select();

  return RetValue;
}

bool CGT_RESTRI_ENTRY::selectRestriction(const std::string& PLANT, long PLANTNO, const std::string& DESCR_PP, long PRACNO, long TREATMODENO, long LIQ_ADD_AMOUNT)
{
  bool RetValue = false;

  if ( TREATMODENO == CSMC_DBData::unspecLong )
  {
    TREATMODENO = 0;
  }
  if ( LIQ_ADD_AMOUNT == CSMC_DBData::unspecLong )
  {
    LIQ_ADD_AMOUNT = 0;
  }

  std::stringstream MaxLiqAddSql;
  MaxLiqAddSql << "LIQ_ADD_AMOUNT = (SELECT MAX(LIQ_ADD_AMOUNT) FROM " << m_TableName << "  WHERE "
               << "PLANT = '" << PLANT << "' AND "
               << "PLANTNO = " << PLANTNO << " AND "
               << "DESCR_PP = '" << DESCR_PP << "' AND "
               << "PRACNO = " << PRACNO << " AND " //SARS
               << "TREATMODENO = " << TREATMODENO << " AND "
               << "LIQ_ADD_AMOUNT <= " << LIQ_ADD_AMOUNT << ")";

  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CGT_RESTRI_ENTRY::PLANT,PLANT);
  addWhereClause(CGT_RESTRI_ENTRY::PLANTNO,PLANTNO);
  addWhereClause(CGT_RESTRI_ENTRY::DESCR_PP,DESCR_PP);
  addWhereClause(CGT_RESTRI_ENTRY::PRACNO,PRACNO);
  addWhereClause(CGT_RESTRI_ENTRY::TREATMODENO,TREATMODENO);
  addWhereClause(MaxLiqAddSql.str());
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

bool CGT_RESTRI_ENTRY::selectSpecialized(const std::string& PLANT, long PLANTNO, const std::string& DESCR_PP, long PRACNO, long TREATMODENO, long LIQ_ADD_AMOUNT)
{
  // function read first specialized restriction for plant no
  // if nothing is found than it reads general restriction definition

  bool RetValue = false;

  RetValue = selectRestriction(PLANT, PLANTNO, DESCR_PP, PRACNO, TREATMODENO, LIQ_ADD_AMOUNT);
  if ( !RetValue )
  {
    RetValue = selectRestriction(PLANT, 0, DESCR_PP, PRACNO, TREATMODENO, LIQ_ADD_AMOUNT);
  }

  return RetValue;
}


