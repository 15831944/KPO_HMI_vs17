//## Copyright (C) 2011 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CPDE_ACTUAL_RES_ANL.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_ACTUAL_RES_ANL::HEATID("HEATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_ACTUAL_RES_ANL::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_ACTUAL_RES_ANL::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_ACTUAL_RES_ANL::REVTIME("REVTIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_ACTUAL_RES_ANL::ENAME("ENAME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_ACTUAL_RES_ANL::ANL("ANL");

//##DBClassCodeUtility ! DO NOT EDIT !
CPDE_ACTUAL_RES_ANL::CPDE_ACTUAL_RES_ANL(cCBS_StdConnection* Connection)
:CSMC_DBData("PDE_ACTUAL_RES_ANL",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPDE_ACTUAL_RES_ANL::CPDE_ACTUAL_RES_ANL(cCBS_Connection* Connection)
:CSMC_DBData("PDE_ACTUAL_RES_ANL",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPDE_ACTUAL_RES_ANL::CPDE_ACTUAL_RES_ANL()
:CSMC_DBData("PDE_ACTUAL_RES_ANL")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPDE_ACTUAL_RES_ANL::~CPDE_ACTUAL_RES_ANL()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDE_ACTUAL_RES_ANL::getHEATID(long Row)
{
  return getString(CPDE_ACTUAL_RES_ANL::HEATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_ACTUAL_RES_ANL::setHEATID(const std::string& value)
{
  setString(CPDE_ACTUAL_RES_ANL::HEATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDE_ACTUAL_RES_ANL::getTREATID(long Row)
{
  return getString(CPDE_ACTUAL_RES_ANL::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_ACTUAL_RES_ANL::setTREATID(const std::string& value)
{
  setString(CPDE_ACTUAL_RES_ANL::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDE_ACTUAL_RES_ANL::getPLANT(long Row)
{
  return getString(CPDE_ACTUAL_RES_ANL::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_ACTUAL_RES_ANL::setPLANT(const std::string& value)
{
  setString(CPDE_ACTUAL_RES_ANL::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CPDE_ACTUAL_RES_ANL::getREVTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CPDE_ACTUAL_RES_ANL::REVTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_ACTUAL_RES_ANL::setREVTIME(const CDateTime& value)
{
 setString(CPDE_ACTUAL_RES_ANL::REVTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDE_ACTUAL_RES_ANL::getENAME(long Row)
{
  return getString(CPDE_ACTUAL_RES_ANL::ENAME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_ACTUAL_RES_ANL::setENAME(const std::string& value)
{
  setString(CPDE_ACTUAL_RES_ANL::ENAME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDE_ACTUAL_RES_ANL::getANL(long Row)
{
  return getDouble(CPDE_ACTUAL_RES_ANL::ANL, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_ACTUAL_RES_ANL::setANL(double value)
{
  setDouble(CPDE_ACTUAL_RES_ANL::ANL, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CPDE_ACTUAL_RES_ANL::select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const CDateTime& REVTIME, const std::string& ENAME)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPDE_ACTUAL_RES_ANL::HEATID,HEATID);
  addWhereClause(CPDE_ACTUAL_RES_ANL::TREATID,TREATID);
  addWhereClause(CPDE_ACTUAL_RES_ANL::PLANT,PLANT);
  addWhereClause(CPDE_ACTUAL_RES_ANL::REVTIME,REVTIME);
  addWhereClause(CPDE_ACTUAL_RES_ANL::ENAME,ENAME);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 


