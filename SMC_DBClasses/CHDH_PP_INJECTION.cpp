//## Copyright (C) 2013 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CHDH_PP_INJECTION.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_INJECTION::HM_ID("HM_ID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_INJECTION::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_INJECTION::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_INJECTION::PRACNO("PRACNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_INJECTION::DESCR_E("DESCR_E");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_INJECTION::DESCR_C("DESCR_C");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_INJECTION::USERCODE("USERCODE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_INJECTION::MG_EQUIV_LIME("MG_EQUIV_LIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_INJECTION::MG_EQUIV_CARBIDE("MG_EQUIV_CARBIDE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_INJECTION::CO_INJ_LIME_MIN("CO_INJ_LIME_MIN");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_INJECTION::CO_INJ_LIME_AIM("CO_INJ_LIME_AIM");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_INJECTION::CO_INJ_CARBIDE_MAX("CO_INJ_CARBIDE_MAX");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_INJECTION::CO_INJ_CARBIDE_MIN("CO_INJ_CARBIDE_MIN");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_INJECTION::CO_INJ_CARBIDE_AIM("CO_INJ_CARBIDE_AIM");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_INJECTION::CO_INJ_LIME_MAX("CO_INJ_LIME_MAX");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_INJECTION::CO_INJ_MG_MIN("CO_INJ_MG_MIN");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_INJECTION::CO_INJ_MG_AIM("CO_INJ_MG_AIM");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_INJECTION::CO_INJ_MG_MAX("CO_INJ_MG_MAX");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_INJECTION::MONO_INJ_LIME_MIN("MONO_INJ_LIME_MIN");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_INJECTION::MONO_INJ_LIME_AIM("MONO_INJ_LIME_AIM");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_INJECTION::MONO_INJ_LIME_MAX("MONO_INJ_LIME_MAX");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_INJECTION::MONO_INJ_CARBIDE_MIN("MONO_INJ_CARBIDE_MIN");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_INJECTION::MONO_INJ_CARBIDE_AIM("MONO_INJ_CARBIDE_AIM");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_INJECTION::MONO_INJ_CARBIDE_MAX("MONO_INJ_CARBIDE_MAX");

//##DBClassCodeUtility ! DO NOT EDIT !
CHDH_PP_INJECTION::CHDH_PP_INJECTION(cCBS_StdConnection* Connection)
:CSMC_DBData("HDH_PP_INJECTION",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHDH_PP_INJECTION::CHDH_PP_INJECTION(cCBS_Connection* Connection)
:CSMC_DBData("HDH_PP_INJECTION",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHDH_PP_INJECTION::CHDH_PP_INJECTION()
:CSMC_DBData("HDH_PP_INJECTION")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHDH_PP_INJECTION::~CHDH_PP_INJECTION()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_PP_INJECTION::getHM_ID(long Row)
{
  return getString(CHDH_PP_INJECTION::HM_ID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_INJECTION::setHM_ID(const std::string& value)
{
  setString(CHDH_PP_INJECTION::HM_ID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_PP_INJECTION::getTREATID(long Row)
{
  return getString(CHDH_PP_INJECTION::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_INJECTION::setTREATID(const std::string& value)
{
  setString(CHDH_PP_INJECTION::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_PP_INJECTION::getPLANT(long Row)
{
  return getString(CHDH_PP_INJECTION::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_INJECTION::setPLANT(const std::string& value)
{
  setString(CHDH_PP_INJECTION::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDH_PP_INJECTION::getPRACNO(long Row)
{
  return getLong(CHDH_PP_INJECTION::PRACNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_INJECTION::setPRACNO(long value)
{
  setLong(CHDH_PP_INJECTION::PRACNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_PP_INJECTION::getDESCR_E(long Row)
{
  return getString(CHDH_PP_INJECTION::DESCR_E, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_INJECTION::setDESCR_E(const std::string& value)
{
  setString(CHDH_PP_INJECTION::DESCR_E, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_PP_INJECTION::getDESCR_C(long Row)
{
  return getString(CHDH_PP_INJECTION::DESCR_C, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_INJECTION::setDESCR_C(const std::string& value)
{
  setString(CHDH_PP_INJECTION::DESCR_C, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_PP_INJECTION::getUSERCODE(long Row)
{
  return getString(CHDH_PP_INJECTION::USERCODE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_INJECTION::setUSERCODE(const std::string& value)
{
  setString(CHDH_PP_INJECTION::USERCODE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_PP_INJECTION::getMG_EQUIV_LIME(long Row)
{
  return getDouble(CHDH_PP_INJECTION::MG_EQUIV_LIME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_INJECTION::setMG_EQUIV_LIME(double value)
{
  setDouble(CHDH_PP_INJECTION::MG_EQUIV_LIME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_PP_INJECTION::getMG_EQUIV_CARBIDE(long Row)
{
  return getDouble(CHDH_PP_INJECTION::MG_EQUIV_CARBIDE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_INJECTION::setMG_EQUIV_CARBIDE(double value)
{
  setDouble(CHDH_PP_INJECTION::MG_EQUIV_CARBIDE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_PP_INJECTION::getCO_INJ_LIME_MIN(long Row)
{
  return getDouble(CHDH_PP_INJECTION::CO_INJ_LIME_MIN, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_INJECTION::setCO_INJ_LIME_MIN(double value)
{
  setDouble(CHDH_PP_INJECTION::CO_INJ_LIME_MIN, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_PP_INJECTION::getCO_INJ_LIME_AIM(long Row)
{
  return getDouble(CHDH_PP_INJECTION::CO_INJ_LIME_AIM, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_INJECTION::setCO_INJ_LIME_AIM(double value)
{
  setDouble(CHDH_PP_INJECTION::CO_INJ_LIME_AIM, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_PP_INJECTION::getCO_INJ_CARBIDE_MAX(long Row)
{
  return getDouble(CHDH_PP_INJECTION::CO_INJ_CARBIDE_MAX, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_INJECTION::setCO_INJ_CARBIDE_MAX(double value)
{
  setDouble(CHDH_PP_INJECTION::CO_INJ_CARBIDE_MAX, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_PP_INJECTION::getCO_INJ_CARBIDE_MIN(long Row)
{
  return getDouble(CHDH_PP_INJECTION::CO_INJ_CARBIDE_MIN, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_INJECTION::setCO_INJ_CARBIDE_MIN(double value)
{
  setDouble(CHDH_PP_INJECTION::CO_INJ_CARBIDE_MIN, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_PP_INJECTION::getCO_INJ_CARBIDE_AIM(long Row)
{
  return getDouble(CHDH_PP_INJECTION::CO_INJ_CARBIDE_AIM, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_INJECTION::setCO_INJ_CARBIDE_AIM(double value)
{
  setDouble(CHDH_PP_INJECTION::CO_INJ_CARBIDE_AIM, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_PP_INJECTION::getCO_INJ_LIME_MAX(long Row)
{
  return getDouble(CHDH_PP_INJECTION::CO_INJ_LIME_MAX, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_INJECTION::setCO_INJ_LIME_MAX(double value)
{
  setDouble(CHDH_PP_INJECTION::CO_INJ_LIME_MAX, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_PP_INJECTION::getCO_INJ_MG_MIN(long Row)
{
  return getDouble(CHDH_PP_INJECTION::CO_INJ_MG_MIN, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_INJECTION::setCO_INJ_MG_MIN(double value)
{
  setDouble(CHDH_PP_INJECTION::CO_INJ_MG_MIN, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_PP_INJECTION::getCO_INJ_MG_AIM(long Row)
{
  return getDouble(CHDH_PP_INJECTION::CO_INJ_MG_AIM, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_INJECTION::setCO_INJ_MG_AIM(double value)
{
  setDouble(CHDH_PP_INJECTION::CO_INJ_MG_AIM, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_PP_INJECTION::getCO_INJ_MG_MAX(long Row)
{
  return getDouble(CHDH_PP_INJECTION::CO_INJ_MG_MAX, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_INJECTION::setCO_INJ_MG_MAX(double value)
{
  setDouble(CHDH_PP_INJECTION::CO_INJ_MG_MAX, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_PP_INJECTION::getMONO_INJ_LIME_MIN(long Row)
{
  return getDouble(CHDH_PP_INJECTION::MONO_INJ_LIME_MIN, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_INJECTION::setMONO_INJ_LIME_MIN(double value)
{
  setDouble(CHDH_PP_INJECTION::MONO_INJ_LIME_MIN, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_PP_INJECTION::getMONO_INJ_LIME_AIM(long Row)
{
  return getDouble(CHDH_PP_INJECTION::MONO_INJ_LIME_AIM, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_INJECTION::setMONO_INJ_LIME_AIM(double value)
{
  setDouble(CHDH_PP_INJECTION::MONO_INJ_LIME_AIM, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_PP_INJECTION::getMONO_INJ_LIME_MAX(long Row)
{
  return getDouble(CHDH_PP_INJECTION::MONO_INJ_LIME_MAX, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_INJECTION::setMONO_INJ_LIME_MAX(double value)
{
  setDouble(CHDH_PP_INJECTION::MONO_INJ_LIME_MAX, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_PP_INJECTION::getMONO_INJ_CARBIDE_MIN(long Row)
{
  return getDouble(CHDH_PP_INJECTION::MONO_INJ_CARBIDE_MIN, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_INJECTION::setMONO_INJ_CARBIDE_MIN(double value)
{
  setDouble(CHDH_PP_INJECTION::MONO_INJ_CARBIDE_MIN, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_PP_INJECTION::getMONO_INJ_CARBIDE_AIM(long Row)
{
  return getDouble(CHDH_PP_INJECTION::MONO_INJ_CARBIDE_AIM, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_INJECTION::setMONO_INJ_CARBIDE_AIM(double value)
{
  setDouble(CHDH_PP_INJECTION::MONO_INJ_CARBIDE_AIM, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_PP_INJECTION::getMONO_INJ_CARBIDE_MAX(long Row)
{
  return getDouble(CHDH_PP_INJECTION::MONO_INJ_CARBIDE_MAX, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_INJECTION::setMONO_INJ_CARBIDE_MAX(double value)
{
  setDouble(CHDH_PP_INJECTION::MONO_INJ_CARBIDE_MAX, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CHDH_PP_INJECTION::select(const std::string& HM_ID, const std::string& TREATID, const std::string& PLANT, long PRACNO)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CHDH_PP_INJECTION::HM_ID,HM_ID);
  addWhereClause(CHDH_PP_INJECTION::TREATID,TREATID);
  addWhereClause(CHDH_PP_INJECTION::PLANT,PLANT);
  addWhereClause(CHDH_PP_INJECTION::PRACNO,PRACNO);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CHDH_PP_INJECTION::copyHDHPPInjection(const string& pHeatId, const string& pTreatId, const string& pPlant, long pPlantno, bool pCommit)
{
	bool result=true;
	std::stringstream sql;
	//some data found -> delete them
	/*if (!result)
	{
		result = deleteRows();
		if (!result)
			setLastError(string("delete from HDH_PP_INJECTION faild"), 0, "delete from HDH_PP_INJECTION where " + getWhereStatement());
	}*/
// PRACNO=0 for showing model data
	sql << "insert into HDH_PP_INJECTION (HM_ID,TREATID,PLANT,PRACNO,DESCR_E,DESCR_C,USERCODE,MG_EQUIV_LIME,MG_EQUIV_CARBIDE ,"
		  << " CO_INJ_LIME_MIN, CO_INJ_LIME_AIM, CO_INJ_CARBIDE_MAX, CO_INJ_CARBIDE_MIN, CO_INJ_CARBIDE_AIM, CO_INJ_LIME_MAX, CO_INJ_MG_MIN,"
			<< " CO_INJ_MG_AIM, CO_INJ_MG_MAX, MONO_INJ_LIME_MIN, MONO_INJ_LIME_AIM, MONO_INJ_LIME_MAX, MONO_INJ_CARBIDE_MIN, MONO_INJ_CARBIDE_AIM, MONO_INJ_CARBIDE_MAX) "
			<< " (select '" << pHeatId << "', '" << pTreatId << "', '" << pPlant << "', PRACNO,DESCR_E,DESCR_C,USERCODE,MG_EQUIV_LIME,MG_EQUIV_CARBIDE ,"
			//<< " (select '" << pHeatId << "', '" << pTreatId << "', '" << pPlant << "', 0,DESCR_E,DESCR_C,USERCODE,MG_EQUIV_LIME,MG_EQUIV_CARBIDE ,"
			<< " CO_INJ_LIME_MIN, CO_INJ_LIME_AIM, CO_INJ_CARBIDE_MAX, CO_INJ_CARBIDE_MIN, CO_INJ_CARBIDE_AIM, CO_INJ_LIME_MAX, CO_INJ_MG_MIN,"
			<< " CO_INJ_MG_AIM, CO_INJ_MG_MAX, MONO_INJ_LIME_MIN, MONO_INJ_LIME_AIM, MONO_INJ_LIME_MAX, MONO_INJ_CARBIDE_MIN, MONO_INJ_CARBIDE_AIM, MONO_INJ_CARBIDE_MAX "
			<< " from GTH_PP_INJECTION"
			<< "  where PLANTNO = "  << pPlantno 
			<< "  and PRACNO = (select PRODPRACID_MOD from PDH_HM_DATA_PRODPRAC where HM_ID = '" << pHeatId << "' and TREATID = '"  <<  pTreatId <<  "' and PLANT = '" << pPlant << "' and DESCR_PP = 'Injection')"
			<< "  and REVTIME = (select max(REVTIME) from GTH_PP_INJECTION))";
			
	result = result && executeSQL(sql.str());
	if (!result)
		//pError = getLastError();

	if(pCommit)
  {
		if (result)
			this->commit();
		else
			rollback();
  }

	return result;
}

bool CHDH_PP_INJECTION::delete_HDH_PP_INJECTION(const std::string& HM_ID, const std::string& TREATID, const std::string& PLANT)
{
	bool result;
  std::stringstream sql;
	try
	{
		addWhereClause("HM_ID",HM_ID);
		addWhereClause("TREATID",TREATID);
		addWhereClause("PLANT",PLANT);
		//sql += getWhereStatement() + ";";
		sql << "delete from HDH_PP_INJECTION" 
			  << getWhereStatement();
		/*<< "  where HEATID = '" << pHeatId << "'"
		<< "   and TREATID = '" << pTreatId << "'"
		<< "   and PLANT = '" << pPlant << "'";*/

	result = executeSQL(sql.str());
	if (result)
    {
      commit();
    }
    else
    {
      rollback();
      log("ERROR: CHDH_PP_INJECTION::delete_HDH_PP_INJECTION failed",1);
    }
	}
	catch(...)
	{
		result=false;
	}

	return result;
}



