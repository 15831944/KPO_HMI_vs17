//## Copyright (C) 2010 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CGCE_BURNER.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGCE_BURNER::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGCE_BURNER::PLANTNO("PLANTNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGCE_BURNER::BURNERNAME("BURNERNAME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGCE_BURNER::BURNERDESCR("BURNERDESCR");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGCE_BURNER::L1_BURNERNO("L1_BURNERNO");

//##DBClassCodeUtility ! DO NOT EDIT !
CGCE_BURNER::CGCE_BURNER(cCBS_StdConnection* Connection)
:CSMC_DBData("GCE_BURNER",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGCE_BURNER::CGCE_BURNER(cCBS_Connection* Connection)
:CSMC_DBData("GCE_BURNER",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGCE_BURNER::CGCE_BURNER()
:CSMC_DBData("GCE_BURNER")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGCE_BURNER::~CGCE_BURNER()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CGCE_BURNER::getPLANT(long Row)
{
  return getString(CGCE_BURNER::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGCE_BURNER::setPLANT(const std::string& value)
{
  setString(CGCE_BURNER::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CGCE_BURNER::getPLANTNO(long Row)
{
  return getLong(CGCE_BURNER::PLANTNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGCE_BURNER::setPLANTNO(long value)
{
  setLong(CGCE_BURNER::PLANTNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CGCE_BURNER::getBURNERNAME(long Row)
{
  return getString(CGCE_BURNER::BURNERNAME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGCE_BURNER::setBURNERNAME(const std::string& value)
{
  setString(CGCE_BURNER::BURNERNAME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CGCE_BURNER::getBURNERDESCR(long Row)
{
  return getString(CGCE_BURNER::BURNERDESCR, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGCE_BURNER::setBURNERDESCR(const std::string& value)
{
  setString(CGCE_BURNER::BURNERDESCR, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CGCE_BURNER::getL1_BURNERNO(long Row)
{
  return getLong(CGCE_BURNER::L1_BURNERNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGCE_BURNER::setL1_BURNERNO(long value)
{
  setLong(CGCE_BURNER::L1_BURNERNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CGCE_BURNER::select(const std::string& PLANT, long PLANTNO, const std::string& BURNERNAME)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CGCE_BURNER::PLANT,PLANT);
  addWhereClause(CGCE_BURNER::PLANTNO,PLANTNO);
  addWhereClause(CGCE_BURNER::BURNERNAME,BURNERNAME);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CGCE_BURNER::selectByL1BurnerNo(const std::string& PLANT, long PLANTNO, long L1_BURNERNO)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CGCE_BURNER::PLANT,PLANT);
  addWhereClause(CGCE_BURNER::PLANTNO,PLANTNO);
  addWhereClause(CGCE_BURNER::L1_BURNERNO,L1_BURNERNO);

  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

std::vector<std::string> CGCE_BURNER::getBurnerList(const std::string& PLANT, long PLANTNO)
{
  std::vector<std::string> BurnerList;

  if ( select(PLANT, PLANTNO, CSMC_DBData::unspecString) ) 
  {
    for ( long i = 1 ; i <= getLastRow(); ++i )
    {
      BurnerList.push_back(getBURNERNAME(i));
    }
  }

  return BurnerList;
}

std::string CGCE_BURNER::getBurnerNameByPlant(const std::string& PLANT, long PLANTNO, long L1_BURNERNO)
{
  std::string RetValue = CSMC_DBData::unspecString;

  if ( selectByL1BurnerNo(PLANT, PLANTNO, L1_BURNERNO) )
  {
    RetValue = getBURNERNAME(1);
  }

  return RetValue;
}

long CGCE_BURNER::getBurnerNoByPlant(const std::string& PLANT, long PLANTNO, const std::string& BURNERNAME)
{
  long RetValue = CSMC_DBData::unspecLong;

  if ( select(PLANT, PLANTNO, BURNERNAME) && 
       getLastRow() == 1 ) // is unique than ok
  {
    RetValue = getL1_BURNERNO(1);
  }

  return RetValue;
}


