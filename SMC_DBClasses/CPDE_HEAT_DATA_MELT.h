//## Copyright (C) 2010 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 

#if defined (_MSC_VER) && (_MSC_VER >= 1000)
#pragma once
#endif
#ifndef _INC_CPDE_HEAT_DATA_MELT_INCLUDED
#define _INC_CPDE_HEAT_DATA_MELT_INCLUDED

#include "CSMC_DBData.h"

class CPDE_HEAT_DATA_MELT
: public CSMC_DBData
{

public:
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string HEATID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TREATID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PLANT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PHASE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string STARTTIME;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string ENDTIME;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string DURATION;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string ELEC_CONS;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string LANCE_O2_CONS;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string LANCE_N2_CONS;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string STIRR_N2_CONS;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string STIRR_AR_CONS;

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPDE_HEAT_DATA_MELT(cCBS_StdConnection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPDE_HEAT_DATA_MELT(cCBS_Connection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPDE_HEAT_DATA_MELT();

  //##DBClassCodeUtility ! DO NOT EDIT !
  ~CPDE_HEAT_DATA_MELT();

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getHEATID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setHEATID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getTREATID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTREATID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getPLANT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPLANT(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getPHASE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPHASE(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CDateTime getSTARTTIME(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSTARTTIME(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CDateTime getENDTIME(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setENDTIME(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getDURATION(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setDURATION(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getELEC_CONS(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setELEC_CONS(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getLANCE_O2_CONS(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setLANCE_O2_CONS(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getLANCE_N2_CONS(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setLANCE_N2_CONS(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getSTIRR_N2_CONS(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSTIRR_N2_CONS(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getSTIRR_AR_CONS(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSTIRR_AR_CONS(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  bool select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const std::string& PHASE, const CDateTime& STARTTIME);

  //## ----------------------------------END-GENERATED-CODE--------------------- 

  //## ----------------------------------YOUR-CODE------------------------------ 

  bool selectOrderedByTime(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const std::string& PHASE);

  bool selectRecordByTime(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const CDateTime& STARTTIME, const CDateTime& ENDTIME, bool ASC /* = true*/);

  bool deletePhases(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT);

  double getPowerOffDur(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, CDateTime& STARTTIME, CDateTime& ENDTIME);

  double getPowerOnDur(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, CDateTime& STARTTIME, CDateTime& ENDTIME);

  bool isPhaseStarted(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT,const std::string& PHASE);

  bool savePhaseDataReport(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT,const sPhaseDataReport PhaseDataReport);

  bool writeData(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const std::string& PHASE, const CDateTime& STARTTIME, const CDateTime& ENDTIME, double DURATION, double ELEC_CONS, seqGasData& StirrAmount);

  bool writeDataOnPhaseEnd(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT,const std::string& PHASE, double ELEC_CONS);

  bool writeDataOnPhaseStart(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT,const std::string& PHASE, double ELEC_CONS);

};

#endif /* _INC_CPDE_HEAT_DATA_MELT_INCLUDED */
