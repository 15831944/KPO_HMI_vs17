//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 

#if defined (_MSC_VER) && (_MSC_VER >= 1000)
#pragma once
#endif
#ifndef _INC_CGT_EQUIV_INCLUDED
#define _INC_CGT_EQUIV_INCLUDED

#include "CSMC_DBData.h"

class CGT_EQUIV_ENTRY;

class CGT_EQUIV
: public CSMC_DBData
{

public:
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string EQ_NAME;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string DESCRIPTION;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string OFFSET;

  //##DBClassCodeUtility ! DO NOT EDIT !
  CGT_EQUIV(cCBS_StdConnection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CGT_EQUIV(cCBS_Connection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CGT_EQUIV();

  //##DBClassCodeUtility ! DO NOT EDIT !
  ~CGT_EQUIV();

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Equivalence name
  std::string getEQ_NAME(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setEQ_NAME(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getDESCRIPTION(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setDESCRIPTION(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Offset in formula
  double getOFFSET(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setOFFSET(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  bool select(const std::string& EQ_NAME);

  //## ----------------------------------END-GENERATED-CODE--------------------- 

  //## ----------------------------------YOUR-CODE------------------------------ 

  virtual void doOnConstruct();

  virtual void doOnDestruct();

  std::map<std::string,double> getDenominator(const std::string& EQ_NAME);

  double getEquivValue(const std::string& EQ_NAME, seqAnalysis SeqAnalysis);

  std::map<std::string,double> getNumerator(const std::string& EQ_NAME);

  std::set<std::string> getEQUIVList();

    CGT_EQUIV_ENTRY *m_pGT_EQUIV_ENTRY;
};

#endif /* _INC_CGT_EQUIV_INCLUDED */
