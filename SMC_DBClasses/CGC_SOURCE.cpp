//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CGC_SOURCE.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_SOURCE::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_SOURCE::SOURCE("SOURCE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_SOURCE::SOURCE_NO("SOURCE_NO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_SOURCE::PURP_SOURCE_AVAIL("PURP_SOURCE_AVAIL");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_SOURCE::PURP_SOURCE_DEFAULT("PURP_SOURCE_DEFAULT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_SOURCE::DISPLAY_ORDER("DISPLAY_ORDER");

//##DBClassCodeUtility ! DO NOT EDIT !
CGC_SOURCE::CGC_SOURCE(cCBS_StdConnection* Connection)
:CSMC_DBData("GC_SOURCE",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGC_SOURCE::CGC_SOURCE(cCBS_Connection* Connection)
:CSMC_DBData("GC_SOURCE",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGC_SOURCE::CGC_SOURCE()
:CSMC_DBData("GC_SOURCE")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGC_SOURCE::~CGC_SOURCE()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Plant identifier
std::string CGC_SOURCE::getPLANT(long Row)
{
  return getString(CGC_SOURCE::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_SOURCE::setPLANT(const std::string& value)
{
  setString(CGC_SOURCE::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##E.g. Bin, Hand, Wire
std::string CGC_SOURCE::getSOURCE(long Row)
{
  return getString(CGC_SOURCE::SOURCE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_SOURCE::setSOURCE(const std::string& value)
{
  setString(CGC_SOURCE::SOURCE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Source number according telegram definition
long CGC_SOURCE::getSOURCE_NO(long Row)
{
  return getLong(CGC_SOURCE::SOURCE_NO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_SOURCE::setSOURCE_NO(long value)
{
  setLong(CGC_SOURCE::SOURCE_NO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Purpose name of materials which are available at the source
std::string CGC_SOURCE::getPURP_SOURCE_AVAIL(long Row)
{
  return getString(CGC_SOURCE::PURP_SOURCE_AVAIL, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_SOURCE::setPURP_SOURCE_AVAIL(const std::string& value)
{
  setString(CGC_SOURCE::PURP_SOURCE_AVAIL, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Purpose name of materials which should be taken by default at the source.
std::string CGC_SOURCE::getPURP_SOURCE_DEFAULT(long Row)
{
  return getString(CGC_SOURCE::PURP_SOURCE_DEFAULT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_SOURCE::setPURP_SOURCE_DEFAULT(const std::string& value)
{
  setString(CGC_SOURCE::PURP_SOURCE_DEFAULT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Display order on the HMI
long CGC_SOURCE::getDISPLAY_ORDER(long Row)
{
  return getLong(CGC_SOURCE::DISPLAY_ORDER, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_SOURCE::setDISPLAY_ORDER(long value)
{
  setLong(CGC_SOURCE::DISPLAY_ORDER, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CGC_SOURCE::select(const std::string& PLANT, const std::string& SOURCE)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CGC_SOURCE::PLANT,PLANT);
  addWhereClause(CGC_SOURCE::SOURCE,SOURCE);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

std::map < long, std::string> & CGC_SOURCE::getL1SourceNoList(const std::string & Plant, long PlantNo)
{
  static std::map<long, std::string > SourceList;

  this->select( Plant, CSMC_DBData::unspecString );
  long lRowsGot = this->getLastRow();

  std::string SourceName;
  long lL1SourceNo = -1;

  for (long i = 1; i <= lRowsGot; i++)
  {
    SourceName  = getSOURCE(i);
    lL1SourceNo = getSOURCE_NO(i);
    SourceList.insert(std::pair <long, std::string >( lL1SourceNo, SourceName ) );
  }
  return SourceList;
}

std::map < std::string, long > &  CGC_SOURCE::getL2SourceNameList(const std::string &Plant, long PlantNo)
{
  static std::map<std::string, long> SourceList;

  this->select( Plant, CSMC_DBData::unspecString );
  long lRowsGot = this->getLastRow();
  
  std::string L2SourceName;
  long lSourceL1IntfNo = 0;
  for (long i = 1; i <= lRowsGot; i++)
  {
    L2SourceName = getSOURCE(i);
    lSourceL1IntfNo = getSOURCE_NO(i);
    SourceList.insert(std::pair <std::string,long>(L2SourceName, lSourceL1IntfNo));
  }
  return SourceList;
}


