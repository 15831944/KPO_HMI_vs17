//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 

#include "cCBS_StdEventLogFrameController.h"

#include "CPDE_HEAT_DATA.h"
#include "CHDE_HEAT_DATA.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA::HEATID("HEATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA::TOTAL_O2_SIDE_LANCE("TOTAL_O2_SIDE_LANCE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA::SPEC_O2_SIDE_LANCE("SPEC_O2_SIDE_LANCE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA::TOTAL_AR_MOMENT("TOTAL_AR_MOMENT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA::TOTAL_N2_MOMENT("TOTAL_N2_MOMENT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA::SPECIFIC_O2_CONS("SPECIFIC_O2_CONS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA::SPECIFIC_N2_CONS("SPECIFIC_N2_CONS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA::SPECIFIC_AR_CONS("SPECIFIC_AR_CONS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA::TOTAL_CARBON_INJ("TOTAL_CARBON_INJ");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA::MELTDOWNSTARTTIME("MELTDOWNSTARTTIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA::MELTDOWNENDTIME("MELTDOWNENDTIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA::TOTAL_ELEC_EGY("TOTAL_ELEC_EGY");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA::POWER_ON_DUR("POWER_ON_DUR");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA::POWER_OFF_DUR("POWER_OFF_DUR");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA::DRI("DRI");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA::LIME("LIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA::DOLOMITE("DOLOMITE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA::COAL("COAL");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA::NO_OF_BASKETS("NO_OF_BASKETS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA::MELTER("MELTER");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA::SUPERVISOR("SUPERVISOR");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA::START_SCRAPDRYING("START_SCRAPDRYING");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA::END_SCRAPDRYING("END_SCRAPDRYING");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA::BURNER_TOTALOXY("BURNER_TOTALOXY");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA::BURNER_TOTALLANCEOXY("BURNER_TOTALLANCEOXY");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA::BURNER_TOTALPCOXY("BURNER_TOTALPCOXY");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA::BURNER_TOTALGAS("BURNER_TOTALGAS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA::INJ_LIME("INJ_LIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA::INJ_CARBON("INJ_CARBON");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA::INJ_FESI("INJ_FESI");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA::INJ_DUST("INJ_DUST");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA::INJ_OXYGEN("INJ_OXYGEN");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA::FURNACE_ADDITIONS("FURNACE_ADDITIONS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA::FURNACE_SLAGFORMER("FURNACE_SLAGFORMER");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA::LADLE_ADDITIONS("LADLE_ADDITIONS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA::LADLE_SLAGFORMER("LADLE_SLAGFORMER");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA::CAMPAIGN("CAMPAIGN");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA::FURNACE_DELTAAGE("FURNACE_DELTAAGE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA::FURNACE_TAPHOLEAGE("FURNACE_TAPHOLEAGE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA::FURNACE_SHELLAGE("FURNACE_SHELLAGE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA::FURNACE_SHELLWALLAGE("FURNACE_SHELLWALLAGE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA::FURNACE_SLAGDOORAGE("FURNACE_SLAGDOORAGE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA::FURNACE_ROOFAGE("FURNACE_ROOFAGE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA::FURNACE_BOTTOMAGE("FURNACE_BOTTOMAGE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA::FURNACE_BOTWALLAGE("FURNACE_BOTWALLAGE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA::BASKET_TOTALWEIGHT("BASKET_TOTALWEIGHT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA::BASKET_TOTCHARGETIME("BASKET_TOTCHARGETIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA::DOOR_BURN_TOTALOXY("DOOR_BURN_TOTALOXY");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA::DOOR_BURN_TOTALGAS("DOOR_BURN_TOTALGAS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA::EAF_THERMSTATID("EAF_THERMSTATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_HEAT_DATA::TAPTOTAPDURATION("TAPTOTAPDURATION");

//##DBClassCodeUtility ! DO NOT EDIT !
CHDE_HEAT_DATA::CHDE_HEAT_DATA(cCBS_StdConnection* Connection)
:CSMC_DBData("HDE_HEAT_DATA",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHDE_HEAT_DATA::CHDE_HEAT_DATA(cCBS_Connection* Connection)
:CSMC_DBData("HDE_HEAT_DATA",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHDE_HEAT_DATA::CHDE_HEAT_DATA()
:CSMC_DBData("HDE_HEAT_DATA")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHDE_HEAT_DATA::~CHDE_HEAT_DATA()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDE_HEAT_DATA::getHEATID(long Row)
{
  return getString(CHDE_HEAT_DATA::HEATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA::setHEATID(const std::string& value)
{
  setString(CHDE_HEAT_DATA::HEATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDE_HEAT_DATA::getTREATID(long Row)
{
  return getString(CHDE_HEAT_DATA::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA::setTREATID(const std::string& value)
{
  setString(CHDE_HEAT_DATA::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDE_HEAT_DATA::getPLANT(long Row)
{
  return getString(CHDE_HEAT_DATA::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA::setPLANT(const std::string& value)
{
  setString(CHDE_HEAT_DATA::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_HEAT_DATA::getTOTAL_O2_SIDE_LANCE(long Row)
{
  return getDouble(CHDE_HEAT_DATA::TOTAL_O2_SIDE_LANCE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA::setTOTAL_O2_SIDE_LANCE(double value)
{
  setDouble(CHDE_HEAT_DATA::TOTAL_O2_SIDE_LANCE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDE_HEAT_DATA::getSPEC_O2_SIDE_LANCE(long Row)
{
  return getLong(CHDE_HEAT_DATA::SPEC_O2_SIDE_LANCE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA::setSPEC_O2_SIDE_LANCE(long value)
{
  setLong(CHDE_HEAT_DATA::SPEC_O2_SIDE_LANCE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_HEAT_DATA::getTOTAL_AR_MOMENT(long Row)
{
  return getDouble(CHDE_HEAT_DATA::TOTAL_AR_MOMENT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA::setTOTAL_AR_MOMENT(double value)
{
  setDouble(CHDE_HEAT_DATA::TOTAL_AR_MOMENT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_HEAT_DATA::getTOTAL_N2_MOMENT(long Row)
{
  return getDouble(CHDE_HEAT_DATA::TOTAL_N2_MOMENT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA::setTOTAL_N2_MOMENT(double value)
{
  setDouble(CHDE_HEAT_DATA::TOTAL_N2_MOMENT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_HEAT_DATA::getSPECIFIC_O2_CONS(long Row)
{
  return getDouble(CHDE_HEAT_DATA::SPECIFIC_O2_CONS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA::setSPECIFIC_O2_CONS(double value)
{
  setDouble(CHDE_HEAT_DATA::SPECIFIC_O2_CONS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_HEAT_DATA::getSPECIFIC_N2_CONS(long Row)
{
  return getDouble(CHDE_HEAT_DATA::SPECIFIC_N2_CONS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA::setSPECIFIC_N2_CONS(double value)
{
  setDouble(CHDE_HEAT_DATA::SPECIFIC_N2_CONS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_HEAT_DATA::getSPECIFIC_AR_CONS(long Row)
{
  return getDouble(CHDE_HEAT_DATA::SPECIFIC_AR_CONS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA::setSPECIFIC_AR_CONS(double value)
{
  setDouble(CHDE_HEAT_DATA::SPECIFIC_AR_CONS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_HEAT_DATA::getTOTAL_CARBON_INJ(long Row)
{
  return getDouble(CHDE_HEAT_DATA::TOTAL_CARBON_INJ, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA::setTOTAL_CARBON_INJ(double value)
{
  setDouble(CHDE_HEAT_DATA::TOTAL_CARBON_INJ, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CHDE_HEAT_DATA::getMELTDOWNSTARTTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHDE_HEAT_DATA::MELTDOWNSTARTTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA::setMELTDOWNSTARTTIME(const CDateTime& value)
{
 setString(CHDE_HEAT_DATA::MELTDOWNSTARTTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CHDE_HEAT_DATA::getMELTDOWNENDTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHDE_HEAT_DATA::MELTDOWNENDTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA::setMELTDOWNENDTIME(const CDateTime& value)
{
 setString(CHDE_HEAT_DATA::MELTDOWNENDTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_HEAT_DATA::getTOTAL_ELEC_EGY(long Row)
{
  return getDouble(CHDE_HEAT_DATA::TOTAL_ELEC_EGY, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA::setTOTAL_ELEC_EGY(double value)
{
  setDouble(CHDE_HEAT_DATA::TOTAL_ELEC_EGY, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_HEAT_DATA::getPOWER_ON_DUR(long Row)
{
  return getDouble(CHDE_HEAT_DATA::POWER_ON_DUR, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA::setPOWER_ON_DUR(double value)
{
  setDouble(CHDE_HEAT_DATA::POWER_ON_DUR, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_HEAT_DATA::getPOWER_OFF_DUR(long Row)
{
  return getDouble(CHDE_HEAT_DATA::POWER_OFF_DUR, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA::setPOWER_OFF_DUR(double value)
{
  setDouble(CHDE_HEAT_DATA::POWER_OFF_DUR, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_HEAT_DATA::getDRI(long Row)
{
  return getDouble(CHDE_HEAT_DATA::DRI, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA::setDRI(double value)
{
  setDouble(CHDE_HEAT_DATA::DRI, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_HEAT_DATA::getLIME(long Row)
{
  return getDouble(CHDE_HEAT_DATA::LIME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA::setLIME(double value)
{
  setDouble(CHDE_HEAT_DATA::LIME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_HEAT_DATA::getDOLOMITE(long Row)
{
  return getDouble(CHDE_HEAT_DATA::DOLOMITE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA::setDOLOMITE(double value)
{
  setDouble(CHDE_HEAT_DATA::DOLOMITE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_HEAT_DATA::getCOAL(long Row)
{
  return getDouble(CHDE_HEAT_DATA::COAL, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA::setCOAL(double value)
{
  setDouble(CHDE_HEAT_DATA::COAL, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDE_HEAT_DATA::getNO_OF_BASKETS(long Row)
{
  return getLong(CHDE_HEAT_DATA::NO_OF_BASKETS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA::setNO_OF_BASKETS(long value)
{
  setLong(CHDE_HEAT_DATA::NO_OF_BASKETS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDE_HEAT_DATA::getMELTER(long Row)
{
  return getString(CHDE_HEAT_DATA::MELTER, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA::setMELTER(const std::string& value)
{
  setString(CHDE_HEAT_DATA::MELTER, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDE_HEAT_DATA::getSUPERVISOR(long Row)
{
  return getString(CHDE_HEAT_DATA::SUPERVISOR, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA::setSUPERVISOR(const std::string& value)
{
  setString(CHDE_HEAT_DATA::SUPERVISOR, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CHDE_HEAT_DATA::getSTART_SCRAPDRYING(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHDE_HEAT_DATA::START_SCRAPDRYING, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA::setSTART_SCRAPDRYING(const CDateTime& value)
{
 setString(CHDE_HEAT_DATA::START_SCRAPDRYING, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CHDE_HEAT_DATA::getEND_SCRAPDRYING(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHDE_HEAT_DATA::END_SCRAPDRYING, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA::setEND_SCRAPDRYING(const CDateTime& value)
{
 setString(CHDE_HEAT_DATA::END_SCRAPDRYING, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_HEAT_DATA::getBURNER_TOTALOXY(long Row)
{
  return getDouble(CHDE_HEAT_DATA::BURNER_TOTALOXY, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA::setBURNER_TOTALOXY(double value)
{
  setDouble(CHDE_HEAT_DATA::BURNER_TOTALOXY, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_HEAT_DATA::getBURNER_TOTALLANCEOXY(long Row)
{
  return getDouble(CHDE_HEAT_DATA::BURNER_TOTALLANCEOXY, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA::setBURNER_TOTALLANCEOXY(double value)
{
  setDouble(CHDE_HEAT_DATA::BURNER_TOTALLANCEOXY, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_HEAT_DATA::getBURNER_TOTALPCOXY(long Row)
{
  return getDouble(CHDE_HEAT_DATA::BURNER_TOTALPCOXY, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA::setBURNER_TOTALPCOXY(double value)
{
  setDouble(CHDE_HEAT_DATA::BURNER_TOTALPCOXY, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_HEAT_DATA::getBURNER_TOTALGAS(long Row)
{
  return getDouble(CHDE_HEAT_DATA::BURNER_TOTALGAS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA::setBURNER_TOTALGAS(double value)
{
  setDouble(CHDE_HEAT_DATA::BURNER_TOTALGAS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_HEAT_DATA::getINJ_LIME(long Row)
{
  return getDouble(CHDE_HEAT_DATA::INJ_LIME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA::setINJ_LIME(double value)
{
  setDouble(CHDE_HEAT_DATA::INJ_LIME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_HEAT_DATA::getINJ_CARBON(long Row)
{
  return getDouble(CHDE_HEAT_DATA::INJ_CARBON, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA::setINJ_CARBON(double value)
{
  setDouble(CHDE_HEAT_DATA::INJ_CARBON, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_HEAT_DATA::getINJ_FESI(long Row)
{
  return getDouble(CHDE_HEAT_DATA::INJ_FESI, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA::setINJ_FESI(double value)
{
  setDouble(CHDE_HEAT_DATA::INJ_FESI, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_HEAT_DATA::getINJ_DUST(long Row)
{
  return getDouble(CHDE_HEAT_DATA::INJ_DUST, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA::setINJ_DUST(double value)
{
  setDouble(CHDE_HEAT_DATA::INJ_DUST, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_HEAT_DATA::getINJ_OXYGEN(long Row)
{
  return getDouble(CHDE_HEAT_DATA::INJ_OXYGEN, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA::setINJ_OXYGEN(double value)
{
  setDouble(CHDE_HEAT_DATA::INJ_OXYGEN, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_HEAT_DATA::getFURNACE_ADDITIONS(long Row)
{
  return getDouble(CHDE_HEAT_DATA::FURNACE_ADDITIONS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA::setFURNACE_ADDITIONS(double value)
{
  setDouble(CHDE_HEAT_DATA::FURNACE_ADDITIONS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_HEAT_DATA::getFURNACE_SLAGFORMER(long Row)
{
  return getDouble(CHDE_HEAT_DATA::FURNACE_SLAGFORMER, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA::setFURNACE_SLAGFORMER(double value)
{
  setDouble(CHDE_HEAT_DATA::FURNACE_SLAGFORMER, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_HEAT_DATA::getLADLE_ADDITIONS(long Row)
{
  return getDouble(CHDE_HEAT_DATA::LADLE_ADDITIONS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA::setLADLE_ADDITIONS(double value)
{
  setDouble(CHDE_HEAT_DATA::LADLE_ADDITIONS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_HEAT_DATA::getLADLE_SLAGFORMER(long Row)
{
  return getDouble(CHDE_HEAT_DATA::LADLE_SLAGFORMER, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA::setLADLE_SLAGFORMER(double value)
{
  setDouble(CHDE_HEAT_DATA::LADLE_SLAGFORMER, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDE_HEAT_DATA::getCAMPAIGN(long Row)
{
  return getLong(CHDE_HEAT_DATA::CAMPAIGN, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA::setCAMPAIGN(long value)
{
  setLong(CHDE_HEAT_DATA::CAMPAIGN, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDE_HEAT_DATA::getFURNACE_DELTAAGE(long Row)
{
  return getLong(CHDE_HEAT_DATA::FURNACE_DELTAAGE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA::setFURNACE_DELTAAGE(long value)
{
  setLong(CHDE_HEAT_DATA::FURNACE_DELTAAGE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDE_HEAT_DATA::getFURNACE_TAPHOLEAGE(long Row)
{
  return getLong(CHDE_HEAT_DATA::FURNACE_TAPHOLEAGE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA::setFURNACE_TAPHOLEAGE(long value)
{
  setLong(CHDE_HEAT_DATA::FURNACE_TAPHOLEAGE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDE_HEAT_DATA::getFURNACE_SHELLAGE(long Row)
{
  return getLong(CHDE_HEAT_DATA::FURNACE_SHELLAGE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA::setFURNACE_SHELLAGE(long value)
{
  setLong(CHDE_HEAT_DATA::FURNACE_SHELLAGE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDE_HEAT_DATA::getFURNACE_SHELLWALLAGE(long Row)
{
  return getLong(CHDE_HEAT_DATA::FURNACE_SHELLWALLAGE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA::setFURNACE_SHELLWALLAGE(long value)
{
  setLong(CHDE_HEAT_DATA::FURNACE_SHELLWALLAGE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDE_HEAT_DATA::getFURNACE_SLAGDOORAGE(long Row)
{
  return getLong(CHDE_HEAT_DATA::FURNACE_SLAGDOORAGE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA::setFURNACE_SLAGDOORAGE(long value)
{
  setLong(CHDE_HEAT_DATA::FURNACE_SLAGDOORAGE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDE_HEAT_DATA::getFURNACE_ROOFAGE(long Row)
{
  return getLong(CHDE_HEAT_DATA::FURNACE_ROOFAGE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA::setFURNACE_ROOFAGE(long value)
{
  setLong(CHDE_HEAT_DATA::FURNACE_ROOFAGE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDE_HEAT_DATA::getFURNACE_BOTTOMAGE(long Row)
{
  return getLong(CHDE_HEAT_DATA::FURNACE_BOTTOMAGE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA::setFURNACE_BOTTOMAGE(long value)
{
  setLong(CHDE_HEAT_DATA::FURNACE_BOTTOMAGE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDE_HEAT_DATA::getFURNACE_BOTWALLAGE(long Row)
{
  return getLong(CHDE_HEAT_DATA::FURNACE_BOTWALLAGE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA::setFURNACE_BOTWALLAGE(long value)
{
  setLong(CHDE_HEAT_DATA::FURNACE_BOTWALLAGE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_HEAT_DATA::getBASKET_TOTALWEIGHT(long Row)
{
  return getDouble(CHDE_HEAT_DATA::BASKET_TOTALWEIGHT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA::setBASKET_TOTALWEIGHT(double value)
{
  setDouble(CHDE_HEAT_DATA::BASKET_TOTALWEIGHT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_HEAT_DATA::getBASKET_TOTCHARGETIME(long Row)
{
  return getDouble(CHDE_HEAT_DATA::BASKET_TOTCHARGETIME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA::setBASKET_TOTCHARGETIME(double value)
{
  setDouble(CHDE_HEAT_DATA::BASKET_TOTCHARGETIME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_HEAT_DATA::getDOOR_BURN_TOTALOXY(long Row)
{
  return getDouble(CHDE_HEAT_DATA::DOOR_BURN_TOTALOXY, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA::setDOOR_BURN_TOTALOXY(double value)
{
  setDouble(CHDE_HEAT_DATA::DOOR_BURN_TOTALOXY, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_HEAT_DATA::getDOOR_BURN_TOTALGAS(long Row)
{
  return getDouble(CHDE_HEAT_DATA::DOOR_BURN_TOTALGAS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA::setDOOR_BURN_TOTALGAS(double value)
{
  setDouble(CHDE_HEAT_DATA::DOOR_BURN_TOTALGAS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDE_HEAT_DATA::getEAF_THERMSTATID(long Row)
{
  return getString(CHDE_HEAT_DATA::EAF_THERMSTATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA::setEAF_THERMSTATID(const std::string& value)
{
  setString(CHDE_HEAT_DATA::EAF_THERMSTATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_HEAT_DATA::getTAPTOTAPDURATION(long Row)
{
  return getDouble(CHDE_HEAT_DATA::TAPTOTAPDURATION, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_HEAT_DATA::setTAPTOTAPDURATION(double value)
{
  setDouble(CHDE_HEAT_DATA::TAPTOTAPDURATION, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CHDE_HEAT_DATA::select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CHDE_HEAT_DATA::HEATID,HEATID);
  addWhereClause(CHDE_HEAT_DATA::TREATID,TREATID);
  addWhereClause(CHDE_HEAT_DATA::PLANT,PLANT);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CHDE_HEAT_DATA::copy(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, bool Commit, cCBS_ODBC_DBError &Error)
{
	bool result = true;

  //some data found -> update
	if (exists(HEATID, TREATID, PLANT))
	{
    // preparing setting for source table
    CPDE_HEAT_DATA PDE_HEAT_DATA(m_pCBS_StdConnection);
    PDE_HEAT_DATA.addWhereClause(CPDE_HEAT_DATA::HEATID,HEATID);
    PDE_HEAT_DATA.addWhereClause(CPDE_HEAT_DATA::TREATID,TREATID);
    PDE_HEAT_DATA.addWhereClause(CPDE_HEAT_DATA::PLANT,PLANT);

    // preparing setting for aim table
    cleanWhereStatement();
    addWhereClause(CHDE_HEAT_DATA::HEATID,HEATID);
    addWhereClause(CHDE_HEAT_DATA::TREATID,TREATID);
    addWhereClause(CHDE_HEAT_DATA::PLANT,PLANT);

    result = result && copyByUpdate(&PDE_HEAT_DATA);
	}
	else
	{
    // preparing setting for source table
    CPDE_HEAT_DATA PDE_HEAT_DATA(m_pCBS_StdConnection);
    PDE_HEAT_DATA.addWhereClause(CPDE_HEAT_DATA::HEATID,HEATID);
    PDE_HEAT_DATA.addWhereClause(CPDE_HEAT_DATA::TREATID,TREATID);
    PDE_HEAT_DATA.addWhereClause(CPDE_HEAT_DATA::PLANT,PLANT);

    result = result && copyByInsert(&PDE_HEAT_DATA);
	}

  if (!result)
    Error = getLastError();

  if(Commit)
  {
    if (result)
      this->commit();
    else
      rollback();
  }

  return result;
}

bool CHDE_HEAT_DATA::exists(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT)
{
  cleanWhereStatement();

  m_Statement = "Select HEATID from " + m_TableName;

  addWhereClause(CHDE_HEAT_DATA::HEATID,HEATID);
  addWhereClause(CHDE_HEAT_DATA::TREATID,TREATID);
  addWhereClause(CHDE_HEAT_DATA::PLANT,PLANT);
   
  std::string sWhereStatement = getWhereStatement();
  //to avoid the exception like 'Select HEATID from PP_HEAT AND ROWNUM = 1 '
  if(sWhereStatement.length() > 0 ) 
  {
    // do not use ROWNUM in "addWhereClause", ROWNUM is not a table column and where statement will be used for deletion at "deleteRows"
    m_Statement += sWhereStatement + " AND ROWNUM = 1 ;";
  }
  else
  {
    return false;
  }

  return CSMC_DBData::select();
}


bool CHDE_HEAT_DATA::checkNULLValues(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT)
{
  bool result = true;

  std::string Message;

  //some data found -> delete them
  if ( select(HEATID, TREATID, PLANT) )
  {
    std::vector<std::string> ColumnList  = getColumnList();
    std::vector<std::string>::iterator it;

    for (it = ColumnList.begin() ; it != ColumnList.end() ; ++it)
    {
      std::string ColName = *it;

      if ( isNull(ColName, 1 ) )
      {
        Message = Message + " - " + ColName  ;
      }
    }
  }

  if ( !Message.empty() )
  {
  	cCBS_StdEventLogFrame *pEventLog = cCBS_StdEventLogFrameController::getInstance()->getpEventLog();
	  sEventLogMessage sMessage = cCBS_StdEventLogFrame::initMessage(__FILE__,__LINE__);
    pEventLog->EL_DBNullValueError(sMessage,m_TableName.c_str(), Message.c_str());
  }

  return result;
}
