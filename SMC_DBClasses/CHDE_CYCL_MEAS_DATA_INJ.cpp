//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CPDE_CYCL_MEAS_DATA_INJ.h"
#include "CHDE_CYCL_MEAS_DATA_INJ.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_CYCL_MEAS_DATA_INJ::HEATID("HEATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_CYCL_MEAS_DATA_INJ::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_CYCL_MEAS_DATA_INJ::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_CYCL_MEAS_DATA_INJ::DEVICENAME("DEVICENAME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_CYCL_MEAS_DATA_INJ::INJ_MAT("INJ_MAT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_CYCL_MEAS_DATA_INJ::REVTIME("REVTIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_CYCL_MEAS_DATA_INJ::INJ_FLOW("INJ_FLOW");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_CYCL_MEAS_DATA_INJ::INJ_AMOUNT("INJ_AMOUNT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_CYCL_MEAS_DATA_INJ::DURSINCEHEATANNOUNCE("DURSINCEHEATANNOUNCE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_CYCL_MEAS_DATA_INJ::DURSINCESTARTOFHEAT("DURSINCESTARTOFHEAT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_CYCL_MEAS_DATA_INJ::ELEC_CONS("ELEC_CONS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDE_CYCL_MEAS_DATA_INJ::STATUS("STATUS");

//##DBClassCodeUtility ! DO NOT EDIT !
CHDE_CYCL_MEAS_DATA_INJ::CHDE_CYCL_MEAS_DATA_INJ(cCBS_StdConnection* Connection)
:CSMC_DBData("HDE_CYCL_MEAS_DATA_INJ",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHDE_CYCL_MEAS_DATA_INJ::CHDE_CYCL_MEAS_DATA_INJ(cCBS_Connection* Connection)
:CSMC_DBData("HDE_CYCL_MEAS_DATA_INJ",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHDE_CYCL_MEAS_DATA_INJ::CHDE_CYCL_MEAS_DATA_INJ()
:CSMC_DBData("HDE_CYCL_MEAS_DATA_INJ")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHDE_CYCL_MEAS_DATA_INJ::~CHDE_CYCL_MEAS_DATA_INJ()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDE_CYCL_MEAS_DATA_INJ::getHEATID(long Row)
{
  return getString(CHDE_CYCL_MEAS_DATA_INJ::HEATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_CYCL_MEAS_DATA_INJ::setHEATID(const std::string& value)
{
  setString(CHDE_CYCL_MEAS_DATA_INJ::HEATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDE_CYCL_MEAS_DATA_INJ::getTREATID(long Row)
{
  return getString(CHDE_CYCL_MEAS_DATA_INJ::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_CYCL_MEAS_DATA_INJ::setTREATID(const std::string& value)
{
  setString(CHDE_CYCL_MEAS_DATA_INJ::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDE_CYCL_MEAS_DATA_INJ::getPLANT(long Row)
{
  return getString(CHDE_CYCL_MEAS_DATA_INJ::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_CYCL_MEAS_DATA_INJ::setPLANT(const std::string& value)
{
  setString(CHDE_CYCL_MEAS_DATA_INJ::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDE_CYCL_MEAS_DATA_INJ::getDEVICENAME(long Row)
{
  return getString(CHDE_CYCL_MEAS_DATA_INJ::DEVICENAME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_CYCL_MEAS_DATA_INJ::setDEVICENAME(const std::string& value)
{
  setString(CHDE_CYCL_MEAS_DATA_INJ::DEVICENAME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDE_CYCL_MEAS_DATA_INJ::getINJ_MAT(long Row)
{
  return getString(CHDE_CYCL_MEAS_DATA_INJ::INJ_MAT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_CYCL_MEAS_DATA_INJ::setINJ_MAT(const std::string& value)
{
  setString(CHDE_CYCL_MEAS_DATA_INJ::INJ_MAT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CHDE_CYCL_MEAS_DATA_INJ::getREVTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHDE_CYCL_MEAS_DATA_INJ::REVTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_CYCL_MEAS_DATA_INJ::setREVTIME(const CDateTime& value)
{
 setString(CHDE_CYCL_MEAS_DATA_INJ::REVTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_CYCL_MEAS_DATA_INJ::getINJ_FLOW(long Row)
{
  return getDouble(CHDE_CYCL_MEAS_DATA_INJ::INJ_FLOW, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_CYCL_MEAS_DATA_INJ::setINJ_FLOW(double value)
{
  setDouble(CHDE_CYCL_MEAS_DATA_INJ::INJ_FLOW, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_CYCL_MEAS_DATA_INJ::getINJ_AMOUNT(long Row)
{
  return getDouble(CHDE_CYCL_MEAS_DATA_INJ::INJ_AMOUNT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_CYCL_MEAS_DATA_INJ::setINJ_AMOUNT(double value)
{
  setDouble(CHDE_CYCL_MEAS_DATA_INJ::INJ_AMOUNT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_CYCL_MEAS_DATA_INJ::getDURSINCEHEATANNOUNCE(long Row)
{
  return getDouble(CHDE_CYCL_MEAS_DATA_INJ::DURSINCEHEATANNOUNCE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_CYCL_MEAS_DATA_INJ::setDURSINCEHEATANNOUNCE(double value)
{
  setDouble(CHDE_CYCL_MEAS_DATA_INJ::DURSINCEHEATANNOUNCE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_CYCL_MEAS_DATA_INJ::getDURSINCESTARTOFHEAT(long Row)
{
  return getDouble(CHDE_CYCL_MEAS_DATA_INJ::DURSINCESTARTOFHEAT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_CYCL_MEAS_DATA_INJ::setDURSINCESTARTOFHEAT(double value)
{
  setDouble(CHDE_CYCL_MEAS_DATA_INJ::DURSINCESTARTOFHEAT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDE_CYCL_MEAS_DATA_INJ::getELEC_CONS(long Row)
{
  return getDouble(CHDE_CYCL_MEAS_DATA_INJ::ELEC_CONS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_CYCL_MEAS_DATA_INJ::setELEC_CONS(double value)
{
  setDouble(CHDE_CYCL_MEAS_DATA_INJ::ELEC_CONS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDE_CYCL_MEAS_DATA_INJ::getSTATUS(long Row)
{
  return getLong(CHDE_CYCL_MEAS_DATA_INJ::STATUS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDE_CYCL_MEAS_DATA_INJ::setSTATUS(long value)
{
  setLong(CHDE_CYCL_MEAS_DATA_INJ::STATUS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CHDE_CYCL_MEAS_DATA_INJ::select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const std::string& DEVICENAME, const std::string& INJ_MAT, const CDateTime& REVTIME)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CHDE_CYCL_MEAS_DATA_INJ::HEATID,HEATID);
  addWhereClause(CHDE_CYCL_MEAS_DATA_INJ::TREATID,TREATID);
  addWhereClause(CHDE_CYCL_MEAS_DATA_INJ::PLANT,PLANT);
  addWhereClause(CHDE_CYCL_MEAS_DATA_INJ::DEVICENAME,DEVICENAME);
  addWhereClause(CHDE_CYCL_MEAS_DATA_INJ::INJ_MAT,INJ_MAT);
  addWhereClause(CHDE_CYCL_MEAS_DATA_INJ::REVTIME,REVTIME);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CHDE_CYCL_MEAS_DATA_INJ::copy(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, bool Commit, cCBS_ODBC_DBError &Error)
{
  bool result = !exists(HEATID, TREATID, PLANT);
  //some data found -> delete them
  if (!result)
  {
    result = deleteRows();
    if (!result)
      setLastError(std::string("ERROR_DELETE_DATA"), 0, getActStatement());
  }

  // preparing setting for source table
  CPDE_CYCL_MEAS_DATA_INJ PDE_CYCL_MEAS_DATA_INJ(m_pCBS_StdConnection);
  PDE_CYCL_MEAS_DATA_INJ.addWhereClause(CPDE_CYCL_MEAS_DATA_INJ::HEATID,HEATID);
  PDE_CYCL_MEAS_DATA_INJ.addWhereClause(CPDE_CYCL_MEAS_DATA_INJ::TREATID,TREATID);
  PDE_CYCL_MEAS_DATA_INJ.addWhereClause(CPDE_CYCL_MEAS_DATA_INJ::PLANT,PLANT);

  result = result && copyByInsert(&PDE_CYCL_MEAS_DATA_INJ);

  if (!result)
    Error = getLastError();

  if(Commit)
  {
    if (result)
      this->commit();
    else
      rollback();
  }

  return result;
}

bool CHDE_CYCL_MEAS_DATA_INJ::exists(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT)
{
  cleanWhereStatement();

  m_Statement = "Select HEATID from " + m_TableName;

  addWhereClause(CHDE_CYCL_MEAS_DATA_INJ::HEATID,HEATID);
  addWhereClause(CHDE_CYCL_MEAS_DATA_INJ::TREATID,TREATID);
  addWhereClause(CHDE_CYCL_MEAS_DATA_INJ::PLANT,PLANT);
   
  std::string sWhereStatement = getWhereStatement();
  //to avoid the exception like 'Select HEATID from PP_HEAT AND ROWNUM = 1 '
  if(sWhereStatement.length() > 0 ) 
  {
    // do not use ROWNUM in "addWhereClause", ROWNUM is not a table column and where statement will be used for deletion at "deleteRows"
    m_Statement += sWhereStatement + " AND ROWNUM = 1 ;";
  }
  else
  {
    return false;
  }

  return CSMC_DBData::select();
}


