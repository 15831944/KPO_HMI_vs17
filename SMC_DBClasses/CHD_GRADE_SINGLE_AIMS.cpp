//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CGT_GRADE_SINGLE_AIMS.h"
#include "CHD_GRADE_SINGLE_AIMS.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_GRADE_SINGLE_AIMS::HEATID("HEATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_GRADE_SINGLE_AIMS::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_GRADE_SINGLE_AIMS::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_GRADE_SINGLE_AIMS::STEELGRADECODE("STEELGRADECODE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_GRADE_SINGLE_AIMS::AIMTEMP("AIMTEMP");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_GRADE_SINGLE_AIMS::AIMBASCY("AIMBASCY");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_GRADE_SINGLE_AIMS::INFO("INFO");

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_GRADE_SINGLE_AIMS::CHD_GRADE_SINGLE_AIMS(cCBS_StdConnection* Connection)
:CSMC_DBData("HD_GRADE_SINGLE_AIMS",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_GRADE_SINGLE_AIMS::CHD_GRADE_SINGLE_AIMS(cCBS_Connection* Connection)
:CSMC_DBData("HD_GRADE_SINGLE_AIMS",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_GRADE_SINGLE_AIMS::CHD_GRADE_SINGLE_AIMS()
:CSMC_DBData("HD_GRADE_SINGLE_AIMS")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_GRADE_SINGLE_AIMS::~CHD_GRADE_SINGLE_AIMS()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Internal heat identifier
std::string CHD_GRADE_SINGLE_AIMS::getHEATID(long Row)
{
  return getString(CHD_GRADE_SINGLE_AIMS::HEATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_GRADE_SINGLE_AIMS::setHEATID(const std::string& value)
{
  setString(CHD_GRADE_SINGLE_AIMS::HEATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Treatment identifier
std::string CHD_GRADE_SINGLE_AIMS::getTREATID(long Row)
{
  return getString(CHD_GRADE_SINGLE_AIMS::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_GRADE_SINGLE_AIMS::setTREATID(const std::string& value)
{
  setString(CHD_GRADE_SINGLE_AIMS::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Plant identifier
std::string CHD_GRADE_SINGLE_AIMS::getPLANT(long Row)
{
  return getString(CHD_GRADE_SINGLE_AIMS::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_GRADE_SINGLE_AIMS::setPLANT(const std::string& value)
{
  setString(CHD_GRADE_SINGLE_AIMS::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Steel grade code
std::string CHD_GRADE_SINGLE_AIMS::getSTEELGRADECODE(long Row)
{
  return getString(CHD_GRADE_SINGLE_AIMS::STEELGRADECODE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_GRADE_SINGLE_AIMS::setSTEELGRADECODE(const std::string& value)
{
  setString(CHD_GRADE_SINGLE_AIMS::STEELGRADECODE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Aim temperature at caster, 
double CHD_GRADE_SINGLE_AIMS::getAIMTEMP(long Row)
{
  return getDouble(CHD_GRADE_SINGLE_AIMS::AIMTEMP, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_GRADE_SINGLE_AIMS::setAIMTEMP(double value)
{
  setDouble(CHD_GRADE_SINGLE_AIMS::AIMTEMP, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Aim CaO/SiO2
double CHD_GRADE_SINGLE_AIMS::getAIMBASCY(long Row)
{
  return getDouble(CHD_GRADE_SINGLE_AIMS::AIMBASCY, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_GRADE_SINGLE_AIMS::setAIMBASCY(double value)
{
  setDouble(CHD_GRADE_SINGLE_AIMS::AIMBASCY, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Plant specific production information
std::string CHD_GRADE_SINGLE_AIMS::getINFO(long Row)
{
  return getString(CHD_GRADE_SINGLE_AIMS::INFO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_GRADE_SINGLE_AIMS::setINFO(const std::string& value)
{
  setString(CHD_GRADE_SINGLE_AIMS::INFO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CHD_GRADE_SINGLE_AIMS::select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CHD_GRADE_SINGLE_AIMS::HEATID,HEATID);
  addWhereClause(CHD_GRADE_SINGLE_AIMS::TREATID,TREATID);
  addWhereClause(CHD_GRADE_SINGLE_AIMS::PLANT,PLANT);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CHD_GRADE_SINGLE_AIMS::copy(const std::string &STEELGRADECODE, const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, bool Commit, cCBS_ODBC_DBError &Error)
{
	bool result = !exists(HEATID, TREATID, PLANT);
	//some data found -> delete them
	if (!result)
	{
		result = deleteRows();
		if (!result)
			setLastError(std::string("ERROR_DELETE_DATA"), 0, getActStatement());
	}

  // preparing setting for source table
  CGT_GRADE_SINGLE_AIMS GT_GRADE_SINGLE_AIMS(m_pCBS_StdConnection);
  GT_GRADE_SINGLE_AIMS.addWhereClause(CGT_GRADE_SINGLE_AIMS::STEELGRADECODE,STEELGRADECODE);
  GT_GRADE_SINGLE_AIMS.addWhereClause(CGT_GRADE_SINGLE_AIMS::PLANT,PLANT);

  // preparing setting for aim table
  setHEATID (HEATID);
  setTREATID(TREATID);

  result = result && copyByInsert(&GT_GRADE_SINGLE_AIMS);

	if (!result)
		Error = getLastError();

	if(Commit)
	{
		if (result)
			this->commit();
		else
			rollback();
	}

	return result;
}

bool CHD_GRADE_SINGLE_AIMS::exists(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT)
{
	cleanWhereStatement();

	m_Statement = "Select HEATID from " + m_TableName;

	addWhereClause(CHD_GRADE_SINGLE_AIMS::HEATID,HEATID);
	addWhereClause(CHD_GRADE_SINGLE_AIMS::TREATID,TREATID);
	addWhereClause(CHD_GRADE_SINGLE_AIMS::PLANT,PLANT);
   
  std::string sWhereStatement = getWhereStatement();
  //to avoid the exception like 'Select HEATID from PP_HEAT AND ROWNUM = 1 '
  if(sWhereStatement.length() > 0 ) 
  {
    // do not use ROWNUM in "addWhereClause", ROWNUM is not a table column and where statement will be used for deletion at "deleteRows"
    m_Statement += sWhereStatement + " AND ROWNUM = 1 ;";
  }
  else
  {
    return false;
  }

	return CSMC_DBData::select();
}


