//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.2 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CDataConversion.h"
#include "CGC_SHIFT_CODE.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_SHIFT_CODE::SHIFTCODE("SHIFTCODE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_SHIFT_CODE::SHIFTTYPE("SHIFTTYPE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_SHIFT_CODE::SHIFTSTART("SHIFTSTART");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_SHIFT_CODE::SHIFTEND("SHIFTEND");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_SHIFT_CODE::SHIFTDESCR("SHIFTDESCR");

//##DBClassCodeUtility ! DO NOT EDIT !
CGC_SHIFT_CODE::CGC_SHIFT_CODE(cCBS_StdConnection* Connection)
:CSMC_DBData("GC_SHIFT_CODE",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGC_SHIFT_CODE::~CGC_SHIFT_CODE()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Shift of Production
long CGC_SHIFT_CODE::getSHIFTCODE(long Row)
{
  return getLong(CGC_SHIFT_CODE::SHIFTCODE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_SHIFT_CODE::setSHIFTCODE(long value)
{
  setLong(CGC_SHIFT_CODE::SHIFTCODE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CGC_SHIFT_CODE::getSHIFTTYPE(long Row)
{
  return getString(CGC_SHIFT_CODE::SHIFTTYPE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_SHIFT_CODE::setSHIFTTYPE(const std::string& value)
{
  setString(CGC_SHIFT_CODE::SHIFTTYPE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CGC_SHIFT_CODE::getSHIFTSTART(long Row)
{
  return getDouble(CGC_SHIFT_CODE::SHIFTSTART, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_SHIFT_CODE::setSHIFTSTART(double value)
{
  setDouble(CGC_SHIFT_CODE::SHIFTSTART, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CGC_SHIFT_CODE::getSHIFTEND(long Row)
{
  return getDouble(CGC_SHIFT_CODE::SHIFTEND, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_SHIFT_CODE::setSHIFTEND(double value)
{
  setDouble(CGC_SHIFT_CODE::SHIFTEND, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Displayed shift name.
std::string CGC_SHIFT_CODE::getSHIFTDESCR(long Row)
{
  return getString(CGC_SHIFT_CODE::SHIFTDESCR, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_SHIFT_CODE::setSHIFTDESCR(const std::string& value)
{
  setString(CGC_SHIFT_CODE::SHIFTDESCR, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CGC_SHIFT_CODE::select(long SHIFTCODE, const std::string& SHIFTTYPE)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CGC_SHIFT_CODE::SHIFTCODE,SHIFTCODE);
  addWhereClause(CGC_SHIFT_CODE::SHIFTTYPE,SHIFTTYPE);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CGC_SHIFT_CODE::selectByActTime(const CDateTime& ActTime, const std::string& SHIFTTYPE)
{
	cleanWhereStatement();

  // calculate fraction of day by minutes
  long Hours = ActTime.getHour();
  long Minutes = ActTime.getMinute();
  Minutes = Hours*60 + Minutes;

  double ActualShiftTime = Minutes / (24*60); //in minutes, set for the whole day;

	m_Statement = "Select * from " + m_TableName;
  m_Statement += " where " + CDataConversion::DoubleToString(ActualShiftTime,0);
  m_Statement += " between shiftstart and shiftend";
  m_Statement += " and SHIFTTYPE = '" + SHIFTTYPE + "' ;";
	
	return CSMC_DBData::select();
}

int CGC_SHIFT_CODE::getShiftCodeByTime(CDateTime dDateTime)
{
  std::string nowDateTime = dDateTime.toDBString();
  std::string nowTime = nowDateTime.substr(11, 12);
  int nowHour = CDataConversion::StringToInt(nowTime.substr(0,2));
  int nowMin = CDataConversion::StringToInt(nowTime.substr(3,2));
  int nowSec = CDataConversion::StringToInt(nowTime.substr(6,2));
  //to calculate the time to value of 0-1,
  //the whole day is 24*3600 seconds, so current time is hour*3600+minute*60+seconds
  //the current value of time is (hour*3600+minute*60+seconds)/(24*3600)
  double curTimeValue = double(nowHour*3600+nowMin*60+nowSec)/double(24*3600);

  int ShiftCode = -1;

  cleanWhereStatement();

  m_Statement = "Select SHIFTCODE from " + m_TableName;

  addWhereClause("SHIFTSTART",curTimeValue,"<");
  addWhereClause("SHIFTEND",curTimeValue,">=");

  m_Statement += getWhereStatement() + ";";

  if(CSMC_DBData::select())
  {
	  ShiftCode = getSHIFTCODE(1);
  }
  return ShiftCode;
}


