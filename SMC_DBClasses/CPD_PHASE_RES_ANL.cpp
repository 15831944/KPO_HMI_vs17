//## Copyright (C) 2010 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CIntfData.h"
#include "CPD_PHASE_RES_ANL.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_PHASE_RES_ANL::HEATID("HEATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_PHASE_RES_ANL::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_PHASE_RES_ANL::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_PHASE_RES_ANL::RES_PHASENO("RES_PHASENO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_PHASE_RES_ANL::ENAME("ENAME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_PHASE_RES_ANL::ANL("ANL");

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_PHASE_RES_ANL::CPD_PHASE_RES_ANL(cCBS_StdConnection* Connection)
:CSMC_DBData("PD_PHASE_RES_ANL",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_PHASE_RES_ANL::CPD_PHASE_RES_ANL(cCBS_Connection* Connection)
:CSMC_DBData("PD_PHASE_RES_ANL",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_PHASE_RES_ANL::CPD_PHASE_RES_ANL()
:CSMC_DBData("PD_PHASE_RES_ANL")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_PHASE_RES_ANL::~CPD_PHASE_RES_ANL()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Internal heat identifier
std::string CPD_PHASE_RES_ANL::getHEATID(long Row)
{
  return getString(CPD_PHASE_RES_ANL::HEATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_PHASE_RES_ANL::setHEATID(const std::string& value)
{
  setString(CPD_PHASE_RES_ANL::HEATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Treatment identifier
std::string CPD_PHASE_RES_ANL::getTREATID(long Row)
{
  return getString(CPD_PHASE_RES_ANL::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_PHASE_RES_ANL::setTREATID(const std::string& value)
{
  setString(CPD_PHASE_RES_ANL::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Plant identifier
std::string CPD_PHASE_RES_ANL::getPLANT(long Row)
{
  return getString(CPD_PHASE_RES_ANL::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_PHASE_RES_ANL::setPLANT(const std::string& value)
{
  setString(CPD_PHASE_RES_ANL::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Result Phase No for storing into the Result tables
long CPD_PHASE_RES_ANL::getRES_PHASENO(long Row)
{
  return getLong(CPD_PHASE_RES_ANL::RES_PHASENO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_PHASE_RES_ANL::setRES_PHASENO(long value)
{
  setLong(CPD_PHASE_RES_ANL::RES_PHASENO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Element or slag compound name
std::string CPD_PHASE_RES_ANL::getENAME(long Row)
{
  return getString(CPD_PHASE_RES_ANL::ENAME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_PHASE_RES_ANL::setENAME(const std::string& value)
{
  setString(CPD_PHASE_RES_ANL::ENAME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Analysis value
double CPD_PHASE_RES_ANL::getANL(long Row)
{
  return getDouble(CPD_PHASE_RES_ANL::ANL, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_PHASE_RES_ANL::setANL(double value)
{
  setDouble(CPD_PHASE_RES_ANL::ANL, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CPD_PHASE_RES_ANL::select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long RES_PHASENO, const std::string& ENAME)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPD_PHASE_RES_ANL::HEATID,HEATID);
  addWhereClause(CPD_PHASE_RES_ANL::TREATID,TREATID);
  addWhereClause(CPD_PHASE_RES_ANL::PLANT,PLANT);
  addWhereClause(CPD_PHASE_RES_ANL::RES_PHASENO,RES_PHASENO);
  addWhereClause(CPD_PHASE_RES_ANL::ENAME,ENAME);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CPD_PHASE_RES_ANL::deleteAnalysis(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long RES_PHASENO)
{
	cleanWhereStatement();

  addWhereClause(CPD_PHASE_RES_ANL::HEATID,HEATID);
  addWhereClause(CPD_PHASE_RES_ANL::TREATID,TREATID);
  addWhereClause(CPD_PHASE_RES_ANL::PLANT,PLANT);
  addWhereClause(CPD_PHASE_RES_ANL::RES_PHASENO,RES_PHASENO);

  return CSMC_DBData::deleteRows();
}

bool CPD_PHASE_RES_ANL::writeAnalysis(const std::string& HeatID, const std::string& TreatID, const std::string& Plant, long Res_PhaseNo, const seqAnalysis& SeqAnalysis)
{
  bool RetValue = true;
  try
  {
    // delete possible old values for this phase
    RetValue = deleteAnalysis(HeatID, TreatID, Plant, Res_PhaseNo);

    for ( long i = 0 ; i < CIntfData::getLength(SeqAnalysis); ++i)
    {
      sAnalysis Anl;
      CIntfData::getAt(Anl, &SeqAnalysis, i);
      std::string Element = Anl.Element;

      // prevent against NOT NULL contraints
      // all db fields must be filled !
      if ( HeatID.empty()   ||
           TreatID.empty()  ||
           Plant.empty()    ||
           Element.empty()  ||
           Res_PhaseNo == DEF::Inv_Long ||
           Anl.Concentration == DEF::Inv_Double )
      {
        CSMC_DBData::log("Empty or wrong analysis data detected !",1);
      }
      else
      {
        setHEATID(HeatID);
        setTREATID(TreatID);
        setPLANT(Plant);
        setRES_PHASENO(Res_PhaseNo);
        setENAME(Element);
        setANL(Anl.Concentration);

        RetValue = insert();
      }
    }
  }
  catch(...)
  {
   RetValue = false;
  }
  return RetValue;
}


