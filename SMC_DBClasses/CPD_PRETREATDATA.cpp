//## Copyright (C) 2010 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "cCBS_StdEventLogFrameController.h"
#include "CPD_SAMPLE_REF.h"
#include "CPD_LADLE.h"
#include "CGC_LADLE_DEF.h"
#include "DEF_GC_HEAT_STATUS.h"
#include "CHeatStatusContainer.h"
#include "CPD_PRETREATDATA.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_PRETREATDATA::PRETREAT_COUNTER("PRETREAT_COUNTER");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_PRETREATDATA::HEATID("HEATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_PRETREATDATA::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_PRETREATDATA::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_PRETREATDATA::PLANTNO("PLANTNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_PRETREATDATA::PRODORDERID("PRODORDERID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_PRETREATDATA::STEELGRADECODE("STEELGRADECODE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_PRETREATDATA::HEATID_EXT_CUST("HEATID_EXT_CUST");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_PRETREATDATA::TREATID_EXT_CUST("TREATID_EXT_CUST");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_PRETREATDATA::STEELWEIGHT("STEELWEIGHT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_PRETREATDATA::SLAGWEIGHT("SLAGWEIGHT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_PRETREATDATA::HEATSTATUSNO("HEATSTATUSNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_PRETREATDATA::SAMPLE_REF("SAMPLE_REF");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_PRETREATDATA::LADLENO("LADLENO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_PRETREATDATA::LADLETYPE("LADLETYPE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_PRETREATDATA::USERCODE("USERCODE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_PRETREATDATA::SLAB_PRODUCED("SLAB_PRODUCED");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_PRETREATDATA::FREEBOARD("FREEBOARD");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_PRETREATDATA::SLAGTHICKNESS("SLAGTHICKNESS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_PRETREATDATA::REVTIME("REVTIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_PRETREATDATA::EXPIRATIONDATE("EXPIRATIONDATE");

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_PRETREATDATA::CPD_PRETREATDATA(cCBS_StdConnection* Connection)
:CSMC_DBData("PD_PRETREATDATA",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_PRETREATDATA::CPD_PRETREATDATA(cCBS_Connection* Connection)
:CSMC_DBData("PD_PRETREATDATA",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_PRETREATDATA::CPD_PRETREATDATA()
:CSMC_DBData("PD_PRETREATDATA")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_PRETREATDATA::~CPD_PRETREATDATA()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Unique number
long CPD_PRETREATDATA::getPRETREAT_COUNTER(long Row)
{
  return getLong(CPD_PRETREATDATA::PRETREAT_COUNTER, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_PRETREATDATA::setPRETREAT_COUNTER(long value)
{
  setLong(CPD_PRETREATDATA::PRETREAT_COUNTER, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##In case the heat was at SMSD plant before, we have already an internal id
std::string CPD_PRETREATDATA::getHEATID(long Row)
{
  return getString(CPD_PRETREATDATA::HEATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_PRETREATDATA::setHEATID(const std::string& value)
{
  setString(CPD_PRETREATDATA::HEATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Treatment Id last station
std::string CPD_PRETREATDATA::getTREATID(long Row)
{
  return getString(CPD_PRETREATDATA::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_PRETREATDATA::setTREATID(const std::string& value)
{
  setString(CPD_PRETREATDATA::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Plant identifier of last treatment station
std::string CPD_PRETREATDATA::getPLANT(long Row)
{
  return getString(CPD_PRETREATDATA::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_PRETREATDATA::setPLANT(const std::string& value)
{
  setString(CPD_PRETREATDATA::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Plant number
long CPD_PRETREATDATA::getPLANTNO(long Row)
{
  return getLong(CPD_PRETREATDATA::PLANTNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_PRETREATDATA::setPLANTNO(long value)
{
  setLong(CPD_PRETREATDATA::PLANTNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Production oder identification
std::string CPD_PRETREATDATA::getPRODORDERID(long Row)
{
  return getString(CPD_PRETREATDATA::PRODORDERID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_PRETREATDATA::setPRODORDERID(const std::string& value)
{
  setString(CPD_PRETREATDATA::PRODORDERID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Steel grade code
std::string CPD_PRETREATDATA::getSTEELGRADECODE(long Row)
{
  return getString(CPD_PRETREATDATA::STEELGRADECODE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_PRETREATDATA::setSTEELGRADECODE(const std::string& value)
{
  setString(CPD_PRETREATDATA::STEELGRADECODE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##In case the heat was not produced at SMSD plant before, we have only that
std::string CPD_PRETREATDATA::getHEATID_EXT_CUST(long Row)
{
  return getString(CPD_PRETREATDATA::HEATID_EXT_CUST, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_PRETREATDATA::setHEATID_EXT_CUST(const std::string& value)
{
  setString(CPD_PRETREATDATA::HEATID_EXT_CUST, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Customer treatment Id at last station
std::string CPD_PRETREATDATA::getTREATID_EXT_CUST(long Row)
{
  return getString(CPD_PRETREATDATA::TREATID_EXT_CUST, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_PRETREATDATA::setTREATID_EXT_CUST(const std::string& value)
{
  setString(CPD_PRETREATDATA::TREATID_EXT_CUST, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Steel weight in kg
double CPD_PRETREATDATA::getSTEELWEIGHT(long Row)
{
  return getDouble(CPD_PRETREATDATA::STEELWEIGHT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_PRETREATDATA::setSTEELWEIGHT(double value)
{
  setDouble(CPD_PRETREATDATA::STEELWEIGHT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Slag weight in kg
double CPD_PRETREATDATA::getSLAGWEIGHT(long Row)
{
  return getDouble(CPD_PRETREATDATA::SLAGWEIGHT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_PRETREATDATA::setSLAGWEIGHT(double value)
{
  setDouble(CPD_PRETREATDATA::SLAGWEIGHT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Defined in GC_HEAT_STAT
long CPD_PRETREATDATA::getHEATSTATUSNO(long Row)
{
  return getLong(CPD_PRETREATDATA::HEATSTATUSNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_PRETREATDATA::setHEATSTATUSNO(long value)
{
  setLong(CPD_PRETREATDATA::HEATSTATUSNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Unique sample reference
long CPD_PRETREATDATA::getSAMPLE_REF(long Row)
{
  return getLong(CPD_PRETREATDATA::SAMPLE_REF, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_PRETREATDATA::setSAMPLE_REF(long value)
{
  setLong(CPD_PRETREATDATA::SAMPLE_REF, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Unique ladle number
long CPD_PRETREATDATA::getLADLENO(long Row)
{
  return getLong(CPD_PRETREATDATA::LADLENO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_PRETREATDATA::setLADLENO(long value)
{
  setLong(CPD_PRETREATDATA::LADLENO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##e.g. Hot Metal -> H, Teeming -> T
std::string CPD_PRETREATDATA::getLADLETYPE(long Row)
{
  return getString(CPD_PRETREATDATA::LADLETYPE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_PRETREATDATA::setLADLETYPE(const std::string& value)
{
  setString(CPD_PRETREATDATA::LADLETYPE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##User of last revision
std::string CPD_PRETREATDATA::getUSERCODE(long Row)
{
  return getString(CPD_PRETREATDATA::USERCODE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_PRETREATDATA::setUSERCODE(const std::string& value)
{
  setString(CPD_PRETREATDATA::USERCODE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Planning issue, flag for return heats: In case a slab was produced at the CCS with that heat, the flag is 1, if no slabs are produced 0, if no information is available from CCS it remains NULL
long CPD_PRETREATDATA::getSLAB_PRODUCED(long Row)
{
  return getLong(CPD_PRETREATDATA::SLAB_PRODUCED, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_PRETREATDATA::setSLAB_PRODUCED(long value)
{
  setLong(CPD_PRETREATDATA::SLAB_PRODUCED, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Measured freebord from previous plant
double CPD_PRETREATDATA::getFREEBOARD(long Row)
{
  return getDouble(CPD_PRETREATDATA::FREEBOARD, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_PRETREATDATA::setFREEBOARD(double value)
{
  setDouble(CPD_PRETREATDATA::FREEBOARD, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Measured slag thickness from previous plant
double CPD_PRETREATDATA::getSLAGTHICKNESS(long Row)
{
  return getDouble(CPD_PRETREATDATA::SLAGTHICKNESS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_PRETREATDATA::setSLAGTHICKNESS(double value)
{
  setDouble(CPD_PRETREATDATA::SLAGTHICKNESS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Date and time of last revision
CDateTime CPD_PRETREATDATA::getREVTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CPD_PRETREATDATA::REVTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_PRETREATDATA::setREVTIME(const CDateTime& value)
{
 setString(CPD_PRETREATDATA::REVTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Real entry as DATETIME indicates that the heat is not longer in production and should not be considered during announcement
CDateTime CPD_PRETREATDATA::getEXPIRATIONDATE(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CPD_PRETREATDATA::EXPIRATIONDATE, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_PRETREATDATA::setEXPIRATIONDATE(const CDateTime& value)
{
 setString(CPD_PRETREATDATA::EXPIRATIONDATE, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CPD_PRETREATDATA::select(long PRETREAT_COUNTER)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPD_PRETREATDATA::PRETREAT_COUNTER,PRETREAT_COUNTER);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CPD_PRETREATDATA::selectByHeatDataExtCust(const std::string& HEATID_EXT_CUST, const std::string& TREATID_EXT_CUST)
{
	cleanWhereStatement();
	
	m_Statement = "Select * from " + m_TableName;
	
	addWhereClause(CPD_PRETREATDATA::HEATID_EXT_CUST,HEATID_EXT_CUST);
	addWhereClause(CPD_PRETREATDATA::TREATID_EXT_CUST,TREATID_EXT_CUST);
  addWhereClause(CPD_PRETREATDATA::EXPIRATIONDATE + " is NULL");
	
	m_Statement += getWhereStatement() + " order by PRETREAT_COUNTER desc;";
	
	return CSMC_DBData::select();

}

bool CPD_PRETREATDATA::selectByRevTime(const CDateTime& REVTIME, const std::string& Operator)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPD_PRETREATDATA::REVTIME, REVTIME, Operator );

  m_Statement += getWhereStatement() + " order by REVTIME desc;";

  return CSMC_DBData::select();
}

bool CPD_PRETREATDATA::selectReturnHeat(const string &PLANT,const long &PLANTNO,const string &LADLETYPE,const long &LADLENO)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPD_PRETREATDATA::PLANT,PLANT);
  addWhereClause(CPD_PRETREATDATA::PLANTNO,PLANTNO);
  addWhereClause(CPD_PRETREATDATA::LADLETYPE,LADLETYPE);
  addWhereClause(CPD_PRETREATDATA::LADLENO,LADLENO);

  m_Statement += getWhereStatement() + "  and EXPIRATIONDATE is NULL order by REVTIME desc  ;";

  return CSMC_DBData::select();
}

bool CPD_PRETREATDATA::selectValidDataByHeat(const std::string &pHeat, const std::string &pTreat)
{
	cleanWhereStatement();

	m_Statement = "Select * from " + m_TableName;

	addWhereClause(CPD_PRETREATDATA::HEATID, pHeat);
	addWhereClause(CPD_PRETREATDATA::TREATID, pTreat);
  addWhereClause(CPD_PRETREATDATA::EXPIRATIONDATE + " is NULL");

	m_Statement += getWhereStatement() + " order by PRETREAT_COUNTER DESC;";

	return CSMC_DBData::select();
}

bool CPD_PRETREATDATA::selectValidDataByProdOrderId(const std::string &PRODORDERID)
{
	cleanWhereStatement();

	m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPD_PRETREATDATA::PRODORDERID,PRODORDERID);
  addWhereClause(CPD_PRETREATDATA::EXPIRATIONDATE + " is NULL");

	m_Statement += getWhereStatement() + " order by PRETREAT_COUNTER DESC;";

	return CSMC_DBData::select();
}

bool CPD_PRETREATDATA::selectValidDataByProdOrderIdAndPlant(const std::string &PRODORDERID, const std::string &PLANT)
{
	cleanWhereStatement();

	m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPD_PRETREATDATA::PRODORDERID,PRODORDERID);
  addWhereClause(CPD_PRETREATDATA::PLANT,PLANT);
  addWhereClause(CPD_PRETREATDATA::EXPIRATIONDATE + " is NULL");

	m_Statement += getWhereStatement() + " order by PRETREAT_COUNTER DESC;";

	return CSMC_DBData::select();
}

bool CPD_PRETREATDATA::addCommentsForHeatDataExtCust(const std::string& HEATID_EXT_CUST, const std::string& TREATID_EXT_CUST, const std::string& NewComment)
{
	bool ResValue = false;

  if ( selectByHeatDataExtCust(HEATID_EXT_CUST,TREATID_EXT_CUST ) )
  {
    std::string COMMENTS = getCOMMENTS(1);

    if ( COMMENTS == CSMC_DBData::unspecString )
    {
      COMMENTS.clear();
    }

    if ( std::string::npos == COMMENTS.find(NewComment) )
    {
      COMMENTS += " ";
      COMMENTS += NewComment;

      // setCOMMENTS(COMMENTS);

      if ( update() )
      {
        ResValue = true;
        commit();
      }
      else
      {
        rollback();
      }
    }
  }
	
  return ResValue;
}

bool CPD_PRETREATDATA::addCommentsForProdOrderId(const std::string& PRODORDERID, const std::string& NewComment)
{
	bool ResValue = false;

  if ( selectValidDataByProdOrderId(PRODORDERID) )
  {
    std::string COMMENTS = getCOMMENTS(1);

    if ( COMMENTS == CSMC_DBData::unspecString )
    {
      COMMENTS.clear();
    }

    if ( std::string::npos == COMMENTS.find(NewComment) )
    {
      COMMENTS += " ";
      COMMENTS += NewComment;

      // setCOMMENTS(COMMENTS);

      if ( update() )
      {
        ResValue = true;
        commit();
      }
      else
      {
        rollback();
      }
    }
  }
	
  return ResValue;

}

bool CPD_PRETREATDATA::assignSample(const std::string& HEATID_EXT_CUST, const std::string& TREATID_EXT_CUST, long SAMPLE_COUNTER, long MEASUREMENT_TYPE)
{
	bool RetValue = false;

  if ( selectByHeatDataExtCust(HEATID_EXT_CUST,TREATID_EXT_CUST ) )
  {
    long PRETREAT_COUNTER = getPRETREAT_COUNTER(1);
    
    RetValue = assignSample(PRETREAT_COUNTER, SAMPLE_COUNTER, MEASUREMENT_TYPE);
  }

  return RetValue;
}

bool CPD_PRETREATDATA::assignSample(long PRETREAT_COUNTER, long SAMPLE_COUNTER, long MEASUREMENT_TYPE)
{
	bool RetValue = false;

  if ( PRETREAT_COUNTER != CSMC_DBData::unspecLong && select (PRETREAT_COUNTER) )
  {
    long SAMPLE_REF = getSAMPLE_REF(1);
    
    if ( SAMPLE_REF == CSMC_DBData::unspecLong )
    {
      if ( m_pPD_SAMPLE_REF )
      {
        SAMPLE_REF = m_pPD_SAMPLE_REF->insertNewSAMPLE_REF();
      }
      else
      {
        cCBS_StdEventLogFrame *pEventLog = cCBS_StdEventLogFrameController::getInstance()->getpEventLog();
        sEventLogMessage sMessage = cCBS_StdEventLog::initMessage(__FILE__,__LINE__);
        pEventLog->EL_DBReadError(sMessage,"", m_TableName.c_str(), "" );
      }
    }

    if ( m_pPD_SAMPLE_REF->writeSAMPLE_REF(SAMPLE_REF, SAMPLE_COUNTER, MEASUREMENT_TYPE) )
    {

      setSAMPLE_REF (SAMPLE_REF);
      setREVTIME    (CDateTime());

      RetValue = update();
      
      if ( RetValue )
      {
        commit();
      }
      else
      {
        cCBS_StdEventLogFrame *pEventLog = cCBS_StdEventLogFrameController::getInstance()->getpEventLog();
        sEventLogMessage sMessage = cCBS_StdEventLog::initMessage(__FILE__,__LINE__);
        pEventLog->EL_DBWriteError(sMessage,"", m_TableName.c_str(), "" );

        rollback();
      }
    }
  }
	
  return RetValue;
}

bool CPD_PRETREATDATA::deleteRowsbyPretreatCounter(long PRETREAT_COUNTER)
{
  cleanWhereStatement();

  addWhereClause(CPD_PRETREATDATA::PRETREAT_COUNTER,PRETREAT_COUNTER);

  return deleteRows();
}

bool CPD_PRETREATDATA::doAnnouncement(const std::string& HEATID, const std::string &PLANT, const std::string& NextTreatID, bool Commit, cCBS_ODBC_DBError &Error)
{
  bool Result = true;

  CHeatStatusContainer HeatStatusContainer(m_pCBS_StdConnection);

  long HEATSTATUSNO_ANNOUNCED    = HeatStatusContainer.getHeatStatus(PLANT, DEF_GC_HEAT_STATUS::HeatAnnounced );

  if ( selectValidDataByHeat(HEATID,CSMC_DBData::unspecString) )
  {
    setTREATID(NextTreatID);
    setHEATSTATUSNO(HEATSTATUSNO_ANNOUNCED);
    setREVTIME(CDateTime());
    
    Result = Result & update();
  }

  if (!Result)
    Error = getLastError();

  if (Commit)
  {
    if (Result)
      commit();
    else
      rollback();
  }

  return Result;
}

void CPD_PRETREATDATA::doOnConstruct()
{
  m_pPD_SAMPLE_REF        = new CPD_SAMPLE_REF( m_pCBS_StdConnection );
}

void CPD_PRETREATDATA::doOnDestruct()
{
  if ( m_pPD_SAMPLE_REF )       { delete m_pPD_SAMPLE_REF; m_pPD_SAMPLE_REF = 0; }
}

bool CPD_PRETREATDATA::exists(const std::string &PRODORDERID, const std::string &PLANT)
{
	cleanWhereStatement();

	m_Statement = "Select * from " + m_TableName;

	addWhereClause(CPD_PRETREATDATA::PRODORDERID,PRODORDERID);
	addWhereClause(CPD_PRETREATDATA::PLANT,PLANT);
   
  std::string sWhereStatement = getWhereStatement();
  //to avoid the exception like 'Select HEATID from PP_HEAT AND ROWNUM = 1 '
  if(sWhereStatement.length() > 0 ) 
  {
    // do not use ROWNUM in "addWhereClause", ROWNUM is not a table column and where statement will be used for deletion at "deleteRows"
    m_Statement += sWhereStatement + " AND ROWNUM = 1 ;";
  }
  else
  {
    return false;
  }

	return CSMC_DBData::select();
}

std::string CPD_PRETREATDATA::getCOMMENTS(long Row)
{
 return getString("COMMENTS", Row);
}

bool CPD_PRETREATDATA::getNextPRETREAT_COUNTER(long &pPredtreatCounter, cCBS_ODBC_DBError &Error)
{
	
	m_Statement = "select SEQ_PRETREAT_COUNTER.nextval as PRETREAT_COUNTER from dual";

  bool result = CSMC_DBData::select();

	if ( result )
  {
		pPredtreatCounter = getPRETREAT_COUNTER(1);
  }
	else
  {
		Error = getLastError();
  }

	return result;	
}

long CPD_PRETREATDATA::getSampleRefByHeatData(const std::string& HEATID, const std::string & TREATID)
{
  long Sample_Ref = CSMC_DBData::unspecLong;

  if ( selectValidDataByHeat(HEATID, TREATID) )
  {
    Sample_Ref = getSAMPLE_REF(1);    
  }

	return Sample_Ref;
}

long CPD_PRETREATDATA::getSampleRefByProdOrderId(const std::string& PRODORDERID)
{
  long Sample_Ref = CSMC_DBData::unspecLong;

  if ( selectValidDataByProdOrderId(PRODORDERID) )
  {
    Sample_Ref = getSAMPLE_REF(1);    
  }

	return Sample_Ref;
}

std::vector<long> CPD_PRETREATDATA::getSampleRefList()
{
  std::vector<long> SampleRefList;

  if ( select(CSMC_DBData::unspecLong) )
  {
    for ( long i = 1; i <= getLastRow() ; ++i )
    {
      SampleRefList.push_back(getSAMPLE_REF(i));
    }
  }

  return SampleRefList;
}

bool CPD_PRETREATDATA::updateInsert(const std::string &HEATID, const std::string &TREATID, const string PRODORDERID, const std::string &PLANT, long PLANTNO, const string STEELGRADECODE, const string HEATID_EXT_CUST, const string TREATID_EXT_CUST, double STEELMASS,	double SLAGMASS, long SAMPLE_REF, const std::string &LADLETYPE, long LADLENO, const std::string &USERCODE, long HEATSTATUSNO, bool Commit, cCBS_ODBC_DBError &Error)
{
  bool Result = true;

  //CPD_LADLE          PD_LADLE           (m_pCBS_StdConnection);
  CGC_LADLE_DEF GC_LADLE_DEF(m_pCBS_StdConnection);

  setPLANTNO(PLANTNO);

  if ( STEELGRADECODE != CSMC_DBData::unspecString )
    setSTEELGRADECODE(STEELGRADECODE);

  if ( HEATID_EXT_CUST != CSMC_DBData::unspecString )
    setHEATID_EXT_CUST(HEATID_EXT_CUST);
  if ( TREATID_EXT_CUST != CSMC_DBData::unspecString )
    setTREATID_EXT_CUST(TREATID_EXT_CUST);

  setSTEELWEIGHT(STEELMASS);
  setSLAGWEIGHT(SLAGMASS);

  setHEATSTATUSNO(HEATSTATUSNO);
  setSAMPLE_REF(SAMPLE_REF);

  if ( GC_LADLE_DEF.isValidLadle(LADLENO, LADLETYPE) )
  {
    setLADLENO(LADLENO);
    setLADLETYPE(LADLETYPE);
  }

  setUSERCODE(USERCODE);
  setREVTIME(CDateTime());

  setTREATID(TREATID);

  if ( PLANT != CSMC_DBData::unspecString)
    setPLANT(PLANT);

  long PredCounter;

  if ( PRODORDERID != CSMC_DBData::unspecString && !PRODORDERID.empty() && selectValidDataByProdOrderId(PRODORDERID) ) 
  {
    PredCounter = getPRETREAT_COUNTER(1);

    setHEATID(HEATID);  
    Result = Result && update();
  }
  else if ( HEATID != CSMC_DBData::unspecString && !HEATID.empty() && selectValidDataByHeat(HEATID, CSMC_DBData::unspecString) ) 
  {
    PredCounter = getPRETREAT_COUNTER(1);

    setPRODORDERID(PRODORDERID);
    Result = Result && update();
  }
  else
  {
    //get next sequence value
    Result = getNextPRETREAT_COUNTER(PredCounter, Error);

    setPRETREAT_COUNTER(PredCounter);

    setHEATID(HEATID);

    setPRODORDERID(PRODORDERID);

    Result = Result && insert();
  }

  //Result = Result & PD_LADLE.switchPretreatmentCounter(LADLENO, LADLETYPE, PredCounter, Commit, Error);

  if (!Result)
    Error = getLastError();


  if (Commit)
  {
    if (Result)
      commit();
    else
      rollback();
  }

  return Result;
}

bool CPD_PRETREATDATA::updateSampleRefForHeatData(const std::string& HEATID, const std::string& TREATID, long SAMPLE_REF)
{
  bool RetValue = false;

  if ( selectValidDataByHeat(HEATID,TREATID) )
  {
    setSAMPLE_REF(SAMPLE_REF);
    if ( update() )
    {
      commit();
      RetValue = true;
    }
    else
    {
      rollback();
    }
  }

	return RetValue;
}


