//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CGC_CHARGE_DEST.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_CHARGE_DEST::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_CHARGE_DEST::CHARGING_DEST_NO("CHARGING_DEST_NO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_CHARGE_DEST::CHARGING_DEST_NAME("CHARGING_DEST_NAME");

//##DBClassCodeUtility ! DO NOT EDIT !
CGC_CHARGE_DEST::CGC_CHARGE_DEST(cCBS_StdConnection* Connection)
:CSMC_DBData("GC_CHARGE_DEST",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGC_CHARGE_DEST::CGC_CHARGE_DEST(cCBS_Connection* Connection)
:CSMC_DBData("GC_CHARGE_DEST",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGC_CHARGE_DEST::CGC_CHARGE_DEST()
:CSMC_DBData("GC_CHARGE_DEST")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGC_CHARGE_DEST::~CGC_CHARGE_DEST()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Plant identifier
std::string CGC_CHARGE_DEST::getPLANT(long Row)
{
  return getString(CGC_CHARGE_DEST::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_CHARGE_DEST::setPLANT(const std::string& value)
{
  setString(CGC_CHARGE_DEST::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Related Charging destination Number
long CGC_CHARGE_DEST::getCHARGING_DEST_NO(long Row)
{
  return getLong(CGC_CHARGE_DEST::CHARGING_DEST_NO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_CHARGE_DEST::setCHARGING_DEST_NO(long value)
{
  setLong(CGC_CHARGE_DEST::CHARGING_DEST_NO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Charging destination name, e.g TapLadle, ladle
std::string CGC_CHARGE_DEST::getCHARGING_DEST_NAME(long Row)
{
  return getString(CGC_CHARGE_DEST::CHARGING_DEST_NAME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_CHARGE_DEST::setCHARGING_DEST_NAME(const std::string& value)
{
  setString(CGC_CHARGE_DEST::CHARGING_DEST_NAME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CGC_CHARGE_DEST::select(const std::string& PLANT, long CHARGING_DEST_NO)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CGC_CHARGE_DEST::PLANT,PLANT);
  addWhereClause(CGC_CHARGE_DEST::CHARGING_DEST_NO,CHARGING_DEST_NO);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

std::string CGC_CHARGE_DEST::getDest_Name(const std::string& Plant, long Dest_No)
{
  cleanWhereStatement();
  m_Statement = "select * from " + m_TableName;

  addWhereClause(CGC_CHARGE_DEST::CHARGING_DEST_NO,Dest_No);
  addWhereClause(CGC_CHARGE_DEST::PLANT,Plant);

  m_Statement += getWhereStatement();
  m_Statement += " ; ";
  
  CSMC_DBData::select();
  if   (long row=CSMC_DBData::getLastRow())
    return getCHARGING_DEST_NAME(row);
  else
    return "";
}

std::map<long, std::string> & CGC_CHARGE_DEST::getDestNameListByPlant(const std::string& Plant)
{
  cleanWhereStatement();
  m_Statement = "select * from " + m_TableName;

  addWhereClause(CGC_CHARGE_DEST::PLANT,Plant);

  m_Statement += getWhereStatement();
  m_Statement += " ; ";
  CSMC_DBData::select();

  static std::map<long, std::string> DestNameList;
  std::string DestName;
  long lDestNo = -1;
  long lRowsGot = this->getLastRow();
  for (long i = 1; i <= lRowsGot; i++)
  {
    DestName = this->getString(CGC_CHARGE_DEST::CHARGING_DEST_NAME,i);
    lDestNo  = this->getLong(CGC_CHARGE_DEST::CHARGING_DEST_NO,i);
    DestNameList.insert(std::pair <long,std::string>(lDestNo, DestName));
  }

  return DestNameList;
}


