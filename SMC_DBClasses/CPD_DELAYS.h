//## Copyright (C) 2010 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 

#if defined (_MSC_VER) && (_MSC_VER >= 1000)
#pragma once
#endif
#ifndef _INC_CPD_DELAYS_INCLUDED
#define _INC_CPD_DELAYS_INCLUDED

#include "CSMC_DBData.h"

class CPD_DELAYS
: public CSMC_DBData
{

public:
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PLANT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PLANTNO;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string CODE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string DELAYSTART;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string EXPIRATIONDATE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string HEATID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string HM_ID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TREATID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string DELAYEND;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string USERCODE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string COMMENT_OPERATOR;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string REVTIME;

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPD_DELAYS(cCBS_StdConnection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPD_DELAYS(cCBS_Connection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPD_DELAYS();

  //##DBClassCodeUtility ! DO NOT EDIT !
  ~CPD_DELAYS();

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Plant identifier
  std::string getPLANT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPLANT(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Plant number
  long getPLANTNO(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPLANTNO(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Delay code
  std::string getCODE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setCODE(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Timestamp of delay start
  CDateTime getDELAYSTART(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setDELAYSTART(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Entry as real DATETIME indicates that the delay was deleted by operator
  CDateTime getEXPIRATIONDATE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setEXPIRATIONDATE(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##It is possible that a delay cannot be assigned to a heat/treat , so we have no FK to PD_HEAT_DATA
  std::string getHEATID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setHEATID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Internal identifier for Desulphurisation station
  std::string getHM_ID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setHM_ID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Treatment identifier
  std::string getTREATID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTREATID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Timestamp of delay end
  CDateTime getDELAYEND(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setDELAYEND(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getUSERCODE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setUSERCODE(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Option at Delay-dialog for entering operator comments
  std::string getCOMMENT_OPERATOR(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setCOMMENT_OPERATOR(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Date and time of last revision
  CDateTime getREVTIME(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setREVTIME(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  bool select(const std::string& PLANT, long PLANTNO, const std::string& CODE, const CDateTime& DELAYSTART);

  //## ----------------------------------END-GENERATED-CODE--------------------- 

  //## ----------------------------------YOUR-CODE------------------------------ 

  bool selectLatestDelayByHeat(const std::string& PLANT, long PLANTNO, const std::string& HEATID, const std::string& TREATID);

  bool selectValid(const std::string& PLANT, long PLANTNO, const std::string& CODE, const CDateTime &DELAYSTART);

  bool deleteByDelayStart(const string& PLANT, long PLANTNO, const string& CODE, const CDateTime& DELAYSTART);

  bool deleteByStartTime(CDateTime& OlderThan);

  bool deleteDelay(const std::string& PLANT, long PLANTNO, const std::string& CODE, const CDateTime& DELAYSTART);

  bool exist_auto( const std::string& PLANT, long PLANTNO,const std::string& HEATID,const std::string& TREATID );

  bool exists(const std::string& PLANT, long PLANTNO, const std::string& CODE, const CDateTime &DELAYSTART, const CDateTime &EXPIRATIONDATE);

  bool expireDelay(const std::string &PLANT, long PLANTNO, const std::string &CODE, CDateTime &DELAYSTART, const std::string &USERCODE, bool Commit, cCBS_ODBC_DBError &Error);

  bool fillAutoEndTimeByEvents( const std::string& PLANT, long PLANTNO,const std::string& HEATID,const std::string& TREATID,const std::string& User,bool& bNeedAuto, bool Commit, cCBS_ODBC_DBError &Error);

  bool updateOrInsert(const std::string &HEATID, const std::string &TREATID, const std::string &PLANT, long PLANTNO, const std::string &CODE, CDateTime &DELAYSTART, CDateTime &DELAYEND, const std::string &USERCODE, const std::string &COMMENT, bool Commit, cCBS_ODBC_DBError &Error);

  bool updateOrInsertHMD(const std::string &HEATID, const std::string &TREATID, const std::string &PLANT, long PLANTNO, const std::string &CODE, CDateTime &DELAYSTART, CDateTime &DELAYEND, const std::string &USERCODE, const std::string &COMMENT, bool Commit, cCBS_ODBC_DBError &Error);

};

#endif /* _INC_CPD_DELAYS_INCLUDED */
