//## Copyright (C) 2010 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CPD_SCRAP_CONTAINER_ORDER_ENTRY.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_SCRAP_CONTAINER_ORDER_ENTRY::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_SCRAP_CONTAINER_ORDER_ENTRY::PRODORDERID("PRODORDERID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_SCRAP_CONTAINER_ORDER_ENTRY::CONTAINERINSEQ("CONTAINERINSEQ");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_SCRAP_CONTAINER_ORDER_ENTRY::MATCHARGESEQ("MATCHARGESEQ");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_SCRAP_CONTAINER_ORDER_ENTRY::MAT_CODE("MAT_CODE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_SCRAP_CONTAINER_ORDER_ENTRY::RECIPENAME("RECIPENAME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_SCRAP_CONTAINER_ORDER_ENTRY::MATWEIGHT("MATWEIGHT");

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_SCRAP_CONTAINER_ORDER_ENTRY::CPD_SCRAP_CONTAINER_ORDER_ENTRY(cCBS_StdConnection* Connection)
:CSMC_DBData("PD_SCRAP_CONTAINER_ORDER_ENTRY",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_SCRAP_CONTAINER_ORDER_ENTRY::CPD_SCRAP_CONTAINER_ORDER_ENTRY(cCBS_Connection* Connection)
:CSMC_DBData("PD_SCRAP_CONTAINER_ORDER_ENTRY",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_SCRAP_CONTAINER_ORDER_ENTRY::CPD_SCRAP_CONTAINER_ORDER_ENTRY()
:CSMC_DBData("PD_SCRAP_CONTAINER_ORDER_ENTRY")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_SCRAP_CONTAINER_ORDER_ENTRY::~CPD_SCRAP_CONTAINER_ORDER_ENTRY()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Plant identifier
std::string CPD_SCRAP_CONTAINER_ORDER_ENTRY::getPLANT(long Row)
{
  return getString(CPD_SCRAP_CONTAINER_ORDER_ENTRY::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_SCRAP_CONTAINER_ORDER_ENTRY::setPLANT(const std::string& value)
{
  setString(CPD_SCRAP_CONTAINER_ORDER_ENTRY::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Production oder identification
std::string CPD_SCRAP_CONTAINER_ORDER_ENTRY::getPRODORDERID(long Row)
{
  return getString(CPD_SCRAP_CONTAINER_ORDER_ENTRY::PRODORDERID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_SCRAP_CONTAINER_ORDER_ENTRY::setPRODORDERID(const std::string& value)
{
  setString(CPD_SCRAP_CONTAINER_ORDER_ENTRY::PRODORDERID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Identifies the order within in charging sequence
long CPD_SCRAP_CONTAINER_ORDER_ENTRY::getCONTAINERINSEQ(long Row)
{
  return getLong(CPD_SCRAP_CONTAINER_ORDER_ENTRY::CONTAINERINSEQ, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_SCRAP_CONTAINER_ORDER_ENTRY::setCONTAINERINSEQ(long value)
{
  setLong(CPD_SCRAP_CONTAINER_ORDER_ENTRY::CONTAINERINSEQ, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Charging sequence for the materials in the container
long CPD_SCRAP_CONTAINER_ORDER_ENTRY::getMATCHARGESEQ(long Row)
{
  return getLong(CPD_SCRAP_CONTAINER_ORDER_ENTRY::MATCHARGESEQ, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_SCRAP_CONTAINER_ORDER_ENTRY::setMATCHARGESEQ(long value)
{
  setLong(CPD_SCRAP_CONTAINER_ORDER_ENTRY::MATCHARGESEQ, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Material code
std::string CPD_SCRAP_CONTAINER_ORDER_ENTRY::getMAT_CODE(long Row)
{
  return getString(CPD_SCRAP_CONTAINER_ORDER_ENTRY::MAT_CODE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_SCRAP_CONTAINER_ORDER_ENTRY::setMAT_CODE(const std::string& value)
{
  setString(CPD_SCRAP_CONTAINER_ORDER_ENTRY::MAT_CODE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPD_SCRAP_CONTAINER_ORDER_ENTRY::getRECIPENAME(long Row)
{
  return getString(CPD_SCRAP_CONTAINER_ORDER_ENTRY::RECIPENAME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_SCRAP_CONTAINER_ORDER_ENTRY::setRECIPENAME(const std::string& value)
{
  setString(CPD_SCRAP_CONTAINER_ORDER_ENTRY::RECIPENAME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Planned weight of charged material
double CPD_SCRAP_CONTAINER_ORDER_ENTRY::getMATWEIGHT(long Row)
{
  return getDouble(CPD_SCRAP_CONTAINER_ORDER_ENTRY::MATWEIGHT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_SCRAP_CONTAINER_ORDER_ENTRY::setMATWEIGHT(double value)
{
  setDouble(CPD_SCRAP_CONTAINER_ORDER_ENTRY::MATWEIGHT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CPD_SCRAP_CONTAINER_ORDER_ENTRY::select(const std::string& PLANT, const std::string& PRODORDERID, long CONTAINERINSEQ, long MATCHARGESEQ)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPD_SCRAP_CONTAINER_ORDER_ENTRY::PLANT,PLANT);
  addWhereClause(CPD_SCRAP_CONTAINER_ORDER_ENTRY::PRODORDERID,PRODORDERID);
  addWhereClause(CPD_SCRAP_CONTAINER_ORDER_ENTRY::CONTAINERINSEQ,CONTAINERINSEQ);
  addWhereClause(CPD_SCRAP_CONTAINER_ORDER_ENTRY::MATCHARGESEQ,MATCHARGESEQ);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CPD_SCRAP_CONTAINER_ORDER_ENTRY::selectByMatChargeSeq(const std::string& PLANT, const std::string& PRODORDERID, long CONTAINERINSEQ, const std::string& RECIPENAME, const std::string& MAT_CODE, bool ASC /* = true */)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPD_SCRAP_CONTAINER_ORDER_ENTRY::PLANT,PLANT);
  addWhereClause(CPD_SCRAP_CONTAINER_ORDER_ENTRY::PRODORDERID,PRODORDERID);
  addWhereClause(CPD_SCRAP_CONTAINER_ORDER_ENTRY::CONTAINERINSEQ,CONTAINERINSEQ);
  addWhereClause(CPD_SCRAP_CONTAINER_ORDER_ENTRY::RECIPENAME,RECIPENAME);
  addWhereClause(CPD_SCRAP_CONTAINER_ORDER_ENTRY::MAT_CODE,MAT_CODE);

  if ( ASC )
  {
    m_Statement += getWhereStatement() + " ORDER BY MATCHARGESEQ;";
  }
  else
  {
    m_Statement += getWhereStatement() + " ORDER BY MATCHARGESEQ DESC;"; 
  }

  return CSMC_DBData::select();
}

bool CPD_SCRAP_CONTAINER_ORDER_ENTRY::deleteRow(const std::string& PLANT, const std::string& PRODORDERID, long CONTAINERINSEQ, const std::string& MAT_CODE)
{
  cleanWhereStatement();

  addWhereClause(CPD_SCRAP_CONTAINER_ORDER_ENTRY::PLANT,PLANT);
  addWhereClause(CPD_SCRAP_CONTAINER_ORDER_ENTRY::PRODORDERID,PRODORDERID);
  addWhereClause(CPD_SCRAP_CONTAINER_ORDER_ENTRY::CONTAINERINSEQ,CONTAINERINSEQ);
  addWhereClause(CPD_SCRAP_CONTAINER_ORDER_ENTRY::MAT_CODE,MAT_CODE);

  return deleteRows();
}


