//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CPD_ELEC_TAPCH.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_ELEC_TAPCH::HEATID("HEATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_ELEC_TAPCH::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_ELEC_TAPCH::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_ELEC_TAPCH::DATECHANGE("DATECHANGE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_ELEC_TAPCH::VOLTTAP("VOLTTAP");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_ELEC_TAPCH::IMPCURVE("IMPCURVE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_ELEC_TAPCH::TAPCHANGERSTATUS("TAPCHANGERSTATUS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_ELEC_TAPCH::DURSINCEHEATANNOUNCE("DURSINCEHEATANNOUNCE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_ELEC_TAPCH::DURSINCESTARTOFHEAT("DURSINCESTARTOFHEAT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_ELEC_TAPCH::ELEC_EGYTOT("ELEC_EGYTOT");

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_ELEC_TAPCH::CPD_ELEC_TAPCH(cCBS_StdConnection* Connection)
:CSMC_DBData("PD_ELEC_TAPCH",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_ELEC_TAPCH::CPD_ELEC_TAPCH(cCBS_Connection* Connection)
:CSMC_DBData("PD_ELEC_TAPCH",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_ELEC_TAPCH::CPD_ELEC_TAPCH()
:CSMC_DBData("PD_ELEC_TAPCH")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_ELEC_TAPCH::~CPD_ELEC_TAPCH()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Internal heat identifier
std::string CPD_ELEC_TAPCH::getHEATID(long Row)
{
  return getString(CPD_ELEC_TAPCH::HEATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_ELEC_TAPCH::setHEATID(const std::string& value)
{
  setString(CPD_ELEC_TAPCH::HEATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Treatment identifier
std::string CPD_ELEC_TAPCH::getTREATID(long Row)
{
  return getString(CPD_ELEC_TAPCH::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_ELEC_TAPCH::setTREATID(const std::string& value)
{
  setString(CPD_ELEC_TAPCH::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Plant identifier
std::string CPD_ELEC_TAPCH::getPLANT(long Row)
{
  return getString(CPD_ELEC_TAPCH::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_ELEC_TAPCH::setPLANT(const std::string& value)
{
  setString(CPD_ELEC_TAPCH::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Timestamp indication of the change
CDateTime CPD_ELEC_TAPCH::getDATECHANGE(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CPD_ELEC_TAPCH::DATECHANGE, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_ELEC_TAPCH::setDATECHANGE(const CDateTime& value)
{
 setString(CPD_ELEC_TAPCH::DATECHANGE, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Transformer Voltage Tap
long CPD_ELEC_TAPCH::getVOLTTAP(long Row)
{
  return getLong(CPD_ELEC_TAPCH::VOLTTAP, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_ELEC_TAPCH::setVOLTTAP(long value)
{
  setLong(CPD_ELEC_TAPCH::VOLTTAP, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Impedance curve
long CPD_ELEC_TAPCH::getIMPCURVE(long Row)
{
  return getLong(CPD_ELEC_TAPCH::IMPCURVE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_ELEC_TAPCH::setIMPCURVE(long value)
{
  setLong(CPD_ELEC_TAPCH::IMPCURVE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Tap Changer Status, 1 = Tapchanger Active, O = Tapchanger Not Active
long CPD_ELEC_TAPCH::getTAPCHANGERSTATUS(long Row)
{
  return getLong(CPD_ELEC_TAPCH::TAPCHANGERSTATUS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_ELEC_TAPCH::setTAPCHANGERSTATUS(long value)
{
  setLong(CPD_ELEC_TAPCH::TAPCHANGERSTATUS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Duration since heat announcement
double CPD_ELEC_TAPCH::getDURSINCEHEATANNOUNCE(long Row)
{
  return getDouble(CPD_ELEC_TAPCH::DURSINCEHEATANNOUNCE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_ELEC_TAPCH::setDURSINCEHEATANNOUNCE(double value)
{
  setDouble(CPD_ELEC_TAPCH::DURSINCEHEATANNOUNCE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Duration since start of heat
double CPD_ELEC_TAPCH::getDURSINCESTARTOFHEAT(long Row)
{
  return getDouble(CPD_ELEC_TAPCH::DURSINCESTARTOFHEAT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_ELEC_TAPCH::setDURSINCESTARTOFHEAT(double value)
{
  setDouble(CPD_ELEC_TAPCH::DURSINCESTARTOFHEAT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Total electric energy consumption in case of electric heating, kWh
double CPD_ELEC_TAPCH::getELEC_EGYTOT(long Row)
{
  return getDouble(CPD_ELEC_TAPCH::ELEC_EGYTOT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_ELEC_TAPCH::setELEC_EGYTOT(double value)
{
  setDouble(CPD_ELEC_TAPCH::ELEC_EGYTOT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CPD_ELEC_TAPCH::select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const CDateTime& DATECHANGE)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPD_ELEC_TAPCH::HEATID,HEATID);
  addWhereClause(CPD_ELEC_TAPCH::TREATID,TREATID);
  addWhereClause(CPD_ELEC_TAPCH::PLANT,PLANT);
  addWhereClause(CPD_ELEC_TAPCH::DATECHANGE,DATECHANGE);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CPD_ELEC_TAPCH::selectLatest( long  lngVoltTapNo )
{
	std::stringstream sql;
	sql << " Select * from PD_ELEC_TAPCH where volttap = " << lngVoltTapNo  <<" order by datechange desc";	

	m_Statement = sql.str();

	return CSMC_DBData::select();
}

bool CPD_ELEC_TAPCH::selectLatestVolTap(const std::string& PLANT,const std::string& HEATID, const std::string& TREATID)
{
	cleanWhereStatement();

	m_Statement = "Select * from " + m_TableName;

	addWhereClause(CPD_ELEC_TAPCH::PLANT,PLANT);
	addWhereClause(CPD_ELEC_TAPCH::HEATID,HEATID);
	addWhereClause(CPD_ELEC_TAPCH::TREATID,TREATID);

	m_Statement += getWhereStatement() + " order by DATECHANGE desc;";

	return CSMC_DBData::select();
}

bool CPD_ELEC_TAPCH::getElecConsumAtStartTime( const std::string& HeatID, const std::string& TreatID, const std::string& ActPlant, long VoltTap,CDateTime dtStartTime,double& dbElecEgyTot,CDateTime& dtActuralStartTime )
{
	//std::stringstream sql;
	//sql << "Select * from PD_ELEC_TAPCH  where HEATID = '"
	//	<< HeatID
	//	<<"'  and TREATID ='"
	//	<< TreatID
	//	<<"'  and PLANT = '"
	//	<< ActPlant
	//	<<"' and datechange  = (select max(datechange) from pd_elec_tapch where DATECHANGE < '"
	//	<< dtStartTime.toDBString()
	//	<<"' )";	
	//
	//m_Statement = sql.str();

	m_Statement = "Select * from " + m_TableName;

	addWhereClause(CPD_ELEC_TAPCH::HEATID,HeatID);
	addWhereClause(CPD_ELEC_TAPCH::TREATID,TreatID);
	addWhereClause(CPD_ELEC_TAPCH::PLANT,ActPlant);
	addWhereClause(CPD_ELEC_TAPCH::VOLTTAP,VoltTap);
	addWhereClause("DATECHANGE  = (select max(DATECHANGE) from pd_elec_tapch where DATECHANGE < '" + dtStartTime.toDBString() + "' )");

	m_Statement += getWhereStatement() + ";";


  bool bFlag = CSMC_DBData::select();

	if( bFlag )
	{
		if( !isNull(CPD_ELEC_TAPCH::ELEC_EGYTOT,1) )
    {
      dbElecEgyTot = getELEC_EGYTOT(1);
			dtActuralStartTime = getDATECHANGE(1);
		}
		else
		{
			dbElecEgyTot = 0;
			dtActuralStartTime = dtStartTime;
		}
  }

  return bFlag;
}

bool CPD_ELEC_TAPCH::handleTapChange(const std::string& HeatID, const std::string& TreatID, const std::string& Plant, long VoltTap, long ImpCurve, double ElecEgy, long Status, double DurSinceHeatAnnounce, double DurSinceHeatStart, bool Commit, cCBS_ODBC_DBError &Error)
{
  bool RetValue   = true;

  try
  {
    setHEATID(HeatID);
    setTREATID(TreatID);
	  setPLANT(Plant);
    setDATECHANGE(CDateTime());

    // provide constraint violation
    if ( VoltTap == DEF::Inv_Long )
      VoltTap = 0;
    if ( Status == DEF::Inv_Long )
      Status = 0;

    setTAPCHANGERSTATUS(Status);
    setVOLTTAP(VoltTap);
    setIMPCURVE(ImpCurve);
    setDURSINCEHEATANNOUNCE(DurSinceHeatAnnounce);
    setDURSINCESTARTOFHEAT(DurSinceHeatStart);
    setELEC_EGYTOT(ElecEgy);

    RetValue = RetValue && insert();

    if (!RetValue)
      Error = getLastError();

    if (Commit)
    {
      if (RetValue)
        commit();
      else
        rollback();
    }
  }
  catch(...)
  {  
    rollback(); //something wrong, rollback transaction.

    RetValue = false;
  }

  return RetValue;
}


