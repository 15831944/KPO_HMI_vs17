//## Copyright (C) 2013 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 

#if defined (_MSC_VER) && (_MSC_VER >= 1000)
#pragma once
#endif
#ifndef _INC_CPDH_HM_DATA_PHASE_INCLUDED
#define _INC_CPDH_HM_DATA_PHASE_INCLUDED

#include "CSMC_DBData.h"

class CPDH_HM_DATA_PHASE
: public CSMC_DBData

{

public:
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string HM_ID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TREATID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PLANT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PHASE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string START_TIME;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string END_TIME;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string DURATION;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string CONS_CARBIDE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string CONS_LIME;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string CONS_MG;

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPDH_HM_DATA_PHASE(cCBS_StdConnection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPDH_HM_DATA_PHASE(cCBS_Connection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPDH_HM_DATA_PHASE();

  //##DBClassCodeUtility ! DO NOT EDIT !
  ~CPDH_HM_DATA_PHASE();

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getHM_ID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setHM_ID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getTREATID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTREATID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getPLANT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPLANT(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getPHASE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPHASE(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CDateTime getSTART_TIME(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSTART_TIME(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CDateTime getEND_TIME(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setEND_TIME(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getDURATION(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setDURATION(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getCONS_CARBIDE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setCONS_CARBIDE(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getCONS_LIME(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setCONS_LIME(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getCONS_MG(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setCONS_MG(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  bool select(const std::string& HM_ID, const std::string& TREATID, const std::string& PLANT, const std::string& PHASE, const CDateTime& START_TIME);

  //## ----------------------------------END-GENERATED-CODE--------------------- 

  //## ----------------------------------YOUR-CODE------------------------------ 

  bool doPhaseDataChange(const string& pHMId, const string& pTreatID, const string& pPlant, const string& pPhase, double pDuration, double pConsCarbide, double pConsMG, double pConsLime, bool pCommit);

  bool insert_PDH_HM_DATA_PHASE(const string& pHMId, const string& pTreatID, const string& pPlant, bool pCommit);

  bool update_AfterHeatDeparture(const string& pHMId, const string& pTreatID, const string& pPlant, bool pCommit);

  bool select_phase(const std::string& HM_ID, const std::string& TREATID, const std::string& PLANT);

  bool select_phaseDur(const std::string& HM_ID);

	//sankar
  bool doBlowEnd(const string& pHMId, const string& pTreatID, const string& pPlant, double pDuration, double pConsCarbide, double pConsMG, double pConsLime, bool pCommit);

	bool selectOpenPhase(const std::string& HM_ID, const std::string& TREATID, const std::string& PLANT);
	bool closeOpenPhase(const std::string& pHMId, const std::string& pTreatID, const std::string& pPlant, const std::string& PhaseName, const CDateTime& START_TIME,
                                        double CONS_CARBIDE, double CONS_LIME, double CONS_MG, bool Commit, cCBS_ODBC_DBError &Error);

bool InsertNewPhase(const std::string& pHMId, const std::string& pTreatID, const std::string& pPlant, const std::string& PhaseName, bool Commit, cCBS_ODBC_DBError &Error);

};

#endif /* _INC_CPDH_HM_DATA_PHASE_INCLUDED */
