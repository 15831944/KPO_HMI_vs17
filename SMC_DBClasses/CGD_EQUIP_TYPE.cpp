//## Copyright (C) 2011 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CGD_EQUIP_TYPE.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGD_EQUIP_TYPE::EQUIP_TYPE("EQUIP_TYPE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGD_EQUIP_TYPE::INTERNAL_EQUIP_TYPE("INTERNAL_EQUIP_TYPE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGD_EQUIP_TYPE::DESCRIPTION("DESCRIPTION");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGD_EQUIP_TYPE::INCIDENTAL("INCIDENTAL");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGD_EQUIP_TYPE::REPLACEABLE("REPLACEABLE");

//##DBClassCodeUtility ! DO NOT EDIT !
CGD_EQUIP_TYPE::CGD_EQUIP_TYPE(cCBS_StdConnection* Connection)
:CSMC_DBData("GD_EQUIP_TYPE",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGD_EQUIP_TYPE::CGD_EQUIP_TYPE(cCBS_Connection* Connection)
:CSMC_DBData("GD_EQUIP_TYPE",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGD_EQUIP_TYPE::CGD_EQUIP_TYPE()
:CSMC_DBData("GD_EQUIP_TYPE")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGD_EQUIP_TYPE::~CGD_EQUIP_TYPE()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##External equipment type e.g. segment1, burner1, a customer specific name for terms defined in the table GD_INTERNAL_EQUIP_TYPE
std::string CGD_EQUIP_TYPE::getEQUIP_TYPE(long Row)
{
  return getString(CGD_EQUIP_TYPE::EQUIP_TYPE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGD_EQUIP_TYPE::setEQUIP_TYPE(const std::string& value)
{
  setString(CGD_EQUIP_TYPE::EQUIP_TYPE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Internal equipment type, ie. the corresponding type used in Tracking for a heat or slab location. E.g.: mould, segment. Normally it is less specific then EQUIP_TYPE. Null values indicate that this equipment is not heat location of its own right.
std::string CGD_EQUIP_TYPE::getINTERNAL_EQUIP_TYPE(long Row)
{
  return getString(CGD_EQUIP_TYPE::INTERNAL_EQUIP_TYPE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGD_EQUIP_TYPE::setINTERNAL_EQUIP_TYPE(const std::string& value)
{
  setString(CGD_EQUIP_TYPE::INTERNAL_EQUIP_TYPE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Description of equipment type
std::string CGD_EQUIP_TYPE::getDESCRIPTION(long Row)
{
  return getString(CGD_EQUIP_TYPE::DESCRIPTION, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGD_EQUIP_TYPE::setDESCRIPTION(const std::string& value)
{
  setString(CGD_EQUIP_TYPE::DESCRIPTION, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##This equipment type is part of incidentals (can be exchanged on the fly and has no customer specific id)
long CGD_EQUIP_TYPE::getINCIDENTAL(long Row)
{
  return getLong(CGD_EQUIP_TYPE::INCIDENTAL, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGD_EQUIP_TYPE::setINCIDENTAL(long value)
{
  setLong(CGD_EQUIP_TYPE::INCIDENTAL, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##eq. can be replaced in the course of normal operation or maintanance
long CGD_EQUIP_TYPE::getREPLACEABLE(long Row)
{
  return getLong(CGD_EQUIP_TYPE::REPLACEABLE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGD_EQUIP_TYPE::setREPLACEABLE(long value)
{
  setLong(CGD_EQUIP_TYPE::REPLACEABLE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CGD_EQUIP_TYPE::select(const std::string& EQUIP_TYPE)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CGD_EQUIP_TYPE::EQUIP_TYPE,EQUIP_TYPE);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 
//sankar
bool CGD_EQUIP_TYPE::InsertData(const std::string &EQUIP_TYPE, const std::string &INTERNAL_EQUIP_TYPE, const std::string &DESCRIPTION, long INCIDENTAL, long REPLACEABLE,bool Commit, cCBS_ODBC_DBError &Error)
{
  bool RetValue = true;

  setEQUIP_TYPE            (EQUIP_TYPE);
  setINTERNAL_EQUIP_TYPE   (INTERNAL_EQUIP_TYPE);
  setDESCRIPTION           (DESCRIPTION);
  setINCIDENTAL            (INCIDENTAL);
  setREPLACEABLE           (REPLACEABLE);

  RetValue = RetValue && insert();

  if (!RetValue)
    Error = getLastError();

  if (Commit)
  {
    if (RetValue)
      commit();
    else
      rollback();
  }

  return RetValue;
}



