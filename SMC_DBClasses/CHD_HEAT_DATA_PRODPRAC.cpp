//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CPD_HEAT_DATA_PRODPRAC.h"
#include "CSMC_EventLogFrameController.h"
#include "CHD_HEAT_DATA_PRODPRAC.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_HEAT_DATA_PRODPRAC::HEATID("HEATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_HEAT_DATA_PRODPRAC::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_HEAT_DATA_PRODPRAC::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_HEAT_DATA_PRODPRAC::DESCR_PP("DESCR_PP");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_HEAT_DATA_PRODPRAC::STEELGRADECODE("STEELGRADECODE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_HEAT_DATA_PRODPRAC::PRODPRACID_PLAN("PRODPRACID_PLAN");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_HEAT_DATA_PRODPRAC::PRODPRACID_MOD("PRODPRACID_MOD");

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_HEAT_DATA_PRODPRAC::CHD_HEAT_DATA_PRODPRAC(cCBS_StdConnection* Connection)
:CSMC_DBData("HD_HEAT_DATA_PRODPRAC",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_HEAT_DATA_PRODPRAC::CHD_HEAT_DATA_PRODPRAC(cCBS_Connection* Connection)
:CSMC_DBData("HD_HEAT_DATA_PRODPRAC",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_HEAT_DATA_PRODPRAC::CHD_HEAT_DATA_PRODPRAC()
:CSMC_DBData("HD_HEAT_DATA_PRODPRAC")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_HEAT_DATA_PRODPRAC::~CHD_HEAT_DATA_PRODPRAC()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Internal heat identifier
std::string CHD_HEAT_DATA_PRODPRAC::getHEATID(long Row)
{
  return getString(CHD_HEAT_DATA_PRODPRAC::HEATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_HEAT_DATA_PRODPRAC::setHEATID(const std::string& value)
{
  setString(CHD_HEAT_DATA_PRODPRAC::HEATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Treatment identifier
std::string CHD_HEAT_DATA_PRODPRAC::getTREATID(long Row)
{
  return getString(CHD_HEAT_DATA_PRODPRAC::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_HEAT_DATA_PRODPRAC::setTREATID(const std::string& value)
{
  setString(CHD_HEAT_DATA_PRODPRAC::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Plant identifier
std::string CHD_HEAT_DATA_PRODPRAC::getPLANT(long Row)
{
  return getString(CHD_HEAT_DATA_PRODPRAC::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_HEAT_DATA_PRODPRAC::setPLANT(const std::string& value)
{
  setString(CHD_HEAT_DATA_PRODPRAC::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Name of practice pointer or practice group
std::string CHD_HEAT_DATA_PRODPRAC::getDESCR_PP(long Row)
{
  return getString(CHD_HEAT_DATA_PRODPRAC::DESCR_PP, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_HEAT_DATA_PRODPRAC::setDESCR_PP(const std::string& value)
{
  setString(CHD_HEAT_DATA_PRODPRAC::DESCR_PP, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Steel grade code
std::string CHD_HEAT_DATA_PRODPRAC::getSTEELGRADECODE(long Row)
{
  return getString(CHD_HEAT_DATA_PRODPRAC::STEELGRADECODE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_HEAT_DATA_PRODPRAC::setSTEELGRADECODE(const std::string& value)
{
  setString(CHD_HEAT_DATA_PRODPRAC::STEELGRADECODE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Planned production practice pointer
long CHD_HEAT_DATA_PRODPRAC::getPRODPRACID_PLAN(long Row)
{
  return getLong(CHD_HEAT_DATA_PRODPRAC::PRODPRACID_PLAN, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_HEAT_DATA_PRODPRAC::setPRODPRACID_PLAN(long value)
{
  setLong(CHD_HEAT_DATA_PRODPRAC::PRODPRACID_PLAN, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Modified production practice pointer
long CHD_HEAT_DATA_PRODPRAC::getPRODPRACID_MOD(long Row)
{
  return getLong(CHD_HEAT_DATA_PRODPRAC::PRODPRACID_MOD, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_HEAT_DATA_PRODPRAC::setPRODPRACID_MOD(long value)
{
  setLong(CHD_HEAT_DATA_PRODPRAC::PRODPRACID_MOD, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CHD_HEAT_DATA_PRODPRAC::select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const std::string& DESCR_PP)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CHD_HEAT_DATA_PRODPRAC::HEATID,HEATID);
  addWhereClause(CHD_HEAT_DATA_PRODPRAC::TREATID,TREATID);
  addWhereClause(CHD_HEAT_DATA_PRODPRAC::PLANT,PLANT);
  addWhereClause(CHD_HEAT_DATA_PRODPRAC::DESCR_PP,DESCR_PP);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CHD_HEAT_DATA_PRODPRAC::copy(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, bool Commit, cCBS_ODBC_DBError &Error)
{
	bool result = !exists(HEATID, TREATID, PLANT);
	//some data found -> delete them
	if (!result)
	{
		result = deleteRows();
		if (!result)
			setLastError(std::string("ERROR_DELETE_DATA"), 0, getActStatement());
	}

  // preparing setting for source table
  CPD_HEAT_DATA_PRODPRAC PD_HEAT_DATA_PRODPRAC(m_pCBS_StdConnection);
  PD_HEAT_DATA_PRODPRAC.addWhereClause(CPD_HEAT_DATA_PRODPRAC::HEATID,HEATID);
  PD_HEAT_DATA_PRODPRAC.addWhereClause(CPD_HEAT_DATA_PRODPRAC::TREATID,TREATID);
  PD_HEAT_DATA_PRODPRAC.addWhereClause(CPD_HEAT_DATA_PRODPRAC::PLANT,PLANT);

  result = result && copyByInsert(&PD_HEAT_DATA_PRODPRAC);

	if (!result)
		Error = getLastError();

	if(Commit)
	{
		if (result)
			this->commit();
		else
			rollback();
	}

	return result;
}

bool CHD_HEAT_DATA_PRODPRAC::exists(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT)
{
	cleanWhereStatement();

	m_Statement = "Select HEATID from " + m_TableName;

	addWhereClause(CHD_HEAT_DATA_PRODPRAC::HEATID,HEATID);
	addWhereClause(CHD_HEAT_DATA_PRODPRAC::TREATID,TREATID);
	addWhereClause(CHD_HEAT_DATA_PRODPRAC::PLANT,PLANT);
   
  std::string sWhereStatement = getWhereStatement();
  //to avoid the exception like 'Select HEATID from PP_HEAT AND ROWNUM = 1 '
  if(sWhereStatement.length() > 0 ) 
  {
    // do not use ROWNUM in "addWhereClause", ROWNUM is not a table column and where statement will be used for deletion at "deleteRows"
    m_Statement += sWhereStatement + " AND ROWNUM = 1 ;";
  }
  else
  {
    return false;
  }

	return CSMC_DBData::select();
}


