//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CGC_COOLWATER.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_COOLWATER::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_COOLWATER::COOL_EQUIP("COOL_EQUIP");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_COOLWATER::COOL_LOOP_NO("COOL_LOOP_NO");

//##DBClassCodeUtility ! DO NOT EDIT !
CGC_COOLWATER::CGC_COOLWATER(cCBS_StdConnection* Connection)
:CSMC_DBData("GC_COOLWATER",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGC_COOLWATER::CGC_COOLWATER(cCBS_Connection* Connection)
:CSMC_DBData("GC_COOLWATER",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGC_COOLWATER::CGC_COOLWATER()
:CSMC_DBData("GC_COOLWATER")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGC_COOLWATER::~CGC_COOLWATER()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Plant identifier
std::string CGC_COOLWATER::getPLANT(long Row)
{
  return getString(CGC_COOLWATER::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_COOLWATER::setPLANT(const std::string& value)
{
  setString(CGC_COOLWATER::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Cool water equipment
std::string CGC_COOLWATER::getCOOL_EQUIP(long Row)
{
  return getString(CGC_COOLWATER::COOL_EQUIP, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_COOLWATER::setCOOL_EQUIP(const std::string& value)
{
  setString(CGC_COOLWATER::COOL_EQUIP, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Cooling loop number
long CGC_COOLWATER::getCOOL_LOOP_NO(long Row)
{
  return getLong(CGC_COOLWATER::COOL_LOOP_NO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_COOLWATER::setCOOL_LOOP_NO(long value)
{
  setLong(CGC_COOLWATER::COOL_LOOP_NO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CGC_COOLWATER::select(const std::string& PLANT, const std::string& COOL_EQUIP, long COOL_LOOP_NO)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CGC_COOLWATER::PLANT,PLANT);
  addWhereClause(CGC_COOLWATER::COOL_EQUIP,COOL_EQUIP);
  addWhereClause(CGC_COOLWATER::COOL_LOOP_NO,COOL_LOOP_NO);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CGC_COOLWATER::selectOrdered(const std::string& PLANT, const std::string& COOL_EQUIP, long COOL_LOOP_NO)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CGC_COOLWATER::PLANT,PLANT);
  addWhereClause(CGC_COOLWATER::COOL_EQUIP,COOL_EQUIP);
  addWhereClause(CGC_COOLWATER::COOL_LOOP_NO,COOL_LOOP_NO);
  m_Statement += getWhereStatement() + " ORDER BY " + CGC_COOLWATER::COOL_LOOP_NO + ";";

  return CSMC_DBData::select();
}


