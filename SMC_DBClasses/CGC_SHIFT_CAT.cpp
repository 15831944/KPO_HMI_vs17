//## Copyright (C) 2011 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CGC_SHIFT_CAT.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_SHIFT_CAT::SHIFT_TYPE("SHIFT_TYPE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_SHIFT_CAT::SHIFT_ID("SHIFT_ID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_SHIFT_CAT::START_TIME("START_TIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_SHIFT_CAT::THIS_DAY("THIS_DAY");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGC_SHIFT_CAT::SHIFT_DESC("SHIFT_DESC");

//##DBClassCodeUtility ! DO NOT EDIT !
CGC_SHIFT_CAT::CGC_SHIFT_CAT(cCBS_StdConnection* Connection)
:CSMC_DBData("GC_SHIFT_CAT",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGC_SHIFT_CAT::CGC_SHIFT_CAT(cCBS_Connection* Connection)
:CSMC_DBData("GC_SHIFT_CAT",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGC_SHIFT_CAT::CGC_SHIFT_CAT()
:CSMC_DBData("GC_SHIFT_CAT")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGC_SHIFT_CAT::~CGC_SHIFT_CAT()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Type of shift (from GC_ShiftType) 
long CGC_SHIFT_CAT::getSHIFT_TYPE(long Row)
{
  return getLong(CGC_SHIFT_CAT::SHIFT_TYPE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_SHIFT_CAT::setSHIFT_TYPE(long value)
{
  setLong(CGC_SHIFT_CAT::SHIFT_TYPE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Identifier for the shift (e.g. 1=early/2=late/3=night shift)
std::string CGC_SHIFT_CAT::getSHIFT_ID(long Row)
{
  return getString(CGC_SHIFT_CAT::SHIFT_ID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_SHIFT_CAT::setSHIFT_ID(const std::string& value)
{
  setString(CGC_SHIFT_CAT::SHIFT_ID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Start time of the shift as: hh:mm
std::string CGC_SHIFT_CAT::getSTART_TIME(long Row)
{
  return getString(CGC_SHIFT_CAT::START_TIME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_SHIFT_CAT::setSTART_TIME(const std::string& value)
{
  setString(CGC_SHIFT_CAT::START_TIME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Shift belongs logically to current day; 1=yes
long CGC_SHIFT_CAT::getTHIS_DAY(long Row)
{
  return getLong(CGC_SHIFT_CAT::THIS_DAY, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_SHIFT_CAT::setTHIS_DAY(long value)
{
  setLong(CGC_SHIFT_CAT::THIS_DAY, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Description for the shift, e.g early, late, night
std::string CGC_SHIFT_CAT::getSHIFT_DESC(long Row)
{
  return getString(CGC_SHIFT_CAT::SHIFT_DESC, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGC_SHIFT_CAT::setSHIFT_DESC(const std::string& value)
{
  setString(CGC_SHIFT_CAT::SHIFT_DESC, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CGC_SHIFT_CAT::select(long SHIFT_TYPE, const std::string& SHIFT_ID)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CGC_SHIFT_CAT::SHIFT_TYPE,SHIFT_TYPE);
  addWhereClause(CGC_SHIFT_CAT::SHIFT_ID,SHIFT_ID);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 


