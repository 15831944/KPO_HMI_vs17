//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 

#if defined (_MSC_VER) && (_MSC_VER >= 1000)
#pragma once
#endif
#ifndef _INC_CHD_SAMPLE_REF_INCLUDED
#define _INC_CHD_SAMPLE_REF_INCLUDED

#include "CSMC_DBData.h"

class CHD_SAMPLE_REF
: public CSMC_DBData
{

public:
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string SAMPLE_REF;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string HOT_METAL;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string STEEL;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string STEEL_CALC;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string STEEL_CALC_FINAL;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string SLAG;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string SLAG_CALC;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string SLAG_CALC_FINAL;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TEMP;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TEMP_CALC;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TEMP_CALC_FINAL;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string CARBON;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string OXYGEN;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string HYDROGEN;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string CELOX_SLAG;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string ALUMINIUM;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string EMF;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string REVTIME;

  //##DBClassCodeUtility ! DO NOT EDIT !
  CHD_SAMPLE_REF(cCBS_StdConnection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CHD_SAMPLE_REF(cCBS_Connection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CHD_SAMPLE_REF();

  //##DBClassCodeUtility ! DO NOT EDIT !
  ~CHD_SAMPLE_REF();

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Unique sample reference
  long getSAMPLE_REF(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSAMPLE_REF(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Reference to last measured hot metal analysis
  long getHOT_METAL(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setHOT_METAL(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Reference to last measured steel analysis
  long getSTEEL(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSTEEL(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Reference to last calculated actual steel analysis
  long getSTEEL_CALC(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSTEEL_CALC(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Reference to last calculated final steel analysis
  long getSTEEL_CALC_FINAL(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSTEEL_CALC_FINAL(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Reference to last measured slag analysis
  long getSLAG(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSLAG(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Reference to last calculated slag analysis
  long getSLAG_CALC(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSLAG_CALC(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Reference to last calculated final slag analysis
  long getSLAG_CALC_FINAL(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSLAG_CALC_FINAL(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Reference to last measured temperature
  long getTEMP(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTEMP(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Reference to last calculated temperature
  long getTEMP_CALC(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTEMP_CALC(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Reference to last calculated final temperature
  long getTEMP_CALC_FINAL(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTEMP_CALC_FINAL(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Reference to last carbon measurement
  long getCARBON(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setCARBON(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Reference to last oxygen  measurement
  long getOXYGEN(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setOXYGEN(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Reference to last hydrogen measurement
  long getHYDROGEN(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setHYDROGEN(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Reference to last celox slag measurement
  long getCELOX_SLAG(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setCELOX_SLAG(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Reference to last aluminium measurement
  long getALUMINIUM(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setALUMINIUM(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Reference to last EMF measurement
  long getEMF(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setEMF(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Date and time of last revision
  CDateTime getREVTIME(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setREVTIME(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  bool select(long SAMPLE_REF);

  //## ----------------------------------END-GENERATED-CODE--------------------- 

  //## ----------------------------------YOUR-CODE------------------------------ 

  bool selectByREVTIME(const CDateTime& REVTIME, const std::string& Operator);

  bool copy(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, bool Commit, cCBS_ODBC_DBError &Error);

  bool deleteSample(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, bool Commit, cCBS_ODBC_DBError &Error);

  bool exists( const std::string& HEATID, const std::string& TREATID, const std::string& PLANT );

};

#endif /* _INC_CHD_SAMPLE_REF_INCLUDED */
