//## Copyright (C) 2013 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 

#if defined (_MSC_VER) && (_MSC_VER >= 1000)
#pragma once
#endif
#ifndef _INC_CHDH_PP_INJECTION_INCLUDED
#define _INC_CHDH_PP_INJECTION_INCLUDED

#include "CSMC_DBData.h"

class CHDH_PP_INJECTION
: public CSMC_DBData

{

public:
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string HM_ID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TREATID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PLANT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PRACNO;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string DESCR_E;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string DESCR_C;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string USERCODE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string MG_EQUIV_LIME;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string MG_EQUIV_CARBIDE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string CO_INJ_LIME_MIN;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string CO_INJ_LIME_AIM;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string CO_INJ_CARBIDE_MAX;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string CO_INJ_CARBIDE_MIN;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string CO_INJ_CARBIDE_AIM;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string CO_INJ_LIME_MAX;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string CO_INJ_MG_MIN;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string CO_INJ_MG_AIM;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string CO_INJ_MG_MAX;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string MONO_INJ_LIME_MIN;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string MONO_INJ_LIME_AIM;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string MONO_INJ_LIME_MAX;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string MONO_INJ_CARBIDE_MIN;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string MONO_INJ_CARBIDE_AIM;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string MONO_INJ_CARBIDE_MAX;

  //##DBClassCodeUtility ! DO NOT EDIT !
  CHDH_PP_INJECTION(cCBS_StdConnection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CHDH_PP_INJECTION(cCBS_Connection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CHDH_PP_INJECTION();

  //##DBClassCodeUtility ! DO NOT EDIT !
  ~CHDH_PP_INJECTION();

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getHM_ID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setHM_ID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getTREATID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTREATID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getPLANT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPLANT(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  long getPRACNO(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPRACNO(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getDESCR_E(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setDESCR_E(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getDESCR_C(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setDESCR_C(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getUSERCODE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setUSERCODE(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getMG_EQUIV_LIME(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setMG_EQUIV_LIME(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getMG_EQUIV_CARBIDE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setMG_EQUIV_CARBIDE(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getCO_INJ_LIME_MIN(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setCO_INJ_LIME_MIN(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getCO_INJ_LIME_AIM(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setCO_INJ_LIME_AIM(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getCO_INJ_CARBIDE_MAX(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setCO_INJ_CARBIDE_MAX(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getCO_INJ_CARBIDE_MIN(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setCO_INJ_CARBIDE_MIN(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getCO_INJ_CARBIDE_AIM(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setCO_INJ_CARBIDE_AIM(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getCO_INJ_LIME_MAX(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setCO_INJ_LIME_MAX(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getCO_INJ_MG_MIN(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setCO_INJ_MG_MIN(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getCO_INJ_MG_AIM(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setCO_INJ_MG_AIM(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getCO_INJ_MG_MAX(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setCO_INJ_MG_MAX(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getMONO_INJ_LIME_MIN(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setMONO_INJ_LIME_MIN(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getMONO_INJ_LIME_AIM(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setMONO_INJ_LIME_AIM(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getMONO_INJ_LIME_MAX(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setMONO_INJ_LIME_MAX(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getMONO_INJ_CARBIDE_MIN(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setMONO_INJ_CARBIDE_MIN(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getMONO_INJ_CARBIDE_AIM(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setMONO_INJ_CARBIDE_AIM(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getMONO_INJ_CARBIDE_MAX(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setMONO_INJ_CARBIDE_MAX(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  bool select(const std::string& HM_ID, const std::string& TREATID, const std::string& PLANT, long PRACNO);

  //## ----------------------------------END-GENERATED-CODE--------------------- 

  //## ----------------------------------YOUR-CODE------------------------------ 

  bool copyHDHPPInjection(const string& pHeatId, const string& pTreatId, const string& pPlant, long pPlantno, bool pCommit);
  bool delete_HDH_PP_INJECTION(const std::string& HM_ID, const std::string& TREATID, const std::string& PLANT);

};

#endif /* _INC_CHDH_PP_INJECTION_INCLUDED */
