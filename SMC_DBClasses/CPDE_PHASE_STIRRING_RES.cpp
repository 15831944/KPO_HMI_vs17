//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CIntfData.h"
#include "DEF_GC_STIRR_GAS_TYPE.h"
#include "CPDE_PHASE_STIRRING_RES.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_PHASE_STIRRING_RES::HEATID("HEATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_PHASE_STIRRING_RES::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_PHASE_STIRRING_RES::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_PHASE_STIRRING_RES::PROCPHASE("PROCPHASE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_PHASE_STIRRING_RES::PROCPHASENO("PROCPHASENO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_PHASE_STIRRING_RES::STEPNO("STEPNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_PHASE_STIRRING_RES::BASWEIGHT("BASWEIGHT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_PHASE_STIRRING_RES::SPECEGY("SPECEGY");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_PHASE_STIRRING_RES::STARTTIME("STARTTIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_PHASE_STIRRING_RES::STEPDUR("STEPDUR");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_PHASE_STIRRING_RES::ELEC_ENERGY("ELEC_ENERGY");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_PHASE_STIRRING_RES::REVTIME("REVTIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_PHASE_STIRRING_RES::AR_CONS("AR_CONS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_PHASE_STIRRING_RES::N2_CONS("N2_CONS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_PHASE_STIRRING_RES::AR_FLOW("AR_FLOW");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_PHASE_STIRRING_RES::N2_FLOW("N2_FLOW");

//##DBClassCodeUtility ! DO NOT EDIT !
CPDE_PHASE_STIRRING_RES::CPDE_PHASE_STIRRING_RES(cCBS_StdConnection* Connection)
:CSMC_DBData("PDE_PHASE_STIRRING_RES",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPDE_PHASE_STIRRING_RES::CPDE_PHASE_STIRRING_RES(cCBS_Connection* Connection)
:CSMC_DBData("PDE_PHASE_STIRRING_RES",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPDE_PHASE_STIRRING_RES::CPDE_PHASE_STIRRING_RES()
:CSMC_DBData("PDE_PHASE_STIRRING_RES")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPDE_PHASE_STIRRING_RES::~CPDE_PHASE_STIRRING_RES()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDE_PHASE_STIRRING_RES::getHEATID(long Row)
{
  return getString(CPDE_PHASE_STIRRING_RES::HEATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_PHASE_STIRRING_RES::setHEATID(const std::string& value)
{
  setString(CPDE_PHASE_STIRRING_RES::HEATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDE_PHASE_STIRRING_RES::getTREATID(long Row)
{
  return getString(CPDE_PHASE_STIRRING_RES::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_PHASE_STIRRING_RES::setTREATID(const std::string& value)
{
  setString(CPDE_PHASE_STIRRING_RES::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDE_PHASE_STIRRING_RES::getPLANT(long Row)
{
  return getString(CPDE_PHASE_STIRRING_RES::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_PHASE_STIRRING_RES::setPLANT(const std::string& value)
{
  setString(CPDE_PHASE_STIRRING_RES::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDE_PHASE_STIRRING_RES::getPROCPHASE(long Row)
{
  return getString(CPDE_PHASE_STIRRING_RES::PROCPHASE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_PHASE_STIRRING_RES::setPROCPHASE(const std::string& value)
{
  setString(CPDE_PHASE_STIRRING_RES::PROCPHASE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDE_PHASE_STIRRING_RES::getPROCPHASENO(long Row)
{
  return getLong(CPDE_PHASE_STIRRING_RES::PROCPHASENO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_PHASE_STIRRING_RES::setPROCPHASENO(long value)
{
  setLong(CPDE_PHASE_STIRRING_RES::PROCPHASENO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDE_PHASE_STIRRING_RES::getSTEPNO(long Row)
{
  return getLong(CPDE_PHASE_STIRRING_RES::STEPNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_PHASE_STIRRING_RES::setSTEPNO(long value)
{
  setLong(CPDE_PHASE_STIRRING_RES::STEPNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDE_PHASE_STIRRING_RES::getBASWEIGHT(long Row)
{
  return getDouble(CPDE_PHASE_STIRRING_RES::BASWEIGHT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_PHASE_STIRRING_RES::setBASWEIGHT(double value)
{
  setDouble(CPDE_PHASE_STIRRING_RES::BASWEIGHT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDE_PHASE_STIRRING_RES::getSPECEGY(long Row)
{
  return getDouble(CPDE_PHASE_STIRRING_RES::SPECEGY, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_PHASE_STIRRING_RES::setSPECEGY(double value)
{
  setDouble(CPDE_PHASE_STIRRING_RES::SPECEGY, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDE_PHASE_STIRRING_RES::getSTARTTIME(long Row)
{
  return getDouble(CPDE_PHASE_STIRRING_RES::STARTTIME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_PHASE_STIRRING_RES::setSTARTTIME(double value)
{
  setDouble(CPDE_PHASE_STIRRING_RES::STARTTIME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDE_PHASE_STIRRING_RES::getSTEPDUR(long Row)
{
  return getDouble(CPDE_PHASE_STIRRING_RES::STEPDUR, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_PHASE_STIRRING_RES::setSTEPDUR(double value)
{
  setDouble(CPDE_PHASE_STIRRING_RES::STEPDUR, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDE_PHASE_STIRRING_RES::getELEC_ENERGY(long Row)
{
  return getDouble(CPDE_PHASE_STIRRING_RES::ELEC_ENERGY, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_PHASE_STIRRING_RES::setELEC_ENERGY(double value)
{
  setDouble(CPDE_PHASE_STIRRING_RES::ELEC_ENERGY, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CPDE_PHASE_STIRRING_RES::getREVTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CPDE_PHASE_STIRRING_RES::REVTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_PHASE_STIRRING_RES::setREVTIME(const CDateTime& value)
{
 setString(CPDE_PHASE_STIRRING_RES::REVTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDE_PHASE_STIRRING_RES::getAR_CONS(long Row)
{
  return getDouble(CPDE_PHASE_STIRRING_RES::AR_CONS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_PHASE_STIRRING_RES::setAR_CONS(double value)
{
  setDouble(CPDE_PHASE_STIRRING_RES::AR_CONS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDE_PHASE_STIRRING_RES::getN2_CONS(long Row)
{
  return getDouble(CPDE_PHASE_STIRRING_RES::N2_CONS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_PHASE_STIRRING_RES::setN2_CONS(double value)
{
  setDouble(CPDE_PHASE_STIRRING_RES::N2_CONS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDE_PHASE_STIRRING_RES::getAR_FLOW(long Row)
{
  return getDouble(CPDE_PHASE_STIRRING_RES::AR_FLOW, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_PHASE_STIRRING_RES::setAR_FLOW(double value)
{
  setDouble(CPDE_PHASE_STIRRING_RES::AR_FLOW, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDE_PHASE_STIRRING_RES::getN2_FLOW(long Row)
{
  return getDouble(CPDE_PHASE_STIRRING_RES::N2_FLOW, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_PHASE_STIRRING_RES::setN2_FLOW(double value)
{
  setDouble(CPDE_PHASE_STIRRING_RES::N2_FLOW, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CPDE_PHASE_STIRRING_RES::select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const std::string& PROCPHASE, long PROCPHASENO, long STEPNO)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPDE_PHASE_STIRRING_RES::HEATID,HEATID);
  addWhereClause(CPDE_PHASE_STIRRING_RES::TREATID,TREATID);
  addWhereClause(CPDE_PHASE_STIRRING_RES::PLANT,PLANT);
  addWhereClause(CPDE_PHASE_STIRRING_RES::PROCPHASE,PROCPHASE);
  addWhereClause(CPDE_PHASE_STIRRING_RES::PROCPHASENO,PROCPHASENO);
  addWhereClause(CPDE_PHASE_STIRRING_RES::STEPNO,STEPNO);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CPDE_PHASE_STIRRING_RES::writeResults(const std::string & HeatID, const std::string & TreatID, const std::string & Plant, double DurSinceHeatAnnounce, const seqEAFGasLancePredRes &EAFGasLancePredRes)
{
  bool            RetValue   = false;
  long            PredLength = 0;
  long            i;
  CDateTime       now;
  sEAFGasLancePredRes ProcessPredRes;
  std::string          Phase;


  //SANKAR : 08.03.2010
  try
  {
    PredLength = CIntfData::getLength(EAFGasLancePredRes);
    for (i = 0 ; i < PredLength ; ++i)
    {
      CIntfData::getAt(ProcessPredRes,&EAFGasLancePredRes,i);

      Phase = ProcessPredRes.Phase;
           
      // we expect only on device with one single set of gas data
      seqDeviceGasData  SeqDeviceGasData = ProcessPredRes.GasFlow;
      sDeviceGasData    DeviceGasData;

      CIntfData::getAt(DeviceGasData, SeqDeviceGasData, 0);

      seqGasData SeqGasData = DeviceGasData.GasData;
      sGasData GasData;

      CIntfData::getAt(GasData, SeqGasData, 0);

      RetValue = select(HeatID, TreatID, Plant, Phase, ProcessPredRes.PhaseNo, ProcessPredRes.Step);

      setHEATID(HeatID);
      setTREATID(TreatID);
      setPLANT(Plant);
      setREVTIME(now);
      setPROCPHASE(Phase);
      setSTEPNO(ProcessPredRes.Step);
      setPROCPHASENO(ProcessPredRes.PhaseNo);
      setELEC_ENERGY(ProcessPredRes.ElecEgy);
      setSPECEGY(ProcessPredRes.SpecEgy);
      setBASWEIGHT(ProcessPredRes.BaseMass);
      setSTARTTIME(ProcessPredRes.DurUntilStartOfStep); //DurSinceHeatAnnounce
      setSTEPDUR(ProcessPredRes.DurStep);

      if( std::string(GasData.GasType) == DEF_GC_STIRR_GAS_TYPE::N2 )
      {
        setN2_FLOW(GasData.GasValue);
        setN2_CONS(ProcessPredRes.DurStep * GasData.GasValue);
      }
      if( std::string(GasData.GasType) == DEF_GC_STIRR_GAS_TYPE::Ar )
      {
        setAR_FLOW(GasData.GasValue);
        setAR_CONS(ProcessPredRes.DurStep * GasData.GasValue);
      }
      
     
      if (RetValue)
        RetValue = update();
      else
        RetValue = insert();

      if (!RetValue) break;
    }

    // commit only if own values  are successfully written
    if (RetValue)
    {
      commit();
    }
    else
    {
      rollback();
    }
  }
  catch(...)
  {
    RetValue = false;
    rollback();
  }
  return RetValue;
}


