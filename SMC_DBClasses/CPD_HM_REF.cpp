//## Copyright (C) 2013 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CPD_HM_REF.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_HM_REF::HM_ID("HM_ID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_HM_REF::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_HM_REF::PLANTNO("PLANTNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_HM_REF::HM_ID_CUST("HM_ID_CUST");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_HM_REF::EXPIRATIONDATE("EXPIRATIONDATE");

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_HM_REF::CPD_HM_REF(cCBS_StdConnection* Connection)
:CSMC_DBData("PD_HM_REF",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_HM_REF::CPD_HM_REF(cCBS_Connection* Connection)
:CSMC_DBData("PD_HM_REF",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_HM_REF::CPD_HM_REF()
:CSMC_DBData("PD_HM_REF")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_HM_REF::~CPD_HM_REF()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPD_HM_REF::getHM_ID(long Row)
{
  return getString(CPD_HM_REF::HM_ID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_HM_REF::setHM_ID(const std::string& value)
{
  setString(CPD_HM_REF::HM_ID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPD_HM_REF::getTREATID(long Row)
{
  return getString(CPD_HM_REF::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_HM_REF::setTREATID(const std::string& value)
{
  setString(CPD_HM_REF::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPD_HM_REF::getPLANTNO(long Row)
{
  return getLong(CPD_HM_REF::PLANTNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_HM_REF::setPLANTNO(long value)
{
  setLong(CPD_HM_REF::PLANTNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPD_HM_REF::getHM_ID_CUST(long Row)
{
  return getString(CPD_HM_REF::HM_ID_CUST, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_HM_REF::setHM_ID_CUST(const std::string& value)
{
  setString(CPD_HM_REF::HM_ID_CUST, value);
}

////##DBClassCodeUtility ! DO NOT EDIT !
//CDateTime CPD_HM_REF::getEXPIRATIONDATE(long Row)
//{
//  CDateTime D;
//  D.fromDBString(getString(CPD_HM_REF::EXPIRATIONDATE, Row));
//  return D;
//}
//
////##DBClassCodeUtility ! DO NOT EDIT !
//void CPD_HM_REF::setEXPIRATIONDATE(const CDateTime& value)
//{
// setString(CPD_HM_REF::EXPIRATIONDATE, value.toDBString());
//}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPD_HM_REF::getEXPIRATIONDATE(long Row)
{
  return getString(CPD_HM_REF::EXPIRATIONDATE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_HM_REF::setEXPIRATIONDATE(const std::string& value)
{
 setString(CPD_HM_REF::EXPIRATIONDATE, value);
}


//##DBClassCodeUtility ! DO NOT EDIT !
bool CPD_HM_REF::select(const std::string& HM_ID, const std::string& TREATID)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPD_HM_REF::HM_ID,HM_ID);
  addWhereClause(CPD_HM_REF::TREATID,TREATID);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CPD_HM_REF::doAnnouncement(const std::string& HM_ID, const std::string& TREATID, long PLANTNO)
{
  bool retValue=false;
  CDateTime now;
  
  try
  {
    setHM_ID(HM_ID);
    setTREATID(TREATID);
    setPLANTNO(PLANTNO);
    setHM_ID_CUST (" "); // TO BE DONE
    //setEXPIRATIONDATE(now.toDBString());
		//setEXPIRATIONDATE(CDateTime().toDBString()); 
		setEXPIRATIONDATE("VALID");
    
    retValue = insert();
    // commit only if own values are successfully written
    if (retValue)
    {
      commit();
    }
    else
    {
      rollback();
      log("ERROR: CPDH_HM_REF::doAnnouncement failed",1);
    }
  }
  catch(...)
  {
    retValue = false;
  }
  return retValue;
}
bool CPD_HM_REF::doCancelHeat(const std::string& HM_ID, const std::string& TREATID, long PLANTNO)
{
	bool result;
  std::stringstream sql;
	try
	{
		addWhereClause("HM_ID",HM_ID);
		addWhereClause("TREATID",TREATID);
		addWhereClause("PLANTNO",PLANTNO);
		
		sql << "delete from PD_HM_REF" 
			  << getWhereStatement();
		
	result = executeSQL(sql.str());
	if (result)
    {
      commit();
    }
    else
    {
      rollback();
      log("ERROR: CPDH_HM_REF::doCancelHeat failed",1);
    }
	}
	catch(...)
	{
		result=false;
	}

	return result;
}





