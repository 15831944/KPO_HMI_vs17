//## Copyright (C) 2013 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CHDH_HM_PHASE_RES.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_PHASE_RES::HM_ID("HM_ID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_PHASE_RES::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_PHASE_RES::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_PHASE_RES::TREAT_TYPE("TREAT_TYPE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_PHASE_RES::REVTIME("REVTIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_PHASE_RES::RES_PHASENO("RES_PHASENO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_PHASE_RES::PHASE("PHASE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_PHASE_RES::CONS_LIME("CONS_LIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_PHASE_RES::CONS_MG("CONS_MG");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_PHASE_RES::CONS_CARBIDE("CONS_CARBIDE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_PHASE_RES::FEED_RATE_LIME("FEED_RATE_LIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_PHASE_RES::FEED_RATE_MG("FEED_RATE_MG");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_PHASE_RES::FEED_RATE_CARBIDE("FEED_RATE_CARBIDE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_PHASE_RES::MAT_COST("MAT_COST");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_HM_PHASE_RES::DURATION("DURATION");

//##DBClassCodeUtility ! DO NOT EDIT !
CHDH_HM_PHASE_RES::CHDH_HM_PHASE_RES(cCBS_StdConnection* Connection)
:CSMC_DBData("HDH_HM_PHASE_RES",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHDH_HM_PHASE_RES::CHDH_HM_PHASE_RES(cCBS_Connection* Connection)
:CSMC_DBData("HDH_HM_PHASE_RES",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHDH_HM_PHASE_RES::CHDH_HM_PHASE_RES()
:CSMC_DBData("HDH_HM_PHASE_RES")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHDH_HM_PHASE_RES::~CHDH_HM_PHASE_RES()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_HM_PHASE_RES::getHM_ID(long Row)
{
  return getString(CHDH_HM_PHASE_RES::HM_ID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_PHASE_RES::setHM_ID(const std::string& value)
{
  setString(CHDH_HM_PHASE_RES::HM_ID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_HM_PHASE_RES::getTREATID(long Row)
{
  return getString(CHDH_HM_PHASE_RES::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_PHASE_RES::setTREATID(const std::string& value)
{
  setString(CHDH_HM_PHASE_RES::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_HM_PHASE_RES::getPLANT(long Row)
{
  return getString(CHDH_HM_PHASE_RES::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_PHASE_RES::setPLANT(const std::string& value)
{
  setString(CHDH_HM_PHASE_RES::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDH_HM_PHASE_RES::getTREAT_TYPE(long Row)
{
  return getLong(CHDH_HM_PHASE_RES::TREAT_TYPE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_PHASE_RES::setTREAT_TYPE(long value)
{
  setLong(CHDH_HM_PHASE_RES::TREAT_TYPE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CHDH_HM_PHASE_RES::getREVTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHDH_HM_PHASE_RES::REVTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_PHASE_RES::setREVTIME(const CDateTime& value)
{
 setString(CHDH_HM_PHASE_RES::REVTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDH_HM_PHASE_RES::getRES_PHASENO(long Row)
{
  return getLong(CHDH_HM_PHASE_RES::RES_PHASENO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_PHASE_RES::setRES_PHASENO(long value)
{
  setLong(CHDH_HM_PHASE_RES::RES_PHASENO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_HM_PHASE_RES::getPHASE(long Row)
{
  return getString(CHDH_HM_PHASE_RES::PHASE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_PHASE_RES::setPHASE(const std::string& value)
{
  setString(CHDH_HM_PHASE_RES::PHASE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_HM_PHASE_RES::getCONS_LIME(long Row)
{
  return getDouble(CHDH_HM_PHASE_RES::CONS_LIME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_PHASE_RES::setCONS_LIME(double value)
{
  setDouble(CHDH_HM_PHASE_RES::CONS_LIME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_HM_PHASE_RES::getCONS_MG(long Row)
{
  return getDouble(CHDH_HM_PHASE_RES::CONS_MG, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_PHASE_RES::setCONS_MG(double value)
{
  setDouble(CHDH_HM_PHASE_RES::CONS_MG, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_HM_PHASE_RES::getCONS_CARBIDE(long Row)
{
  return getDouble(CHDH_HM_PHASE_RES::CONS_CARBIDE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_PHASE_RES::setCONS_CARBIDE(double value)
{
  setDouble(CHDH_HM_PHASE_RES::CONS_CARBIDE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_HM_PHASE_RES::getFEED_RATE_LIME(long Row)
{
  return getDouble(CHDH_HM_PHASE_RES::FEED_RATE_LIME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_PHASE_RES::setFEED_RATE_LIME(double value)
{
  setDouble(CHDH_HM_PHASE_RES::FEED_RATE_LIME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_HM_PHASE_RES::getFEED_RATE_MG(long Row)
{
  return getDouble(CHDH_HM_PHASE_RES::FEED_RATE_MG, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_PHASE_RES::setFEED_RATE_MG(double value)
{
  setDouble(CHDH_HM_PHASE_RES::FEED_RATE_MG, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_HM_PHASE_RES::getFEED_RATE_CARBIDE(long Row)
{
  return getDouble(CHDH_HM_PHASE_RES::FEED_RATE_CARBIDE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_PHASE_RES::setFEED_RATE_CARBIDE(double value)
{
  setDouble(CHDH_HM_PHASE_RES::FEED_RATE_CARBIDE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_HM_PHASE_RES::getMAT_COST(long Row)
{
  return getDouble(CHDH_HM_PHASE_RES::MAT_COST, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_PHASE_RES::setMAT_COST(double value)
{
  setDouble(CHDH_HM_PHASE_RES::MAT_COST, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_HM_PHASE_RES::getDURATION(long Row)
{
  return getDouble(CHDH_HM_PHASE_RES::DURATION, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_HM_PHASE_RES::setDURATION(double value)
{
  setDouble(CHDH_HM_PHASE_RES::DURATION, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CHDH_HM_PHASE_RES::select(const std::string& HM_ID, const std::string& TREATID, const std::string& PLANT, long TREAT_TYPE, const CDateTime& REVTIME, long RES_PHASENO)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CHDH_HM_PHASE_RES::HM_ID,HM_ID);
  addWhereClause(CHDH_HM_PHASE_RES::TREATID,TREATID);
  addWhereClause(CHDH_HM_PHASE_RES::PLANT,PLANT);
  addWhereClause(CHDH_HM_PHASE_RES::TREAT_TYPE,TREAT_TYPE);
  addWhereClause(CHDH_HM_PHASE_RES::REVTIME,REVTIME);
  addWhereClause(CHDH_HM_PHASE_RES::RES_PHASENO,RES_PHASENO);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 


