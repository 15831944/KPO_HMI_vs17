//## Copyright (C) 2010 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 

#if defined (_MSC_VER) && (_MSC_VER >= 1000)
#pragma once
#endif
#ifndef _INC_CHDE_PHASE_STIRRING_RES_INCLUDED
#define _INC_CHDE_PHASE_STIRRING_RES_INCLUDED

#include "CSMC_DBData.h"

class CHDE_PHASE_STIRRING_RES
: public CSMC_DBData
{

public:
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string HEATID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TREATID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PLANT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PROCPHASE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PROCPHASENO;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string STEPNO;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string BASWEIGHT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string SPECEGY;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string STARTTIME;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string STEPDUR;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string ELEC_ENERGY;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string REVTIME;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string AR_CONS;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string N2_CONS;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string AR_FLOW;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string N2_FLOW;

  //##DBClassCodeUtility ! DO NOT EDIT !
  CHDE_PHASE_STIRRING_RES(cCBS_StdConnection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CHDE_PHASE_STIRRING_RES(cCBS_Connection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CHDE_PHASE_STIRRING_RES();

  //##DBClassCodeUtility ! DO NOT EDIT !
  ~CHDE_PHASE_STIRRING_RES();

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getHEATID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setHEATID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getTREATID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTREATID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getPLANT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPLANT(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  std::string getPROCPHASE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPROCPHASE(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  long getPROCPHASENO(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPROCPHASENO(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  long getSTEPNO(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSTEPNO(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getBASWEIGHT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setBASWEIGHT(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getSPECEGY(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSPECEGY(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getSTARTTIME(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSTARTTIME(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getSTEPDUR(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSTEPDUR(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getELEC_ENERGY(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setELEC_ENERGY(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CDateTime getREVTIME(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setREVTIME(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getAR_CONS(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setAR_CONS(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getN2_CONS(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setN2_CONS(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getAR_FLOW(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setAR_FLOW(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getN2_FLOW(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setN2_FLOW(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  bool select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const std::string& PROCPHASE, long PROCPHASENO, long STEPNO);

  //## ----------------------------------END-GENERATED-CODE--------------------- 

  //## ----------------------------------YOUR-CODE------------------------------ 

  bool copy(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, bool Commit, cCBS_ODBC_DBError &Error);

  bool exists(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT);

};

#endif /* _INC_CHDE_PHASE_STIRRING_RES_INCLUDED */
