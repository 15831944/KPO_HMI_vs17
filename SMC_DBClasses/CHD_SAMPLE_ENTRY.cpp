//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CPD_SAMPLE_ENTRY.h"
#include "CHD_SAMPLE_ENTRY.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_SAMPLE_ENTRY::SAMPLE_COUNTER("SAMPLE_COUNTER");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_SAMPLE_ENTRY::MEASNAME("MEASNAME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_SAMPLE_ENTRY::MEASVALUE("MEASVALUE");

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_SAMPLE_ENTRY::CHD_SAMPLE_ENTRY(cCBS_StdConnection* Connection)
:CSMC_DBData("HD_SAMPLE_ENTRY",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_SAMPLE_ENTRY::CHD_SAMPLE_ENTRY(cCBS_Connection* Connection)
:CSMC_DBData("HD_SAMPLE_ENTRY",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_SAMPLE_ENTRY::CHD_SAMPLE_ENTRY()
:CSMC_DBData("HD_SAMPLE_ENTRY")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_SAMPLE_ENTRY::~CHD_SAMPLE_ENTRY()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##SAMPLE_COUNTER is the primary key
long CHD_SAMPLE_ENTRY::getSAMPLE_COUNTER(long Row)
{
  return getLong(CHD_SAMPLE_ENTRY::SAMPLE_COUNTER, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_SAMPLE_ENTRY::setSAMPLE_COUNTER(long value)
{
  setLong(CHD_SAMPLE_ENTRY::SAMPLE_COUNTER, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Measured Element/compound concentration in case of analysis, otherwise the type name
std::string CHD_SAMPLE_ENTRY::getMEASNAME(long Row)
{
  return getString(CHD_SAMPLE_ENTRY::MEASNAME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_SAMPLE_ENTRY::setMEASNAME(const std::string& value)
{
  setString(CHD_SAMPLE_ENTRY::MEASNAME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Measured value
double CHD_SAMPLE_ENTRY::getMEASVALUE(long Row)
{
  return getDouble(CHD_SAMPLE_ENTRY::MEASVALUE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_SAMPLE_ENTRY::setMEASVALUE(double value)
{
  setDouble(CHD_SAMPLE_ENTRY::MEASVALUE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CHD_SAMPLE_ENTRY::select(long SAMPLE_COUNTER, const std::string& MEASNAME)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CHD_SAMPLE_ENTRY::SAMPLE_COUNTER,SAMPLE_COUNTER);
  addWhereClause(CHD_SAMPLE_ENTRY::MEASNAME,MEASNAME);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CHD_SAMPLE_ENTRY::copy(long pSampleCount, bool Commit, cCBS_ODBC_DBError &Error)
{
	bool result = !exists(pSampleCount);
	//some data found -> delete them
	if (!result)
	{
		result = deleteRows(pSampleCount, Commit, Error);
	}

  // preparing setting for source table
  CPD_SAMPLE_ENTRY PD_SAMPLE_ENTRY(m_pCBS_StdConnection);
  PD_SAMPLE_ENTRY.addWhereClause(CPD_SAMPLE_ENTRY::SAMPLE_COUNTER,pSampleCount);

  result = result && copyByInsert(&PD_SAMPLE_ENTRY);

	if (!result)
		Error = getLastError();

	if(Commit)
	{
		if (result)
			this->commit();
		else
			rollback();
	}

	return result;
}

bool CHD_SAMPLE_ENTRY::copy(std::vector<long> &SampleCounterList, bool Commit, cCBS_ODBC_DBError &Error)
{
  if(SampleCounterList.size() < 1)
    return true;

	bool result = !exists(SampleCounterList);
	//some data found -> delete them
	if (!result)
	{
		result = deleteRows(SampleCounterList, Commit, Error);
	}

  // preparing setting for source table
  CPD_SAMPLE_ENTRY PD_SAMPLE_ENTRY(m_pCBS_StdConnection);
  PD_SAMPLE_ENTRY.addWhereClause(CPD_SAMPLE_ENTRY::SAMPLE_COUNTER,SampleCounterList, "IN");

  result = result && copyByInsert(&PD_SAMPLE_ENTRY);

	if (!result)
		Error = getLastError();

	if(Commit)
	{
		if (result)
			this->commit();
		else
			rollback();
	}

	return result;
}

std::string CHD_SAMPLE_ENTRY::ArrayToString(std::vector<long> &pArray)
{
  std::stringstream mStream;	
	for (unsigned int i = 0; i < pArray.size(); i++)
		mStream << pArray[i] << ",";

	string result = mStream.str(); 
	if (!result.empty())
		result = result.substr(0, result.length()-1); //delete the last coma ','
	return result;
}

bool CHD_SAMPLE_ENTRY::deleteRows(long pSampleCount, bool Commit, cCBS_ODBC_DBError &Error)
{
	cleanWhereStatement();

	addWhereClause(CHD_SAMPLE_ENTRY::SAMPLE_COUNTER,pSampleCount);

  bool result = CSMC_DBData::deleteRows();

	if (!result)
		Error = getLastError();

	if(Commit)
	{
		if (result)
			this->commit();
		else
			rollback();
	}

	return result;
}

bool CHD_SAMPLE_ENTRY::deleteRows(std::vector<long> &SampleCounterList, bool Commit, cCBS_ODBC_DBError &Error)
{
	cleanWhereStatement();

	addWhereClause(CHD_SAMPLE_ENTRY::SAMPLE_COUNTER,SampleCounterList, "IN");

  bool result = CSMC_DBData::deleteRows();

	if (!result)
		Error = getLastError();

	if(Commit)
	{
		if (result)
			this->commit();
		else
			rollback();
	}

	return result;
}

bool CHD_SAMPLE_ENTRY::exists(long SAMPLE_COUNTER)
{
	cleanWhereStatement();

	m_Statement = "Select SAMPLE_COUNTER from " + m_TableName;

	addWhereClause(CHD_SAMPLE_ENTRY::SAMPLE_COUNTER,SAMPLE_COUNTER);
   
  std::string sWhereStatement = getWhereStatement();
  //to avoid the exception like 'Select HEATID from PP_HEAT AND ROWNUM = 1 '
  if(sWhereStatement.length() > 0 ) 
  {
    // do not use ROWNUM in "addWhereClause", ROWNUM is not a table column and where statement will be used for deletion at "deleteRows"
    m_Statement += sWhereStatement + " AND ROWNUM = 1 ;";
  }
  else
  {
    return false;
  }

	return CSMC_DBData::select();
}

bool CHD_SAMPLE_ENTRY::exists(std::vector<long> &SampleCounterList)
{
  if(SampleCounterList.size() < 1)
    return false;

	cleanWhereStatement();


	m_Statement = "Select SAMPLE_COUNTER from " + m_TableName;
 
  addWhereClause(CHD_SAMPLE_ENTRY::SAMPLE_COUNTER, SampleCounterList, "IN"); 
   
  std::string sWhereStatement = getWhereStatement();
  //to avoid the exception like 'Select HEATID from PP_HEAT AND ROWNUM = 1 '
  if(sWhereStatement.length() > 0 ) 
  {
    // do not use ROWNUM in "addWhereClause", ROWNUM is not a table column and where statement will be used for deletion at "deleteRows"
    m_Statement += sWhereStatement + " AND ROWNUM = 1 ;";
  }
  else
  {
    return false;
  }

	return CSMC_DBData::select();
}


