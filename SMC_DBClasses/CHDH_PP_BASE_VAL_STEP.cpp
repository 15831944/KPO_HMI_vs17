//## Copyright (C) 2013 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CHDH_PP_BASE_VAL_STEP.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_BASE_VAL_STEP::HM_ID("HM_ID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_BASE_VAL_STEP::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_BASE_VAL_STEP::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_BASE_VAL_STEP::PRACNO("PRACNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_BASE_VAL_STEP::STEPNO("STEPNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_BASE_VAL_STEP::REVTIME("REVTIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_BASE_VAL_STEP::DESCR_E("DESCR_E");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_BASE_VAL_STEP::DESCR_C("DESCR_C");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_BASE_VAL_STEP::USERCODE("USERCODE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_BASE_VAL_STEP::S_START("S_START");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_BASE_VAL_STEP::S_STEP_1("S_STEP_1");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_BASE_VAL_STEP::S_STEP_3("S_STEP_3");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_BASE_VAL_STEP::S_STEP_4("S_STEP_4");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_BASE_VAL_STEP::S_STEP_2("S_STEP_2");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PP_BASE_VAL_STEP::S_STEP_5("S_STEP_5");

//##DBClassCodeUtility ! DO NOT EDIT !
CHDH_PP_BASE_VAL_STEP::CHDH_PP_BASE_VAL_STEP(cCBS_StdConnection* Connection)
:CSMC_DBData("HDH_PP_BASE_VAL_STEP",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHDH_PP_BASE_VAL_STEP::CHDH_PP_BASE_VAL_STEP(cCBS_Connection* Connection)
:CSMC_DBData("HDH_PP_BASE_VAL_STEP",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHDH_PP_BASE_VAL_STEP::CHDH_PP_BASE_VAL_STEP()
:CSMC_DBData("HDH_PP_BASE_VAL_STEP")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHDH_PP_BASE_VAL_STEP::~CHDH_PP_BASE_VAL_STEP()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_PP_BASE_VAL_STEP::getHM_ID(long Row)
{
  return getString(CHDH_PP_BASE_VAL_STEP::HM_ID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_BASE_VAL_STEP::setHM_ID(const std::string& value)
{
  setString(CHDH_PP_BASE_VAL_STEP::HM_ID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_PP_BASE_VAL_STEP::getTREATID(long Row)
{
  return getString(CHDH_PP_BASE_VAL_STEP::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_BASE_VAL_STEP::setTREATID(const std::string& value)
{
  setString(CHDH_PP_BASE_VAL_STEP::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_PP_BASE_VAL_STEP::getPLANT(long Row)
{
  return getString(CHDH_PP_BASE_VAL_STEP::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_BASE_VAL_STEP::setPLANT(const std::string& value)
{
  setString(CHDH_PP_BASE_VAL_STEP::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDH_PP_BASE_VAL_STEP::getPRACNO(long Row)
{
  return getLong(CHDH_PP_BASE_VAL_STEP::PRACNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_BASE_VAL_STEP::setPRACNO(long value)
{
  setLong(CHDH_PP_BASE_VAL_STEP::PRACNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDH_PP_BASE_VAL_STEP::getSTEPNO(long Row)
{
  return getLong(CHDH_PP_BASE_VAL_STEP::STEPNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_BASE_VAL_STEP::setSTEPNO(long value)
{
  setLong(CHDH_PP_BASE_VAL_STEP::STEPNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CHDH_PP_BASE_VAL_STEP::getREVTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHDH_PP_BASE_VAL_STEP::REVTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_BASE_VAL_STEP::setREVTIME(const CDateTime& value)
{
 setString(CHDH_PP_BASE_VAL_STEP::REVTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_PP_BASE_VAL_STEP::getDESCR_E(long Row)
{
  return getString(CHDH_PP_BASE_VAL_STEP::DESCR_E, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_BASE_VAL_STEP::setDESCR_E(const std::string& value)
{
  setString(CHDH_PP_BASE_VAL_STEP::DESCR_E, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_PP_BASE_VAL_STEP::getDESCR_C(long Row)
{
  return getString(CHDH_PP_BASE_VAL_STEP::DESCR_C, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_BASE_VAL_STEP::setDESCR_C(const std::string& value)
{
  setString(CHDH_PP_BASE_VAL_STEP::DESCR_C, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_PP_BASE_VAL_STEP::getUSERCODE(long Row)
{
  return getString(CHDH_PP_BASE_VAL_STEP::USERCODE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_BASE_VAL_STEP::setUSERCODE(const std::string& value)
{
  setString(CHDH_PP_BASE_VAL_STEP::USERCODE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_PP_BASE_VAL_STEP::getS_START(long Row)
{
  return getDouble(CHDH_PP_BASE_VAL_STEP::S_START, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_BASE_VAL_STEP::setS_START(double value)
{
  setDouble(CHDH_PP_BASE_VAL_STEP::S_START, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_PP_BASE_VAL_STEP::getS_STEP_1(long Row)
{
  return getDouble(CHDH_PP_BASE_VAL_STEP::S_STEP_1, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_BASE_VAL_STEP::setS_STEP_1(double value)
{
  setDouble(CHDH_PP_BASE_VAL_STEP::S_STEP_1, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_PP_BASE_VAL_STEP::getS_STEP_3(long Row)
{
  return getDouble(CHDH_PP_BASE_VAL_STEP::S_STEP_3, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_BASE_VAL_STEP::setS_STEP_3(double value)
{
  setDouble(CHDH_PP_BASE_VAL_STEP::S_STEP_3, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_PP_BASE_VAL_STEP::getS_STEP_4(long Row)
{
  return getDouble(CHDH_PP_BASE_VAL_STEP::S_STEP_4, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_BASE_VAL_STEP::setS_STEP_4(double value)
{
  setDouble(CHDH_PP_BASE_VAL_STEP::S_STEP_4, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_PP_BASE_VAL_STEP::getS_STEP_2(long Row)
{
  return getDouble(CHDH_PP_BASE_VAL_STEP::S_STEP_2, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_BASE_VAL_STEP::setS_STEP_2(double value)
{
  setDouble(CHDH_PP_BASE_VAL_STEP::S_STEP_2, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_PP_BASE_VAL_STEP::getS_STEP_5(long Row)
{
  return getDouble(CHDH_PP_BASE_VAL_STEP::S_STEP_5, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PP_BASE_VAL_STEP::setS_STEP_5(double value)
{
  setDouble(CHDH_PP_BASE_VAL_STEP::S_STEP_5, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CHDH_PP_BASE_VAL_STEP::select(const std::string& HM_ID, const std::string& TREATID, const std::string& PLANT, long PRACNO, long STEPNO)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CHDH_PP_BASE_VAL_STEP::HM_ID,HM_ID);
  addWhereClause(CHDH_PP_BASE_VAL_STEP::TREATID,TREATID);
  addWhereClause(CHDH_PP_BASE_VAL_STEP::PLANT,PLANT);
  addWhereClause(CHDH_PP_BASE_VAL_STEP::PRACNO,PRACNO);
  addWhereClause(CHDH_PP_BASE_VAL_STEP::STEPNO,STEPNO);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CHDH_PP_BASE_VAL_STEP::copyHDHPPBaseValStep(const string& pHeatId, const string& pTreatId, const string& pPlant, long pPlantno, bool pCommit)
{
	bool result=true;
	std::stringstream sql;
	//some data found -> delete them
	/*if (!result)
	{
		result = deleteRows();
		if (!result)
			setLastError(string("delete from HDH_PP_BASE_VAL_STEP faild"), 0, "delete from HDH_PP_BASE_VAL_STEP where " + getWhereStatement());
	}*/
// PRACNO=0 for model data
	sql << "insert into HDH_PP_BASE_VAL_STEP (HM_ID,TREATID,PLANT,PRACNO,STEPNO,REVTIME,DESCR_E,DESCR_C,USERCODE,S_START,S_STEP_1 ,"
			<< " S_STEP_3, S_STEP_4, S_STEP_2, S_STEP_5) "
			<< " (select '" << pHeatId << "', '" << pTreatId << "', '" << pPlant << "', PRACNO,STEPNO,REVTIME,DESCR_E,DESCR_C,USERCODE,S_START,S_STEP_1 ,"
			//<< " (select '" << pHeatId << "', '" << pTreatId << "', '" << pPlant << "', 0,STEPNO,REVTIME,DESCR_E,DESCR_C,USERCODE,S_START,S_STEP_1 ,"
			<< " S_STEP_3, S_STEP_4, S_STEP_2, S_STEP_5 "
			<< " from GTH_PP_BASE_VAL_STEP"
			<< "  where PLANTNO = "  << pPlantno 
			<< "  and PRACNO = (select PRODPRACID_MOD from PDH_HM_DATA_PRODPRAC where HM_ID = '" << pHeatId << "' and TREATID = '"  <<  pTreatId <<  "' and PLANT = '" << pPlant << "' and DESCR_PP = 'BaseVal')"
			<< "  and REVTIME = (select max(REVTIME) from GTH_PP_BASE_VAL_STEP))";
			
	result = result && executeSQL(sql.str());
	if (!result)
		//pError = getLastError();

	if(pCommit)
  {
		if (result)
			this->commit();
		else
			rollback();
  }

	return result;
}
bool CHDH_PP_BASE_VAL_STEP::delete_HDH_PP_BASE_VAL_STEP(const std::string& HM_ID, const std::string& TREATID, const std::string& PLANT)
{
	bool result;
  std::stringstream sql;
	try
	{
		addWhereClause("HM_ID",HM_ID);
		addWhereClause("TREATID",TREATID);
		addWhereClause("PLANT",PLANT);
		//sql += getWhereStatement() + ";";
		sql << "delete from HDH_PP_BASE_VAL_STEP" 
			  << getWhereStatement();
		/*<< "  where HEATID = '" << pHeatId << "'"
		<< "   and TREATID = '" << pTreatId << "'"
		<< "   and PLANT = '" << pPlant << "'";*/

	result = executeSQL(sql.str());
	if (result)
    {
      commit();
    }
    else
    {
      rollback();
      log("ERROR: CHDH_PP_BASE_VAL_STEP::delete_HDH_PP_BASE_VAL_STEP failed",1);
    }
	}
	catch(...)
	{
		result=false;
	}

	return result;
}



