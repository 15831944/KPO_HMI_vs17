//## Copyright (C) 2013 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CHDH_PARAM.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PARAM::HM_ID("HM_ID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PARAM::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PARAM::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PARAM::UNITGROUPNO("UNITGROUPNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PARAM::PRACNO("PRACNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PARAM::PNAME("PNAME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PARAM::TYPE("TYPE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PARAM::VALUE("VALUE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PARAM::INST_ACTV("INST_ACTV");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PARAM::DIALOG_PARAM("DIALOG_PARAM");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PARAM::CONV("CONV");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PARAM::MIN_VALUE("MIN_VALUE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PARAM::MAX_VALUE("MAX_VALUE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PARAM::CREATIONDATE("CREATIONDATE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PARAM::PARAMDESC("PARAMDESC");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PARAM::PARAMDESC_C("PARAMDESC_C");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PARAM::UNIT("UNIT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_PARAM::PARAMGROUP("PARAMGROUP");

//##DBClassCodeUtility ! DO NOT EDIT !
CHDH_PARAM::CHDH_PARAM(cCBS_StdConnection* Connection)
:CSMC_DBData("HDH_PARAM",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHDH_PARAM::CHDH_PARAM(cCBS_Connection* Connection)
:CSMC_DBData("HDH_PARAM",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHDH_PARAM::CHDH_PARAM()
:CSMC_DBData("HDH_PARAM")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHDH_PARAM::~CHDH_PARAM()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_PARAM::getHM_ID(long Row)
{
  return getString(CHDH_PARAM::HM_ID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PARAM::setHM_ID(const std::string& value)
{
  setString(CHDH_PARAM::HM_ID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_PARAM::getTREATID(long Row)
{
  return getString(CHDH_PARAM::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PARAM::setTREATID(const std::string& value)
{
  setString(CHDH_PARAM::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_PARAM::getPLANT(long Row)
{
  return getString(CHDH_PARAM::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PARAM::setPLANT(const std::string& value)
{
  setString(CHDH_PARAM::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDH_PARAM::getUNITGROUPNO(long Row)
{
  return getLong(CHDH_PARAM::UNITGROUPNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PARAM::setUNITGROUPNO(long value)
{
  setLong(CHDH_PARAM::UNITGROUPNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDH_PARAM::getPRACNO(long Row)
{
  return getLong(CHDH_PARAM::PRACNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PARAM::setPRACNO(long value)
{
  setLong(CHDH_PARAM::PRACNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_PARAM::getPNAME(long Row)
{
  return getString(CHDH_PARAM::PNAME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PARAM::setPNAME(const std::string& value)
{
  setString(CHDH_PARAM::PNAME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDH_PARAM::getTYPE(long Row)
{
  return getLong(CHDH_PARAM::TYPE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PARAM::setTYPE(long value)
{
  setLong(CHDH_PARAM::TYPE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_PARAM::getVALUE(long Row)
{
  return getString(CHDH_PARAM::VALUE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PARAM::setVALUE(const std::string& value)
{
  setString(CHDH_PARAM::VALUE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDH_PARAM::getINST_ACTV(long Row)
{
  return getLong(CHDH_PARAM::INST_ACTV, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PARAM::setINST_ACTV(long value)
{
  setLong(CHDH_PARAM::INST_ACTV, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDH_PARAM::getDIALOG_PARAM(long Row)
{
  return getLong(CHDH_PARAM::DIALOG_PARAM, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PARAM::setDIALOG_PARAM(long value)
{
  setLong(CHDH_PARAM::DIALOG_PARAM, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_PARAM::getCONV(long Row)
{
  return getDouble(CHDH_PARAM::CONV, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PARAM::setCONV(double value)
{
  setDouble(CHDH_PARAM::CONV, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_PARAM::getMIN_VALUE(long Row)
{
  return getDouble(CHDH_PARAM::MIN_VALUE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PARAM::setMIN_VALUE(double value)
{
  setDouble(CHDH_PARAM::MIN_VALUE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_PARAM::getMAX_VALUE(long Row)
{
  return getDouble(CHDH_PARAM::MAX_VALUE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PARAM::setMAX_VALUE(double value)
{
  setDouble(CHDH_PARAM::MAX_VALUE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CHDH_PARAM::getCREATIONDATE(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHDH_PARAM::CREATIONDATE, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PARAM::setCREATIONDATE(const CDateTime& value)
{
 setString(CHDH_PARAM::CREATIONDATE, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_PARAM::getPARAMDESC(long Row)
{
  return getString(CHDH_PARAM::PARAMDESC, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PARAM::setPARAMDESC(const std::string& value)
{
  setString(CHDH_PARAM::PARAMDESC, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_PARAM::getPARAMDESC_C(long Row)
{
  return getString(CHDH_PARAM::PARAMDESC_C, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PARAM::setPARAMDESC_C(const std::string& value)
{
  setString(CHDH_PARAM::PARAMDESC_C, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_PARAM::getUNIT(long Row)
{
  return getString(CHDH_PARAM::UNIT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PARAM::setUNIT(const std::string& value)
{
  setString(CHDH_PARAM::UNIT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_PARAM::getPARAMGROUP(long Row)
{
  return getString(CHDH_PARAM::PARAMGROUP, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_PARAM::setPARAMGROUP(const std::string& value)
{
  setString(CHDH_PARAM::PARAMGROUP, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CHDH_PARAM::select(const std::string& HM_ID, const std::string& TREATID, const std::string& PLANT, long UNITGROUPNO, long PRACNO, const std::string& PNAME)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CHDH_PARAM::HM_ID,HM_ID);
  addWhereClause(CHDH_PARAM::TREATID,TREATID);
  addWhereClause(CHDH_PARAM::PLANT,PLANT);
  addWhereClause(CHDH_PARAM::UNITGROUPNO,UNITGROUPNO);
  addWhereClause(CHDH_PARAM::PRACNO,PRACNO);
  addWhereClause(CHDH_PARAM::PNAME,PNAME);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CHDH_PARAM::doAnnouncement(const std::string& HM_ID, const std::string& TREATID, const std::string& PLANT, long UNITGROUPNO)
{
  bool retValue=true;
	bool result;
	std::stringstream sql;
  int i;  // place-holder variable - delete later
  double j; // place-holder variable - delete later
	try
  {
  /*CGT_PARAM	 m_GTParam(m_pDM_DBManagerTask->getConnection());
	result = m_GTParam.selectrows(101,1)*/
	/*if (result)
		{*/
			//long count = m_GTParam.getLastRow();
			//for (long i = 1; i <= count; i++)
			//{
			//	//mGroupNo.push_back(m_GCPlantgroup.getUNITGROUPNO(i));
			//	sql << "insert into L2SMC_HMD.HDH_PARAM (HM_ID,TREATID,PLANT,UNITGROUPNO,PRACNO,PNAME,TYPE,VALUE,INST_ACTV,DIALOG_PARAM,"
			//			<< "CONV,MIN_VALUE,MAX_VALUE,CREATIONDATE,PARAMDESC,PARAMDESC_C,UNIT,PARAMGROUP) values("
			//			<< "'" <<  pHMInfo.HMId << "','" << pHMInfo.TreatID << "','" << pHMInfo.Plant << "',101,1,"
			//			<< "'" <<  m_GTParam.getPNAME(i) << "'," << m_GTParam.getTYPE(i) << ",'" << m_GTParam.getVALUE(i) << "',"
			//			<< m_GTParam.getINST_ACTV(i) << "," << m_GTParam.getDIALOG_PARAM(i) << "," << m_GTParam.getCONV(i) << ","
			//			<< m_GTParam.getMIN_VALUE(i) << "," << m_GTParam.getMAX_VALUE(i) << ",'" << m_GTParam.getCREATIONDATE(i) << "',"
			//			<< "'" <<  m_GTParam.getPARAMDESCR(i) << "'," << m_GTParam.getPARAMDESCR_C(i) << ",'" << m_GTParam.getUNIT(i) << "','"
			//			<< m_GTParam.getPARAMGROUP(i) << "'";    
			//
			//	retValue = executeSQL(sql.str);
				// commit only if own values are successfully written
				sql << "insert into L2SMC_HMD.HDH_PARAM " // (HM_ID,TREATID,PLANT,UNITGROUPNO,PRACNO,PNAME,TYPE,VALUE,INST_ACTV,DIALOG_PARAM,"
						// << "CONV,MIN_VALUE,MAX_VALUE,CREATIONDATE,PARAMDESC,PARAMDESC_C,UNIT,PARAMGROUP)"
						<< " (select '" << HM_ID << "', '" << TREATID << "', '" << PLANT << "', UNITGROUPNO,PRACNO,PNAME,TYPE,"
						<< "VALUE,INST_ACTV,DIALOG_PARAM,CONV,MIN_VALUE,MAX_VALUE,CREATIONDATE,PARAMDESCR,PARAMDESCR_C,UNIT,PARAMGROUP"
						<< " from GT_PARAM"
						<< " where UNITGROUPNO in ( " << UNITGROUPNO << ")"
						<< "   and PRACNO in (0, " << 99 << "))";

				retValue= executeSQL(sql.str());

				if (retValue)
				{
					commit();
				}
				else
				{
					rollback();
					log("ERROR: CHDH_PARAM::doAnnouncement failed",1);
				}
  }
  catch(...)
  {
    retValue = false;
  }

  return retValue;
}

bool CHDH_PARAM::delete_HDH_PARAM(const std::string& HM_ID, const std::string& TREATID, const std::string& PLANT)
{
	bool result;
  std::stringstream sql;
	try
	{
		addWhereClause("HM_ID",HM_ID);
		addWhereClause("TREATID",TREATID);
		addWhereClause("PLANT",PLANT);
		//sql += getWhereStatement() + ";";
		sql << "delete from HDH_PARAM" 
			  << getWhereStatement();
		/*<< "  where HEATID = '" << pHeatId << "'"
		<< "   and TREATID = '" << pTreatId << "'"
		<< "   and PLANT = '" << pPlant << "'";*/

	result = executeSQL(sql.str());
	if (result)
    {
      commit();
    }
    else
    {
      rollback();
      log("ERROR: CHDH_PARAM::delete_HDH_PARAM failed",1);
    }
	}
	catch(...)
	{
		result=false;
	}

	return result;
}



