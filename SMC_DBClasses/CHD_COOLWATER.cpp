//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CSMC_EventLogFrameController.h"
#include "CPD_COOLWATER.h"
#include "CHD_COOLWATER.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_COOLWATER::HEATID("HEATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_COOLWATER::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_COOLWATER::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_COOLWATER::COOL_EQUIP("COOL_EQUIP");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_COOLWATER::COOL_LOOP_NO("COOL_LOOP_NO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_COOLWATER::REVTIME("REVTIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_COOLWATER::O2_MOMENT("O2_MOMENT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_COOLWATER::N2_MOMENT("N2_MOMENT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_COOLWATER::AR_MOMENT("AR_MOMENT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_COOLWATER::ELEC_EGYTOT("ELEC_EGYTOT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_COOLWATER::CW_TEMP_IN("CW_TEMP_IN");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_COOLWATER::CW_TEMP_OUT("CW_TEMP_OUT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_COOLWATER::CW_FLOW("CW_FLOW");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_COOLWATER::DURSINCEHEATANNOUNCEMENT("DURSINCEHEATANNOUNCEMENT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHD_COOLWATER::DURSINCESTARTOFHEAT("DURSINCESTARTOFHEAT");

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_COOLWATER::CHD_COOLWATER(cCBS_StdConnection* Connection)
:CSMC_DBData("HD_COOLWATER",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_COOLWATER::CHD_COOLWATER(cCBS_Connection* Connection)
:CSMC_DBData("HD_COOLWATER",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_COOLWATER::CHD_COOLWATER()
:CSMC_DBData("HD_COOLWATER")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHD_COOLWATER::~CHD_COOLWATER()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Internal heat identifier
std::string CHD_COOLWATER::getHEATID(long Row)
{
  return getString(CHD_COOLWATER::HEATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_COOLWATER::setHEATID(const std::string& value)
{
  setString(CHD_COOLWATER::HEATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Treatment identifier
std::string CHD_COOLWATER::getTREATID(long Row)
{
  return getString(CHD_COOLWATER::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_COOLWATER::setTREATID(const std::string& value)
{
  setString(CHD_COOLWATER::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Plant identifier
std::string CHD_COOLWATER::getPLANT(long Row)
{
  return getString(CHD_COOLWATER::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_COOLWATER::setPLANT(const std::string& value)
{
  setString(CHD_COOLWATER::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Cool water equipment
std::string CHD_COOLWATER::getCOOL_EQUIP(long Row)
{
  return getString(CHD_COOLWATER::COOL_EQUIP, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_COOLWATER::setCOOL_EQUIP(const std::string& value)
{
  setString(CHD_COOLWATER::COOL_EQUIP, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Cooling loop number
long CHD_COOLWATER::getCOOL_LOOP_NO(long Row)
{
  return getLong(CHD_COOLWATER::COOL_LOOP_NO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_COOLWATER::setCOOL_LOOP_NO(long value)
{
  setLong(CHD_COOLWATER::COOL_LOOP_NO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Date and time of last revision
CDateTime CHD_COOLWATER::getREVTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHD_COOLWATER::REVTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_COOLWATER::setREVTIME(const CDateTime& value)
{
 setString(CHD_COOLWATER::REVTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Metallurgical Nm3 since start of heat
double CHD_COOLWATER::getO2_MOMENT(long Row)
{
  return getDouble(CHD_COOLWATER::O2_MOMENT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_COOLWATER::setO2_MOMENT(double value)
{
  setDouble(CHD_COOLWATER::O2_MOMENT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Metallurgical Nm3 since start of heat
double CHD_COOLWATER::getN2_MOMENT(long Row)
{
  return getDouble(CHD_COOLWATER::N2_MOMENT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_COOLWATER::setN2_MOMENT(double value)
{
  setDouble(CHD_COOLWATER::N2_MOMENT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Argon consumption
double CHD_COOLWATER::getAR_MOMENT(long Row)
{
  return getDouble(CHD_COOLWATER::AR_MOMENT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_COOLWATER::setAR_MOMENT(double value)
{
  setDouble(CHD_COOLWATER::AR_MOMENT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Total electric energy consumption in case of electric heating, kWh
double CHD_COOLWATER::getELEC_EGYTOT(long Row)
{
  return getDouble(CHD_COOLWATER::ELEC_EGYTOT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_COOLWATER::setELEC_EGYTOT(double value)
{
  setDouble(CHD_COOLWATER::ELEC_EGYTOT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Cool water inlet temperature
double CHD_COOLWATER::getCW_TEMP_IN(long Row)
{
  return getDouble(CHD_COOLWATER::CW_TEMP_IN, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_COOLWATER::setCW_TEMP_IN(double value)
{
  setDouble(CHD_COOLWATER::CW_TEMP_IN, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Cool water outlet temperature
double CHD_COOLWATER::getCW_TEMP_OUT(long Row)
{
  return getDouble(CHD_COOLWATER::CW_TEMP_OUT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_COOLWATER::setCW_TEMP_OUT(double value)
{
  setDouble(CHD_COOLWATER::CW_TEMP_OUT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Cool water flow
double CHD_COOLWATER::getCW_FLOW(long Row)
{
  return getDouble(CHD_COOLWATER::CW_FLOW, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_COOLWATER::setCW_FLOW(double value)
{
  setDouble(CHD_COOLWATER::CW_FLOW, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Duration since heat announcement
double CHD_COOLWATER::getDURSINCEHEATANNOUNCEMENT(long Row)
{
  return getDouble(CHD_COOLWATER::DURSINCEHEATANNOUNCEMENT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_COOLWATER::setDURSINCEHEATANNOUNCEMENT(double value)
{
  setDouble(CHD_COOLWATER::DURSINCEHEATANNOUNCEMENT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Duration since start of heat
double CHD_COOLWATER::getDURSINCESTARTOFHEAT(long Row)
{
  return getDouble(CHD_COOLWATER::DURSINCESTARTOFHEAT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHD_COOLWATER::setDURSINCESTARTOFHEAT(double value)
{
  setDouble(CHD_COOLWATER::DURSINCESTARTOFHEAT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CHD_COOLWATER::select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const std::string& COOL_EQUIP, long COOL_LOOP_NO, const CDateTime& REVTIME)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CHD_COOLWATER::HEATID,HEATID);
  addWhereClause(CHD_COOLWATER::TREATID,TREATID);
  addWhereClause(CHD_COOLWATER::PLANT,PLANT);
  addWhereClause(CHD_COOLWATER::COOL_EQUIP,COOL_EQUIP);
  addWhereClause(CHD_COOLWATER::COOL_LOOP_NO,COOL_LOOP_NO);
  addWhereClause(CHD_COOLWATER::REVTIME,REVTIME);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CHD_COOLWATER::copy(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, bool Commit, cCBS_ODBC_DBError &Error)
{
	bool result = !exists(HEATID, TREATID, PLANT);
	//some data found -> delete them
	if (!result)
	{
		result = deleteRows();
		if (!result)
			setLastError(std::string("ERROR_DELETE_DATA"), 0, getActStatement());
	}
	
  // preparing setting for source table
  CPD_COOLWATER PD_COOLWATER(m_pCBS_StdConnection);
  PD_COOLWATER.addWhereClause(CPD_COOLWATER::HEATID,HEATID);
  PD_COOLWATER.addWhereClause(CPD_COOLWATER::TREATID,TREATID);
  PD_COOLWATER.addWhereClause(CPD_COOLWATER::PLANT,PLANT);

  result = result && copyByInsert(&PD_COOLWATER);

	if (!result)
		Error = getLastError();

	if(Commit)
  {
		if (result)
			this->commit();
		else
			rollback();
  }
	return result;
}

bool CHD_COOLWATER::exists(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT)
{
	cleanWhereStatement();

	m_Statement = "Select HEATID from " + m_TableName;

	addWhereClause(CHD_COOLWATER::HEATID,HEATID);
	addWhereClause(CHD_COOLWATER::TREATID,TREATID);
	addWhereClause(CHD_COOLWATER::PLANT,PLANT);

  std::string sWhereStatement = getWhereStatement();
  //to avoid the exception like 'Select HEATID from PP_HEAT AND ROWNUM = 1 '
  if(sWhereStatement.length() > 0 ) 
  {
    // do not use ROWNUM in "addWhereClause", ROWNUM is not a table column and where statement will be used for deletion at "deleteRows"
    m_Statement += sWhereStatement + " AND ROWNUM = 1 ;";
  }
  else
  {
    return false;
  }

	return CSMC_DBData::select();
}


