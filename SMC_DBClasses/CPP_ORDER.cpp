//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CPP_ORDER.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPP_ORDER::PRODORDERID("PRODORDERID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPP_ORDER::STEELGRADECODE("STEELGRADECODE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPP_ORDER::CCM_DIMENSION("CCM_DIMENSION");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPP_ORDER::ORDERSEQNO("ORDERSEQNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPP_ORDER::ON_REQUEST("ON_REQUEST");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPP_ORDER::USERCODE("USERCODE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPP_ORDER::REVTIME("REVTIME");

//##DBClassCodeUtility ! DO NOT EDIT !
CPP_ORDER::CPP_ORDER(cCBS_StdConnection* Connection)
:CSMC_DBData("PP_ORDER",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPP_ORDER::CPP_ORDER(cCBS_Connection* Connection)
:CSMC_DBData("PP_ORDER",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPP_ORDER::CPP_ORDER()
:CSMC_DBData("PP_ORDER")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPP_ORDER::~CPP_ORDER()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Production oder identification
std::string CPP_ORDER::getPRODORDERID(long Row)
{
  return getString(CPP_ORDER::PRODORDERID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPP_ORDER::setPRODORDERID(const std::string& value)
{
  setString(CPP_ORDER::PRODORDERID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Steel grade code
std::string CPP_ORDER::getSTEELGRADECODE(long Row)
{
  return getString(CPP_ORDER::STEELGRADECODE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPP_ORDER::setSTEELGRADECODE(const std::string& value)
{
  setString(CPP_ORDER::STEELGRADECODE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##CCM product description, free text
std::string CPP_ORDER::getCCM_DIMENSION(long Row)
{
  return getString(CPP_ORDER::CCM_DIMENSION, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPP_ORDER::setCCM_DIMENSION(const std::string& value)
{
  setString(CPP_ORDER::CCM_DIMENSION, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Defines production order only in case of missing schedule information.
long CPP_ORDER::getORDERSEQNO(long Row)
{
  return getLong(CPP_ORDER::ORDERSEQNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPP_ORDER::setORDERSEQNO(long value)
{
  setLong(CPP_ORDER::ORDERSEQNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Manually (1) entered by operator. The entry is deleted in case of heat cancellation.
long CPP_ORDER::getON_REQUEST(long Row)
{
  return getLong(CPP_ORDER::ON_REQUEST, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPP_ORDER::setON_REQUEST(long value)
{
  setLong(CPP_ORDER::ON_REQUEST, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##User who entered/changed entry. User code <> L3 indicates manual entered.
std::string CPP_ORDER::getUSERCODE(long Row)
{
  return getString(CPP_ORDER::USERCODE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPP_ORDER::setUSERCODE(const std::string& value)
{
  setString(CPP_ORDER::USERCODE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Date and time of last revision
CDateTime CPP_ORDER::getREVTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CPP_ORDER::REVTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPP_ORDER::setREVTIME(const CDateTime& value)
{
 setString(CPP_ORDER::REVTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CPP_ORDER::select(const std::string& PRODORDERID)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPP_ORDER::PRODORDERID,PRODORDERID);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CPP_ORDER::selectByREVTIME(const CDateTime& REVTIME, const std::string& Operator)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPP_ORDER::REVTIME, REVTIME, Operator );

  m_Statement += getWhereStatement() + " order by REVTIME desc;";

  return CSMC_DBData::select();
}

//bool CPP_ORDER::deleteOneRow(const std::string& PRODORDERID)
//{
//  cleanWhereStatement();
//
//  addWhereClause(CPP_ORDER::PRODORDERID, PRODORDERID);
//
//  return deleteRows();
//}
bool CPP_ORDER::selectLastDefltOrd(const std::string& Orderprefix, const std::string& Operator)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPP_ORDER::PRODORDERID, Orderprefix, Operator);

  m_Statement += getWhereStatement() + " order by PRODORDERID desc;";

  return CSMC_DBData::select();
}

bool CPP_ORDER::selectNextOrder(const std::string& PRODORDERID)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPP_ORDER::PRODORDERID,PRODORDERID,">");

  m_Statement += getWhereStatement() + " order by ORDERSEQNO;";

  return CSMC_DBData::select();
}

bool CPP_ORDER::selectPlanOrder(const std::string& PLANT)
{
  cleanWhereStatement();

  m_Statement = "Select o.PRODORDERID, o.STEELGRADECODE, o.CCM_DIMENSION, "
    "o.ORDERSEQNO, o.ON_REQUEST, o.USERCODE, o.REVTIME from " +
    m_TableName + " o where o.PRODORDERID not in (select p.PRODORDERID_ACT from PD_HEAT_DATA p where p.Plant ='" + PLANT + "')";

  m_Statement += " order by o.orderseqno ;";

  return CSMC_DBData::select();  
}

bool CPP_ORDER::selectUseHeatId(const std::string& HEATID)
{
  cleanWhereStatement();

  m_Statement = "Select o.PRODORDERID, o.STEELGRADECODE, o.CCM_DIMENSION, "
        "o.ORDERSEQNO, o.ON_REQUEST, o.USERCODE, o.REVTIME from " +
        m_TableName + " o, PP_HEAT h where o.PRODORDERID = h.PRODORDERID and h.HEATID = '" + HEATID + "'";

  m_Statement += ";";

  return CSMC_DBData::select();  
}

bool CPP_ORDER::copyOrder(const std::string& PRODORDERID_SOURCE, const std::string& PRODORDERID_AIM, bool Commit, cCBS_ODBC_DBError& Error)
{
  bool result = true;

  result = result && select(PRODORDERID_SOURCE);
  if ( result )
  {
    std::string STEELGRADECODE  = getSTEELGRADECODE(1);
    std::string CCM_DIMENSION   = getCCM_DIMENSION(1);
    std::string USERCODE        = getUSERCODE(1);
    long ORDERSEQNO             = getORDERSEQNO(1);
    long ON_REQUEST             = getON_REQUEST(1);

    setSTEELGRADECODE(STEELGRADECODE);
    setCCM_DIMENSION(CCM_DIMENSION);
    setUSERCODE(USERCODE);
    setORDERSEQNO(ORDERSEQNO);
    setON_REQUEST(ON_REQUEST);

    if ( select (PRODORDERID_AIM) )
    {
      result = update();
    }
    else
    {
      setPRODORDERID(PRODORDERID_AIM);

      result = insert();
    }
  }

  if (!result)
    Error = getLastError();

  if (Commit)
  {
    if (result)
      commit();
    else
      rollback();
  }

  return result;
}

bool CPP_ORDER::deletePP(const std::string& PRODORDERID, bool Commit, cCBS_ODBC_DBError &Error)
{
  cleanWhereStatement();

  addWhereClause(CPP_ORDER::PRODORDERID, PRODORDERID);

  bool result = deleteRows();

  if (!result)
    Error = getLastError();

  if (Commit)
  {
    if (result)
      commit();
    else
      rollback();
  }

  return result;
}

// switching data set content form PRODORDERID_1 to PRODORDERID_2 and backwards
bool CPP_ORDER::doOrderChange(const std::string& PRODORDERID_1, const std::string& PRODORDERID_2, bool Commit, cCBS_ODBC_DBError& Error)
{
  bool result = true;

  result = result && copyOrder(PRODORDERID_2,CSMC_DBData::Default,Commit,Error);
  result = result && copyOrder(PRODORDERID_1,PRODORDERID_2,Commit,Error);
  result = result && copyOrder(CSMC_DBData::Default,PRODORDERID_1,Commit,Error);

  result = result && deletePP(CSMC_DBData::Default,Commit,Error);


  if (!result)
    Error = getLastError();

  if (Commit)
  {
    if (result)
      commit();
    else
      rollback();
  }

  return result;
}

bool CPP_ORDER::doSteelGradeChange(const std::string& PRODORDERID, const std::string& STEELGRADECODE, const std::string& USERCODE, bool Commit, cCBS_ODBC_DBError& Error)
{
  bool result = exists(PRODORDERID);
  if (result) //ORDER exists -> update
  {
    if (!STEELGRADECODE.empty() && STEELGRADECODE != DEF::Inv_String)
      setSTEELGRADECODE(STEELGRADECODE);
    
    if (!USERCODE.empty() && USERCODE != DEF::Inv_String)
      setUSERCODE(USERCODE);

    setREVTIME(CDateTime());

    result = update();
  }
  else //ORDER does n't exists error
  {
    setLastError(std::string("UNKNOWN_ORDER"), 0, getActStatement());
  }

  if (!result)
    Error = getLastError();

  if (Commit)
  {
    if (result)
      commit();
    else
      rollback();
  }
  return result;
}

bool CPP_ORDER::exists(const std::string& PRODORDERID)
{
  cleanWhereStatement();

  m_Statement = "Select PRODORDERID from " + m_TableName;
  
  addWhereClause(CPP_ORDER::PRODORDERID, PRODORDERID);
   
  std::string sWhereStatement = getWhereStatement();
  //to avoid the exception like 'Select HEATID from PP_HEAT AND ROWNUM = 1 '
  if(sWhereStatement.length() > 0 ) 
  {
    // do not use ROWNUM in "addWhereClause", ROWNUM is not a table column and where statement will be used for deletion at "deleteRows"
    m_Statement += sWhereStatement + " AND ROWNUM = 1 ;";
  }
  else
  {
    return false;
  }

  return CSMC_DBData::select();
}

bool CPP_ORDER::updateInsertPP(const std::string &ORDER, const std::string &STEELGRADECODE, const std::string &USERCODE, bool Commit, cCBS_ODBC_DBError &Error)
{
  bool result = false;

  if (ORDER.empty() || ORDER == DEF::Inv_String)
    setLastError(std::string("INVALID_PRODUCTION_ORDER"), 0, std::string(ORDER));
  else
  {
    //Check if order exists
    result = exists(ORDER);

    if (result) //ORDER exists -> update
    {
      setSTEELGRADECODE(STEELGRADECODE);
      setUSERCODE(USERCODE);
      setREVTIME(CDateTime());

      result = update();
    }
    else //ORDER does n't exists ->insert
    {
      setPRODORDERID(ORDER);
      setSTEELGRADECODE(STEELGRADECODE);
      setON_REQUEST(0); //SARS
      setUSERCODE(USERCODE);
      setREVTIME(CDateTime());

      result = insert();
    }
  }

  if (!result)
    Error = getLastError();

  if (Commit)
  {
    if (result)
      commit();
    else
      rollback();
  }

  return result;
}

bool CPP_ORDER::updateOrderData(const std::string &ORDER, const std::string &STEELGRADECODE, const std::string & CCM_DIMENSION, long ORDERSEQNO, long ON_REQUEST, bool Commit, cCBS_ODBC_DBError &Error)
{
  bool result = false;

  if (ORDER.empty() || ORDER == DEF::Inv_String)
    setLastError(std::string("INVALID_PRODUCTION_ORDER"), 0, std::string(ORDER));
  else
  {
    //Check if order exists
    result = exists(ORDER);

    if (result) //ORDER exists -> update
    {
      setSTEELGRADECODE(STEELGRADECODE);
      setCCM_DIMENSION(CCM_DIMENSION);
      setON_REQUEST(ON_REQUEST);
      setREVTIME(CDateTime());

      result = update();
    }
  }

  if (!result)
    Error = getLastError();

  if (Commit)
  {
    if (result)
      commit();
    else
      rollback();
  }

  return result;
}


