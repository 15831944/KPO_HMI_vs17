//## Copyright (C) 2010 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CPDL_PHASE_STIRRING_RES.h"
#include "CHDL_PHASE_STIRRING_RES.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_PHASE_STIRRING_RES::HEATID("HEATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_PHASE_STIRRING_RES::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_PHASE_STIRRING_RES::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_PHASE_STIRRING_RES::STIRRPHASE("STIRRPHASE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_PHASE_STIRRING_RES::STIRRGASTYPE("STIRRGASTYPE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_PHASE_STIRRING_RES::STARTTIME("STARTTIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_PHASE_STIRRING_RES::DURUNTENDOFPHASE("DURUNTENDOFPHASE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_PHASE_STIRRING_RES::DATEUNTENDOFPHASE("DATEUNTENDOFPHASE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_PHASE_STIRRING_RES::STEPDUR("STEPDUR");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_PHASE_STIRRING_RES::ELEC_ENERGY("ELEC_ENERGY");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_PHASE_STIRRING_RES::REVTIME("REVTIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_PHASE_STIRRING_RES::CONS("CONS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_PHASE_STIRRING_RES::FLOW("FLOW");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_PHASE_STIRRING_RES::INTENSITY("INTENSITY");

//##DBClassCodeUtility ! DO NOT EDIT !
CHDL_PHASE_STIRRING_RES::CHDL_PHASE_STIRRING_RES(cCBS_StdConnection* Connection)
:CSMC_DBData("HDL_PHASE_STIRRING_RES",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHDL_PHASE_STIRRING_RES::CHDL_PHASE_STIRRING_RES(cCBS_Connection* Connection)
:CSMC_DBData("HDL_PHASE_STIRRING_RES",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHDL_PHASE_STIRRING_RES::CHDL_PHASE_STIRRING_RES()
:CSMC_DBData("HDL_PHASE_STIRRING_RES")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHDL_PHASE_STIRRING_RES::~CHDL_PHASE_STIRRING_RES()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDL_PHASE_STIRRING_RES::getHEATID(long Row)
{
  return getString(CHDL_PHASE_STIRRING_RES::HEATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_PHASE_STIRRING_RES::setHEATID(const std::string& value)
{
  setString(CHDL_PHASE_STIRRING_RES::HEATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDL_PHASE_STIRRING_RES::getTREATID(long Row)
{
  return getString(CHDL_PHASE_STIRRING_RES::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_PHASE_STIRRING_RES::setTREATID(const std::string& value)
{
  setString(CHDL_PHASE_STIRRING_RES::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDL_PHASE_STIRRING_RES::getPLANT(long Row)
{
  return getString(CHDL_PHASE_STIRRING_RES::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_PHASE_STIRRING_RES::setPLANT(const std::string& value)
{
  setString(CHDL_PHASE_STIRRING_RES::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDL_PHASE_STIRRING_RES::getSTIRRPHASE(long Row)
{
  return getString(CHDL_PHASE_STIRRING_RES::STIRRPHASE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_PHASE_STIRRING_RES::setSTIRRPHASE(const std::string& value)
{
  setString(CHDL_PHASE_STIRRING_RES::STIRRPHASE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDL_PHASE_STIRRING_RES::getSTIRRGASTYPE(long Row)
{
  return getString(CHDL_PHASE_STIRRING_RES::STIRRGASTYPE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_PHASE_STIRRING_RES::setSTIRRGASTYPE(const std::string& value)
{
  setString(CHDL_PHASE_STIRRING_RES::STIRRGASTYPE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDL_PHASE_STIRRING_RES::getSTARTTIME(long Row)
{
  return getDouble(CHDL_PHASE_STIRRING_RES::STARTTIME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_PHASE_STIRRING_RES::setSTARTTIME(double value)
{
  setDouble(CHDL_PHASE_STIRRING_RES::STARTTIME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDL_PHASE_STIRRING_RES::getDURUNTENDOFPHASE(long Row)
{
  return getDouble(CHDL_PHASE_STIRRING_RES::DURUNTENDOFPHASE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_PHASE_STIRRING_RES::setDURUNTENDOFPHASE(double value)
{
  setDouble(CHDL_PHASE_STIRRING_RES::DURUNTENDOFPHASE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CHDL_PHASE_STIRRING_RES::getDATEUNTENDOFPHASE(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHDL_PHASE_STIRRING_RES::DATEUNTENDOFPHASE, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_PHASE_STIRRING_RES::setDATEUNTENDOFPHASE(const CDateTime& value)
{
 setString(CHDL_PHASE_STIRRING_RES::DATEUNTENDOFPHASE, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDL_PHASE_STIRRING_RES::getSTEPDUR(long Row)
{
  return getDouble(CHDL_PHASE_STIRRING_RES::STEPDUR, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_PHASE_STIRRING_RES::setSTEPDUR(double value)
{
  setDouble(CHDL_PHASE_STIRRING_RES::STEPDUR, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDL_PHASE_STIRRING_RES::getELEC_ENERGY(long Row)
{
  return getDouble(CHDL_PHASE_STIRRING_RES::ELEC_ENERGY, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_PHASE_STIRRING_RES::setELEC_ENERGY(double value)
{
  setDouble(CHDL_PHASE_STIRRING_RES::ELEC_ENERGY, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CHDL_PHASE_STIRRING_RES::getREVTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHDL_PHASE_STIRRING_RES::REVTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_PHASE_STIRRING_RES::setREVTIME(const CDateTime& value)
{
 setString(CHDL_PHASE_STIRRING_RES::REVTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDL_PHASE_STIRRING_RES::getCONS(long Row)
{
  return getDouble(CHDL_PHASE_STIRRING_RES::CONS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_PHASE_STIRRING_RES::setCONS(double value)
{
  setDouble(CHDL_PHASE_STIRRING_RES::CONS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDL_PHASE_STIRRING_RES::getFLOW(long Row)
{
  return getDouble(CHDL_PHASE_STIRRING_RES::FLOW, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_PHASE_STIRRING_RES::setFLOW(double value)
{
  setDouble(CHDL_PHASE_STIRRING_RES::FLOW, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDL_PHASE_STIRRING_RES::getINTENSITY(long Row)
{
  return getLong(CHDL_PHASE_STIRRING_RES::INTENSITY, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_PHASE_STIRRING_RES::setINTENSITY(long value)
{
  setLong(CHDL_PHASE_STIRRING_RES::INTENSITY, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CHDL_PHASE_STIRRING_RES::select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const std::string& STIRRPHASE)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CHDL_PHASE_STIRRING_RES::HEATID,HEATID);
  addWhereClause(CHDL_PHASE_STIRRING_RES::TREATID,TREATID);
  addWhereClause(CHDL_PHASE_STIRRING_RES::PLANT,PLANT);
  addWhereClause(CHDL_PHASE_STIRRING_RES::STIRRPHASE,STIRRPHASE);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CHDL_PHASE_STIRRING_RES::copy(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, bool pCommit, cCBS_ODBC_DBError &pError)
{
  bool result = !exists(HEATID, TREATID, PLANT);
  //some data found -> delete them
  if (!result)
  {
    result = deleteRows();
    if (!result)
      setLastError(std::string("ERROR_DELETE_DATA"), 0, getActStatement());
  }

  // preparing setting for source table
  CPDL_PHASE_STIRRING_RES PDL_PHASE_STIRRING_RES(m_pCBS_StdConnection);
  PDL_PHASE_STIRRING_RES.addWhereClause(CPDL_PHASE_STIRRING_RES::HEATID,HEATID);
  PDL_PHASE_STIRRING_RES.addWhereClause(CPDL_PHASE_STIRRING_RES::TREATID,TREATID);
  PDL_PHASE_STIRRING_RES.addWhereClause(CPDL_PHASE_STIRRING_RES::PLANT,PLANT);

  result = result && copyByInsert(&PDL_PHASE_STIRRING_RES);

  if (!result)
    pError = getLastError();

  if(pCommit)
  {
    if (result)
      this->commit();
    else
      rollback();
  }

  return result;
}

bool CHDL_PHASE_STIRRING_RES::exists(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT)
{
  cleanWhereStatement();

  m_Statement = "Select HEATID from " + m_TableName;

  addWhereClause(CHDL_PHASE_STIRRING_RES::HEATID,HEATID);
  addWhereClause(CHDL_PHASE_STIRRING_RES::TREATID,TREATID);
  addWhereClause(CHDL_PHASE_STIRRING_RES::PLANT,PLANT);
   
  std::string sWhereStatement = getWhereStatement();
  //to avoid the exception like 'Select HEATID from PP_HEAT AND ROWNUM = 1 '
  if(sWhereStatement.length() > 0 ) 
  {
    // do not use ROWNUM in "addWhereClause", ROWNUM is not a table column and where statement will be used for deletion at "deleteRows"
    m_Statement += sWhereStatement + " AND ROWNUM = 1 ;";
  }
  else
  {
    return false;
  }

  return CSMC_DBData::select();
}


