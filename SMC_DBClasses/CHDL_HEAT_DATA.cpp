//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 

#include "cCBS_StdEventLogFrameController.h"

#include "CPDL_HEAT_DATA.h"
#include "CHDL_HEAT_DATA.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_HEAT_DATA::HEATID("HEATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_HEAT_DATA::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_HEAT_DATA::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_HEAT_DATA::CARNO("CARNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_HEAT_DATA::LADLE_ARRTIME("LADLE_ARRTIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_HEAT_DATA::LADLE_DEPARTTIME("LADLE_DEPARTTIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_HEAT_DATA::FIRST_POWER_ON("FIRST_POWER_ON");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_HEAT_DATA::LAST_POWER_OFF("LAST_POWER_OFF");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_HEAT_DATA::ELEC_CONS("ELEC_CONS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_HEAT_DATA::SPECEGY("SPECEGY");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_HEAT_DATA::POWER_ON_DUR("POWER_ON_DUR");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_HEAT_DATA::LASTTRAFOTAP("LASTTRAFOTAP");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_HEAT_DATA::STIRR_START("STIRR_START");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_HEAT_DATA::STIRR_END("STIRR_END");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_HEAT_DATA::STIRR_AR_DUR("STIRR_AR_DUR");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_HEAT_DATA::STIRR_N2_DUR("STIRR_N2_DUR");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_HEAT_DATA::STIRR_AR_CONS("STIRR_AR_CONS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_HEAT_DATA::STIRR_N2_CONS("STIRR_N2_CONS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_HEAT_DATA::STIRR_START_EMRGNCY("STIRR_START_EMRGNCY");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_HEAT_DATA::STIRR_END_EMRGNCY("STIRR_END_EMRGNCY");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_HEAT_DATA::STIRR_AR_CONS_EMRGNCY("STIRR_AR_CONS_EMRGNCY");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_HEAT_DATA::STIRR_N2_CONS_EMRGNCY("STIRR_N2_CONS_EMRGNCY");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_HEAT_DATA::STIRR_SPEC_AR("STIRR_SPEC_AR");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_HEAT_DATA::STIRR_SPEC_N2("STIRR_SPEC_N2");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_HEAT_DATA::SOFTSTIRR_DUR("SOFTSTIRR_DUR");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_HEAT_DATA::CLEANLINESS_START("CLEANLINESS_START");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_HEAT_DATA::CLEANLINESS_END("CLEANLINESS_END");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_HEAT_DATA::FURNACE_ROOFAGE("FURNACE_ROOFAGE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_HEAT_DATA::ADD_AL("ADD_AL");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_HEAT_DATA::SLAG_FORMER("SLAG_FORMER");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_HEAT_DATA::ALLOY_MAT("ALLOY_MAT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDL_HEAT_DATA::BIN_MATERIAL("BIN_MATERIAL");

//##DBClassCodeUtility ! DO NOT EDIT !
CHDL_HEAT_DATA::CHDL_HEAT_DATA(cCBS_StdConnection* Connection)
:CSMC_DBData("HDL_HEAT_DATA",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHDL_HEAT_DATA::CHDL_HEAT_DATA(cCBS_Connection* Connection)
:CSMC_DBData("HDL_HEAT_DATA",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHDL_HEAT_DATA::CHDL_HEAT_DATA()
:CSMC_DBData("HDL_HEAT_DATA")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHDL_HEAT_DATA::~CHDL_HEAT_DATA()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDL_HEAT_DATA::getHEATID(long Row)
{
  return getString(CHDL_HEAT_DATA::HEATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_HEAT_DATA::setHEATID(const std::string& value)
{
  setString(CHDL_HEAT_DATA::HEATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDL_HEAT_DATA::getTREATID(long Row)
{
  return getString(CHDL_HEAT_DATA::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_HEAT_DATA::setTREATID(const std::string& value)
{
  setString(CHDL_HEAT_DATA::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDL_HEAT_DATA::getPLANT(long Row)
{
  return getString(CHDL_HEAT_DATA::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_HEAT_DATA::setPLANT(const std::string& value)
{
  setString(CHDL_HEAT_DATA::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDL_HEAT_DATA::getCARNO(long Row)
{
  return getLong(CHDL_HEAT_DATA::CARNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_HEAT_DATA::setCARNO(long value)
{
  setLong(CHDL_HEAT_DATA::CARNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CHDL_HEAT_DATA::getLADLE_ARRTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHDL_HEAT_DATA::LADLE_ARRTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_HEAT_DATA::setLADLE_ARRTIME(const CDateTime& value)
{
 setString(CHDL_HEAT_DATA::LADLE_ARRTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CHDL_HEAT_DATA::getLADLE_DEPARTTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHDL_HEAT_DATA::LADLE_DEPARTTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_HEAT_DATA::setLADLE_DEPARTTIME(const CDateTime& value)
{
 setString(CHDL_HEAT_DATA::LADLE_DEPARTTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CHDL_HEAT_DATA::getFIRST_POWER_ON(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHDL_HEAT_DATA::FIRST_POWER_ON, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_HEAT_DATA::setFIRST_POWER_ON(const CDateTime& value)
{
 setString(CHDL_HEAT_DATA::FIRST_POWER_ON, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CHDL_HEAT_DATA::getLAST_POWER_OFF(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHDL_HEAT_DATA::LAST_POWER_OFF, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_HEAT_DATA::setLAST_POWER_OFF(const CDateTime& value)
{
 setString(CHDL_HEAT_DATA::LAST_POWER_OFF, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDL_HEAT_DATA::getELEC_CONS(long Row)
{
  return getDouble(CHDL_HEAT_DATA::ELEC_CONS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_HEAT_DATA::setELEC_CONS(double value)
{
  setDouble(CHDL_HEAT_DATA::ELEC_CONS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDL_HEAT_DATA::getSPECEGY(long Row)
{
  return getDouble(CHDL_HEAT_DATA::SPECEGY, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_HEAT_DATA::setSPECEGY(double value)
{
  setDouble(CHDL_HEAT_DATA::SPECEGY, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDL_HEAT_DATA::getPOWER_ON_DUR(long Row)
{
  return getDouble(CHDL_HEAT_DATA::POWER_ON_DUR, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_HEAT_DATA::setPOWER_ON_DUR(double value)
{
  setDouble(CHDL_HEAT_DATA::POWER_ON_DUR, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDL_HEAT_DATA::getLASTTRAFOTAP(long Row)
{
  return getLong(CHDL_HEAT_DATA::LASTTRAFOTAP, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_HEAT_DATA::setLASTTRAFOTAP(long value)
{
  setLong(CHDL_HEAT_DATA::LASTTRAFOTAP, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CHDL_HEAT_DATA::getSTIRR_START(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHDL_HEAT_DATA::STIRR_START, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_HEAT_DATA::setSTIRR_START(const CDateTime& value)
{
 setString(CHDL_HEAT_DATA::STIRR_START, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CHDL_HEAT_DATA::getSTIRR_END(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHDL_HEAT_DATA::STIRR_END, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_HEAT_DATA::setSTIRR_END(const CDateTime& value)
{
 setString(CHDL_HEAT_DATA::STIRR_END, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDL_HEAT_DATA::getSTIRR_AR_DUR(long Row)
{
  return getDouble(CHDL_HEAT_DATA::STIRR_AR_DUR, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_HEAT_DATA::setSTIRR_AR_DUR(double value)
{
  setDouble(CHDL_HEAT_DATA::STIRR_AR_DUR, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDL_HEAT_DATA::getSTIRR_N2_DUR(long Row)
{
  return getDouble(CHDL_HEAT_DATA::STIRR_N2_DUR, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_HEAT_DATA::setSTIRR_N2_DUR(double value)
{
  setDouble(CHDL_HEAT_DATA::STIRR_N2_DUR, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDL_HEAT_DATA::getSTIRR_AR_CONS(long Row)
{
  return getDouble(CHDL_HEAT_DATA::STIRR_AR_CONS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_HEAT_DATA::setSTIRR_AR_CONS(double value)
{
  setDouble(CHDL_HEAT_DATA::STIRR_AR_CONS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDL_HEAT_DATA::getSTIRR_N2_CONS(long Row)
{
  return getDouble(CHDL_HEAT_DATA::STIRR_N2_CONS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_HEAT_DATA::setSTIRR_N2_CONS(double value)
{
  setDouble(CHDL_HEAT_DATA::STIRR_N2_CONS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CHDL_HEAT_DATA::getSTIRR_START_EMRGNCY(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHDL_HEAT_DATA::STIRR_START_EMRGNCY, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_HEAT_DATA::setSTIRR_START_EMRGNCY(const CDateTime& value)
{
 setString(CHDL_HEAT_DATA::STIRR_START_EMRGNCY, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CHDL_HEAT_DATA::getSTIRR_END_EMRGNCY(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHDL_HEAT_DATA::STIRR_END_EMRGNCY, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_HEAT_DATA::setSTIRR_END_EMRGNCY(const CDateTime& value)
{
 setString(CHDL_HEAT_DATA::STIRR_END_EMRGNCY, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDL_HEAT_DATA::getSTIRR_AR_CONS_EMRGNCY(long Row)
{
  return getDouble(CHDL_HEAT_DATA::STIRR_AR_CONS_EMRGNCY, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_HEAT_DATA::setSTIRR_AR_CONS_EMRGNCY(double value)
{
  setDouble(CHDL_HEAT_DATA::STIRR_AR_CONS_EMRGNCY, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDL_HEAT_DATA::getSTIRR_N2_CONS_EMRGNCY(long Row)
{
  return getDouble(CHDL_HEAT_DATA::STIRR_N2_CONS_EMRGNCY, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_HEAT_DATA::setSTIRR_N2_CONS_EMRGNCY(double value)
{
  setDouble(CHDL_HEAT_DATA::STIRR_N2_CONS_EMRGNCY, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDL_HEAT_DATA::getSTIRR_SPEC_AR(long Row)
{
  return getDouble(CHDL_HEAT_DATA::STIRR_SPEC_AR, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_HEAT_DATA::setSTIRR_SPEC_AR(double value)
{
  setDouble(CHDL_HEAT_DATA::STIRR_SPEC_AR, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDL_HEAT_DATA::getSTIRR_SPEC_N2(long Row)
{
  return getDouble(CHDL_HEAT_DATA::STIRR_SPEC_N2, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_HEAT_DATA::setSTIRR_SPEC_N2(double value)
{
  setDouble(CHDL_HEAT_DATA::STIRR_SPEC_N2, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDL_HEAT_DATA::getSOFTSTIRR_DUR(long Row)
{
  return getDouble(CHDL_HEAT_DATA::SOFTSTIRR_DUR, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_HEAT_DATA::setSOFTSTIRR_DUR(double value)
{
  setDouble(CHDL_HEAT_DATA::SOFTSTIRR_DUR, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CHDL_HEAT_DATA::getCLEANLINESS_START(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHDL_HEAT_DATA::CLEANLINESS_START, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_HEAT_DATA::setCLEANLINESS_START(const CDateTime& value)
{
 setString(CHDL_HEAT_DATA::CLEANLINESS_START, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CHDL_HEAT_DATA::getCLEANLINESS_END(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CHDL_HEAT_DATA::CLEANLINESS_END, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_HEAT_DATA::setCLEANLINESS_END(const CDateTime& value)
{
 setString(CHDL_HEAT_DATA::CLEANLINESS_END, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CHDL_HEAT_DATA::getFURNACE_ROOFAGE(long Row)
{
  return getLong(CHDL_HEAT_DATA::FURNACE_ROOFAGE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_HEAT_DATA::setFURNACE_ROOFAGE(long value)
{
  setLong(CHDL_HEAT_DATA::FURNACE_ROOFAGE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDL_HEAT_DATA::getADD_AL(long Row)
{
  return getDouble(CHDL_HEAT_DATA::ADD_AL, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_HEAT_DATA::setADD_AL(double value)
{
  setDouble(CHDL_HEAT_DATA::ADD_AL, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDL_HEAT_DATA::getSLAG_FORMER(long Row)
{
  return getDouble(CHDL_HEAT_DATA::SLAG_FORMER, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_HEAT_DATA::setSLAG_FORMER(double value)
{
  setDouble(CHDL_HEAT_DATA::SLAG_FORMER, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDL_HEAT_DATA::getALLOY_MAT(long Row)
{
  return getDouble(CHDL_HEAT_DATA::ALLOY_MAT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_HEAT_DATA::setALLOY_MAT(double value)
{
  setDouble(CHDL_HEAT_DATA::ALLOY_MAT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDL_HEAT_DATA::getBIN_MATERIAL(long Row)
{
  return getDouble(CHDL_HEAT_DATA::BIN_MATERIAL, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDL_HEAT_DATA::setBIN_MATERIAL(double value)
{
  setDouble(CHDL_HEAT_DATA::BIN_MATERIAL, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CHDL_HEAT_DATA::select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CHDL_HEAT_DATA::HEATID,HEATID);
  addWhereClause(CHDL_HEAT_DATA::TREATID,TREATID);
  addWhereClause(CHDL_HEAT_DATA::PLANT,PLANT);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CHDL_HEAT_DATA::copy(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, bool Commit, cCBS_ODBC_DBError &Error)
{
	bool result = true;//!exists(HEATID, TREATID, PLANT);
	//some data found -> delete them
	if (exists(HEATID, TREATID, PLANT))
	{
    // preparing setting for source table
    CPDL_HEAT_DATA PDL_HEAT_DATA(m_pCBS_StdConnection);
    PDL_HEAT_DATA.addWhereClause(CPDL_HEAT_DATA::HEATID,HEATID);
    PDL_HEAT_DATA.addWhereClause(CPDL_HEAT_DATA::TREATID,TREATID);
    PDL_HEAT_DATA.addWhereClause(CPDL_HEAT_DATA::PLANT,PLANT);

    // preparing setting for aim table
    cleanWhereStatement();
    addWhereClause(CHDL_HEAT_DATA::HEATID,HEATID);
    addWhereClause(CHDL_HEAT_DATA::TREATID,TREATID);
    addWhereClause(CHDL_HEAT_DATA::PLANT,PLANT);

    result = result && copyByUpdate(&PDL_HEAT_DATA);

  }
	else
	{
    // preparing setting for source table
    CPDL_HEAT_DATA PDL_HEAT_DATA(m_pCBS_StdConnection);
    PDL_HEAT_DATA.addWhereClause(CPDL_HEAT_DATA::HEATID,HEATID);
    PDL_HEAT_DATA.addWhereClause(CPDL_HEAT_DATA::TREATID,TREATID);
    PDL_HEAT_DATA.addWhereClause(CPDL_HEAT_DATA::PLANT,PLANT);

    result = result && copyByInsert(&PDL_HEAT_DATA);
	}

	if (!result)
		Error = getLastError();

	if(Commit)
	{
		if (result)
			this->commit();
		else
			rollback();
	}

	return result;
}

bool CHDL_HEAT_DATA::exists(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT)
{
	cleanWhereStatement();

	m_Statement = "Select HEATID from " + m_TableName;

	addWhereClause(CHDL_HEAT_DATA::HEATID,HEATID);
	addWhereClause(CHDL_HEAT_DATA::TREATID,TREATID);
	addWhereClause(CHDL_HEAT_DATA::PLANT,PLANT);
   
  std::string sWhereStatement = getWhereStatement();
  //to avoid the exception like 'Select HEATID from PP_HEAT AND ROWNUM = 1 '
  if(sWhereStatement.length() > 0 ) 
  {
    // do not use ROWNUM in "addWhereClause", ROWNUM is not a table column and where statement will be used for deletion at "deleteRows"
    m_Statement += sWhereStatement + " AND ROWNUM = 1 ;";
  }
  else
  {
    return false;
  }

	return CSMC_DBData::select();
}


bool CHDL_HEAT_DATA::checkNULLValues(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT)
{
  bool result = true;

  std::string Message;

  //some data found -> delete them
  if ( select(HEATID, TREATID, PLANT) )
  {
    std::vector<std::string> ColumnList  = getColumnList();
    std::vector<std::string>::iterator it;

    for (it = ColumnList.begin() ; it != ColumnList.end() ; ++it)
    {
      std::string ColName = *it;

      if ( isNull(ColName, 1 ) )
      {
        Message = Message + " - " + ColName  ;
      }
    }
  }

  if ( !Message.empty() )
  {
  	cCBS_StdEventLogFrame *pEventLog = cCBS_StdEventLogFrameController::getInstance()->getpEventLog();
	  sEventLogMessage sMessage = cCBS_StdEventLogFrame::initMessage(__FILE__,__LINE__);
    pEventLog->EL_DBNullValueError(sMessage,m_TableName.c_str(), Message.c_str());
  }

  return result;
}
