//## Copyright (C) 2011 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 

#if defined (_MSC_VER) && (_MSC_VER >= 1000)
#pragma once
#endif
#ifndef _INC_CPD_HEAT_DATA_STIRR_INCLUDED
#define _INC_CPD_HEAT_DATA_STIRR_INCLUDED

#include "CSMC_DBData.h"

class CPD_HEAT_DATA_STIRR
: public CSMC_DBData

{

public:
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string HEATID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TREATID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PLANT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TREATMENTPOSITION;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string DEVICENAME;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string IS_BYPASS;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string STIRRGASTYPE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string STARTTIME;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string ENDTIME;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string CONS;

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPD_HEAT_DATA_STIRR(cCBS_StdConnection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPD_HEAT_DATA_STIRR(cCBS_Connection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPD_HEAT_DATA_STIRR();

  //##DBClassCodeUtility ! DO NOT EDIT !
  ~CPD_HEAT_DATA_STIRR();

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Internal heat identifier
  std::string getHEATID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setHEATID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Treatment identifier
  std::string getTREATID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTREATID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Plant identifier
  std::string getPLANT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPLANT(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Identification of treatment position to handle heats at Twin-LF (1-> car 1, 2-> car 2) and melting units with tapping area (1-> furnace, 2-> TapLadle)
  long getTREATMENTPOSITION(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTREATMENTPOSITION(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Device name, plug ore emergency lance
  std::string getDEVICENAME(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setDEVICENAME(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Flag for bypass stirring 0-> normal stirring, 1-> bypass stirring. During bypass stirring the consumption is not measured by device but estimated on the Level 1.
  long getIS_BYPASS(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setIS_BYPASS(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Values are e.g. N2, Ar
  std::string getSTIRRGASTYPE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSTIRRGASTYPE(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CDateTime getSTARTTIME(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSTARTTIME(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CDateTime getENDTIME(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setENDTIME(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Total consumption stirring
  double getCONS(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setCONS(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  bool select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long TREATMENTPOSITION, const std::string& DEVICENAME, long IS_BYPASS, const std::string& STIRRGASTYPE, const CDateTime& STARTTIME);

  //## ----------------------------------END-GENERATED-CODE--------------------- 

  //## ----------------------------------YOUR-CODE------------------------------ 

  bool selectActual(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long TREATMENTPOSITION, const std::string& DEVICENAME, long IS_BYPASS, const std::string& STIRRGASTYPE);

  bool selectOpenStirringPhase(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long TREATMENTPOSITION, const std::string& DEVICENAME, long IS_BYPASS, const std::string& STIRRGASTYPE);

  bool selectOrdered(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long TREATMENTPOSITION, const std::string& DEVICENAME, long IS_BYPASS, const std::string& STIRRGASTYPE);

  double getConsumption(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long TREATMENTPOSITION, const std::string& DEVICENAME, long IS_BYPASS, const std::string& STIRRGASTYPE);

  double getDuration(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long TREATMENTPOSITION, const std::string& DEVICENAME, long IS_BYPASS, const std::string& STIRRGASTYPE);

  double getStirrConsDataByHeat(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long TREATMENTPOSITION, const std::string& DEVICENAME, long IS_BYPASS, const std::string& STIRRGASTYPE);

  bool handleStirringEnd(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long TREATMENTPOSITION, const std::string& DEVICENAME, long IS_BYPASS, const std::string& STIRRGASTYPE, CDateTime ENDTIME, double CONS, bool Commit, cCBS_ODBC_DBError &Error);

  bool handleStirringStart(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long TREATMENTPOSITION, const std::string& DEVICENAME, long IS_BYPASS, const std::string& STIRRGASTYPE, CDateTime STARTTIME, bool Commit, cCBS_ODBC_DBError &Error);

};

#endif /* _INC_CPD_HEAT_DATA_STIRR_INCLUDED */
