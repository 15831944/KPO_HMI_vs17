//## Copyright (C) 2010 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 

#if defined (_MSC_VER) && (_MSC_VER >= 1000)
#pragma once
#endif
#ifndef _INC_CPD_HOT_METAL_ORDER_INCLUDED
#define _INC_CPD_HOT_METAL_ORDER_INCLUDED

#include "CSMC_DBData.h"

class CPD_HOT_METAL_ORDER
: public CSMC_DBData
{

public:
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PLANT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PRODORDERID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string HM_LADLE_IN_SEQ;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string HOTMETAL_COUNTER;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string WEIGHT_PLAN;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TEMP_PLAN;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string ORDERTIME;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string DISCHARGETIME;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string STATUSNO;

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPD_HOT_METAL_ORDER(cCBS_StdConnection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPD_HOT_METAL_ORDER(cCBS_Connection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CPD_HOT_METAL_ORDER();

  //##DBClassCodeUtility ! DO NOT EDIT !
  ~CPD_HOT_METAL_ORDER();

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Plant identifier
  std::string getPLANT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPLANT(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Production oder identification
  std::string getPRODORDERID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPRODORDERID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##HM ladle sequence. Default value = 1, if required at mulitple charging > 1
  long getHM_LADLE_IN_SEQ(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setHM_LADLE_IN_SEQ(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Unique counter
  long getHOTMETAL_COUNTER(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setHOTMETAL_COUNTER(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Planned/requested weight
  double getWEIGHT_PLAN(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setWEIGHT_PLAN(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Required HM temperature
  double getTEMP_PLAN(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTEMP_PLAN(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Time HM was ordered
  CDateTime getORDERTIME(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setORDERTIME(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Time HM was discharged in furnace
  CDateTime getDISCHARGETIME(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setDISCHARGETIME(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Number of the order status
  long getSTATUSNO(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSTATUSNO(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  bool select(const std::string& PLANT, const std::string& PRODORDERID, long HM_LADLE_IN_SEQ);

  //## ----------------------------------END-GENERATED-CODE--------------------- 

  //## ----------------------------------YOUR-CODE------------------------------ 

  bool selectByHotMetalCounter(long HOTMETAL_COUNTER);

  bool selectOrderedButNotCharged(const std::string& PLANT);

  bool selectOrderedBySeq(const std::string& PLANT, const std::string& PRODORDERID);

  bool deleteRow(const std::string& PLANT, const std::string& PRODORDERID, long HM_LADLE_IN_SEQ);

  bool doDischarged(const std::string& PLANT, const std::string& PRODORDERID, long HM_LADLE_IN_SEQ, bool Commit, cCBS_ODBC_DBError &Error);

  bool exists(const std::string& PLANT, const std::string& PRODORDERID, long CHARGE_ORDER);

  // beeing backwards compatible
  bool insertData(const std::string& PLANT, const std::string& PRODORDERID, long HM_LADLE_IN_SEQ, long HOTMETAL_COUNTER, bool Commit, cCBS_ODBC_DBError &Error);

  bool insertData(const std::string& PLANT, const std::string& PRODORDERID, long HM_LADLE_IN_SEQ, long HOTMETAL_COUNTER, long WEIGHT_PLAN, double TEMP_PLAN, const CDateTime& ORDERTIME, const CDateTime& DISCHARGETIME, bool Commit, cCBS_ODBC_DBError &Error);

  // set ordered time if its not set or insert new row if the row does not exist
  bool setOrderedTime(const std::string& PLANT, const std::string& PRODORDERID, long HM_LADLE_IN_SEQ, bool Commit, cCBS_ODBC_DBError &Error);

  bool updateData(const std::string& PLANT, const std::string &PRODORDERID, long CHARGE_ORDER, long WEIGHT_PLAN, double TEMP_PLAN, const CDateTime& ORDERTIME, bool Commit, cCBS_ODBC_DBError &Error);

  bool updateDischargeTime(const std::string& PLANT, const std::string& PRODORDERID, long HM_LADLE_IN_SEQ, const CDateTime& DISCHARGETIME, bool Commit, cCBS_ODBC_DBError &Error);

  bool updateHotMetalData(const std::string& PLANT, const std::string &PRODORDERID, long HM_LADLE_IN_SEQ, long HOTMETAL_COUNTER, bool Commit, cCBS_ODBC_DBError &Error);

  bool updateOrderTime(const std::string& PLANT, const std::string& PRODORDERID, long HM_LADLE_IN_SEQ, const CDateTime& ORDERTIME, bool Commit, cCBS_ODBC_DBError &Error);

  bool updatePlanData(const std::string& PLANT, const std::string &PRODORDERID, long HM_LADLE_IN_SEQ, long WEIGHT_PLAN, double TEMP_PLAN, bool Commit, cCBS_ODBC_DBError &Error);

};

#endif /* _INC_CPD_HOT_METAL_ORDER_INCLUDED */
