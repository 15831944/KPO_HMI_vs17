//## Copyright (C) 2010 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CPD_MAT_AVAIL.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_MAT_AVAIL::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_MAT_AVAIL::PLANTNO("PLANTNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_MAT_AVAIL::SOURCE("SOURCE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_MAT_AVAIL::LOCATIONNO("LOCATIONNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_MAT_AVAIL::MAT_CODE("MAT_CODE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_MAT_AVAIL::AVAILWGT("AVAILWGT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_MAT_AVAIL::MINWEIGHT("MINWEIGHT");

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_MAT_AVAIL::CPD_MAT_AVAIL(cCBS_StdConnection* Connection)
:CSMC_DBData("PD_MAT_AVAIL",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_MAT_AVAIL::CPD_MAT_AVAIL(cCBS_Connection* Connection)
:CSMC_DBData("PD_MAT_AVAIL",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_MAT_AVAIL::CPD_MAT_AVAIL()
:CSMC_DBData("PD_MAT_AVAIL")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_MAT_AVAIL::~CPD_MAT_AVAIL()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Plant identifier
std::string CPD_MAT_AVAIL::getPLANT(long Row)
{
  return getString(CPD_MAT_AVAIL::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_MAT_AVAIL::setPLANT(const std::string& value)
{
  setString(CPD_MAT_AVAIL::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Plant number
long CPD_MAT_AVAIL::getPLANTNO(long Row)
{
  return getLong(CPD_MAT_AVAIL::PLANTNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_MAT_AVAIL::setPLANTNO(long value)
{
  setLong(CPD_MAT_AVAIL::PLANTNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPD_MAT_AVAIL::getSOURCE(long Row)
{
  return getString(CPD_MAT_AVAIL::SOURCE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_MAT_AVAIL::setSOURCE(const std::string& value)
{
  setString(CPD_MAT_AVAIL::SOURCE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##LOCATION identifies the material location within the SOURCE:, bunker number if SOURCE = Bin,, strand number if SOURCE= Wire, etc.
long CPD_MAT_AVAIL::getLOCATIONNO(long Row)
{
  return getLong(CPD_MAT_AVAIL::LOCATIONNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_MAT_AVAIL::setLOCATIONNO(long value)
{
  setLong(CPD_MAT_AVAIL::LOCATIONNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Material code
std::string CPD_MAT_AVAIL::getMAT_CODE(long Row)
{
  return getString(CPD_MAT_AVAIL::MAT_CODE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_MAT_AVAIL::setMAT_CODE(const std::string& value)
{
  setString(CPD_MAT_AVAIL::MAT_CODE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Available material weight of each material code (per source and per location)
double CPD_MAT_AVAIL::getAVAILWGT(long Row)
{
  return getDouble(CPD_MAT_AVAIL::AVAILWGT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_MAT_AVAIL::setAVAILWGT(double value)
{
  setDouble(CPD_MAT_AVAIL::AVAILWGT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Minimum charge weight according to Level 1 Information. Iindicates the minimum chargeable weight due to physical restrictions of the bin/weighing system. See also MINWEIGHT in GT_MAT. The maximum of these weigths is to be used.
double CPD_MAT_AVAIL::getMINWEIGHT(long Row)
{
  return getDouble(CPD_MAT_AVAIL::MINWEIGHT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_MAT_AVAIL::setMINWEIGHT(double value)
{
  setDouble(CPD_MAT_AVAIL::MINWEIGHT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CPD_MAT_AVAIL::select(const std::string& PLANT, long PLANTNO, const std::string& SOURCE, long LOCATIONNO, const std::string& MAT_CODE)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPD_MAT_AVAIL::PLANT,PLANT);
  addWhereClause(CPD_MAT_AVAIL::PLANTNO,PLANTNO);
  addWhereClause(CPD_MAT_AVAIL::SOURCE,SOURCE);
  addWhereClause(CPD_MAT_AVAIL::LOCATIONNO,LOCATIONNO);
  addWhereClause(CPD_MAT_AVAIL::MAT_CODE,MAT_CODE);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CPD_MAT_AVAIL::selectAvailableLocation(const std::string& PLANT, long PLANTNO, const std::string& SOURCE, long LOCATIONNO, const std::string& MAT_CODE)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPD_MAT_AVAIL::PLANT,PLANT);
  addWhereClause(CPD_MAT_AVAIL::PLANTNO,PLANTNO);
  addWhereClause(CPD_MAT_AVAIL::SOURCE,SOURCE);
  addWhereClause(CPD_MAT_AVAIL::LOCATIONNO,LOCATIONNO);
  addWhereClause(CPD_MAT_AVAIL::MAT_CODE,MAT_CODE);

  addWhereClause(CPD_MAT_AVAIL::AVAILWGT + " > 0");

  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}


bool CPD_MAT_AVAIL::deleteRow(const std::string& PLANT, long PLANTNO, const std::string& SOURCE, long LOCATION_NO, const std::string& MAT_CODE)
{
  bool RetValue = false;
  try
  {
    cleanWhereStatement();

    addWhereClause(CPD_MAT_AVAIL::PLANT,PLANT);
    addWhereClause(CPD_MAT_AVAIL::PLANTNO, PLANTNO);
    addWhereClause(CPD_MAT_AVAIL::SOURCE, SOURCE);
    addWhereClause(CPD_MAT_AVAIL::LOCATIONNO,LOCATION_NO);
    addWhereClause(CPD_MAT_AVAIL::MAT_CODE,MAT_CODE);

    RetValue = CSMC_DBData::deleteRows();

  }
  catch(...)
  {
    rollback(); //something wrong, rollback transaction.
    RetValue = false;
  }

  return RetValue;
}

bool CPD_MAT_AVAIL::exists( const std::string& PLANT, long PLANTNO, const std::string& SOURCE, long LOCATION_NO, const std::string& MAT_CODE )
{
	cleanWhereStatement();

	m_Statement = "Select PLANT from " + m_TableName;

	addWhereClause(CPD_MAT_AVAIL::PLANT,PLANT);
	addWhereClause(CPD_MAT_AVAIL::PLANTNO,PLANTNO);
	addWhereClause(CPD_MAT_AVAIL::SOURCE,SOURCE);
	addWhereClause(CPD_MAT_AVAIL::LOCATIONNO,LOCATION_NO);
	addWhereClause(CPD_MAT_AVAIL::MAT_CODE,MAT_CODE);
   
  std::string sWhereStatement = getWhereStatement();
  //to avoid the exception like 'Select HEATID from PP_HEAT AND ROWNUM = 1 '
  if(sWhereStatement.length() > 0 ) 
  {
    // do not use ROWNUM in "addWhereClause", ROWNUM is not a table column and where statement will be used for deletion at "deleteRows"
    m_Statement += sWhereStatement + " AND ROWNUM = 1 ;";
  }
  else
  {
    return false;
  }

	return CSMC_DBData::select();
}

double CPD_MAT_AVAIL::getMinWeightOfMatCode(const std::string& PLANT, long PLANTNO, const std::string& SOURCE, long LOCATIONNO, const std::string& MAT_CODE)
{
  double RetValue = CSMC_DBData::unspecDouble;

  if ( selectAvailableLocation(PLANT, PLANTNO, SOURCE, LOCATIONNO, MAT_CODE) )
  {
    RetValue = getMINWEIGHT(1);
  }
  return RetValue;
}

bool CPD_MAT_AVAIL::updateOrInsertRow(const std::string& PLANT, long PLANTNO, const std::string& SOURCE, long LOCATION_NO, const std::string& MAT_CODE, double AVAILWGT)
{
  bool RetValue = false;

  if ( select(PLANT,PLANTNO,SOURCE,LOCATION_NO,MAT_CODE) )
  {
    setAVAILWGT(AVAILWGT);
    RetValue = update();    
  }
  else
  {
    setPLANT(PLANT);
    setPLANTNO(PLANTNO);
    setSOURCE(SOURCE);
    setLOCATIONNO(LOCATION_NO);
    setMAT_CODE(MAT_CODE);
    setAVAILWGT(AVAILWGT);
    RetValue = insert();
  }
  
  return RetValue;
}

bool CPD_MAT_AVAIL::updateOrInsertRowForMinWeight(const std::string& PLANT, long PLANTNO, const std::string& SOURCE, long LOCATION_NO, const std::string& MAT_CODE, double AVAILWGT, double MINWEIGHT)
{
  bool RetValue = false;

  // update or insert if material is avaiiable == AVAILWGT > 0 !
  if ( AVAILWGT > 0.0 )
  {
    if ( select(PLANT,PLANTNO,SOURCE,LOCATION_NO,MAT_CODE) )
    {
      setMINWEIGHT(MINWEIGHT);
      setAVAILWGT(AVAILWGT);
      RetValue = update();    
    }
    else
    {
      setPLANT(PLANT);
      setPLANTNO(PLANTNO);
      setSOURCE(SOURCE);
      setLOCATIONNO(LOCATION_NO);
      setMAT_CODE(MAT_CODE);

      setMINWEIGHT(MINWEIGHT);
      setAVAILWGT(AVAILWGT);

      RetValue = insert();
    }
  }
  // remove entry if material is not avaiiable == AVAILWGT == 0 !
  else
  {
    if ( select(PLANT,PLANTNO,SOURCE,LOCATION_NO,MAT_CODE) )
    {
      RetValue = deleteRow(PLANT, PLANTNO, SOURCE, LOCATION_NO, MAT_CODE);
    }
    else
    { // coming here, when new material is Location, but location is still unavailable (AVAILWGT == 0 )
      RetValue = true;
    }
  }

  return RetValue;
}


