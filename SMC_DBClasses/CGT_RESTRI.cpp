//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CGT_RESTRI.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_RESTRI::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_RESTRI::PLANTNO("PLANTNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_RESTRI::DESCR_PP("DESCR_PP");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_RESTRI::PRACNO("PRACNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_RESTRI::TREATMODENO("TREATMODENO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_RESTRI::LIQ_ADD_AMOUNT("LIQ_ADD_AMOUNT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_RESTRI::DESCR_E("DESCR_E");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_RESTRI::DESCR_C("DESCR_C");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_RESTRI::REVTIME("REVTIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_RESTRI::USERCODE("USERCODE");

//##DBClassCodeUtility ! DO NOT EDIT !
CGT_RESTRI::CGT_RESTRI(cCBS_StdConnection* Connection)
:CSMC_DBData("GT_RESTRI",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGT_RESTRI::CGT_RESTRI(cCBS_Connection* Connection)
:CSMC_DBData("GT_RESTRI",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGT_RESTRI::CGT_RESTRI()
:CSMC_DBData("GT_RESTRI")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGT_RESTRI::~CGT_RESTRI()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Plant identifier
std::string CGT_RESTRI::getPLANT(long Row)
{
  return getString(CGT_RESTRI::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_RESTRI::setPLANT(const std::string& value)
{
  setString(CGT_RESTRI::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Plant number
long CGT_RESTRI::getPLANTNO(long Row)
{
  return getLong(CGT_RESTRI::PLANTNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_RESTRI::setPLANTNO(long value)
{
  setLong(CGT_RESTRI::PLANTNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Name of practice pointer or practice group
std::string CGT_RESTRI::getDESCR_PP(long Row)
{
  return getString(CGT_RESTRI::DESCR_PP, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_RESTRI::setDESCR_PP(const std::string& value)
{
  setString(CGT_RESTRI::DESCR_PP, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Production Practice Number
long CGT_RESTRI::getPRACNO(long Row)
{
  return getLong(CGT_RESTRI::PRACNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_RESTRI::setPRACNO(long value)
{
  setLong(CGT_RESTRI::PRACNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Treatment mode number
long CGT_RESTRI::getTREATMODENO(long Row)
{
  return getLong(CGT_RESTRI::TREATMODENO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_RESTRI::setTREATMODENO(long value)
{
  setLong(CGT_RESTRI::TREATMODENO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Amount of  liquid addition relative to aim steel weight into EAF/Conarc., AOD, LF... = 0. Unit: % without precision
long CGT_RESTRI::getLIQ_ADD_AMOUNT(long Row)
{
  return getLong(CGT_RESTRI::LIQ_ADD_AMOUNT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_RESTRI::setLIQ_ADD_AMOUNT(long value)
{
  setLong(CGT_RESTRI::LIQ_ADD_AMOUNT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Practice restriction description
std::string CGT_RESTRI::getDESCR_E(long Row)
{
  return getString(CGT_RESTRI::DESCR_E, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_RESTRI::setDESCR_E(const std::string& value)
{
  setString(CGT_RESTRI::DESCR_E, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Practice restriction description Customer
std::string CGT_RESTRI::getDESCR_C(long Row)
{
  return getString(CGT_RESTRI::DESCR_C, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_RESTRI::setDESCR_C(const std::string& value)
{
  setString(CGT_RESTRI::DESCR_C, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Date and time of last revision
CDateTime CGT_RESTRI::getREVTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CGT_RESTRI::REVTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_RESTRI::setREVTIME(const CDateTime& value)
{
 setString(CGT_RESTRI::REVTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CGT_RESTRI::getUSERCODE(long Row)
{
  return getString(CGT_RESTRI::USERCODE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_RESTRI::setUSERCODE(const std::string& value)
{
  setString(CGT_RESTRI::USERCODE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CGT_RESTRI::select(const std::string& PLANT, long PLANTNO, const std::string& DESCR_PP, long PRACNO, long TREATMODENO, long LIQ_ADD_AMOUNT)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CGT_RESTRI::PLANT,PLANT);
  addWhereClause(CGT_RESTRI::PLANTNO,PLANTNO);
  addWhereClause(CGT_RESTRI::DESCR_PP,DESCR_PP);
  addWhereClause(CGT_RESTRI::PRACNO,PRACNO);
  addWhereClause(CGT_RESTRI::TREATMODENO,TREATMODENO);
  addWhereClause(CGT_RESTRI::LIQ_ADD_AMOUNT,LIQ_ADD_AMOUNT);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CGT_RESTRI::selectRestriction(const std::string& PLANT, long PLANTNO, const std::string& DESCR_PP, long PRACNO, long TREATMODENO, long LIQ_ADD_AMOUNT)
{
  bool RetValue = false;

  if ( TREATMODENO == CSMC_DBData::unspecLong )
  {
    TREATMODENO = 0;
  }
  if ( LIQ_ADD_AMOUNT == CSMC_DBData::unspecLong )
  {
    LIQ_ADD_AMOUNT = 0;
  }

  std::stringstream MaxLiqAddSql;
  MaxLiqAddSql << "LIQ_ADD_AMOUNT = (SELECT MAX(LIQ_ADD_AMOUNT) FROM " << m_TableName << "  WHERE "
               << "PLANT = '" << PLANT << "' AND "
               << "PLANTNO = " << PLANTNO << " AND "
               << "DESCR_PP = '" << DESCR_PP << "' AND "
               << "PRACNO = " << PRACNO << " AND "  //SARS
               << "TREATMODENO = " << TREATMODENO << " AND "
               << "LIQ_ADD_AMOUNT <= " << LIQ_ADD_AMOUNT << ")";

  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CGT_RESTRI::PLANT,PLANT);
  addWhereClause(CGT_RESTRI::PLANTNO,PLANTNO);
  addWhereClause(CGT_RESTRI::DESCR_PP,DESCR_PP);
  addWhereClause(CGT_RESTRI::PRACNO,PRACNO);
  addWhereClause(CGT_RESTRI::TREATMODENO,TREATMODENO);
  addWhereClause(MaxLiqAddSql.str());

  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

bool CGT_RESTRI::selectSpecialized(const std::string& PLANT, long PLANTNO, const std::string& DESCR_PP, long PRACNO, long TREATMODENO, long LIQ_ADD_AMOUNT)
{
  // function read first specialized restriction for plant no
  // if nothing is found than it reads general restriction definition

  bool RetValue = false;

  RetValue = selectRestriction(PLANT, PLANTNO, DESCR_PP, PRACNO, TREATMODENO, LIQ_ADD_AMOUNT);
  if ( !RetValue )
  {
    RetValue = selectRestriction(PLANT, 0, DESCR_PP, PRACNO, TREATMODENO, LIQ_ADD_AMOUNT);
  }

  return RetValue;
}


