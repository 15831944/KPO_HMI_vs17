//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CGTE_PP_FLAME_PROFILE.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTE_PP_FLAME_PROFILE::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTE_PP_FLAME_PROFILE::PLANTNO("PLANTNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTE_PP_FLAME_PROFILE::BURNERNAME("BURNERNAME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTE_PP_FLAME_PROFILE::FLAMEPROFILENO("FLAMEPROFILENO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTE_PP_FLAME_PROFILE::OXYGENFLOW("OXYGENFLOW");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTE_PP_FLAME_PROFILE::GASFLOW("GASFLOW");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTE_PP_FLAME_PROFILE::AIRFLOW("AIRFLOW");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTE_PP_FLAME_PROFILE::OXYGENGASRATIO("OXYGENGASRATIO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTE_PP_FLAME_PROFILE::CORRECTIONPOWER("CORRECTIONPOWER");

//##DBClassCodeUtility ! DO NOT EDIT !
CGTE_PP_FLAME_PROFILE::CGTE_PP_FLAME_PROFILE(cCBS_StdConnection* Connection)
:CSMC_DBData("GTE_PP_FLAME_PROFILE",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGTE_PP_FLAME_PROFILE::CGTE_PP_FLAME_PROFILE(cCBS_Connection* Connection)
:CSMC_DBData("GTE_PP_FLAME_PROFILE",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGTE_PP_FLAME_PROFILE::CGTE_PP_FLAME_PROFILE()
:CSMC_DBData("GTE_PP_FLAME_PROFILE")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGTE_PP_FLAME_PROFILE::~CGTE_PP_FLAME_PROFILE()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CGTE_PP_FLAME_PROFILE::getPLANT(long Row)
{
  return getString(CGTE_PP_FLAME_PROFILE::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTE_PP_FLAME_PROFILE::setPLANT(const std::string& value)
{
  setString(CGTE_PP_FLAME_PROFILE::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CGTE_PP_FLAME_PROFILE::getPLANTNO(long Row)
{
  return getLong(CGTE_PP_FLAME_PROFILE::PLANTNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTE_PP_FLAME_PROFILE::setPLANTNO(long value)
{
  setLong(CGTE_PP_FLAME_PROFILE::PLANTNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CGTE_PP_FLAME_PROFILE::getBURNERNAME(long Row)
{
  return getString(CGTE_PP_FLAME_PROFILE::BURNERNAME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTE_PP_FLAME_PROFILE::setBURNERNAME(const std::string& value)
{
  setString(CGTE_PP_FLAME_PROFILE::BURNERNAME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CGTE_PP_FLAME_PROFILE::getFLAMEPROFILENO(long Row)
{
  return getLong(CGTE_PP_FLAME_PROFILE::FLAMEPROFILENO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTE_PP_FLAME_PROFILE::setFLAMEPROFILENO(long value)
{
  setLong(CGTE_PP_FLAME_PROFILE::FLAMEPROFILENO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CGTE_PP_FLAME_PROFILE::getOXYGENFLOW(long Row)
{
  return getDouble(CGTE_PP_FLAME_PROFILE::OXYGENFLOW, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTE_PP_FLAME_PROFILE::setOXYGENFLOW(double value)
{
  setDouble(CGTE_PP_FLAME_PROFILE::OXYGENFLOW, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CGTE_PP_FLAME_PROFILE::getGASFLOW(long Row)
{
  return getDouble(CGTE_PP_FLAME_PROFILE::GASFLOW, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTE_PP_FLAME_PROFILE::setGASFLOW(double value)
{
  setDouble(CGTE_PP_FLAME_PROFILE::GASFLOW, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CGTE_PP_FLAME_PROFILE::getAIRFLOW(long Row)
{
  return getDouble(CGTE_PP_FLAME_PROFILE::AIRFLOW, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTE_PP_FLAME_PROFILE::setAIRFLOW(double value)
{
  setDouble(CGTE_PP_FLAME_PROFILE::AIRFLOW, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CGTE_PP_FLAME_PROFILE::getOXYGENGASRATIO(long Row)
{
  return getDouble(CGTE_PP_FLAME_PROFILE::OXYGENGASRATIO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTE_PP_FLAME_PROFILE::setOXYGENGASRATIO(double value)
{
  setDouble(CGTE_PP_FLAME_PROFILE::OXYGENGASRATIO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CGTE_PP_FLAME_PROFILE::getCORRECTIONPOWER(long Row)
{
  return getLong(CGTE_PP_FLAME_PROFILE::CORRECTIONPOWER, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTE_PP_FLAME_PROFILE::setCORRECTIONPOWER(long value)
{
  setLong(CGTE_PP_FLAME_PROFILE::CORRECTIONPOWER, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CGTE_PP_FLAME_PROFILE::select(const std::string& PLANT, long PLANTNO, const std::string& BURNERNAME, long FLAMEPROFILENO)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CGTE_PP_FLAME_PROFILE::PLANT,PLANT);
  addWhereClause(CGTE_PP_FLAME_PROFILE::PLANTNO,PLANTNO);
  addWhereClause(CGTE_PP_FLAME_PROFILE::BURNERNAME,BURNERNAME);
  addWhereClause(CGTE_PP_FLAME_PROFILE::FLAMEPROFILENO,FLAMEPROFILENO);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CGTE_PP_FLAME_PROFILE::selectbyFlowData(const std::string& PLANT, long PLANTNO, const std::string& BURNERNAME, double OXYGENFLOW,double GASFLOW)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CGTE_PP_FLAME_PROFILE::PLANT,PLANT);
  addWhereClause(CGTE_PP_FLAME_PROFILE::PLANTNO,PLANTNO);
  addWhereClause(CGTE_PP_FLAME_PROFILE::BURNERNAME,BURNERNAME);

  addWhereClause(CGTE_PP_FLAME_PROFILE::OXYGENFLOW,OXYGENFLOW);
  addWhereClause(CGTE_PP_FLAME_PROFILE::GASFLOW,GASFLOW);

  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}


