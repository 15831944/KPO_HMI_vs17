//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CGTL_PP_STIRR_SPEC.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTL_PP_STIRR_SPEC::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTL_PP_STIRR_SPEC::PLANTNO("PLANTNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTL_PP_STIRR_SPEC::PRACNO("PRACNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTL_PP_STIRR_SPEC::PRACPHASE("PRACPHASE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTL_PP_STIRR_SPEC::INTENSITY("INTENSITY");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTL_PP_STIRR_SPEC::STIRRGASTYPE("STIRRGASTYPE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTL_PP_STIRR_SPEC::DURATION("DURATION");

//##DBClassCodeUtility ! DO NOT EDIT !
CGTL_PP_STIRR_SPEC::CGTL_PP_STIRR_SPEC(cCBS_StdConnection* Connection)
:CSMC_DBData("GTL_PP_STIRR_SPEC",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGTL_PP_STIRR_SPEC::CGTL_PP_STIRR_SPEC(cCBS_Connection* Connection)
:CSMC_DBData("GTL_PP_STIRR_SPEC",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGTL_PP_STIRR_SPEC::CGTL_PP_STIRR_SPEC()
:CSMC_DBData("GTL_PP_STIRR_SPEC")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGTL_PP_STIRR_SPEC::~CGTL_PP_STIRR_SPEC()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CGTL_PP_STIRR_SPEC::getPLANT(long Row)
{
  return getString(CGTL_PP_STIRR_SPEC::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTL_PP_STIRR_SPEC::setPLANT(const std::string& value)
{
  setString(CGTL_PP_STIRR_SPEC::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CGTL_PP_STIRR_SPEC::getPLANTNO(long Row)
{
  return getLong(CGTL_PP_STIRR_SPEC::PLANTNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTL_PP_STIRR_SPEC::setPLANTNO(long value)
{
  setLong(CGTL_PP_STIRR_SPEC::PLANTNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CGTL_PP_STIRR_SPEC::getPRACNO(long Row)
{
  return getLong(CGTL_PP_STIRR_SPEC::PRACNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTL_PP_STIRR_SPEC::setPRACNO(long value)
{
  setLong(CGTL_PP_STIRR_SPEC::PRACNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CGTL_PP_STIRR_SPEC::getPRACPHASE(long Row)
{
  return getString(CGTL_PP_STIRR_SPEC::PRACPHASE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTL_PP_STIRR_SPEC::setPRACPHASE(const std::string& value)
{
  setString(CGTL_PP_STIRR_SPEC::PRACPHASE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CGTL_PP_STIRR_SPEC::getINTENSITY(long Row)
{
  return getLong(CGTL_PP_STIRR_SPEC::INTENSITY, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTL_PP_STIRR_SPEC::setINTENSITY(long value)
{
  setLong(CGTL_PP_STIRR_SPEC::INTENSITY, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CGTL_PP_STIRR_SPEC::getSTIRRGASTYPE(long Row)
{
  return getString(CGTL_PP_STIRR_SPEC::STIRRGASTYPE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTL_PP_STIRR_SPEC::setSTIRRGASTYPE(const std::string& value)
{
  setString(CGTL_PP_STIRR_SPEC::STIRRGASTYPE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CGTL_PP_STIRR_SPEC::getDURATION(long Row)
{
  return getLong(CGTL_PP_STIRR_SPEC::DURATION, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTL_PP_STIRR_SPEC::setDURATION(long value)
{
  setLong(CGTL_PP_STIRR_SPEC::DURATION, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CGTL_PP_STIRR_SPEC::select(const std::string& PLANT, long PLANTNO, long PRACNO, const std::string& PRACPHASE)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CGTL_PP_STIRR_SPEC::PLANT,PLANT);
  addWhereClause(CGTL_PP_STIRR_SPEC::PLANTNO,PLANTNO);
  addWhereClause(CGTL_PP_STIRR_SPEC::PRACNO,PRACNO);
  addWhereClause(CGTL_PP_STIRR_SPEC::PRACPHASE,PRACPHASE);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 


