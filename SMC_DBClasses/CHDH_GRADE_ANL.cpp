//## Copyright (C) 2013 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CHDH_GRADE_ANL.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_GRADE_ANL::HM_ID("HM_ID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_GRADE_ANL::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_GRADE_ANL::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_GRADE_ANL::STEELGRADECODE("STEELGRADECODE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_GRADE_ANL::AIMTYPE("AIMTYPE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_GRADE_ANL::ENAME("ENAME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CHDH_GRADE_ANL::ANL("ANL");

//##DBClassCodeUtility ! DO NOT EDIT !
CHDH_GRADE_ANL::CHDH_GRADE_ANL(cCBS_StdConnection* Connection)
:CSMC_DBData("HDH_GRADE_ANL",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHDH_GRADE_ANL::CHDH_GRADE_ANL(cCBS_Connection* Connection)
:CSMC_DBData("HDH_GRADE_ANL",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHDH_GRADE_ANL::CHDH_GRADE_ANL()
:CSMC_DBData("HDH_GRADE_ANL")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CHDH_GRADE_ANL::~CHDH_GRADE_ANL()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_GRADE_ANL::getHM_ID(long Row)
{
  return getString(CHDH_GRADE_ANL::HM_ID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_GRADE_ANL::setHM_ID(const std::string& value)
{
  setString(CHDH_GRADE_ANL::HM_ID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_GRADE_ANL::getTREATID(long Row)
{
  return getString(CHDH_GRADE_ANL::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_GRADE_ANL::setTREATID(const std::string& value)
{
  setString(CHDH_GRADE_ANL::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_GRADE_ANL::getPLANT(long Row)
{
  return getString(CHDH_GRADE_ANL::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_GRADE_ANL::setPLANT(const std::string& value)
{
  setString(CHDH_GRADE_ANL::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_GRADE_ANL::getSTEELGRADECODE(long Row)
{
  return getString(CHDH_GRADE_ANL::STEELGRADECODE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_GRADE_ANL::setSTEELGRADECODE(const std::string& value)
{
  setString(CHDH_GRADE_ANL::STEELGRADECODE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_GRADE_ANL::getAIMTYPE(long Row)
{
  return getString(CHDH_GRADE_ANL::AIMTYPE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_GRADE_ANL::setAIMTYPE(const std::string& value)
{
  setString(CHDH_GRADE_ANL::AIMTYPE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CHDH_GRADE_ANL::getENAME(long Row)
{
  return getString(CHDH_GRADE_ANL::ENAME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_GRADE_ANL::setENAME(const std::string& value)
{
  setString(CHDH_GRADE_ANL::ENAME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CHDH_GRADE_ANL::getANL(long Row)
{
  return getDouble(CHDH_GRADE_ANL::ANL, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CHDH_GRADE_ANL::setANL(double value)
{
  setDouble(CHDH_GRADE_ANL::ANL, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CHDH_GRADE_ANL::select(const std::string& HM_ID, const std::string& TREATID, const std::string& PLANT, const std::string& AIMTYPE, const std::string& ENAME)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CHDH_GRADE_ANL::HM_ID,HM_ID);
  addWhereClause(CHDH_GRADE_ANL::TREATID,TREATID);
  addWhereClause(CHDH_GRADE_ANL::PLANT,PLANT);
  addWhereClause(CHDH_GRADE_ANL::AIMTYPE,AIMTYPE);
  addWhereClause(CHDH_GRADE_ANL::ENAME,ENAME);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 
bool CHDH_GRADE_ANL::copyHDHGAnl(const string &pSteelGrade, const string& pHeatId, const string& pTreatId, const string& pPlant, bool pCommit)
{
	bool result=true;
	std::stringstream sql;
	//some data found -> delete them
	/*if (!result)
	{
		result = deleteRows();
		if (!result)
			setLastError(string("delete from HDH_GRADE_ANL faild"), 0, "delete from HDH_GRADE_ANL where " + getWhereStatement());
	}*/

	sql << "insert into HDH_GRADE_ANL (HM_ID, TREATID, PLANT, ENAME, AIMTYPE, ANL, STEELGRADECODE)"
		<< " (select '" << pHeatId << "', '" << pTreatId << "', PLANT, ENAME, AIMTYPE, ANL, STEELGRADECODE"
		<< " from GT_GRADE_ANL"
		<< "  where STEELGRADECODE = '" << pSteelGrade << "'"
		<< "    and PLANT = '" << pPlant << "')";

	result = result && executeSQL(sql.str());
	if (!result)
		//pError = getLastError();

	if(pCommit)
  {
		if (result)
			this->commit();
		else
			rollback();
  }

	return result;
}

