//## Copyright (C) 2010 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "iSMC_DataDefinitions_s.hh"

//#include "iSMC_DataProvider_s.hh"
#include "CIntfData.h"
#include "CGT_MAT_PURP.h"
#include "DEF_GCE_BURNER.h"
#include "DEF_GCE_BURNER_GASTYPE.h"
#include "DEF_GT_PURP.h"
#include "CPDE_ACTUAL_RES.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_ACTUAL_RES::HEATID("HEATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_ACTUAL_RES::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_ACTUAL_RES::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_ACTUAL_RES::REVTIME("REVTIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_ACTUAL_RES::UPDATENO("UPDATENO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_ACTUAL_RES::ELEC_CONS("ELEC_CONS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_ACTUAL_RES::DURSINCEHEATANNOUNCEMENT("DURSINCEHEATANNOUNCEMENT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_ACTUAL_RES::DURSINCESTARTOFFHEAT("DURSINCESTARTOFFHEAT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_ACTUAL_RES::STEELMASS("STEELMASS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_ACTUAL_RES::SLAGMASS("SLAGMASS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_ACTUAL_RES::TEMP("TEMP");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_ACTUAL_RES::REACTORTAP("REACTORTAP");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_ACTUAL_RES::VOLTTAP("VOLTTAP");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_ACTUAL_RES::IMPCURVE("IMPCURVE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_ACTUAL_RES::CURPHASE("CURPHASE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_ACTUAL_RES::CURELECSTEPNO("CURELECSTEPNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_ACTUAL_RES::REMELECENERGY("REMELECENERGY");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_ACTUAL_RES::COMPAVAIL_MAT("COMPAVAIL_MAT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_ACTUAL_RES::COMPAVAIL_BURNER("COMPAVAIL_BURNER");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_ACTUAL_RES::COMPAVAIL_PROCESS("COMPAVAIL_PROCESS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_ACTUAL_RES::COMPAVAIL_INJECTION("COMPAVAIL_INJECTION");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_ACTUAL_RES::COMPAVAIL_STIRRING("COMPAVAIL_STIRRING");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_ACTUAL_RES::ELECTRODEPULLREQ("ELECTRODEPULLREQ");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_ACTUAL_RES::ELECTRODELOCKREQ("ELECTRODELOCKREQ");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_ACTUAL_RES::GASTYPE_BURNER_1("GASTYPE_BURNER_1");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_ACTUAL_RES::GASTYPE_BURNER_2("GASTYPE_BURNER_2");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_ACTUAL_RES::GASFLOW_BURNER_1("GASFLOW_BURNER_1");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_ACTUAL_RES::GASFLOW_BURNER_2("GASFLOW_BURNER_2");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_ACTUAL_RES::O2FLOW_BURNER_1("O2FLOW_BURNER_1");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_ACTUAL_RES::O2FLOW_BURNER_2("O2FLOW_BURNER_2");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_ACTUAL_RES::INJ_MATFEED_4("INJ_MATFEED_4");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_ACTUAL_RES::INJ_MATFEED_3("INJ_MATFEED_3");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_ACTUAL_RES::INJ_MATFEED_2("INJ_MATFEED_2");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_ACTUAL_RES::INJ_MATFEED_1("INJ_MATFEED_1");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_ACTUAL_RES::ACTBASKETDATAREQ("ACTBASKETDATAREQ");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_ACTUAL_RES::O2FLOW_DOORLANCE("O2FLOW_DOORLANCE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_ACTUAL_RES::GASAMOUNTREM_LANCE("GASAMOUNTREM_LANCE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_ACTUAL_RES::INJ_MAT_CODE_DEV_1("INJ_MAT_CODE_DEV_1");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_ACTUAL_RES::INJ_MAT_CODE_DEV_2("INJ_MAT_CODE_DEV_2");

//##DBClassCodeUtility ! DO NOT EDIT !
CPDE_ACTUAL_RES::CPDE_ACTUAL_RES(cCBS_StdConnection* Connection)
:CSMC_DBData("PDE_ACTUAL_RES",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPDE_ACTUAL_RES::CPDE_ACTUAL_RES(cCBS_Connection* Connection)
:CSMC_DBData("PDE_ACTUAL_RES",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPDE_ACTUAL_RES::CPDE_ACTUAL_RES()
:CSMC_DBData("PDE_ACTUAL_RES")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPDE_ACTUAL_RES::~CPDE_ACTUAL_RES()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDE_ACTUAL_RES::getHEATID(long Row)
{
  return getString(CPDE_ACTUAL_RES::HEATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_ACTUAL_RES::setHEATID(const std::string& value)
{
  setString(CPDE_ACTUAL_RES::HEATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDE_ACTUAL_RES::getTREATID(long Row)
{
  return getString(CPDE_ACTUAL_RES::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_ACTUAL_RES::setTREATID(const std::string& value)
{
  setString(CPDE_ACTUAL_RES::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDE_ACTUAL_RES::getPLANT(long Row)
{
  return getString(CPDE_ACTUAL_RES::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_ACTUAL_RES::setPLANT(const std::string& value)
{
  setString(CPDE_ACTUAL_RES::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CPDE_ACTUAL_RES::getREVTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CPDE_ACTUAL_RES::REVTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_ACTUAL_RES::setREVTIME(const CDateTime& value)
{
 setString(CPDE_ACTUAL_RES::REVTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDE_ACTUAL_RES::getUPDATENO(long Row)
{
  return getLong(CPDE_ACTUAL_RES::UPDATENO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_ACTUAL_RES::setUPDATENO(long value)
{
  setLong(CPDE_ACTUAL_RES::UPDATENO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDE_ACTUAL_RES::getELEC_CONS(long Row)
{
  return getDouble(CPDE_ACTUAL_RES::ELEC_CONS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_ACTUAL_RES::setELEC_CONS(double value)
{
  setDouble(CPDE_ACTUAL_RES::ELEC_CONS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDE_ACTUAL_RES::getDURSINCEHEATANNOUNCEMENT(long Row)
{
  return getDouble(CPDE_ACTUAL_RES::DURSINCEHEATANNOUNCEMENT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_ACTUAL_RES::setDURSINCEHEATANNOUNCEMENT(double value)
{
  setDouble(CPDE_ACTUAL_RES::DURSINCEHEATANNOUNCEMENT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDE_ACTUAL_RES::getDURSINCESTARTOFFHEAT(long Row)
{
  return getDouble(CPDE_ACTUAL_RES::DURSINCESTARTOFFHEAT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_ACTUAL_RES::setDURSINCESTARTOFFHEAT(double value)
{
  setDouble(CPDE_ACTUAL_RES::DURSINCESTARTOFFHEAT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDE_ACTUAL_RES::getSTEELMASS(long Row)
{
  return getDouble(CPDE_ACTUAL_RES::STEELMASS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_ACTUAL_RES::setSTEELMASS(double value)
{
  setDouble(CPDE_ACTUAL_RES::STEELMASS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDE_ACTUAL_RES::getSLAGMASS(long Row)
{
  return getDouble(CPDE_ACTUAL_RES::SLAGMASS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_ACTUAL_RES::setSLAGMASS(double value)
{
  setDouble(CPDE_ACTUAL_RES::SLAGMASS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDE_ACTUAL_RES::getTEMP(long Row)
{
  return getDouble(CPDE_ACTUAL_RES::TEMP, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_ACTUAL_RES::setTEMP(double value)
{
  setDouble(CPDE_ACTUAL_RES::TEMP, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDE_ACTUAL_RES::getREACTORTAP(long Row)
{
  return getLong(CPDE_ACTUAL_RES::REACTORTAP, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_ACTUAL_RES::setREACTORTAP(long value)
{
  setLong(CPDE_ACTUAL_RES::REACTORTAP, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDE_ACTUAL_RES::getVOLTTAP(long Row)
{
  return getLong(CPDE_ACTUAL_RES::VOLTTAP, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_ACTUAL_RES::setVOLTTAP(long value)
{
  setLong(CPDE_ACTUAL_RES::VOLTTAP, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDE_ACTUAL_RES::getIMPCURVE(long Row)
{
  return getLong(CPDE_ACTUAL_RES::IMPCURVE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_ACTUAL_RES::setIMPCURVE(long value)
{
  setLong(CPDE_ACTUAL_RES::IMPCURVE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDE_ACTUAL_RES::getCURPHASE(long Row)
{
  return getString(CPDE_ACTUAL_RES::CURPHASE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_ACTUAL_RES::setCURPHASE(const std::string& value)
{
  setString(CPDE_ACTUAL_RES::CURPHASE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDE_ACTUAL_RES::getCURELECSTEPNO(long Row)
{
  return getLong(CPDE_ACTUAL_RES::CURELECSTEPNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_ACTUAL_RES::setCURELECSTEPNO(long value)
{
  setLong(CPDE_ACTUAL_RES::CURELECSTEPNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDE_ACTUAL_RES::getREMELECENERGY(long Row)
{
  return getDouble(CPDE_ACTUAL_RES::REMELECENERGY, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_ACTUAL_RES::setREMELECENERGY(double value)
{
  setDouble(CPDE_ACTUAL_RES::REMELECENERGY, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDE_ACTUAL_RES::getCOMPAVAIL_MAT(long Row)
{
  return getLong(CPDE_ACTUAL_RES::COMPAVAIL_MAT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_ACTUAL_RES::setCOMPAVAIL_MAT(long value)
{
  setLong(CPDE_ACTUAL_RES::COMPAVAIL_MAT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDE_ACTUAL_RES::getCOMPAVAIL_BURNER(long Row)
{
  return getLong(CPDE_ACTUAL_RES::COMPAVAIL_BURNER, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_ACTUAL_RES::setCOMPAVAIL_BURNER(long value)
{
  setLong(CPDE_ACTUAL_RES::COMPAVAIL_BURNER, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDE_ACTUAL_RES::getCOMPAVAIL_PROCESS(long Row)
{
  return getLong(CPDE_ACTUAL_RES::COMPAVAIL_PROCESS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_ACTUAL_RES::setCOMPAVAIL_PROCESS(long value)
{
  setLong(CPDE_ACTUAL_RES::COMPAVAIL_PROCESS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDE_ACTUAL_RES::getCOMPAVAIL_INJECTION(long Row)
{
  return getLong(CPDE_ACTUAL_RES::COMPAVAIL_INJECTION, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_ACTUAL_RES::setCOMPAVAIL_INJECTION(long value)
{
  setLong(CPDE_ACTUAL_RES::COMPAVAIL_INJECTION, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDE_ACTUAL_RES::getCOMPAVAIL_STIRRING(long Row)
{
  return getLong(CPDE_ACTUAL_RES::COMPAVAIL_STIRRING, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_ACTUAL_RES::setCOMPAVAIL_STIRRING(long value)
{
  setLong(CPDE_ACTUAL_RES::COMPAVAIL_STIRRING, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDE_ACTUAL_RES::getELECTRODEPULLREQ(long Row)
{
  return getLong(CPDE_ACTUAL_RES::ELECTRODEPULLREQ, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_ACTUAL_RES::setELECTRODEPULLREQ(long value)
{
  setLong(CPDE_ACTUAL_RES::ELECTRODEPULLREQ, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDE_ACTUAL_RES::getELECTRODELOCKREQ(long Row)
{
  return getLong(CPDE_ACTUAL_RES::ELECTRODELOCKREQ, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_ACTUAL_RES::setELECTRODELOCKREQ(long value)
{
  setLong(CPDE_ACTUAL_RES::ELECTRODELOCKREQ, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDE_ACTUAL_RES::getGASTYPE_BURNER_1(long Row)
{
  return getString(CPDE_ACTUAL_RES::GASTYPE_BURNER_1, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_ACTUAL_RES::setGASTYPE_BURNER_1(const std::string& value)
{
  setString(CPDE_ACTUAL_RES::GASTYPE_BURNER_1, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDE_ACTUAL_RES::getGASTYPE_BURNER_2(long Row)
{
  return getString(CPDE_ACTUAL_RES::GASTYPE_BURNER_2, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_ACTUAL_RES::setGASTYPE_BURNER_2(const std::string& value)
{
  setString(CPDE_ACTUAL_RES::GASTYPE_BURNER_2, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDE_ACTUAL_RES::getGASFLOW_BURNER_1(long Row)
{
  return getDouble(CPDE_ACTUAL_RES::GASFLOW_BURNER_1, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_ACTUAL_RES::setGASFLOW_BURNER_1(double value)
{
  setDouble(CPDE_ACTUAL_RES::GASFLOW_BURNER_1, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDE_ACTUAL_RES::getGASFLOW_BURNER_2(long Row)
{
  return getDouble(CPDE_ACTUAL_RES::GASFLOW_BURNER_2, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_ACTUAL_RES::setGASFLOW_BURNER_2(double value)
{
  setDouble(CPDE_ACTUAL_RES::GASFLOW_BURNER_2, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDE_ACTUAL_RES::getO2FLOW_BURNER_1(long Row)
{
  return getDouble(CPDE_ACTUAL_RES::O2FLOW_BURNER_1, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_ACTUAL_RES::setO2FLOW_BURNER_1(double value)
{
  setDouble(CPDE_ACTUAL_RES::O2FLOW_BURNER_1, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDE_ACTUAL_RES::getO2FLOW_BURNER_2(long Row)
{
  return getDouble(CPDE_ACTUAL_RES::O2FLOW_BURNER_2, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_ACTUAL_RES::setO2FLOW_BURNER_2(double value)
{
  setDouble(CPDE_ACTUAL_RES::O2FLOW_BURNER_2, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDE_ACTUAL_RES::getINJ_MATFEED_4(long Row)
{
  return getDouble(CPDE_ACTUAL_RES::INJ_MATFEED_4, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_ACTUAL_RES::setINJ_MATFEED_4(double value)
{
  setDouble(CPDE_ACTUAL_RES::INJ_MATFEED_4, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDE_ACTUAL_RES::getINJ_MATFEED_3(long Row)
{
  return getDouble(CPDE_ACTUAL_RES::INJ_MATFEED_3, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_ACTUAL_RES::setINJ_MATFEED_3(double value)
{
  setDouble(CPDE_ACTUAL_RES::INJ_MATFEED_3, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDE_ACTUAL_RES::getINJ_MATFEED_2(long Row)
{
  return getDouble(CPDE_ACTUAL_RES::INJ_MATFEED_2, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_ACTUAL_RES::setINJ_MATFEED_2(double value)
{
  setDouble(CPDE_ACTUAL_RES::INJ_MATFEED_2, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDE_ACTUAL_RES::getINJ_MATFEED_1(long Row)
{
  return getDouble(CPDE_ACTUAL_RES::INJ_MATFEED_1, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_ACTUAL_RES::setINJ_MATFEED_1(double value)
{
  setDouble(CPDE_ACTUAL_RES::INJ_MATFEED_1, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDE_ACTUAL_RES::getACTBASKETDATAREQ(long Row)
{
  return getLong(CPDE_ACTUAL_RES::ACTBASKETDATAREQ, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_ACTUAL_RES::setACTBASKETDATAREQ(long value)
{
  setLong(CPDE_ACTUAL_RES::ACTBASKETDATAREQ, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDE_ACTUAL_RES::getO2FLOW_DOORLANCE(long Row)
{
  return getDouble(CPDE_ACTUAL_RES::O2FLOW_DOORLANCE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_ACTUAL_RES::setO2FLOW_DOORLANCE(double value)
{
  setDouble(CPDE_ACTUAL_RES::O2FLOW_DOORLANCE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDE_ACTUAL_RES::getGASAMOUNTREM_LANCE(long Row)
{
  return getDouble(CPDE_ACTUAL_RES::GASAMOUNTREM_LANCE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_ACTUAL_RES::setGASAMOUNTREM_LANCE(double value)
{
  setDouble(CPDE_ACTUAL_RES::GASAMOUNTREM_LANCE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDE_ACTUAL_RES::getINJ_MAT_CODE_DEV_1(long Row)
{
  return getString(CPDE_ACTUAL_RES::INJ_MAT_CODE_DEV_1, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_ACTUAL_RES::setINJ_MAT_CODE_DEV_1(const std::string& value)
{
  setString(CPDE_ACTUAL_RES::INJ_MAT_CODE_DEV_1, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDE_ACTUAL_RES::getINJ_MAT_CODE_DEV_2(long Row)
{
  return getString(CPDE_ACTUAL_RES::INJ_MAT_CODE_DEV_2, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_ACTUAL_RES::setINJ_MAT_CODE_DEV_2(const std::string& value)
{
  setString(CPDE_ACTUAL_RES::INJ_MAT_CODE_DEV_2, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CPDE_ACTUAL_RES::select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const CDateTime& REVTIME)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPDE_ACTUAL_RES::HEATID,HEATID);
  addWhereClause(CPDE_ACTUAL_RES::TREATID,TREATID);
  addWhereClause(CPDE_ACTUAL_RES::PLANT,PLANT);
  addWhereClause(CPDE_ACTUAL_RES::REVTIME,REVTIME);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CPDE_ACTUAL_RES::writeResults(const std::string &heatID, const std::string &treatID, const std::string &plant, double DurSinceHeatAnnounce, double DurSinceHeatStart, long ElecPullReq, long ElecLockReq, const seqPredRes &sqcPredRes, const seqComputerModes &seqCompModes,long VoltTap,long ImpCurve,double ElecCons,const std::string &currentPhase, long currentPhaseNo, const seqGasLanceData &sqGasLanceData, const seqInjectLanceData  &sqInjectLanceData)
{
  bool      RetValue   = true;
  bool ThereIsActual = false;
  bool ThereIsActual1 = false;
  long      PredLength = CIntfData::getLength(sqcPredRes);
  CDateTime now;
  sPredRes  PredRes;
  sEAFProcessPredRes ProcesPredRes;
  sEAFBurnerPredRes  BurnerPredRes;
  sEAFInjectLance    InjectRes;
  sEAFMatFeedPredRes MatFeedPredRes;

  try
  {
    CGT_MAT_PURP      GT_MAT_PURP(m_pCBS_StdConnection);

    string matCode = DEF::Inv_String;
    if(GT_MAT_PURP.select(CSMC_DBData::unspecLong,CSMC_DBData::unspecString,DEF_GT_PURP::CarbonInjection))
    {
      matCode = GT_MAT_PURP.getMAT_CODE(1);
    }

    for (long i = 0 ; i < PredLength ; ++i)
    {
      CIntfData::getAt(PredRes,sqcPredRes,i);

      // Write only the results for the actual phase
      // NOTE: don't use std::string compare, we are dealing with char pointer from the CORBA interface
      if (0 != strcmp("Actual", PredRes.Phase))  continue;

      ThereIsActual = true;

      sGenRes GenRes;
      setHEATID(heatID);
      setTREATID(treatID);
      setPLANT(plant);
      setREVTIME(now);
      setUPDATENO(0); //not used
      
      GenRes = PredRes.GenRes;

      setSTEELMASS(GenRes.SteelWeight);
      setSLAGMASS(GenRes.SlagWeight);
      setTEMP(GenRes.Temp);
    }

    if (ThereIsActual == false) return false;

    setDURSINCEHEATANNOUNCEMENT(DurSinceHeatAnnounce);
    setDURSINCESTARTOFFHEAT(DurSinceHeatStart);
    setVOLTTAP(VoltTap);
    setIMPCURVE(ImpCurve);

    setCURPHASE(currentPhase);
    setCURELECSTEPNO(currentPhaseNo); //phase is used instead of step
    
    long CompModeLength = CIntfData::getLength(seqCompModes);
    for ( long i = 0 ; i < CompModeLength ; ++i)
    {
      sComputerMode ComputerMode;
      CIntfData::getAt(ComputerMode,seqCompModes,i);

      if (0 == strcmp(DEF_COMP_MODES::MatHandle,ComputerMode.Device))
      {
        setCOMPAVAIL_MAT(ComputerMode.Status);
      }
      else if (0 == strcmp(DEF_COMP_MODES::Burner, ComputerMode.Device)   || 
               0 == strcmp(DEF_COMP_MODES::GasLance, ComputerMode.Device) )
      {
        setCOMPAVAIL_BURNER(ComputerMode.Status);
      }
      //else if (0 == strcmp(DEF_COMP_MODES::Process, ComputerMode.Device))
      //{
      //  setCOMPAVAIL_PROCESS(ComputerMode.Status);
      //}
      else if (0 == strcmp(DEF_COMP_MODES::Injection, ComputerMode.Device))
      {
        setCOMPAVAIL_INJECTION(ComputerMode.Status);
      }
      else if (0 == strcmp(DEF_COMP_MODES::Stirring, ComputerMode.Device))
      {
        setCOMPAVAIL_STIRRING(ComputerMode.Status);
      }
    }

    setELECTRODEPULLREQ(ElecPullReq);
    setELECTRODELOCKREQ(ElecLockReq);


    long GasLength = CIntfData::getLength(sqGasLanceData);
    for ( long i = 0 ; i < GasLength ; ++i)
    {
      sGasLanceData  sData ;
      CIntfData::getAt(sData,sqGasLanceData,i);
      seqGasData seqGD;
      seqGD = sData.LanceData;
      
      std::string Device  = sData.Device;

      long seqGDLength = CIntfData::getLength(seqGD);
      for ( long k = 0 ; k < seqGDLength ; ++k)
      {
        sGasData sGData;
        CIntfData::getAt(sGData,seqGD,k);

        std::string GasType  = sGData.GasType;
        double      GasValue = sGData.GasValue;

        if(Device == DEF_GCE_BURNER::Burner_1)
        {
          setGASTYPE_BURNER_1(GasType);
          setGASFLOW_BURNER_1(GasValue);
        }
        else if(Device == DEF_GCE_BURNER::Burner_2)
        {
          setGASTYPE_BURNER_2(GasType);
          setGASFLOW_BURNER_2(GasValue);
        }
      }
    }

    setELEC_CONS(ElecCons); 
    setREMELECENERGY(0.0); //not used
    setACTBASKETDATAREQ(0); //not used
    setGASAMOUNTREM_LANCE(0.0); //not used
    setINJ_MAT_CODE_DEV_1(matCode); 
    //setINJ_MAT_CODE_DEV_2(); //not used because only one matcode is used
        
    long InjLength = CIntfData::getLength(sqInjectLanceData);
    for ( long i = 0 ; i < InjLength ; ++i)
    {
      sInjectLanceData sInj; 
      CIntfData::getAt(sInj,sqInjectLanceData,i);
       
      if(i == 0) setINJ_MATFEED_1(sInj.Value);
      if(i == 1) setINJ_MATFEED_2(sInj.Value);
      if(i == 2) setINJ_MATFEED_3(sInj.Value);
      if(i == 3) setINJ_MATFEED_4(sInj.Value);

    }

    RetValue = insert();

    if (RetValue) 
    {
      commit();
    }
    else
    {
      rollback();
    }
  }
  catch(...)
  {
    RetValue = false;
    rollback();
  }

  return RetValue;

}


