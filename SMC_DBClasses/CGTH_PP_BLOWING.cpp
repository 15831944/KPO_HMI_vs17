//## Copyright (C) 2013 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CGTH_PP_BLOWING.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTH_PP_BLOWING::PLANTNO("PLANTNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTH_PP_BLOWING::PRACNO("PRACNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTH_PP_BLOWING::REVTIME("REVTIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTH_PP_BLOWING::DESCR_E("DESCR_E");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTH_PP_BLOWING::DESCR_C("DESCR_C");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTH_PP_BLOWING::USERCODE("USERCODE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTH_PP_BLOWING::CO_LIME_STD_REL("CO_LIME_STD_REL");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTH_PP_BLOWING::CO_LIME_FIX_LIME("CO_LIME_FIX_LIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTH_PP_BLOWING::CO_LIME_FIX_CARBIDE("CO_LIME_FIX_CARBIDE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTH_PP_BLOWING::CO_LIME_MIN_LIME("CO_LIME_MIN_LIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTH_PP_BLOWING::CO_LIME_MIN_CARBIDE("CO_LIME_MIN_CARBIDE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTH_PP_BLOWING::CO_LIME_MIN_MG("CO_LIME_MIN_MG");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTH_PP_BLOWING::CO_CARB_STD_REL("CO_CARB_STD_REL");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTH_PP_BLOWING::CO_CARB_FIX_LIME("CO_CARB_FIX_LIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTH_PP_BLOWING::CO_CARB_FIX_CARBIDE("CO_CARB_FIX_CARBIDE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTH_PP_BLOWING::CO_CARB_MIN_LIME("CO_CARB_MIN_LIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTH_PP_BLOWING::CO_CARB_MIN_CARBIDE("CO_CARB_MIN_CARBIDE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTH_PP_BLOWING::CO_CARB_MIN_MG("CO_CARB_MIN_MG");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTH_PP_BLOWING::ECO_STD_REL("ECO_STD_REL");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTH_PP_BLOWING::ECO_FIX_LIME("ECO_FIX_LIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTH_PP_BLOWING::ECO_FIX_CARBIDE("ECO_FIX_CARBIDE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTH_PP_BLOWING::ECO_MIN_LIME("ECO_MIN_LIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTH_PP_BLOWING::ECO_MIN_CARBIDE("ECO_MIN_CARBIDE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTH_PP_BLOWING::ECO_MIN_MG("ECO_MIN_MG");

//##DBClassCodeUtility ! DO NOT EDIT !
CGTH_PP_BLOWING::CGTH_PP_BLOWING(cCBS_StdConnection* Connection)
:CSMC_DBData("GTH_PP_BLOWING",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGTH_PP_BLOWING::CGTH_PP_BLOWING(cCBS_Connection* Connection)
:CSMC_DBData("GTH_PP_BLOWING",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGTH_PP_BLOWING::CGTH_PP_BLOWING()
:CSMC_DBData("GTH_PP_BLOWING")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGTH_PP_BLOWING::~CGTH_PP_BLOWING()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CGTH_PP_BLOWING::getPLANTNO(long Row)
{
  return getLong(CGTH_PP_BLOWING::PLANTNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTH_PP_BLOWING::setPLANTNO(long value)
{
  setLong(CGTH_PP_BLOWING::PLANTNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CGTH_PP_BLOWING::getPRACNO(long Row)
{
  return getLong(CGTH_PP_BLOWING::PRACNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTH_PP_BLOWING::setPRACNO(long value)
{
  setLong(CGTH_PP_BLOWING::PRACNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CGTH_PP_BLOWING::getREVTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CGTH_PP_BLOWING::REVTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTH_PP_BLOWING::setREVTIME(const CDateTime& value)
{
 setString(CGTH_PP_BLOWING::REVTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CGTH_PP_BLOWING::getDESCR_E(long Row)
{
  return getString(CGTH_PP_BLOWING::DESCR_E, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTH_PP_BLOWING::setDESCR_E(const std::string& value)
{
  setString(CGTH_PP_BLOWING::DESCR_E, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CGTH_PP_BLOWING::getDESCR_C(long Row)
{
  return getString(CGTH_PP_BLOWING::DESCR_C, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTH_PP_BLOWING::setDESCR_C(const std::string& value)
{
  setString(CGTH_PP_BLOWING::DESCR_C, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CGTH_PP_BLOWING::getUSERCODE(long Row)
{
  return getString(CGTH_PP_BLOWING::USERCODE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTH_PP_BLOWING::setUSERCODE(const std::string& value)
{
  setString(CGTH_PP_BLOWING::USERCODE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CGTH_PP_BLOWING::getCO_LIME_STD_REL(long Row)
{
  return getDouble(CGTH_PP_BLOWING::CO_LIME_STD_REL, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTH_PP_BLOWING::setCO_LIME_STD_REL(double value)
{
  setDouble(CGTH_PP_BLOWING::CO_LIME_STD_REL, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CGTH_PP_BLOWING::getCO_LIME_FIX_LIME(long Row)
{
  return getDouble(CGTH_PP_BLOWING::CO_LIME_FIX_LIME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTH_PP_BLOWING::setCO_LIME_FIX_LIME(double value)
{
  setDouble(CGTH_PP_BLOWING::CO_LIME_FIX_LIME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CGTH_PP_BLOWING::getCO_LIME_FIX_CARBIDE(long Row)
{
  return getDouble(CGTH_PP_BLOWING::CO_LIME_FIX_CARBIDE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTH_PP_BLOWING::setCO_LIME_FIX_CARBIDE(double value)
{
  setDouble(CGTH_PP_BLOWING::CO_LIME_FIX_CARBIDE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CGTH_PP_BLOWING::getCO_LIME_MIN_LIME(long Row)
{
  return getDouble(CGTH_PP_BLOWING::CO_LIME_MIN_LIME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTH_PP_BLOWING::setCO_LIME_MIN_LIME(double value)
{
  setDouble(CGTH_PP_BLOWING::CO_LIME_MIN_LIME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CGTH_PP_BLOWING::getCO_LIME_MIN_CARBIDE(long Row)
{
  return getDouble(CGTH_PP_BLOWING::CO_LIME_MIN_CARBIDE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTH_PP_BLOWING::setCO_LIME_MIN_CARBIDE(double value)
{
  setDouble(CGTH_PP_BLOWING::CO_LIME_MIN_CARBIDE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CGTH_PP_BLOWING::getCO_LIME_MIN_MG(long Row)
{
  return getDouble(CGTH_PP_BLOWING::CO_LIME_MIN_MG, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTH_PP_BLOWING::setCO_LIME_MIN_MG(double value)
{
  setDouble(CGTH_PP_BLOWING::CO_LIME_MIN_MG, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CGTH_PP_BLOWING::getCO_CARB_STD_REL(long Row)
{
  return getDouble(CGTH_PP_BLOWING::CO_CARB_STD_REL, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTH_PP_BLOWING::setCO_CARB_STD_REL(double value)
{
  setDouble(CGTH_PP_BLOWING::CO_CARB_STD_REL, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CGTH_PP_BLOWING::getCO_CARB_FIX_LIME(long Row)
{
  return getDouble(CGTH_PP_BLOWING::CO_CARB_FIX_LIME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTH_PP_BLOWING::setCO_CARB_FIX_LIME(double value)
{
  setDouble(CGTH_PP_BLOWING::CO_CARB_FIX_LIME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CGTH_PP_BLOWING::getCO_CARB_FIX_CARBIDE(long Row)
{
  return getDouble(CGTH_PP_BLOWING::CO_CARB_FIX_CARBIDE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTH_PP_BLOWING::setCO_CARB_FIX_CARBIDE(double value)
{
  setDouble(CGTH_PP_BLOWING::CO_CARB_FIX_CARBIDE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CGTH_PP_BLOWING::getCO_CARB_MIN_LIME(long Row)
{
  return getDouble(CGTH_PP_BLOWING::CO_CARB_MIN_LIME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTH_PP_BLOWING::setCO_CARB_MIN_LIME(double value)
{
  setDouble(CGTH_PP_BLOWING::CO_CARB_MIN_LIME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CGTH_PP_BLOWING::getCO_CARB_MIN_CARBIDE(long Row)
{
  return getDouble(CGTH_PP_BLOWING::CO_CARB_MIN_CARBIDE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTH_PP_BLOWING::setCO_CARB_MIN_CARBIDE(double value)
{
  setDouble(CGTH_PP_BLOWING::CO_CARB_MIN_CARBIDE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CGTH_PP_BLOWING::getCO_CARB_MIN_MG(long Row)
{
  return getDouble(CGTH_PP_BLOWING::CO_CARB_MIN_MG, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTH_PP_BLOWING::setCO_CARB_MIN_MG(double value)
{
  setDouble(CGTH_PP_BLOWING::CO_CARB_MIN_MG, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CGTH_PP_BLOWING::getECO_STD_REL(long Row)
{
  return getDouble(CGTH_PP_BLOWING::ECO_STD_REL, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTH_PP_BLOWING::setECO_STD_REL(double value)
{
  setDouble(CGTH_PP_BLOWING::ECO_STD_REL, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CGTH_PP_BLOWING::getECO_FIX_LIME(long Row)
{
  return getDouble(CGTH_PP_BLOWING::ECO_FIX_LIME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTH_PP_BLOWING::setECO_FIX_LIME(double value)
{
  setDouble(CGTH_PP_BLOWING::ECO_FIX_LIME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CGTH_PP_BLOWING::getECO_FIX_CARBIDE(long Row)
{
  return getDouble(CGTH_PP_BLOWING::ECO_FIX_CARBIDE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTH_PP_BLOWING::setECO_FIX_CARBIDE(double value)
{
  setDouble(CGTH_PP_BLOWING::ECO_FIX_CARBIDE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CGTH_PP_BLOWING::getECO_MIN_LIME(long Row)
{
  return getDouble(CGTH_PP_BLOWING::ECO_MIN_LIME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTH_PP_BLOWING::setECO_MIN_LIME(double value)
{
  setDouble(CGTH_PP_BLOWING::ECO_MIN_LIME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CGTH_PP_BLOWING::getECO_MIN_CARBIDE(long Row)
{
  return getDouble(CGTH_PP_BLOWING::ECO_MIN_CARBIDE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTH_PP_BLOWING::setECO_MIN_CARBIDE(double value)
{
  setDouble(CGTH_PP_BLOWING::ECO_MIN_CARBIDE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CGTH_PP_BLOWING::getECO_MIN_MG(long Row)
{
  return getDouble(CGTH_PP_BLOWING::ECO_MIN_MG, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTH_PP_BLOWING::setECO_MIN_MG(double value)
{
  setDouble(CGTH_PP_BLOWING::ECO_MIN_MG, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CGTH_PP_BLOWING::select(long PLANTNO, long PRACNO)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CGTH_PP_BLOWING::PLANTNO,PLANTNO);
  addWhereClause(CGTH_PP_BLOWING::PRACNO,PRACNO);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 


