//## Copyright (C) 2010 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 

#if defined (_MSC_VER) && (_MSC_VER >= 1000)
#pragma once
#endif
#ifndef _INC_CHD_MAT_FEED_INCLUDED
#define _INC_CHD_MAT_FEED_INCLUDED

#include "CSMC_DBData.h"

class CHD_MAT_FEED
: public CSMC_DBData
{

public:
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string HEATID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TREATID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PLANT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PRACNO;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TREATMODENO;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PRACPHASE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string LIQ_ADD_AMOUNT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string MAT_CODE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string STEPNO;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string FEEDINGRATE_ABS;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string FEEDINGRATE_REL;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string FEEDINGRATE_INPUT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string DISPLAY_ORDER;

  //##DBClassCodeUtility ! DO NOT EDIT !
  CHD_MAT_FEED(cCBS_StdConnection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CHD_MAT_FEED(cCBS_Connection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CHD_MAT_FEED();

  //##DBClassCodeUtility ! DO NOT EDIT !
  ~CHD_MAT_FEED();

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Internal heat identifier
  std::string getHEATID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setHEATID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Treatment identifier
  std::string getTREATID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTREATID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Plant identifier
  std::string getPLANT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPLANT(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Production Practice Number
  long getPRACNO(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPRACNO(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Treatment mode number
  long getTREATMODENO(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTREATMODENO(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Phases are e.g. Basket, LiqAdd for EAF
  std::string getPRACPHASE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPRACPHASE(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Amount of  liquid addition relative to aim steel weight into EAF/Conarc., AOD, LF... = 0. Unit: % without precision
  long getLIQ_ADD_AMOUNT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setLIQ_ADD_AMOUNT(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Material code
  std::string getMAT_CODE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setMAT_CODE(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Energy step
  long getSTEPNO(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSTEPNO(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Absolute feeding rate in kg/min
  double getFEEDINGRATE_ABS(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setFEEDINGRATE_ABS(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Relative feeding rate in kg/minMW
  double getFEEDINGRATE_REL(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setFEEDINGRATE_REL(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Feeding rate can be entered absolute or relative. The corresponding other value is calculated., 1- Indicates that relative feeding rate was calculated from absolute, 2- Indicates that absolute feeding rate was calculated from relative
  long getFEEDINGRATE_INPUT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setFEEDINGRATE_INPUT(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Display order of feeding materials for HMI
  long getDISPLAY_ORDER(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setDISPLAY_ORDER(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  bool select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long PRACNO, long TREATMODENO, const std::string& PRACPHASE, long LIQ_ADD_AMOUNT, const std::string& MAT_CODE, long STEPNO);

  //## ----------------------------------END-GENERATED-CODE--------------------- 

  //## ----------------------------------YOUR-CODE------------------------------ 

  bool selectOrdered(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long PRACNO, long TREATMODENO, const std::string& PRACPHASE, long LIQ_ADD_AMOUNT, const std::string& MAT_CODE, long STEPNO);

  bool copy(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, long PLANTNO, long PRACNO, long TREATMODENO, long LIQ_ADD_AMOUNT, bool Commit, cCBS_ODBC_DBError &Error);

  bool exists(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT,long PRACNO);

};

#endif /* _INC_CHD_MAT_FEED_INCLUDED */
