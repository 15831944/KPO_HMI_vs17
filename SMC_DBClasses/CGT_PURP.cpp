//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CGC_PLANTGROUP.h"
#include "CGT_PURP.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_PURP::UNITGROUPNO("UNITGROUPNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_PURP::PURP_CODE("PURP_CODE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_PURP::PURP_TYPENO("PURP_TYPENO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_PURP::DESCRIPTION("DESCRIPTION");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGT_PURP::DESCR_C("DESCR_C");

//##DBClassCodeUtility ! DO NOT EDIT !
CGT_PURP::CGT_PURP(cCBS_StdConnection* Connection)
:CSMC_DBData("GT_PURP",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGT_PURP::CGT_PURP(cCBS_Connection* Connection)
:CSMC_DBData("GT_PURP",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGT_PURP::CGT_PURP()
:CSMC_DBData("GT_PURP")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGT_PURP::~CGT_PURP()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Unit group number, see GC_PLANT_GROUP
long CGT_PURP::getUNITGROUPNO(long Row)
{
  return getLong(CGT_PURP::UNITGROUPNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_PURP::setUNITGROUPNO(long value)
{
  setLong(CGT_PURP::UNITGROUPNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Purpose code (latest naming convention: Material class)
std::string CGT_PURP::getPURP_CODE(long Row)
{
  return getString(CGT_PURP::PURP_CODE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_PURP::setPURP_CODE(const std::string& value)
{
  setString(CGT_PURP::PURP_CODE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Type of purpose, e.g. Material Class, Recipe
long CGT_PURP::getPURP_TYPENO(long Row)
{
  return getLong(CGT_PURP::PURP_TYPENO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_PURP::setPURP_TYPENO(long value)
{
  setLong(CGT_PURP::PURP_TYPENO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Description
std::string CGT_PURP::getDESCRIPTION(long Row)
{
  return getString(CGT_PURP::DESCRIPTION, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_PURP::setDESCRIPTION(const std::string& value)
{
  setString(CGT_PURP::DESCRIPTION, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Description Customer
std::string CGT_PURP::getDESCR_C(long Row)
{
  return getString(CGT_PURP::DESCR_C, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGT_PURP::setDESCR_C(const std::string& value)
{
  setString(CGT_PURP::DESCR_C, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CGT_PURP::select(long UNITGROUPNO, const std::string& PURP_CODE)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CGT_PURP::UNITGROUPNO,UNITGROUPNO);
  addWhereClause(CGT_PURP::PURP_CODE,PURP_CODE);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CGT_PURP::selectByPlant(const std::string& PLANT, long PLANTNO, const std::string& PURP_CODE)
{
	cleanWhereStatement();
	
	m_Statement = "Select * from " + m_TableName;
	
	addWhereClause(CGT_PURP::PURP_CODE,PURP_CODE);

  // find unitgroup numbers 
  std::vector<long> UnitGroupList = getUnitGroupList(PLANT,PLANTNO);

  // building where clause  like ( UNITGROUPNO IN ( 0, 10 , 11 ) )
  addWhereClause(CGT_PURP::UNITGROUPNO,UnitGroupList,"IN");
	
  m_Statement += getWhereStatement() + ";";

	return CSMC_DBData::select();
}

bool CGT_PURP::deletePurpose(const std::string& PLANT, long PLANTNO, const std::string& PURP_CODE)
{
  long UNITGROUPNO = getUnitProupNoByPlant(PLANT, PLANTNO);

  return deletePurpose(UNITGROUPNO, PURP_CODE);
}

bool CGT_PURP::deletePurpose(long UNITGROUPNO, const std::string& PURP_CODE)
{
	cleanWhereStatement();

  addWhereClause(CGT_PURP::UNITGROUPNO,UNITGROUPNO);
  addWhereClause(CGT_PURP::PURP_CODE,PURP_CODE);

  return CSMC_DBData::deleteRows();
}

std::vector<long> CGT_PURP::getUnitGroupList(const std::string& Plant,long PlantNo)
{
  CGC_PLANTGROUP GC_PLANTGROUP(m_pCBS_StdConnection);

  return GC_PLANTGROUP.getUnitGroupList(Plant,PlantNo);
}

long CGT_PURP::getUnitProupNoByPlant(const std::string& PLANT, long PLANTNO)
{
  long UNITGROUPNO = CSMC_DBData::unspecLong;

  std::vector<long> UnitGroupList = getUnitGroupList(PLANT, PLANTNO);
  std::vector<long>::iterator it  = UnitGroupList.begin();

  // we use the highest UNITGROUPNO as first entry in container
  if ( it != UnitGroupList.end() )
  {
    UNITGROUPNO = (*it);
  }
  
  return UNITGROUPNO;
}

bool CGT_PURP::updateOrInsertPurpose(const std::string& PLANT, long PLANTNO, const std::string& PURP_CODE, long PURP_TYPENO, const std::string& DESCRIPTION, const std::string& DESCR_C, bool Commit, cCBS_ODBC_DBError &Error )
{
  long UNITGROUPNO = getUnitProupNoByPlant(PLANT, PLANTNO);

  return updateOrInsertPurpose(UNITGROUPNO, PURP_CODE, PURP_TYPENO, DESCRIPTION, DESCR_C, Commit, Error );
}

bool CGT_PURP::updateOrInsertPurpose(long UNITGROUPNO, const std::string& PURP_CODE, long PURP_TYPENO, const std::string& DESCRIPTION, const std::string& DESCR_C, bool Commit, cCBS_ODBC_DBError &Error )
{
  bool RetValue = false;

  setPURP_TYPENO(PURP_TYPENO);

  setDESCRIPTION(DESCRIPTION);

  setDESCR_C(DESCR_C);

  if ( select(UNITGROUPNO, PURP_CODE) )
  {
    RetValue = update();
  }
  else
  {
    setUNITGROUPNO(UNITGROUPNO);
    setPURP_CODE(PURP_CODE);

    RetValue = insert();
  }

	if (!RetValue)
		Error = getLastError();

	if (Commit)
	{
		if (RetValue)
			commit();
		else
			rollback();
	}


  return RetValue;
}


