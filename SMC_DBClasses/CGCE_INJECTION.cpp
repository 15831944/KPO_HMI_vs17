//## Copyright (C) 2010 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "cCBS_StdEventLogFrameController.h"
#include "CGCE_INJECTION.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGCE_INJECTION::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGCE_INJECTION::PLANTNO("PLANTNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGCE_INJECTION::DEVICENAME("DEVICENAME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGCE_INJECTION::DEVICEDESCR("DEVICEDESCR");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGCE_INJECTION::L1_DEVICENO("L1_DEVICENO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGCE_INJECTION::INJTYPE("INJTYPE");

//##DBClassCodeUtility ! DO NOT EDIT !
CGCE_INJECTION::CGCE_INJECTION(cCBS_StdConnection* Connection)
:CSMC_DBData("GCE_INJECTION",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGCE_INJECTION::CGCE_INJECTION(cCBS_Connection* Connection)
:CSMC_DBData("GCE_INJECTION",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGCE_INJECTION::CGCE_INJECTION()
:CSMC_DBData("GCE_INJECTION")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGCE_INJECTION::~CGCE_INJECTION()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CGCE_INJECTION::getPLANT(long Row)
{
  return getString(CGCE_INJECTION::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGCE_INJECTION::setPLANT(const std::string& value)
{
  setString(CGCE_INJECTION::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CGCE_INJECTION::getPLANTNO(long Row)
{
  return getLong(CGCE_INJECTION::PLANTNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGCE_INJECTION::setPLANTNO(long value)
{
  setLong(CGCE_INJECTION::PLANTNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CGCE_INJECTION::getDEVICENAME(long Row)
{
  return getString(CGCE_INJECTION::DEVICENAME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGCE_INJECTION::setDEVICENAME(const std::string& value)
{
  setString(CGCE_INJECTION::DEVICENAME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CGCE_INJECTION::getDEVICEDESCR(long Row)
{
  return getString(CGCE_INJECTION::DEVICEDESCR, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGCE_INJECTION::setDEVICEDESCR(const std::string& value)
{
  setString(CGCE_INJECTION::DEVICEDESCR, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CGCE_INJECTION::getL1_DEVICENO(long Row)
{
  return getLong(CGCE_INJECTION::L1_DEVICENO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGCE_INJECTION::setL1_DEVICENO(long value)
{
  setLong(CGCE_INJECTION::L1_DEVICENO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CGCE_INJECTION::getINJTYPE(long Row)
{
  return getString(CGCE_INJECTION::INJTYPE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGCE_INJECTION::setINJTYPE(const std::string& value)
{
  setString(CGCE_INJECTION::INJTYPE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CGCE_INJECTION::select(const std::string& PLANT, long PLANTNO, const std::string& DEVICENAME)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CGCE_INJECTION::PLANT,PLANT);
  addWhereClause(CGCE_INJECTION::PLANTNO,PLANTNO);
  addWhereClause(CGCE_INJECTION::DEVICENAME,DEVICENAME);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CGCE_INJECTION::selectByL1InjectorNo(const std::string& PLANT, long PLANTNO, long L1_DEVICENO, const std::string& INJTYPE)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CGCE_INJECTION::PLANT,PLANT);
  addWhereClause(CGCE_INJECTION::PLANTNO,PLANTNO);
  addWhereClause(CGCE_INJECTION::L1_DEVICENO,L1_DEVICENO);
  addWhereClause(CGCE_INJECTION::INJTYPE,INJTYPE);

  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

std::string CGCE_INJECTION::getDeviceNameByL1InjectorNo(const std::string& PLANT, long PLANTNO, long L1_DEVICENO, const std::string& INJTYPE)
{
  std::string DeviceName = CSMC_DBData::unspecString;

  if ( selectByL1InjectorNo(PLANT, PLANTNO, L1_DEVICENO, INJTYPE) )
  {
    DeviceName  = getDEVICENAME(1);
  }

  if ( DeviceName == CSMC_DBData::unspecString )
  {
    std::stringstream Message;
    Message << "Cannot detect DeviceName for injection type " << INJTYPE ;

		cCBS_StdEventLogFrame *pEventLog = cCBS_StdEventLogFrameController::getInstance()->getpEventLog();
		sEventLogMessage sMessage = cCBS_StdEventLogFrame::initMessage(__FILE__,__LINE__);
    pEventLog->EL_DBReadError(sMessage,"", m_TableName.c_str(), Message.str().c_str());
  }



  return DeviceName;
}

std::map < std::string, long > &  CGCE_INJECTION::getDeviceNameList(const std::string& PLANT,long PlantNo, const std::string& INJTYPE)
{
  static std::map<std::string, long> DeviceNameList;

  this->select(PLANT,PlantNo, CSMC_DBData::unspecString );
  long lRowsGot = this->getLastRow();

  std::string DeviceName;
  long L1DeviceNo = 0;
  for (long i = 1; i <= lRowsGot; i++)
  {
    DeviceName = getDEVICENAME(i);
    L1DeviceNo = getL1_DEVICENO(i);
    DeviceNameList.insert(std::pair <std::string,long>(DeviceName, L1DeviceNo));
  }
  return DeviceNameList;
}

std::map < std::string, std::string > &  CGCE_INJECTION::getInjTypeList(const std::string& PLANT, long PLANTNO)
{
  static std::map<std::string, std::string> InjTypeList;

  select(PLANT, PLANTNO, CSMC_DBData::unspecString );

  for (long i = 1; i <= getLastRow(); i++)
  {
    std::string DeviceName = getDEVICENAME(i);
    std::string InjType    = getINJTYPE(i);

    InjTypeList.insert(std::pair <std::string,std::string>(DeviceName, InjType));
  }

  return InjTypeList;
}

long CGCE_INJECTION::getL1DeviceNo(const std::string& PLANT,long PLANTNO, const std::string& DEVICENAME)
{
  long L1DeviceNo = CSMC_DBData::unspecLong;

  if ( select (PLANT, PLANTNO, DEVICENAME) )
  {
    L1DeviceNo = getL1_DEVICENO(1);
  }

  if ( L1DeviceNo == CSMC_DBData::unspecLong )
  {
    std::stringstream Message;
    Message << "Cannot detect L1DeviceNo for Device " << DEVICENAME ;

		cCBS_StdEventLogFrame *pEventLog = cCBS_StdEventLogFrameController::getInstance()->getpEventLog();
		sEventLogMessage sMessage = cCBS_StdEventLogFrame::initMessage(__FILE__,__LINE__);
    pEventLog->EL_DBReadError(sMessage,"", m_TableName.c_str(), Message.str().c_str());
  }


  return L1DeviceNo;
}

std::map < long, std::string> & CGCE_INJECTION::getL1DeviceNoList(const std::string& PLANT,long PlantNo, const std::string& INJTYPE)
{
  static std::map<long, std::string > DeviceNoList;

  this->select(PLANT,PlantNo, CSMC_DBData::unspecString );
  long lRowsGot = this->getLastRow();

  std::string DeviceName;
  long L1DeviceNo = -1;

  for (long i = 1; i <= lRowsGot; i++)
  {
    DeviceName  = getDEVICENAME(i);
    L1DeviceNo = getL1_DEVICENO(i);
    DeviceNoList.insert(std::pair <long, std::string >( L1DeviceNo, DeviceName ) );
  }
  return DeviceNoList;
}


