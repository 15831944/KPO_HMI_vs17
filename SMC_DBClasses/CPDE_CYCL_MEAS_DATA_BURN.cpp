//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CPDE_CYCL_MEAS_DATA_BURN.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA_BURN::HEATID("HEATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA_BURN::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA_BURN::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA_BURN::REVTIME("REVTIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA_BURN::BURNERNAME("BURNERNAME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA_BURN::DURSINCEHEATANNOUNCE("DURSINCEHEATANNOUNCE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA_BURN::DURSINCESTARTOFHEAT("DURSINCESTARTOFHEAT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA_BURN::ELEC_CONS("ELEC_CONS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA_BURN::STATUS("STATUS");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA_BURN::O2_AVAIL("O2_AVAIL");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA_BURN::GAS_AVAIL("GAS_AVAIL");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA_BURN::O2_AMOUNT("O2_AMOUNT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA_BURN::GAS_AMOUNT("GAS_AMOUNT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA_BURN::O2_FLOW("O2_FLOW");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDE_CYCL_MEAS_DATA_BURN::GAS_FLOW("GAS_FLOW");

//##DBClassCodeUtility ! DO NOT EDIT !
CPDE_CYCL_MEAS_DATA_BURN::CPDE_CYCL_MEAS_DATA_BURN(cCBS_StdConnection* Connection)
:CSMC_DBData("PDE_CYCL_MEAS_DATA_BURN",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPDE_CYCL_MEAS_DATA_BURN::CPDE_CYCL_MEAS_DATA_BURN(cCBS_Connection* Connection)
:CSMC_DBData("PDE_CYCL_MEAS_DATA_BURN",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPDE_CYCL_MEAS_DATA_BURN::CPDE_CYCL_MEAS_DATA_BURN()
:CSMC_DBData("PDE_CYCL_MEAS_DATA_BURN")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPDE_CYCL_MEAS_DATA_BURN::~CPDE_CYCL_MEAS_DATA_BURN()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDE_CYCL_MEAS_DATA_BURN::getHEATID(long Row)
{
  return getString(CPDE_CYCL_MEAS_DATA_BURN::HEATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA_BURN::setHEATID(const std::string& value)
{
  setString(CPDE_CYCL_MEAS_DATA_BURN::HEATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDE_CYCL_MEAS_DATA_BURN::getTREATID(long Row)
{
  return getString(CPDE_CYCL_MEAS_DATA_BURN::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA_BURN::setTREATID(const std::string& value)
{
  setString(CPDE_CYCL_MEAS_DATA_BURN::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDE_CYCL_MEAS_DATA_BURN::getPLANT(long Row)
{
  return getString(CPDE_CYCL_MEAS_DATA_BURN::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA_BURN::setPLANT(const std::string& value)
{
  setString(CPDE_CYCL_MEAS_DATA_BURN::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CPDE_CYCL_MEAS_DATA_BURN::getREVTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CPDE_CYCL_MEAS_DATA_BURN::REVTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA_BURN::setREVTIME(const CDateTime& value)
{
 setString(CPDE_CYCL_MEAS_DATA_BURN::REVTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDE_CYCL_MEAS_DATA_BURN::getBURNERNAME(long Row)
{
  return getString(CPDE_CYCL_MEAS_DATA_BURN::BURNERNAME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA_BURN::setBURNERNAME(const std::string& value)
{
  setString(CPDE_CYCL_MEAS_DATA_BURN::BURNERNAME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDE_CYCL_MEAS_DATA_BURN::getDURSINCEHEATANNOUNCE(long Row)
{
  return getDouble(CPDE_CYCL_MEAS_DATA_BURN::DURSINCEHEATANNOUNCE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA_BURN::setDURSINCEHEATANNOUNCE(double value)
{
  setDouble(CPDE_CYCL_MEAS_DATA_BURN::DURSINCEHEATANNOUNCE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDE_CYCL_MEAS_DATA_BURN::getDURSINCESTARTOFHEAT(long Row)
{
  return getDouble(CPDE_CYCL_MEAS_DATA_BURN::DURSINCESTARTOFHEAT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA_BURN::setDURSINCESTARTOFHEAT(double value)
{
  setDouble(CPDE_CYCL_MEAS_DATA_BURN::DURSINCESTARTOFHEAT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDE_CYCL_MEAS_DATA_BURN::getELEC_CONS(long Row)
{
  return getDouble(CPDE_CYCL_MEAS_DATA_BURN::ELEC_CONS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA_BURN::setELEC_CONS(double value)
{
  setDouble(CPDE_CYCL_MEAS_DATA_BURN::ELEC_CONS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDE_CYCL_MEAS_DATA_BURN::getSTATUS(long Row)
{
  return getLong(CPDE_CYCL_MEAS_DATA_BURN::STATUS, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA_BURN::setSTATUS(long value)
{
  setLong(CPDE_CYCL_MEAS_DATA_BURN::STATUS, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDE_CYCL_MEAS_DATA_BURN::getO2_AVAIL(long Row)
{
  return getLong(CPDE_CYCL_MEAS_DATA_BURN::O2_AVAIL, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA_BURN::setO2_AVAIL(long value)
{
  setLong(CPDE_CYCL_MEAS_DATA_BURN::O2_AVAIL, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDE_CYCL_MEAS_DATA_BURN::getGAS_AVAIL(long Row)
{
  return getLong(CPDE_CYCL_MEAS_DATA_BURN::GAS_AVAIL, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA_BURN::setGAS_AVAIL(long value)
{
  setLong(CPDE_CYCL_MEAS_DATA_BURN::GAS_AVAIL, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDE_CYCL_MEAS_DATA_BURN::getO2_AMOUNT(long Row)
{
  return getDouble(CPDE_CYCL_MEAS_DATA_BURN::O2_AMOUNT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA_BURN::setO2_AMOUNT(double value)
{
  setDouble(CPDE_CYCL_MEAS_DATA_BURN::O2_AMOUNT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDE_CYCL_MEAS_DATA_BURN::getGAS_AMOUNT(long Row)
{
  return getDouble(CPDE_CYCL_MEAS_DATA_BURN::GAS_AMOUNT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA_BURN::setGAS_AMOUNT(double value)
{
  setDouble(CPDE_CYCL_MEAS_DATA_BURN::GAS_AMOUNT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDE_CYCL_MEAS_DATA_BURN::getO2_FLOW(long Row)
{
  return getDouble(CPDE_CYCL_MEAS_DATA_BURN::O2_FLOW, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA_BURN::setO2_FLOW(double value)
{
  setDouble(CPDE_CYCL_MEAS_DATA_BURN::O2_FLOW, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDE_CYCL_MEAS_DATA_BURN::getGAS_FLOW(long Row)
{
  return getDouble(CPDE_CYCL_MEAS_DATA_BURN::GAS_FLOW, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDE_CYCL_MEAS_DATA_BURN::setGAS_FLOW(double value)
{
  setDouble(CPDE_CYCL_MEAS_DATA_BURN::GAS_FLOW, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CPDE_CYCL_MEAS_DATA_BURN::select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const CDateTime& REVTIME, const std::string& BURNERNAME)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPDE_CYCL_MEAS_DATA_BURN::HEATID,HEATID);
  addWhereClause(CPDE_CYCL_MEAS_DATA_BURN::TREATID,TREATID);
  addWhereClause(CPDE_CYCL_MEAS_DATA_BURN::PLANT,PLANT);
  addWhereClause(CPDE_CYCL_MEAS_DATA_BURN::REVTIME,REVTIME);
  addWhereClause(CPDE_CYCL_MEAS_DATA_BURN::BURNERNAME,BURNERNAME);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CPDE_CYCL_MEAS_DATA_BURN::selectMaxRevTimeData(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPDE_CYCL_MEAS_DATA_BURN::HEATID,HEATID);
  addWhereClause(CPDE_CYCL_MEAS_DATA_BURN::TREATID,TREATID);
  addWhereClause(CPDE_CYCL_MEAS_DATA_BURN::PLANT,PLANT);

  m_Statement += getWhereStatement() + " and REVTIME=(select Max(REVTIME) from ";
  m_Statement += m_TableName + "  where HeatID ='";
  m_Statement += HEATID + "' and TREATID = '";
  m_Statement += TREATID+"' and PLANT = '";
  m_Statement += PLANT+"');";

  return CSMC_DBData::select();
}


