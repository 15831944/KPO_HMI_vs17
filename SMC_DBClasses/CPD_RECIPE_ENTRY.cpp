//## Copyright (C) 2010 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CIntfData.h"
#include "cCBS_StdEventLogFrameController.h"

//#include "iSMC_DataDefinitions_s.hh"
#include "CGT_MAT_PURP.h"
#include "DEF_GC_RECIPE_SOURCE.h"
#include "DEF_GC_RECIPE_STATUS.h"
#include "DEF_GT_PURP.h"
#include "DEF_GC_CHARGE_DEST.h"
#include "CPD_RECIPE.h"
#include "CPD_RECIPE_ENTRY.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_RECIPE_ENTRY::HEATID("HEATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_RECIPE_ENTRY::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_RECIPE_ENTRY::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_RECIPE_ENTRY::RECIPENAME("RECIPENAME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_RECIPE_ENTRY::RECIPENO("RECIPENO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_RECIPE_ENTRY::SOURCE("SOURCE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_RECIPE_ENTRY::BATCHSTATUSNO("BATCHSTATUSNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_RECIPE_ENTRY::MAT_CODE("MAT_CODE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_RECIPE_ENTRY::MATWEIGHT("MATWEIGHT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_RECIPE_ENTRY::CHARGINGPRIO("CHARGINGPRIO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPD_RECIPE_ENTRY::MATFEEDSPEED("MATFEEDSPEED");

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_RECIPE_ENTRY::CPD_RECIPE_ENTRY(cCBS_StdConnection* Connection)
:CSMC_DBData("PD_RECIPE_ENTRY",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_RECIPE_ENTRY::CPD_RECIPE_ENTRY(cCBS_Connection* Connection)
:CSMC_DBData("PD_RECIPE_ENTRY",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_RECIPE_ENTRY::CPD_RECIPE_ENTRY()
:CSMC_DBData("PD_RECIPE_ENTRY")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPD_RECIPE_ENTRY::~CPD_RECIPE_ENTRY()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Internal heat identifier
std::string CPD_RECIPE_ENTRY::getHEATID(long Row)
{
  return getString(CPD_RECIPE_ENTRY::HEATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_RECIPE_ENTRY::setHEATID(const std::string& value)
{
  setString(CPD_RECIPE_ENTRY::HEATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Treatment identifier
std::string CPD_RECIPE_ENTRY::getTREATID(long Row)
{
  return getString(CPD_RECIPE_ENTRY::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_RECIPE_ENTRY::setTREATID(const std::string& value)
{
  setString(CPD_RECIPE_ENTRY::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Plant identifier
std::string CPD_RECIPE_ENTRY::getPLANT(long Row)
{
  return getString(CPD_RECIPE_ENTRY::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_RECIPE_ENTRY::setPLANT(const std::string& value)
{
  setString(CPD_RECIPE_ENTRY::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPD_RECIPE_ENTRY::getRECIPENAME(long Row)
{
  return getString(CPD_RECIPE_ENTRY::RECIPENAME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_RECIPE_ENTRY::setRECIPENAME(const std::string& value)
{
  setString(CPD_RECIPE_ENTRY::RECIPENAME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPD_RECIPE_ENTRY::getRECIPENO(long Row)
{
  return getLong(CPD_RECIPE_ENTRY::RECIPENO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_RECIPE_ENTRY::setRECIPENO(long value)
{
  setLong(CPD_RECIPE_ENTRY::RECIPENO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Valid Sources of a Recipe. SOURCE = ALL means all SOURCES for the recipe
std::string CPD_RECIPE_ENTRY::getSOURCE(long Row)
{
  return getString(CPD_RECIPE_ENTRY::SOURCE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_RECIPE_ENTRY::setSOURCE(const std::string& value)
{
  setString(CPD_RECIPE_ENTRY::SOURCE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Batch Status number (Number in the L1/L2 Telgramm in the, Material handling report
long CPD_RECIPE_ENTRY::getBATCHSTATUSNO(long Row)
{
  return getLong(CPD_RECIPE_ENTRY::BATCHSTATUSNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_RECIPE_ENTRY::setBATCHSTATUSNO(long value)
{
  setLong(CPD_RECIPE_ENTRY::BATCHSTATUSNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Material code
std::string CPD_RECIPE_ENTRY::getMAT_CODE(long Row)
{
  return getString(CPD_RECIPE_ENTRY::MAT_CODE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_RECIPE_ENTRY::setMAT_CODE(const std::string& value)
{
  setString(CPD_RECIPE_ENTRY::MAT_CODE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Material weight in kg.
double CPD_RECIPE_ENTRY::getMATWEIGHT(long Row)
{
  return getDouble(CPD_RECIPE_ENTRY::MATWEIGHT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_RECIPE_ENTRY::setMATWEIGHT(double value)
{
  setDouble(CPD_RECIPE_ENTRY::MATWEIGHT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Charging Priority (Defined in Material data)
long CPD_RECIPE_ENTRY::getCHARGINGPRIO(long Row)
{
  return getLong(CPD_RECIPE_ENTRY::CHARGINGPRIO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_RECIPE_ENTRY::setCHARGINGPRIO(long value)
{
  setLong(CPD_RECIPE_ENTRY::CHARGINGPRIO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
//##Batch Material feed speed., BATCHMATFEEDSPEED=, TOTALBATCHWEIGHT/, Discharged Time Discharge Start Time, Only filled for Status 10!!!
double CPD_RECIPE_ENTRY::getMATFEEDSPEED(long Row)
{
  return getDouble(CPD_RECIPE_ENTRY::MATFEEDSPEED, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPD_RECIPE_ENTRY::setMATFEEDSPEED(double value)
{
  setDouble(CPD_RECIPE_ENTRY::MATFEEDSPEED, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CPD_RECIPE_ENTRY::select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const std::string& RECIPENAME, long RECIPENO, const std::string& SOURCE, long BATCHSTATUSNO, const std::string& MAT_CODE)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPD_RECIPE_ENTRY::HEATID,HEATID);
  addWhereClause(CPD_RECIPE_ENTRY::TREATID,TREATID);
  addWhereClause(CPD_RECIPE_ENTRY::PLANT,PLANT);
  addWhereClause(CPD_RECIPE_ENTRY::RECIPENAME,RECIPENAME);
  addWhereClause(CPD_RECIPE_ENTRY::RECIPENO,RECIPENO);
  addWhereClause(CPD_RECIPE_ENTRY::SOURCE,SOURCE);
  addWhereClause(CPD_RECIPE_ENTRY::BATCHSTATUSNO,BATCHSTATUSNO);
  addWhereClause(CPD_RECIPE_ENTRY::MAT_CODE,MAT_CODE);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CPD_RECIPE_ENTRY::copyDataToBatchStatus(const std::string & HeatID, const std::string & TreatID,const std::string & Plant, const std::string & RECIPENAME, long RECIPENO, const std::string & SOURCE, long BATCHSTATUSNO_SOURCE, long BATCHSTATUSNO_AIM, bool Commit, cCBS_ODBC_DBError &Error)
{
  bool RetValue = false;

  try
  {
    // check for existance first
    if ( select(HeatID, TreatID, Plant, RECIPENAME, RECIPENO, SOURCE, BATCHSTATUSNO_AIM, CSMC_DBData::unspecString) )
    {
      deleteRows(HeatID, TreatID, Plant, RECIPENAME, RECIPENO, SOURCE, BATCHSTATUSNO_AIM, false, Error);
    }

    // copy PD_RECIPE data
    if ( select(HeatID, TreatID, Plant, RECIPENAME, RECIPENO, SOURCE, BATCHSTATUSNO_SOURCE, CSMC_DBData::unspecString ) )
    {
      long Rows = getLastRow();

      for ( long i = 1; i <= Rows; ++i )
      {
        // read values for other entries
        setColumnsFromTable(this, i);

        // set differnet values
        setBATCHSTATUSNO(BATCHSTATUSNO_AIM);

        RetValue = copy();

        if ( !RetValue )
        {
          break;
        }

      } // for ( long i = 1; i <= Rows; ++i)
    }
    else
    {
      setLastError("NO_DATA_FOUND", 0, getActStatement());
    }

    if ( !RetValue )
    {
      Error = getLastError();
    }

    if(Commit)
    {
      if ( RetValue ) 
      {
        commit();
      }
      else
      {
        rollback();
      }
    }
  }
  catch(cCBS_DBExc &e) 
  {
    doOnCBS_DBExc(e,"CPD_RECIPE_ENTRY::copyDataToBatchStatus()");

    if (m_pStatement)
    {
      getpCBSConnection()->freeStatement(m_pStatement);
    }

  }

  return RetValue;

}

bool CPD_RECIPE_ENTRY::addMatWeight(const std::string & HEATID, const std::string & TREATID, const std::string & PLANT, const std::string & RECIPENAME, long RECIPENO, const std::string & SOURCE, long BATCHSTATUSNO, const std::string & MAT_CODE,double MATWEIGHT, bool Commit, cCBS_ODBC_DBError &Error)
{
  bool RetValue = false;

  try
  {
    if ( select(HEATID, TREATID, PLANT, RECIPENAME, RECIPENO, SOURCE, BATCHSTATUSNO, MAT_CODE) )
    {
      setMATWEIGHT(MATWEIGHT + getMATWEIGHT(1) );
      RetValue = update();
    }
    else
    {
      setLastError("NO_DATA_FOUND", 0, getActStatement());
    }

    if ( !RetValue )
    {
      Error = getLastError();
    }

    if(Commit)
    {
      if ( RetValue ) 
      {
        commit();
      }
      else
      {
        rollback();
      }
    }
  }
  catch(cCBS_DBExc &e) 
  {
    doOnCBS_DBExc(e,"CPD_RECIPE_ENTRY::addMatWeight");
    rollback();
    RetValue = false;
  }
  catch(...)
  {
    cCBS_StdEventLogFrame *pEventLog = cCBS_StdEventLogFrameController::getInstance()->getpEventLog();
    sEventLogMessage sMessage = cCBS_StdEventLogFrame::initMessage(__FILE__,__LINE__);
    pEventLog->EL_ExceptionCaught(sMessage,"","CPD_RECIPE_ENTRY::addMatWeight()","");
    RetValue = false;
  }

  return RetValue;
}

bool CPD_RECIPE_ENTRY::deleteRows(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const std::string& RECIPENAME, long RECIPENO, const std::string& SOURCE, long BATCHSTATUSNO, bool Commit, cCBS_ODBC_DBError &Error)
{
  bool RetValue = false;
  try
  {
    cleanWhereStatement();

    addWhereClause(CPD_RECIPE_ENTRY::HEATID,HEATID);
    addWhereClause(CPD_RECIPE_ENTRY::TREATID,TREATID);
    addWhereClause(CPD_RECIPE_ENTRY::PLANT,PLANT);
    addWhereClause(CPD_RECIPE_ENTRY::RECIPENAME,RECIPENAME);
    addWhereClause(CPD_RECIPE_ENTRY::RECIPENO,RECIPENO);
    addWhereClause(CPD_RECIPE_ENTRY::SOURCE,SOURCE);
    addWhereClause(CPD_RECIPE_ENTRY::BATCHSTATUSNO,BATCHSTATUSNO);

    RetValue = CSMC_DBData::deleteRows();

    if ( !RetValue )
    {
      Error = getLastError();
    }

    if(Commit)
    {
      if ( RetValue ) 
      {
        commit();
      }
      else
      {
        rollback();
      }
    }
  }
  catch(cCBS_DBExc &e) 
  {
    doOnCBS_DBExc(e,"CPD_RECIPE_ENTRY::deleteRows");
    rollback();
    RetValue = false;
  }
  catch(...)
  {
    cCBS_StdEventLogFrame *pEventLog = cCBS_StdEventLogFrameController::getInstance()->getpEventLog();
    sEventLogMessage sMessage = cCBS_StdEventLogFrame::initMessage(__FILE__,__LINE__);
    pEventLog->EL_ExceptionCaught(sMessage,"","CPD_RECIPE_ENTRY::deleteRows()","");
    RetValue = false;
  }

  return RetValue;
}

double CPD_RECIPE_ENTRY::getAlloyWeight(const std::string& PLANT, const std::string& HEATID,const std::string& TREATID )
{
  double RetVal = CSMC_DBData::unspecDouble;

  if (m_pCBS_StdConnection)
  {
    try
    {
      std::stringstream WhereStatement;

      initStatements();

      m_Statement = "SELECT sum(MATWEIGHT) as COUNTER from PD_RECIPE_ENTRY ";

      WhereStatement << " WHERE PLANT = '"<< PLANT << "'";		  
      WhereStatement << " and batchstatusno = 9 and MAT_CODE in ( select mat_code from GT_MAT_PURP where purp_code = 'Report_Alloys' ) ";	  
      WhereStatement << " and heatid = '"<<  HEATID << "'";
      WhereStatement << " and TREATID = '"<<  TREATID << "'";

      m_pStatement = getpCBSConnection()->createPtStatement();
      m_Statement += WhereStatement.str();

      if (m_pStatement)
      {
        log(m_Statement,3);
        cCBS_ResultSet *ptRS1 = m_pStatement->executePtQuery(m_Statement);
        ptRS1->setTruncateChar(" ");

        ptRS1->beforeFirst();
        if (ptRS1->next())
        {
          RetVal = ptRS1->getDouble("COUNTER");
        }
        getpCBSConnection()->freeStatement(m_pStatement);
      }
    }
    catch(cCBS_DBExc &e) 
    {
      setLastError(std::string("GET_ALLOYS_REPORT"), 0, m_Statement);

      doOnCBS_DBExc(e,"CPD_RECIPE_ENTRY::getAlloyWeight");

      if (m_pStatement)
      {
        getpCBSConnection()->freeStatement(m_pStatement);
      }

    }
  }

  return RetVal;
}

double CPD_RECIPE_ENTRY::getBinWeight(const std::string& PLANT, const std::string& HEATID,const std::string& TREATID )
{
  double RetVal = CSMC_DBData::unspecDouble;

  if (m_pCBS_StdConnection)
  {
    try
    {
      std::stringstream WhereStatement;

      initStatements();

      m_Statement = "SELECT sum(MATWEIGHT) as COUNTER from PD_RECIPE_ENTRY ";

      WhereStatement << " WHERE PLANT = '"<< PLANT << "'";      
      WhereStatement << " and batchstatusno = 9 and MAT_CODE in ( select mat_code from GT_MAT_PURP where purp_code = 'Report_Bin' ) ";    
      WhereStatement << " and heatid = '"<<  HEATID << "'";
      WhereStatement << " and TREATID = '"<<  TREATID << "'";

      m_pStatement = getpCBSConnection()->createPtStatement();
      m_Statement += WhereStatement.str();

      if (m_pStatement)
      {
        log(m_Statement,3);
        cCBS_ResultSet *ptRS1 = m_pStatement->executePtQuery(m_Statement);
        ptRS1->setTruncateChar(" ");

        ptRS1->beforeFirst();
        if (ptRS1->next())
        {
          RetVal = ptRS1->getDouble("COUNTER");
        }
        getpCBSConnection()->freeStatement(m_pStatement);
      }
    }
    catch(cCBS_DBExc &e) 
    {
      setLastError(std::string("GET_BIN_WEIGHT"), 0, m_Statement);

      doOnCBS_DBExc(e,"CPD_RECIPE_ENTRY::getBinWeight");

      if (m_pStatement)
      {
        getpCBSConnection()->freeStatement(m_pStatement);
      }

    }
  }

  return RetVal;
}

std::set<std::string> CPD_RECIPE_ENTRY::getRecipeMaterials(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const std::string& RECIPENAME, long RECIPENO, const std::string& SOURCE, long BATCHSTATUSNO)
{

  std::set<std::string> RecipeMaterials;

  if ( select(HEATID, TREATID, PLANT, RECIPENAME, RECIPENO, SOURCE, BATCHSTATUSNO, CSMC_DBData::unspecString) )
  {
    for ( long i = 1; i <= getLastRow(); ++i )
    {
      RecipeMaterials.insert(getMAT_CODE(i));
    }
  }

  return RecipeMaterials;
}

double CPD_RECIPE_ENTRY::getSlagFormer(const std::string& PLANT, const std::string& HEATID, const std::string& TREATID )
{
  double RetVal = CSMC_DBData::unspecDouble;

  if (m_pCBS_StdConnection)
  {
    try
    {
      std::stringstream WhereStatement;

      initStatements();

      m_Statement = "SELECT sum(MATWEIGHT) as COUNTER from PD_RECIPE_ENTRY ";

      WhereStatement << " WHERE PLANT = '"<< PLANT << "'";		  
      WhereStatement << " and batchstatusno = 9 and MAT_CODE in ( select mat_code from GT_MAT_PURP where purp_code = 'Report_SlagFormer' ) ";	  
      WhereStatement << " and heatid = '"<<  HEATID << "'";
      WhereStatement << " and TREATID = '"<<  TREATID << "'";

      m_pStatement = getpCBSConnection()->createPtStatement();
      m_Statement += WhereStatement.str();

      if (m_pStatement)
      {
        log(m_Statement,3);
        cCBS_ResultSet *ptRS1 = m_pStatement->executePtQuery(m_Statement);
        ptRS1->setTruncateChar(" ");

        ptRS1->beforeFirst();
        if (ptRS1->next())
        {	
          RetVal = ptRS1->getDouble("COUNTER");
        }
        getpCBSConnection()->freeStatement(m_pStatement);
      }
    }
    catch(cCBS_DBExc &e) 
    {
      setLastError(std::string("GET_SLAGFORMERS_REPORT"), 0, m_Statement);

      doOnCBS_DBExc(e,"CPD_RECIPE_ENTRY::getAlloyWeight");

      if (m_pStatement)
      {
        getpCBSConnection()->freeStatement(m_pStatement);
      }
    }
  }

  return RetVal;
}

double CPD_RECIPE_ENTRY::getSumMatWeights(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const std::string& RECIPENAME, long RECIPENO, const std::string& SOURCE, long BATCHSTATUSNO, std::vector<std::string> MatCodeList)
{
  double RetVal = CSMC_DBData::unspecDouble;

  std::vector<std::string>::iterator it ;

  if ( MatCodeList.size() > 0 )
  {
    RetVal = 0;

    for ( it = MatCodeList.begin(); it != MatCodeList.end(); ++it )
    {
      std::string MAT_CODE = (*it);

      double MatConsumption = getSumMatWeights(HEATID, TREATID, PLANT, RECIPENAME, RECIPENO, SOURCE, BATCHSTATUSNO, MAT_CODE);

      if ( MatConsumption != CSMC_DBData::unspecDouble )
      {
        RetVal += MatConsumption;
      }
    }
  }

  return RetVal;

}

double CPD_RECIPE_ENTRY::getSumMatWeights(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const std::string& RECIPENAME, long RECIPENO, const std::string& SOURCE, long BATCHSTATUSNO, const std::string& MAT_CODE)
{
  double RetVal = 0;

  if ( select(HEATID, TREATID, PLANT, RECIPENAME, RECIPENO, SOURCE, BATCHSTATUSNO, MAT_CODE) )
  {
    for ( long i = 1; i <= getLastRow(); ++i )
    {
      if ( ! isNull(CPD_RECIPE_ENTRY::MATWEIGHT,i) )
      {
        RetVal += getMATWEIGHT(i);
      }
    }
  }
  else
  {
    RetVal = CSMC_DBData::unspecDouble;
  }

  return RetVal;
}

bool CPD_RECIPE_ENTRY::insertRecipeEntry(const std::string& HEATID, const std::string& TREATID,const std::string& PLANT, sRecipeInfo &SRecipeInfo,seqBatchPrio &SeqBatchPrio, bool Commit, cCBS_ODBC_DBError &Error)
{
  bool RetValue = false;

  try
  {
    CDateTime now;
    sGasData GasData;
    sBatchPrio BatchPrio;

    // insert one dataset for each element !
    for (int j = 0; j < CIntfData::getLength(SeqBatchPrio);j++)
    {
      CIntfData::getAt(BatchPrio,&SeqBatchPrio,j);
      
      // calling set methods
      setHEATID(HEATID);
      setTREATID(TREATID);
      setPLANT(PLANT);
      setRECIPENAME(SRecipeInfo.RecipeName);
      setRECIPENO(SRecipeInfo.RecipeNo);
      setSOURCE(SRecipeInfo.RecipeSource);
      setBATCHSTATUSNO(SRecipeInfo.RecipeStatus);

      setMAT_CODE((std::string)BatchPrio.BatchData.MatCode);

      setMATFEEDSPEED(BatchPrio.BatchData.MatFeedSpeed);

      if ( select(HEATID, TREATID, PLANT, SRecipeInfo.RecipeName, SRecipeInfo.RecipeNo, SRecipeInfo.RecipeSource, SRecipeInfo.RecipeStatus, (std::string)BatchPrio.BatchData.MatCode) )
      {
        // materials could appear several times in one recipe when charges form different locations
        setCHARGINGPRIO(BatchPrio.ChargPrio);
        setMATWEIGHT(BatchPrio.BatchData.Mass + getMATWEIGHT(1) );

        RetValue = update();
      }
      else
      {
        setCHARGINGPRIO(BatchPrio.ChargPrio);
        setMATWEIGHT(BatchPrio.BatchData.Mass);

        RetValue = insert();
      }

      if( !RetValue )
      {
        break;
      }
    }

    if ( !RetValue )
    {
      Error = getLastError();
    }

    if(Commit)
    {
      if ( RetValue ) 
      {
        commit();
      }
      else
      {
        rollback();
      }
    }
     
  } //try
  catch(cCBS_DBExc &e) 
  {
    doOnCBS_DBExc(e,"CPD_RECIPE_ENTRY::insertRecipeEntry");
    rollback();
    RetValue = false;
  }
  catch(...)
  {
    cCBS_StdEventLogFrame *pEventLog = cCBS_StdEventLogFrameController::getInstance()->getpEventLog();
    sEventLogMessage sMessage = cCBS_StdEventLogFrame::initMessage(__FILE__,__LINE__);
    pEventLog->EL_ExceptionCaught(sMessage,"","CPD_RECIPE_ENTRY::insertRecipeEntry()","");
    RetValue = false;
  }

  return RetValue;
}

bool CPD_RECIPE_ENTRY::updateData(const std::string & HEATID, const std::string & TREATID, const std::string & PLANT, const std::string & RECIPENAME, long RECIPENO, const std::string & SOURCE, long BATCHSTATUSNO, const std::string & MAT_CODE,double MATWEIGHT,long CHARGINGPRIO, bool Commit, cCBS_ODBC_DBError &Error)
{
  bool RetValue = true;
  bool doUpdate = false;

  try
  {
    if ( select(HEATID, TREATID, PLANT, RECIPENAME, RECIPENO, SOURCE, BATCHSTATUSNO, MAT_CODE) )
    {
      setMATWEIGHT(MATWEIGHT);
      setCHARGINGPRIO(CHARGINGPRIO);
      RetValue = update();
    }
    else
    {
      setLastError("NO_DATA_FOUND", 0, getActStatement());
    }

    if ( !RetValue )
    {
      Error = getLastError();
    }

    if(Commit)
    {
      if ( RetValue ) 
      {
        commit();
      }
      else
      {
        rollback();
      }
    }
  }
  catch(cCBS_DBExc &e) 
  {
    doOnCBS_DBExc(e,"CPD_RECIPE_ENTRY::updateData");
    rollback();
    RetValue = false;
  }
  catch(...)
  {
    cCBS_StdEventLogFrame *pEventLog = cCBS_StdEventLogFrameController::getInstance()->getpEventLog();
    sEventLogMessage sMessage = cCBS_StdEventLogFrame::initMessage(__FILE__,__LINE__);
    pEventLog->EL_ExceptionCaught(sMessage,"","CPD_RECIPE_ENTRY::updateData()","");
    RetValue = false;
  }

  return RetValue;
}


seqBatchPrio CPD_RECIPE_ENTRY::getBatchPrio(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const std::string& RECIPENAME, long RECIPENO, const std::string& SOURCE, long BATCHSTATUSNO)
{
  seqBatchPrio SeqBatchPrio;

  if ( select(HEATID, TREATID, PLANT, RECIPENAME, RECIPENO, SOURCE, BATCHSTATUSNO, CSMC_DBData::unspecString) )
  {
    for ( long i = 1; i <= getLastRow(); ++i )
    {
      sBatchPrio BatchPrio;

      BatchPrio.BatchData.MatCode       = getMAT_CODE(i).c_str();
      BatchPrio.BatchData.Mass          = getMATWEIGHT(i);
      BatchPrio.BatchData.MatFeedSpeed  = getMATFEEDSPEED(i);
      BatchPrio.ChargPrio               = getCHARGINGPRIO(i);

      CIntfData::insert(SeqBatchPrio,BatchPrio);
    }
  }

  return SeqBatchPrio;
}
