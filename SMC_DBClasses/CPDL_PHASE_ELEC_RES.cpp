//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CIntfData.h"
#include "CPDL_PHASE_ELEC_RES.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_PHASE_ELEC_RES::HEATID("HEATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_PHASE_ELEC_RES::TREATID("TREATID");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_PHASE_ELEC_RES::PLANT("PLANT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_PHASE_ELEC_RES::ACTIVITYNAME("ACTIVITYNAME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_PHASE_ELEC_RES::PRACPHASE("PRACPHASE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_PHASE_ELEC_RES::STEPNO("STEPNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_PHASE_ELEC_RES::BASWEIGHT("BASWEIGHT");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_PHASE_ELEC_RES::VOLTTAP("VOLTTAP");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_PHASE_ELEC_RES::IMPCURVE("IMPCURVE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_PHASE_ELEC_RES::SPECEGY("SPECEGY");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_PHASE_ELEC_RES::STARTTIME("STARTTIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_PHASE_ELEC_RES::PHASEDUR("PHASEDUR");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_PHASE_ELEC_RES::REVTIME("REVTIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CPDL_PHASE_ELEC_RES::ELEC_ENERGY("ELEC_ENERGY");

//##DBClassCodeUtility ! DO NOT EDIT !
CPDL_PHASE_ELEC_RES::CPDL_PHASE_ELEC_RES(cCBS_StdConnection* Connection)
:CSMC_DBData("PDL_PHASE_ELEC_RES",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPDL_PHASE_ELEC_RES::CPDL_PHASE_ELEC_RES(cCBS_Connection* Connection)
:CSMC_DBData("PDL_PHASE_ELEC_RES",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPDL_PHASE_ELEC_RES::CPDL_PHASE_ELEC_RES()
:CSMC_DBData("PDL_PHASE_ELEC_RES")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CPDL_PHASE_ELEC_RES::~CPDL_PHASE_ELEC_RES()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDL_PHASE_ELEC_RES::getHEATID(long Row)
{
  return getString(CPDL_PHASE_ELEC_RES::HEATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_PHASE_ELEC_RES::setHEATID(const std::string& value)
{
  setString(CPDL_PHASE_ELEC_RES::HEATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDL_PHASE_ELEC_RES::getTREATID(long Row)
{
  return getString(CPDL_PHASE_ELEC_RES::TREATID, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_PHASE_ELEC_RES::setTREATID(const std::string& value)
{
  setString(CPDL_PHASE_ELEC_RES::TREATID, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDL_PHASE_ELEC_RES::getPLANT(long Row)
{
  return getString(CPDL_PHASE_ELEC_RES::PLANT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_PHASE_ELEC_RES::setPLANT(const std::string& value)
{
  setString(CPDL_PHASE_ELEC_RES::PLANT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDL_PHASE_ELEC_RES::getACTIVITYNAME(long Row)
{
  return getString(CPDL_PHASE_ELEC_RES::ACTIVITYNAME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_PHASE_ELEC_RES::setACTIVITYNAME(const std::string& value)
{
  setString(CPDL_PHASE_ELEC_RES::ACTIVITYNAME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CPDL_PHASE_ELEC_RES::getPRACPHASE(long Row)
{
  return getString(CPDL_PHASE_ELEC_RES::PRACPHASE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_PHASE_ELEC_RES::setPRACPHASE(const std::string& value)
{
  setString(CPDL_PHASE_ELEC_RES::PRACPHASE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDL_PHASE_ELEC_RES::getSTEPNO(long Row)
{
  return getLong(CPDL_PHASE_ELEC_RES::STEPNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_PHASE_ELEC_RES::setSTEPNO(long value)
{
  setLong(CPDL_PHASE_ELEC_RES::STEPNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDL_PHASE_ELEC_RES::getBASWEIGHT(long Row)
{
  return getDouble(CPDL_PHASE_ELEC_RES::BASWEIGHT, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_PHASE_ELEC_RES::setBASWEIGHT(double value)
{
  setDouble(CPDL_PHASE_ELEC_RES::BASWEIGHT, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDL_PHASE_ELEC_RES::getVOLTTAP(long Row)
{
  return getLong(CPDL_PHASE_ELEC_RES::VOLTTAP, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_PHASE_ELEC_RES::setVOLTTAP(long value)
{
  setLong(CPDL_PHASE_ELEC_RES::VOLTTAP, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CPDL_PHASE_ELEC_RES::getIMPCURVE(long Row)
{
  return getLong(CPDL_PHASE_ELEC_RES::IMPCURVE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_PHASE_ELEC_RES::setIMPCURVE(long value)
{
  setLong(CPDL_PHASE_ELEC_RES::IMPCURVE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDL_PHASE_ELEC_RES::getSPECEGY(long Row)
{
  return getDouble(CPDL_PHASE_ELEC_RES::SPECEGY, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_PHASE_ELEC_RES::setSPECEGY(double value)
{
  setDouble(CPDL_PHASE_ELEC_RES::SPECEGY, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDL_PHASE_ELEC_RES::getSTARTTIME(long Row)
{
  return getDouble(CPDL_PHASE_ELEC_RES::STARTTIME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_PHASE_ELEC_RES::setSTARTTIME(double value)
{
  setDouble(CPDL_PHASE_ELEC_RES::STARTTIME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDL_PHASE_ELEC_RES::getPHASEDUR(long Row)
{
  return getDouble(CPDL_PHASE_ELEC_RES::PHASEDUR, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_PHASE_ELEC_RES::setPHASEDUR(double value)
{
  setDouble(CPDL_PHASE_ELEC_RES::PHASEDUR, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CPDL_PHASE_ELEC_RES::getREVTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CPDL_PHASE_ELEC_RES::REVTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_PHASE_ELEC_RES::setREVTIME(const CDateTime& value)
{
 setString(CPDL_PHASE_ELEC_RES::REVTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CPDL_PHASE_ELEC_RES::getELEC_ENERGY(long Row)
{
  return getDouble(CPDL_PHASE_ELEC_RES::ELEC_ENERGY, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CPDL_PHASE_ELEC_RES::setELEC_ENERGY(double value)
{
  setDouble(CPDL_PHASE_ELEC_RES::ELEC_ENERGY, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CPDL_PHASE_ELEC_RES::select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const std::string& ACTIVITYNAME, const std::string& PRACPHASE, long STEPNO)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CPDL_PHASE_ELEC_RES::HEATID,HEATID);
  addWhereClause(CPDL_PHASE_ELEC_RES::TREATID,TREATID);
  addWhereClause(CPDL_PHASE_ELEC_RES::PLANT,PLANT);
  addWhereClause(CPDL_PHASE_ELEC_RES::ACTIVITYNAME,ACTIVITYNAME);
  addWhereClause(CPDL_PHASE_ELEC_RES::PRACPHASE,PRACPHASE);
  addWhereClause(CPDL_PHASE_ELEC_RES::STEPNO,STEPNO);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 

bool CPDL_PHASE_ELEC_RES::exists(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT)
{
	cleanWhereStatement();

	m_Statement = "Select HEATID from " + m_TableName;

	addWhereClause(CPDL_PHASE_ELEC_RES::HEATID,HEATID);
	addWhereClause(CPDL_PHASE_ELEC_RES::TREATID,TREATID);
	addWhereClause(CPDL_PHASE_ELEC_RES::PLANT,PLANT);
   
  std::string sWhereStatement = getWhereStatement();
  //to avoid the exception like 'Select HEATID from PP_HEAT AND ROWNUM = 1 '
  if(sWhereStatement.length() > 0 ) 
  {
    // do not use ROWNUM in "addWhereClause", ROWNUM is not a table column and where statement will be used for deletion at "deleteRows"
    m_Statement += sWhereStatement + " AND ROWNUM = 1 ;";
  }
  else
  {
    return false;
  }

	return CSMC_DBData::select();
}

bool CPDL_PHASE_ELEC_RES::writeResults(const std::string & HeatID, const std::string &TreatID, const std::string &Plant, double DurSinceHeatAnnounce, const seqLFElecPredRes & LFElecPredRes)
{
  bool           RetValue   = false;
  long           PredLength = 0;
  long           i;
  CDateTime      now;
  sLFElecPredRes ElecPredRes;
  std::string         Phase;

  try
  {
    PredLength = CIntfData::getLength(LFElecPredRes);

    RetValue = !exists(HeatID, TreatID, Plant);

     //some data found -> delete them
    if (!RetValue && PredLength > 0 )
    {
      RetValue = deleteRows();
      if (!RetValue)
        setLastError(std::string("ERROR_DELETE_DATA"), 0, getActStatement());
    }

    for (i = 0 ; i < PredLength ; ++i)
    {
      CIntfData::getAt(ElecPredRes,&LFElecPredRes,i);

      Phase = ElecPredRes.ElecPhase;
      setHEATID(HeatID);
      setTREATID(TreatID);
      setPLANT(Plant);
      setACTIVITYNAME(Phase);
      setPRACPHASE(Phase);
      setSTEPNO(ElecPredRes.Step);

      setBASWEIGHT(ElecPredRes.BaseMass);
      setVOLTTAP(ElecPredRes.VoltTap);
      setIMPCURVE(ElecPredRes.ImpCurve);
      setSPECEGY(ElecPredRes.SpecEgy);
      setSTARTTIME(ElecPredRes.DurUntilStartOfStep);
      setPHASEDUR(ElecPredRes.DurStep);
      setREVTIME(now);
      setELEC_ENERGY(ElecPredRes.ElecEgyStep);

      if ( select( HeatID, TreatID, Plant, Phase, Phase, ElecPredRes.Step))
        RetValue = update();
      else
        RetValue = insert();

      if (!RetValue) break;
    }

    // commit only if own values are successfully written
    if (RetValue)
    {
      commit();
    }
    else
    {
      rollback();
    }
  }
  catch(...)
  {
    RetValue = false;
    rollback();
  }
  return RetValue;
}


