//## Copyright (C) 2013 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 


#include "CGTH_PP_INJECTION.h"


//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTH_PP_INJECTION::PLANTNO("PLANTNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTH_PP_INJECTION::PRACNO("PRACNO");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTH_PP_INJECTION::REVTIME("REVTIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTH_PP_INJECTION::DESCR_E("DESCR_E");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTH_PP_INJECTION::DESCR_C("DESCR_C");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTH_PP_INJECTION::USERCODE("USERCODE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTH_PP_INJECTION::MG_EQUIV_LIME("MG_EQUIV_LIME");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTH_PP_INJECTION::MG_EQUIV_CARBIDE("MG_EQUIV_CARBIDE");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTH_PP_INJECTION::CO_INJ_LIME_MIN("CO_INJ_LIME_MIN");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTH_PP_INJECTION::CO_INJ_LIME_AIM("CO_INJ_LIME_AIM");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTH_PP_INJECTION::CO_INJ_CARBIDE_MAX("CO_INJ_CARBIDE_MAX");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTH_PP_INJECTION::CO_INJ_CARBIDE_MIN("CO_INJ_CARBIDE_MIN");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTH_PP_INJECTION::CO_INJ_CARBIDE_AIM("CO_INJ_CARBIDE_AIM");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTH_PP_INJECTION::CO_INJ_LIME_MAX("CO_INJ_LIME_MAX");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTH_PP_INJECTION::CO_INJ_MG_MIN("CO_INJ_MG_MIN");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTH_PP_INJECTION::CO_INJ_MG_AIM("CO_INJ_MG_AIM");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTH_PP_INJECTION::CO_INJ_MG_MAX("CO_INJ_MG_MAX");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTH_PP_INJECTION::MONO_INJ_LIME_MIN("MONO_INJ_LIME_MIN");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTH_PP_INJECTION::MONO_INJ_LIME_AIM("MONO_INJ_LIME_AIM");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTH_PP_INJECTION::MONO_INJ_LIME_MAX("MONO_INJ_LIME_MAX");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTH_PP_INJECTION::MONO_INJ_CARBIDE_MIN("MONO_INJ_CARBIDE_MIN");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTH_PP_INJECTION::MONO_INJ_CARBIDE_AIM("MONO_INJ_CARBIDE_AIM");
//##DBClassCodeUtility ! DO NOT EDIT !
const std::string CGTH_PP_INJECTION::MONO_INJ_CARBIDE_MAX("MONO_INJ_CARBIDE_MAX");

//##DBClassCodeUtility ! DO NOT EDIT !
CGTH_PP_INJECTION::CGTH_PP_INJECTION(cCBS_StdConnection* Connection)
:CSMC_DBData("GTH_PP_INJECTION",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGTH_PP_INJECTION::CGTH_PP_INJECTION(cCBS_Connection* Connection)
:CSMC_DBData("GTH_PP_INJECTION",Connection)
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGTH_PP_INJECTION::CGTH_PP_INJECTION()
:CSMC_DBData("GTH_PP_INJECTION")
{
  //please implement virtual method, to initialize your members  
  doOnConstruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
CGTH_PP_INJECTION::~CGTH_PP_INJECTION()
{
  //please implement virtual method, to destruct your members
  doOnDestruct(); 
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CGTH_PP_INJECTION::getPLANTNO(long Row)
{
  return getLong(CGTH_PP_INJECTION::PLANTNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTH_PP_INJECTION::setPLANTNO(long value)
{
  setLong(CGTH_PP_INJECTION::PLANTNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
long CGTH_PP_INJECTION::getPRACNO(long Row)
{
  return getLong(CGTH_PP_INJECTION::PRACNO, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTH_PP_INJECTION::setPRACNO(long value)
{
  setLong(CGTH_PP_INJECTION::PRACNO, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
CDateTime CGTH_PP_INJECTION::getREVTIME(long Row)
{
  CDateTime D;
  D.fromDBString(getString(CGTH_PP_INJECTION::REVTIME, Row));
  return D;
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTH_PP_INJECTION::setREVTIME(const CDateTime& value)
{
 setString(CGTH_PP_INJECTION::REVTIME, value.toDBString());
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CGTH_PP_INJECTION::getDESCR_E(long Row)
{
  return getString(CGTH_PP_INJECTION::DESCR_E, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTH_PP_INJECTION::setDESCR_E(const std::string& value)
{
  setString(CGTH_PP_INJECTION::DESCR_E, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CGTH_PP_INJECTION::getDESCR_C(long Row)
{
  return getString(CGTH_PP_INJECTION::DESCR_C, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTH_PP_INJECTION::setDESCR_C(const std::string& value)
{
  setString(CGTH_PP_INJECTION::DESCR_C, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
std::string CGTH_PP_INJECTION::getUSERCODE(long Row)
{
  return getString(CGTH_PP_INJECTION::USERCODE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTH_PP_INJECTION::setUSERCODE(const std::string& value)
{
  setString(CGTH_PP_INJECTION::USERCODE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CGTH_PP_INJECTION::getMG_EQUIV_LIME(long Row)
{
  return getDouble(CGTH_PP_INJECTION::MG_EQUIV_LIME, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTH_PP_INJECTION::setMG_EQUIV_LIME(double value)
{
  setDouble(CGTH_PP_INJECTION::MG_EQUIV_LIME, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CGTH_PP_INJECTION::getMG_EQUIV_CARBIDE(long Row)
{
  return getDouble(CGTH_PP_INJECTION::MG_EQUIV_CARBIDE, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTH_PP_INJECTION::setMG_EQUIV_CARBIDE(double value)
{
  setDouble(CGTH_PP_INJECTION::MG_EQUIV_CARBIDE, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CGTH_PP_INJECTION::getCO_INJ_LIME_MIN(long Row)
{
  return getDouble(CGTH_PP_INJECTION::CO_INJ_LIME_MIN, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTH_PP_INJECTION::setCO_INJ_LIME_MIN(double value)
{
  setDouble(CGTH_PP_INJECTION::CO_INJ_LIME_MIN, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CGTH_PP_INJECTION::getCO_INJ_LIME_AIM(long Row)
{
  return getDouble(CGTH_PP_INJECTION::CO_INJ_LIME_AIM, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTH_PP_INJECTION::setCO_INJ_LIME_AIM(double value)
{
  setDouble(CGTH_PP_INJECTION::CO_INJ_LIME_AIM, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CGTH_PP_INJECTION::getCO_INJ_CARBIDE_MAX(long Row)
{
  return getDouble(CGTH_PP_INJECTION::CO_INJ_CARBIDE_MAX, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTH_PP_INJECTION::setCO_INJ_CARBIDE_MAX(double value)
{
  setDouble(CGTH_PP_INJECTION::CO_INJ_CARBIDE_MAX, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CGTH_PP_INJECTION::getCO_INJ_CARBIDE_MIN(long Row)
{
  return getDouble(CGTH_PP_INJECTION::CO_INJ_CARBIDE_MIN, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTH_PP_INJECTION::setCO_INJ_CARBIDE_MIN(double value)
{
  setDouble(CGTH_PP_INJECTION::CO_INJ_CARBIDE_MIN, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CGTH_PP_INJECTION::getCO_INJ_CARBIDE_AIM(long Row)
{
  return getDouble(CGTH_PP_INJECTION::CO_INJ_CARBIDE_AIM, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTH_PP_INJECTION::setCO_INJ_CARBIDE_AIM(double value)
{
  setDouble(CGTH_PP_INJECTION::CO_INJ_CARBIDE_AIM, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CGTH_PP_INJECTION::getCO_INJ_LIME_MAX(long Row)
{
  return getDouble(CGTH_PP_INJECTION::CO_INJ_LIME_MAX, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTH_PP_INJECTION::setCO_INJ_LIME_MAX(double value)
{
  setDouble(CGTH_PP_INJECTION::CO_INJ_LIME_MAX, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CGTH_PP_INJECTION::getCO_INJ_MG_MIN(long Row)
{
  return getDouble(CGTH_PP_INJECTION::CO_INJ_MG_MIN, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTH_PP_INJECTION::setCO_INJ_MG_MIN(double value)
{
  setDouble(CGTH_PP_INJECTION::CO_INJ_MG_MIN, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CGTH_PP_INJECTION::getCO_INJ_MG_AIM(long Row)
{
  return getDouble(CGTH_PP_INJECTION::CO_INJ_MG_AIM, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTH_PP_INJECTION::setCO_INJ_MG_AIM(double value)
{
  setDouble(CGTH_PP_INJECTION::CO_INJ_MG_AIM, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CGTH_PP_INJECTION::getCO_INJ_MG_MAX(long Row)
{
  return getDouble(CGTH_PP_INJECTION::CO_INJ_MG_MAX, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTH_PP_INJECTION::setCO_INJ_MG_MAX(double value)
{
  setDouble(CGTH_PP_INJECTION::CO_INJ_MG_MAX, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CGTH_PP_INJECTION::getMONO_INJ_LIME_MIN(long Row)
{
  return getDouble(CGTH_PP_INJECTION::MONO_INJ_LIME_MIN, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTH_PP_INJECTION::setMONO_INJ_LIME_MIN(double value)
{
  setDouble(CGTH_PP_INJECTION::MONO_INJ_LIME_MIN, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CGTH_PP_INJECTION::getMONO_INJ_LIME_AIM(long Row)
{
  return getDouble(CGTH_PP_INJECTION::MONO_INJ_LIME_AIM, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTH_PP_INJECTION::setMONO_INJ_LIME_AIM(double value)
{
  setDouble(CGTH_PP_INJECTION::MONO_INJ_LIME_AIM, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CGTH_PP_INJECTION::getMONO_INJ_LIME_MAX(long Row)
{
  return getDouble(CGTH_PP_INJECTION::MONO_INJ_LIME_MAX, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTH_PP_INJECTION::setMONO_INJ_LIME_MAX(double value)
{
  setDouble(CGTH_PP_INJECTION::MONO_INJ_LIME_MAX, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CGTH_PP_INJECTION::getMONO_INJ_CARBIDE_MIN(long Row)
{
  return getDouble(CGTH_PP_INJECTION::MONO_INJ_CARBIDE_MIN, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTH_PP_INJECTION::setMONO_INJ_CARBIDE_MIN(double value)
{
  setDouble(CGTH_PP_INJECTION::MONO_INJ_CARBIDE_MIN, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CGTH_PP_INJECTION::getMONO_INJ_CARBIDE_AIM(long Row)
{
  return getDouble(CGTH_PP_INJECTION::MONO_INJ_CARBIDE_AIM, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTH_PP_INJECTION::setMONO_INJ_CARBIDE_AIM(double value)
{
  setDouble(CGTH_PP_INJECTION::MONO_INJ_CARBIDE_AIM, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
double CGTH_PP_INJECTION::getMONO_INJ_CARBIDE_MAX(long Row)
{
  return getDouble(CGTH_PP_INJECTION::MONO_INJ_CARBIDE_MAX, Row);
}

//##DBClassCodeUtility ! DO NOT EDIT !
void CGTH_PP_INJECTION::setMONO_INJ_CARBIDE_MAX(double value)
{
  setDouble(CGTH_PP_INJECTION::MONO_INJ_CARBIDE_MAX, value);
}

//##DBClassCodeUtility ! DO NOT EDIT !
bool CGTH_PP_INJECTION::select(long PLANTNO, long PRACNO)
{
  cleanWhereStatement();

  m_Statement = "Select * from " + m_TableName;

  addWhereClause(CGTH_PP_INJECTION::PLANTNO,PLANTNO);
  addWhereClause(CGTH_PP_INJECTION::PRACNO,PRACNO);
  m_Statement += getWhereStatement() + ";";

  return CSMC_DBData::select();
}

//## ------------------------------------END-GENERATED-CODE---------------------- 

//## ------------------------------------YOUR-CODE------------------------------- 


