// This file is generated by omniidl (C++ backend)- omniORB_4_2. Do not edit.

#include "BASIntrf_s.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_2;



void
IBAS::IBAS_LastResponse::operator>>= (cdrStream &_n) const
{
  _n.marshalString(intName,0);
  _n.marshalString(lastTime,0);
  _n.marshalBoolean(status);

}

void
IBAS::IBAS_LastResponse::operator<<= (cdrStream &_n)
{
  intName = _n.unmarshalString(0);
  lastTime = _n.unmarshalString(0);
  status = _n.unmarshalBoolean();

}

::CORBA::Exception::insertExceptionToAny IBAS::EXC_TagNotFound::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP IBAS::EXC_TagNotFound::insertToAnyFnNCP = 0;

IBAS::EXC_TagNotFound::EXC_TagNotFound(const IBAS::EXC_TagNotFound& _s) : ::CORBA::UserException(_s)
{
  
}



IBAS::EXC_TagNotFound& IBAS::EXC_TagNotFound::operator=(const IBAS::EXC_TagNotFound& _s)
{
  if (&_s != this) {
    ((::CORBA::UserException*) this)->operator=(_s);
    
  }
  return *this;
}

IBAS::EXC_TagNotFound::~EXC_TagNotFound() {}

void IBAS::EXC_TagNotFound::_raise() const { throw *this; }

const char* IBAS::EXC_TagNotFound::_PD_repoId = "IDL:IBAS/EXC_TagNotFound:1.0";
const char* IBAS::EXC_TagNotFound::_PD_typeId = "Exception/UserException/IBAS::EXC_TagNotFound";

IBAS::EXC_TagNotFound* IBAS::EXC_TagNotFound::_downcast(::CORBA::Exception* _e) {
  return (EXC_TagNotFound*) _NP_is_a(_e, _PD_typeId);
}

const IBAS::EXC_TagNotFound* IBAS::EXC_TagNotFound::_downcast(const ::CORBA::Exception* _e) {
  return (const EXC_TagNotFound*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* IBAS::EXC_TagNotFound::_NP_duplicate() const {
  return new EXC_TagNotFound(*this);
}

const char* IBAS::EXC_TagNotFound::_NP_typeId() const {
  return _PD_typeId;
}

const char* IBAS::EXC_TagNotFound::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:IBAS/EXC_TagNotFound:1.0");
  return _PD_repoId;
}
 
void IBAS::EXC_TagNotFound::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

::CORBA::Exception::insertExceptionToAny IBAS::EXC_IncorrectTagType::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP IBAS::EXC_IncorrectTagType::insertToAnyFnNCP = 0;

IBAS::EXC_IncorrectTagType::EXC_IncorrectTagType(const IBAS::EXC_IncorrectTagType& _s) : ::CORBA::UserException(_s)
{
  
}



IBAS::EXC_IncorrectTagType& IBAS::EXC_IncorrectTagType::operator=(const IBAS::EXC_IncorrectTagType& _s)
{
  if (&_s != this) {
    ((::CORBA::UserException*) this)->operator=(_s);
    
  }
  return *this;
}

IBAS::EXC_IncorrectTagType::~EXC_IncorrectTagType() {}

void IBAS::EXC_IncorrectTagType::_raise() const { throw *this; }

const char* IBAS::EXC_IncorrectTagType::_PD_repoId = "IDL:IBAS/EXC_IncorrectTagType:1.0";
const char* IBAS::EXC_IncorrectTagType::_PD_typeId = "Exception/UserException/IBAS::EXC_IncorrectTagType";

IBAS::EXC_IncorrectTagType* IBAS::EXC_IncorrectTagType::_downcast(::CORBA::Exception* _e) {
  return (EXC_IncorrectTagType*) _NP_is_a(_e, _PD_typeId);
}

const IBAS::EXC_IncorrectTagType* IBAS::EXC_IncorrectTagType::_downcast(const ::CORBA::Exception* _e) {
  return (const EXC_IncorrectTagType*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* IBAS::EXC_IncorrectTagType::_NP_duplicate() const {
  return new EXC_IncorrectTagType(*this);
}

const char* IBAS::EXC_IncorrectTagType::_NP_typeId() const {
  return _PD_typeId;
}

const char* IBAS::EXC_IncorrectTagType::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:IBAS/EXC_IncorrectTagType:1.0");
  return _PD_repoId;
}
 
void IBAS::EXC_IncorrectTagType::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

IBAS::BASIntrf_ptr IBAS::BASIntrf_Helper::_nil() {
  return ::IBAS::BASIntrf::_nil();
}

::CORBA::Boolean IBAS::BASIntrf_Helper::is_nil(::IBAS::BASIntrf_ptr p) {
  return ::CORBA::is_nil(p);

}

void IBAS::BASIntrf_Helper::release(::IBAS::BASIntrf_ptr p) {
  ::CORBA::release(p);
}

void IBAS::BASIntrf_Helper::marshalObjRef(::IBAS::BASIntrf_ptr obj, cdrStream& s) {
  ::IBAS::BASIntrf::_marshalObjRef(obj, s);
}

IBAS::BASIntrf_ptr IBAS::BASIntrf_Helper::unmarshalObjRef(cdrStream& s) {
  return ::IBAS::BASIntrf::_unmarshalObjRef(s);
}

void IBAS::BASIntrf_Helper::duplicate(::IBAS::BASIntrf_ptr obj) {
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
}

IBAS::BASIntrf_ptr
IBAS::BASIntrf::_duplicate(::IBAS::BASIntrf_ptr obj)
{
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
  return obj;
}

IBAS::BASIntrf_ptr
IBAS::BASIntrf::_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


IBAS::BASIntrf_ptr
IBAS::BASIntrf::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

IBAS::BASIntrf_ptr
IBAS::BASIntrf::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_BASIntrf _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_BASIntrf* _the_nil_ptr = 0;
  if (!_the_nil_ptr) {
    omni::nilRefLock().lock();
    if (!_the_nil_ptr) {
      _the_nil_ptr = new _objref_BASIntrf;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* IBAS::BASIntrf::_PD_repoId = "IDL:IBAS/BASIntrf:1.0";


IBAS::_objref_BASIntrf::~_objref_BASIntrf() {
  
}


IBAS::_objref_BASIntrf::_objref_BASIntrf(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::IBAS::BASIntrf::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
IBAS::_objref_BASIntrf::_ptrToObjRef(const char* id)
{
  if (id == ::IBAS::BASIntrf::_PD_repoId)
    return (::IBAS::BASIntrf_ptr) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (::CORBA::Object_ptr) this;

  if (omni::strMatch(id, ::IBAS::BASIntrf::_PD_repoId))
    return (::IBAS::BASIntrf_ptr) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (::CORBA::Object_ptr) this;

  return 0;
}


//
// Code for IBAS::BASIntrf::getFloat

// Proxy call descriptor class. Mangled signature:
//  _clong_i_cstring_o_cfloat_e_cIBAS_mEXC__IncorrectTagType_e_cIBAS_mEXC__TagNotFound
class _0RL_cd_0103e8c80a298d01_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_0103e8c80a298d01_00000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&, _OMNI_NS(IOP_C)*, const char*);
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::Float arg_1;
  ::CORBA::Long result;
};

void _0RL_cd_0103e8c80a298d01_00000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_0103e8c80a298d01_00000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_0103e8c80a298d01_00000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;
  arg_1 >>= _n;

}

void _0RL_cd_0103e8c80a298d01_00000000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Long&)result <<= _n;
  (::CORBA::Float&)arg_1 <<= _n;

}

const char* const _0RL_cd_0103e8c80a298d01_00000000::_user_exns[] = {
  IBAS::EXC_IncorrectTagType::_PD_repoId,
  IBAS::EXC_TagNotFound::_PD_repoId
};

void _0RL_cd_0103e8c80a298d01_00000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if (omni::strMatch(repoId, IBAS::EXC_IncorrectTagType::_PD_repoId)) {
    IBAS::EXC_IncorrectTagType _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if (omni::strMatch(repoId, IBAS::EXC_TagNotFound::_PD_repoId)) {
    IBAS::EXC_TagNotFound _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_0103e8c80a298d01_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_0103e8c80a298d01_00000000* tcd = (_0RL_cd_0103e8c80a298d01_00000000*)cd;
  IBAS::_impl_BASIntrf* impl = (IBAS::_impl_BASIntrf*) svnt->_ptrToInterface(IBAS::BASIntrf::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getFloat(tcd->arg_0, tcd->arg_1);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getFloat(tcd->arg_0, tcd->arg_1);
  else {
    try {
      tcd->result = impl->getFloat(tcd->arg_0, tcd->arg_1);
    }
    catch(IBAS::EXC_TagNotFound& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(IBAS::EXC_IncorrectTagType& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Long IBAS::_objref_BASIntrf::getFloat(const char* tag, ::CORBA::Float& val)
{
  _0RL_cd_0103e8c80a298d01_00000000 _call_desc(_0RL_lcfn_0103e8c80a298d01_10000000, "getFloat", 9);
  _call_desc.arg_0 = tag;

  _invoke(_call_desc);
  val = _call_desc.arg_1;
  return _call_desc.result;


}


//
// Code for IBAS::BASIntrf::getString

// Proxy call descriptor class. Mangled signature:
//  _clong_i_cstring_o_cstring_e_cIBAS_mEXC__IncorrectTagType_e_cIBAS_mEXC__TagNotFound
class _0RL_cd_0103e8c80a298d01_20000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_0103e8c80a298d01_20000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&, _OMNI_NS(IOP_C)*, const char*);
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1;
  ::CORBA::Long result;
};

void _0RL_cd_0103e8c80a298d01_20000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_0103e8c80a298d01_20000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_0103e8c80a298d01_20000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;
  _n.marshalString(arg_1,0);

}

void _0RL_cd_0103e8c80a298d01_20000000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Long&)result <<= _n;
  arg_1 = _n.unmarshalString(0);

}

const char* const _0RL_cd_0103e8c80a298d01_20000000::_user_exns[] = {
  IBAS::EXC_IncorrectTagType::_PD_repoId,
  IBAS::EXC_TagNotFound::_PD_repoId
};

void _0RL_cd_0103e8c80a298d01_20000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if (omni::strMatch(repoId, IBAS::EXC_IncorrectTagType::_PD_repoId)) {
    IBAS::EXC_IncorrectTagType _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if (omni::strMatch(repoId, IBAS::EXC_TagNotFound::_PD_repoId)) {
    IBAS::EXC_TagNotFound _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_0103e8c80a298d01_30000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_0103e8c80a298d01_20000000* tcd = (_0RL_cd_0103e8c80a298d01_20000000*)cd;
  IBAS::_impl_BASIntrf* impl = (IBAS::_impl_BASIntrf*) svnt->_ptrToInterface(IBAS::BASIntrf::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getString(tcd->arg_0, tcd->arg_1.out());
#else
  if (!cd->is_upcall())
    tcd->result = impl->getString(tcd->arg_0, tcd->arg_1.out());
  else {
    try {
      tcd->result = impl->getString(tcd->arg_0, tcd->arg_1.out());
    }
    catch(IBAS::EXC_TagNotFound& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(IBAS::EXC_IncorrectTagType& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Long IBAS::_objref_BASIntrf::getString(const char* tag, ::CORBA::String_out val)
{
  _0RL_cd_0103e8c80a298d01_20000000 _call_desc(_0RL_lcfn_0103e8c80a298d01_30000000, "getString", 10);
  _call_desc.arg_0 = tag;

  _invoke(_call_desc);
  val = _call_desc.arg_1._retn();
  return _call_desc.result;


}


//
// Code for IBAS::BASIntrf::getLong

// Proxy call descriptor class. Mangled signature:
//  _clong_i_cstring_o_clong_e_cIBAS_mEXC__IncorrectTagType_e_cIBAS_mEXC__TagNotFound
class _0RL_cd_0103e8c80a298d01_40000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_0103e8c80a298d01_40000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&, _OMNI_NS(IOP_C)*, const char*);
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::Long arg_1;
  ::CORBA::Long result;
};

void _0RL_cd_0103e8c80a298d01_40000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_0103e8c80a298d01_40000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_0103e8c80a298d01_40000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;
  arg_1 >>= _n;

}

void _0RL_cd_0103e8c80a298d01_40000000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Long&)result <<= _n;
  (::CORBA::Long&)arg_1 <<= _n;

}

const char* const _0RL_cd_0103e8c80a298d01_40000000::_user_exns[] = {
  IBAS::EXC_IncorrectTagType::_PD_repoId,
  IBAS::EXC_TagNotFound::_PD_repoId
};

void _0RL_cd_0103e8c80a298d01_40000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if (omni::strMatch(repoId, IBAS::EXC_IncorrectTagType::_PD_repoId)) {
    IBAS::EXC_IncorrectTagType _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if (omni::strMatch(repoId, IBAS::EXC_TagNotFound::_PD_repoId)) {
    IBAS::EXC_TagNotFound _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_0103e8c80a298d01_50000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_0103e8c80a298d01_40000000* tcd = (_0RL_cd_0103e8c80a298d01_40000000*)cd;
  IBAS::_impl_BASIntrf* impl = (IBAS::_impl_BASIntrf*) svnt->_ptrToInterface(IBAS::BASIntrf::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getLong(tcd->arg_0, tcd->arg_1);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getLong(tcd->arg_0, tcd->arg_1);
  else {
    try {
      tcd->result = impl->getLong(tcd->arg_0, tcd->arg_1);
    }
    catch(IBAS::EXC_TagNotFound& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(IBAS::EXC_IncorrectTagType& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Long IBAS::_objref_BASIntrf::getLong(const char* tag, ::CORBA::Long& val)
{
  _0RL_cd_0103e8c80a298d01_40000000 _call_desc(_0RL_lcfn_0103e8c80a298d01_50000000, "getLong", 8);
  _call_desc.arg_0 = tag;

  _invoke(_call_desc);
  val = _call_desc.arg_1;
  return _call_desc.result;


}


//
// Code for IBAS::BASIntrf::getFlag

// Local call call-back function.
static void
_0RL_lcfn_0103e8c80a298d01_60000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_0103e8c80a298d01_40000000* tcd = (_0RL_cd_0103e8c80a298d01_40000000*)cd;
  IBAS::_impl_BASIntrf* impl = (IBAS::_impl_BASIntrf*) svnt->_ptrToInterface(IBAS::BASIntrf::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getFlag(tcd->arg_0, tcd->arg_1);
#else
  if (!cd->is_upcall())
    tcd->result = impl->getFlag(tcd->arg_0, tcd->arg_1);
  else {
    try {
      tcd->result = impl->getFlag(tcd->arg_0, tcd->arg_1);
    }
    catch(IBAS::EXC_TagNotFound& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(IBAS::EXC_IncorrectTagType& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Long IBAS::_objref_BASIntrf::getFlag(const char* tag, ::CORBA::Long& val)
{
  _0RL_cd_0103e8c80a298d01_40000000 _call_desc(_0RL_lcfn_0103e8c80a298d01_60000000, "getFlag", 8);
  _call_desc.arg_0 = tag;

  _invoke(_call_desc);
  val = _call_desc.arg_1;
  return _call_desc.result;


}


//
// Code for IBAS::BASIntrf::setFloat

// Proxy call descriptor class. Mangled signature:
//  _clong_i_cstring_i_cfloat_e_cIBAS_mEXC__IncorrectTagType_e_cIBAS_mEXC__TagNotFound
class _0RL_cd_0103e8c80a298d01_70000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_0103e8c80a298d01_70000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&, _OMNI_NS(IOP_C)*, const char*);
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::Float arg_1;
  ::CORBA::Long result;
};

void _0RL_cd_0103e8c80a298d01_70000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  arg_1 >>= _n;

}

void _0RL_cd_0103e8c80a298d01_70000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  (::CORBA::Float&)arg_1 <<= _n;

}

void _0RL_cd_0103e8c80a298d01_70000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_0103e8c80a298d01_70000000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Long&)result <<= _n;

}

const char* const _0RL_cd_0103e8c80a298d01_70000000::_user_exns[] = {
  IBAS::EXC_IncorrectTagType::_PD_repoId,
  IBAS::EXC_TagNotFound::_PD_repoId
};

void _0RL_cd_0103e8c80a298d01_70000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if (omni::strMatch(repoId, IBAS::EXC_IncorrectTagType::_PD_repoId)) {
    IBAS::EXC_IncorrectTagType _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if (omni::strMatch(repoId, IBAS::EXC_TagNotFound::_PD_repoId)) {
    IBAS::EXC_TagNotFound _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_0103e8c80a298d01_80000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_0103e8c80a298d01_70000000* tcd = (_0RL_cd_0103e8c80a298d01_70000000*)cd;
  IBAS::_impl_BASIntrf* impl = (IBAS::_impl_BASIntrf*) svnt->_ptrToInterface(IBAS::BASIntrf::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->setFloat(tcd->arg_0, tcd->arg_1);
#else
  if (!cd->is_upcall())
    tcd->result = impl->setFloat(tcd->arg_0, tcd->arg_1);
  else {
    try {
      tcd->result = impl->setFloat(tcd->arg_0, tcd->arg_1);
    }
    catch(IBAS::EXC_TagNotFound& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(IBAS::EXC_IncorrectTagType& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Long IBAS::_objref_BASIntrf::setFloat(const char* tag, ::CORBA::Float val)
{
  _0RL_cd_0103e8c80a298d01_70000000 _call_desc(_0RL_lcfn_0103e8c80a298d01_80000000, "setFloat", 9);
  _call_desc.arg_0 = tag;
  _call_desc.arg_1 = val;

  _invoke(_call_desc);
  return _call_desc.result;


}


//
// Code for IBAS::BASIntrf::setString

// Proxy call descriptor class. Mangled signature:
//  _clong_i_cstring_i_cstring_e_cIBAS_mEXC__IncorrectTagType_e_cIBAS_mEXC__TagNotFound
class _0RL_cd_0103e8c80a298d01_90000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_0103e8c80a298d01_90000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&, _OMNI_NS(IOP_C)*, const char*);
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  ::CORBA::Long result;
};

void _0RL_cd_0103e8c80a298d01_90000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_0103e8c80a298d01_90000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_0103e8c80a298d01_90000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_0103e8c80a298d01_90000000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Long&)result <<= _n;

}

const char* const _0RL_cd_0103e8c80a298d01_90000000::_user_exns[] = {
  IBAS::EXC_IncorrectTagType::_PD_repoId,
  IBAS::EXC_TagNotFound::_PD_repoId
};

void _0RL_cd_0103e8c80a298d01_90000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if (omni::strMatch(repoId, IBAS::EXC_IncorrectTagType::_PD_repoId)) {
    IBAS::EXC_IncorrectTagType _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if (omni::strMatch(repoId, IBAS::EXC_TagNotFound::_PD_repoId)) {
    IBAS::EXC_TagNotFound _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_0103e8c80a298d01_a0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_0103e8c80a298d01_90000000* tcd = (_0RL_cd_0103e8c80a298d01_90000000*)cd;
  IBAS::_impl_BASIntrf* impl = (IBAS::_impl_BASIntrf*) svnt->_ptrToInterface(IBAS::BASIntrf::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->setString(tcd->arg_0, tcd->arg_1);
#else
  if (!cd->is_upcall())
    tcd->result = impl->setString(tcd->arg_0, tcd->arg_1);
  else {
    try {
      tcd->result = impl->setString(tcd->arg_0, tcd->arg_1);
    }
    catch(IBAS::EXC_TagNotFound& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(IBAS::EXC_IncorrectTagType& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Long IBAS::_objref_BASIntrf::setString(const char* tag, const char* val)
{
  _0RL_cd_0103e8c80a298d01_90000000 _call_desc(_0RL_lcfn_0103e8c80a298d01_a0000000, "setString", 10);
  _call_desc.arg_0 = tag;
  _call_desc.arg_1 = val;

  _invoke(_call_desc);
  return _call_desc.result;


}


//
// Code for IBAS::BASIntrf::setLong

// Proxy call descriptor class. Mangled signature:
//  _clong_i_cstring_i_clong_e_cIBAS_mEXC__IncorrectTagType_e_cIBAS_mEXC__TagNotFound
class _0RL_cd_0103e8c80a298d01_b0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_0103e8c80a298d01_b0000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&, _OMNI_NS(IOP_C)*, const char*);
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::Long arg_1;
  ::CORBA::Long result;
};

void _0RL_cd_0103e8c80a298d01_b0000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  arg_1 >>= _n;

}

void _0RL_cd_0103e8c80a298d01_b0000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  (::CORBA::Long&)arg_1 <<= _n;

}

void _0RL_cd_0103e8c80a298d01_b0000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_0103e8c80a298d01_b0000000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Long&)result <<= _n;

}

const char* const _0RL_cd_0103e8c80a298d01_b0000000::_user_exns[] = {
  IBAS::EXC_IncorrectTagType::_PD_repoId,
  IBAS::EXC_TagNotFound::_PD_repoId
};

void _0RL_cd_0103e8c80a298d01_b0000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if (omni::strMatch(repoId, IBAS::EXC_IncorrectTagType::_PD_repoId)) {
    IBAS::EXC_IncorrectTagType _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if (omni::strMatch(repoId, IBAS::EXC_TagNotFound::_PD_repoId)) {
    IBAS::EXC_TagNotFound _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_0103e8c80a298d01_c0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_0103e8c80a298d01_b0000000* tcd = (_0RL_cd_0103e8c80a298d01_b0000000*)cd;
  IBAS::_impl_BASIntrf* impl = (IBAS::_impl_BASIntrf*) svnt->_ptrToInterface(IBAS::BASIntrf::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->setLong(tcd->arg_0, tcd->arg_1);
#else
  if (!cd->is_upcall())
    tcd->result = impl->setLong(tcd->arg_0, tcd->arg_1);
  else {
    try {
      tcd->result = impl->setLong(tcd->arg_0, tcd->arg_1);
    }
    catch(IBAS::EXC_TagNotFound& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(IBAS::EXC_IncorrectTagType& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Long IBAS::_objref_BASIntrf::setLong(const char* tag, ::CORBA::Long val)
{
  _0RL_cd_0103e8c80a298d01_b0000000 _call_desc(_0RL_lcfn_0103e8c80a298d01_c0000000, "setLong", 8);
  _call_desc.arg_0 = tag;
  _call_desc.arg_1 = val;

  _invoke(_call_desc);
  return _call_desc.result;


}


//
// Code for IBAS::BASIntrf::setFlag

// Local call call-back function.
static void
_0RL_lcfn_0103e8c80a298d01_d0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_0103e8c80a298d01_b0000000* tcd = (_0RL_cd_0103e8c80a298d01_b0000000*)cd;
  IBAS::_impl_BASIntrf* impl = (IBAS::_impl_BASIntrf*) svnt->_ptrToInterface(IBAS::BASIntrf::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->setFlag(tcd->arg_0, tcd->arg_1);
#else
  if (!cd->is_upcall())
    tcd->result = impl->setFlag(tcd->arg_0, tcd->arg_1);
  else {
    try {
      tcd->result = impl->setFlag(tcd->arg_0, tcd->arg_1);
    }
    catch(IBAS::EXC_TagNotFound& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(IBAS::EXC_IncorrectTagType& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Long IBAS::_objref_BASIntrf::setFlag(const char* tag, ::CORBA::Long val)
{
  _0RL_cd_0103e8c80a298d01_b0000000 _call_desc(_0RL_lcfn_0103e8c80a298d01_d0000000, "setFlag", 8);
  _call_desc.arg_0 = tag;
  _call_desc.arg_1 = val;

  _invoke(_call_desc);
  return _call_desc.result;


}


//
// Code for IBAS::BASIntrf::pulseFlag

// Proxy call descriptor class. Mangled signature:
//  _clong_i_cstring_i_clong
class _0RL_cd_0103e8c80a298d01_e0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_0103e8c80a298d01_e0000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::Long arg_1;
  ::CORBA::Long result;
};

void _0RL_cd_0103e8c80a298d01_e0000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  arg_1 >>= _n;

}

void _0RL_cd_0103e8c80a298d01_e0000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  (::CORBA::Long&)arg_1 <<= _n;

}

void _0RL_cd_0103e8c80a298d01_e0000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_0103e8c80a298d01_e0000000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Long&)result <<= _n;

}

const char* const _0RL_cd_0103e8c80a298d01_e0000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_0103e8c80a298d01_f0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_0103e8c80a298d01_e0000000* tcd = (_0RL_cd_0103e8c80a298d01_e0000000*)cd;
  IBAS::_impl_BASIntrf* impl = (IBAS::_impl_BASIntrf*) svnt->_ptrToInterface(IBAS::BASIntrf::_PD_repoId);
  tcd->result = impl->pulseFlag(tcd->arg_0, tcd->arg_1);


}

::CORBA::Long IBAS::_objref_BASIntrf::pulseFlag(const char* tag, ::CORBA::Long msec)
{
  _0RL_cd_0103e8c80a298d01_e0000000 _call_desc(_0RL_lcfn_0103e8c80a298d01_f0000000, "pulseFlag", 10);
  _call_desc.arg_0 = tag;
  _call_desc.arg_1 = msec;

  _invoke(_call_desc);
  return _call_desc.result;


}


//
// Code for IBAS::BASIntrf::getLastResponses

// Proxy call descriptor class. Mangled signature:
//  void_o_cIBAS_mseq__IBAS__LastResponses
class _0RL_cd_0103e8c80a298d01_01000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_0103e8c80a298d01_01000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  IBAS::seq_IBAS_LastResponses_var arg_0;
};

void _0RL_cd_0103e8c80a298d01_01000000::marshalReturnedValues(cdrStream& _n)
{
  (const IBAS::seq_IBAS_LastResponses&) arg_0 >>= _n;

}

void _0RL_cd_0103e8c80a298d01_01000000::unmarshalReturnedValues(cdrStream& _n)
{
  arg_0 = new IBAS::seq_IBAS_LastResponses;
  (IBAS::seq_IBAS_LastResponses&)arg_0 <<= _n;

}

const char* const _0RL_cd_0103e8c80a298d01_01000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_0103e8c80a298d01_11000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_0103e8c80a298d01_01000000* tcd = (_0RL_cd_0103e8c80a298d01_01000000*)cd;
  IBAS::_impl_BASIntrf* impl = (IBAS::_impl_BASIntrf*) svnt->_ptrToInterface(IBAS::BASIntrf::_PD_repoId);
  impl->getLastResponses(tcd->arg_0.out());


}

void IBAS::_objref_BASIntrf::getLastResponses(::IBAS::seq_IBAS_LastResponses_out IBAS_LastResponses)
{
  _0RL_cd_0103e8c80a298d01_01000000 _call_desc(_0RL_lcfn_0103e8c80a298d01_11000000, "getLastResponses", 17);


  _invoke(_call_desc);
  IBAS_LastResponses = _call_desc.arg_0._retn();


}

IBAS::_pof_BASIntrf::~_pof_BASIntrf() {}


omniObjRef*
IBAS::_pof_BASIntrf::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::IBAS::_objref_BASIntrf(ior, id);
}


::CORBA::Boolean
IBAS::_pof_BASIntrf::is_a(const char* id) const
{
  if (omni::ptrStrMatch(id, ::IBAS::BASIntrf::_PD_repoId))
    return 1;
  
  return 0;
}

const IBAS::_pof_BASIntrf _the_pof_IBAS_mBASIntrf;

IBAS::_impl_BASIntrf::~_impl_BASIntrf() {}


::CORBA::Boolean
IBAS::_impl_BASIntrf::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if (omni::strMatch(op, "getFloat")) {

    _0RL_cd_0103e8c80a298d01_00000000 _call_desc(_0RL_lcfn_0103e8c80a298d01_10000000, "getFloat", 9, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getString")) {

    _0RL_cd_0103e8c80a298d01_20000000 _call_desc(_0RL_lcfn_0103e8c80a298d01_30000000, "getString", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getLong")) {

    _0RL_cd_0103e8c80a298d01_40000000 _call_desc(_0RL_lcfn_0103e8c80a298d01_50000000, "getLong", 8, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getFlag")) {

    _0RL_cd_0103e8c80a298d01_40000000 _call_desc(_0RL_lcfn_0103e8c80a298d01_60000000, "getFlag", 8, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setFloat")) {

    _0RL_cd_0103e8c80a298d01_70000000 _call_desc(_0RL_lcfn_0103e8c80a298d01_80000000, "setFloat", 9, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setString")) {

    _0RL_cd_0103e8c80a298d01_90000000 _call_desc(_0RL_lcfn_0103e8c80a298d01_a0000000, "setString", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setLong")) {

    _0RL_cd_0103e8c80a298d01_b0000000 _call_desc(_0RL_lcfn_0103e8c80a298d01_c0000000, "setLong", 8, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setFlag")) {

    _0RL_cd_0103e8c80a298d01_b0000000 _call_desc(_0RL_lcfn_0103e8c80a298d01_d0000000, "setFlag", 8, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "pulseFlag")) {

    _0RL_cd_0103e8c80a298d01_e0000000 _call_desc(_0RL_lcfn_0103e8c80a298d01_f0000000, "pulseFlag", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getLastResponses")) {

    _0RL_cd_0103e8c80a298d01_01000000 _call_desc(_0RL_lcfn_0103e8c80a298d01_11000000, "getLastResponses", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
IBAS::_impl_BASIntrf::_ptrToInterface(const char* id)
{
  if (id == ::IBAS::BASIntrf::_PD_repoId)
    return (::IBAS::_impl_BASIntrf*) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (void*) 1;

  if (omni::strMatch(id, ::IBAS::BASIntrf::_PD_repoId))
    return (::IBAS::_impl_BASIntrf*) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (void*) 1;
  return 0;
}

const char*
IBAS::_impl_BASIntrf::_mostDerivedRepoId()
{
  return ::IBAS::BASIntrf::_PD_repoId;
}

POA_IBAS::BASIntrf::~BASIntrf() {}

