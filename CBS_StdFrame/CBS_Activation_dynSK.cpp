// This file is generated by omniidl (C++ backend) - omniORB_4_2. Do not edit.

#include "CBS_Activation_s.hh"

OMNI_USING_NAMESPACE(omni)

static const char* _0RL_dyn_library_version = omniORB_4_2_dyn;

static ::CORBA::TypeCode::_Tracker _0RL_tcTrack(__FILE__);

static CORBA::TypeCode_ptr _0RL_tc_CBS__ExecEnv = CORBA::TypeCode::PR_alias_tc("IDL:CBS_ExecEnv:1.0", "CBS_ExecEnv", CORBA::TypeCode::PR_sequence_tc(0, CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack), &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_CBS_ExecEnv = _0RL_tc_CBS__ExecEnv;

static CORBA::TypeCode_ptr _0RL_tc_CBS__ExecParameters = CORBA::TypeCode::PR_alias_tc("IDL:CBS_ExecParameters:1.0", "CBS_ExecParameters", CORBA::TypeCode::PR_sequence_tc(0, CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack), &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_CBS_ExecParameters = _0RL_tc_CBS__ExecParameters;

static CORBA::PR_structMember _0RL_structmember_CBS__ActivationParam[] = {
  {"executable", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"parameters", _0RL_tc_CBS__ExecParameters},
  {"hostName", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"environment", _0RL_tc_CBS__ExecEnv}
};

#ifdef _0RL_tc_CBS__ActivationParam
#  undef _0RL_tc_CBS__ActivationParam
#endif
static CORBA::TypeCode_ptr _0RL_tc_CBS__ActivationParam = CORBA::TypeCode::PR_struct_tc("IDL:CBS_ActivationParam:1.0", "CBS_ActivationParam", _0RL_structmember_CBS__ActivationParam, 4, &_0RL_tcTrack);

const CORBA::TypeCode_ptr _tc_CBS_ActivationParam = _0RL_tc_CBS__ActivationParam;


static CORBA::PR_structMember _0RL_structmember_CBS__MonitoringParam[] = {
  {"numRestartAttempts", CORBA::TypeCode::PR_ulong_tc()},
  {"restartInterval", CORBA::TypeCode::PR_ulong_tc()},
  {"startLevel", CORBA::TypeCode::PR_ulong_tc()},
  {"restartCycle", CORBA::TypeCode::PR_ulong_tc()}
};

#ifdef _0RL_tc_CBS__MonitoringParam
#  undef _0RL_tc_CBS__MonitoringParam
#endif
static CORBA::TypeCode_ptr _0RL_tc_CBS__MonitoringParam = CORBA::TypeCode::PR_struct_tc("IDL:CBS_MonitoringParam:1.0", "CBS_MonitoringParam", _0RL_structmember_CBS__MonitoringParam, 4, &_0RL_tcTrack);

const CORBA::TypeCode_ptr _tc_CBS_MonitoringParam = _0RL_tc_CBS__MonitoringParam;


static CORBA::TypeCode_ptr _0RL_tc_CBS__ProcessId = CORBA::TypeCode::PR_alias_tc("IDL:CBS_ProcessId:1.0", "CBS_ProcessId", CORBA::TypeCode::PR_long_tc(), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_CBS_ProcessId = _0RL_tc_CBS__ProcessId;

const CORBA::TypeCode_ptr _tc_iCBS_ActivableServer = CORBA::TypeCode::PR_interface_tc("IDL:iCBS_ActivableServer:1.0", "iCBS_ActivableServer", &_0RL_tcTrack);

static void _0RL_CBS__ExecEnv_marshal_fn(cdrStream& _s, void* _v)
{
  CBS_ExecEnv* _p = (CBS_ExecEnv*)_v;
  *_p >>= _s;
}
static void _0RL_CBS__ExecEnv_unmarshal_fn(cdrStream& _s, void*& _v)
{
  CBS_ExecEnv* _p = new CBS_ExecEnv;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_CBS__ExecEnv_destructor_fn(void* _v)
{
  CBS_ExecEnv* _p = (CBS_ExecEnv*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const CBS_ExecEnv& _s)
{
  CBS_ExecEnv* _p = new CBS_ExecEnv(_s);
  _a.PR_insert(_0RL_tc_CBS__ExecEnv,
               _0RL_CBS__ExecEnv_marshal_fn,
               _0RL_CBS__ExecEnv_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, CBS_ExecEnv* _sp)
{
  _a.PR_insert(_0RL_tc_CBS__ExecEnv,
               _0RL_CBS__ExecEnv_marshal_fn,
               _0RL_CBS__ExecEnv_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, CBS_ExecEnv*& _sp)
{
  return _a >>= (const CBS_ExecEnv*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const CBS_ExecEnv*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_CBS__ExecEnv,
                    _0RL_CBS__ExecEnv_unmarshal_fn,
                    _0RL_CBS__ExecEnv_marshal_fn,
                    _0RL_CBS__ExecEnv_destructor_fn,
                    _v)) {
    _sp = (const CBS_ExecEnv*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_CBS__ExecParameters_marshal_fn(cdrStream& _s, void* _v)
{
  CBS_ExecParameters* _p = (CBS_ExecParameters*)_v;
  *_p >>= _s;
}
static void _0RL_CBS__ExecParameters_unmarshal_fn(cdrStream& _s, void*& _v)
{
  CBS_ExecParameters* _p = new CBS_ExecParameters;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_CBS__ExecParameters_destructor_fn(void* _v)
{
  CBS_ExecParameters* _p = (CBS_ExecParameters*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const CBS_ExecParameters& _s)
{
  CBS_ExecParameters* _p = new CBS_ExecParameters(_s);
  _a.PR_insert(_0RL_tc_CBS__ExecParameters,
               _0RL_CBS__ExecParameters_marshal_fn,
               _0RL_CBS__ExecParameters_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, CBS_ExecParameters* _sp)
{
  _a.PR_insert(_0RL_tc_CBS__ExecParameters,
               _0RL_CBS__ExecParameters_marshal_fn,
               _0RL_CBS__ExecParameters_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, CBS_ExecParameters*& _sp)
{
  return _a >>= (const CBS_ExecParameters*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const CBS_ExecParameters*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_CBS__ExecParameters,
                    _0RL_CBS__ExecParameters_unmarshal_fn,
                    _0RL_CBS__ExecParameters_marshal_fn,
                    _0RL_CBS__ExecParameters_destructor_fn,
                    _v)) {
    _sp = (const CBS_ExecParameters*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_CBS__ActivationParam_marshal_fn(cdrStream& _s, void* _v)
{
  CBS_ActivationParam* _p = (CBS_ActivationParam*)_v;
  *_p >>= _s;
}
static void _0RL_CBS__ActivationParam_unmarshal_fn(cdrStream& _s, void*& _v)
{
  CBS_ActivationParam* _p = new CBS_ActivationParam;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_CBS__ActivationParam_destructor_fn(void* _v)
{
  CBS_ActivationParam* _p = (CBS_ActivationParam*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const CBS_ActivationParam& _s)
{
  CBS_ActivationParam* _p = new CBS_ActivationParam(_s);
  _a.PR_insert(_0RL_tc_CBS__ActivationParam,
               _0RL_CBS__ActivationParam_marshal_fn,
               _0RL_CBS__ActivationParam_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, CBS_ActivationParam* _sp)
{
  _a.PR_insert(_0RL_tc_CBS__ActivationParam,
               _0RL_CBS__ActivationParam_marshal_fn,
               _0RL_CBS__ActivationParam_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, CBS_ActivationParam*& _sp)
{
  return _a >>= (const CBS_ActivationParam*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const CBS_ActivationParam*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_CBS__ActivationParam,
                    _0RL_CBS__ActivationParam_unmarshal_fn,
                    _0RL_CBS__ActivationParam_marshal_fn,
                    _0RL_CBS__ActivationParam_destructor_fn,
                    _v)) {
    _sp = (const CBS_ActivationParam*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_CBS__MonitoringParam_marshal_fn(cdrStream& _s, void* _v)
{
  CBS_MonitoringParam* _p = (CBS_MonitoringParam*)_v;
  *_p >>= _s;
}
static void _0RL_CBS__MonitoringParam_unmarshal_fn(cdrStream& _s, void*& _v)
{
  CBS_MonitoringParam* _p = new CBS_MonitoringParam;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_CBS__MonitoringParam_destructor_fn(void* _v)
{
  CBS_MonitoringParam* _p = (CBS_MonitoringParam*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const CBS_MonitoringParam& _s)
{
  CBS_MonitoringParam* _p = new CBS_MonitoringParam(_s);
  _a.PR_insert(_0RL_tc_CBS__MonitoringParam,
               _0RL_CBS__MonitoringParam_marshal_fn,
               _0RL_CBS__MonitoringParam_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, CBS_MonitoringParam* _sp)
{
  _a.PR_insert(_0RL_tc_CBS__MonitoringParam,
               _0RL_CBS__MonitoringParam_marshal_fn,
               _0RL_CBS__MonitoringParam_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, CBS_MonitoringParam*& _sp)
{
  return _a >>= (const CBS_MonitoringParam*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const CBS_MonitoringParam*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_CBS__MonitoringParam,
                    _0RL_CBS__MonitoringParam_unmarshal_fn,
                    _0RL_CBS__MonitoringParam_marshal_fn,
                    _0RL_CBS__MonitoringParam_destructor_fn,
                    _v)) {
    _sp = (const CBS_MonitoringParam*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_iCBS__ActivableServer_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_iCBS__ActivableServer_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(iCBS_ActivableServer::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_iCBS__ActivableServer_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, iCBS_ActivableServer_ptr _o)
{
  iCBS_ActivableServer_ptr _no = iCBS_ActivableServer::_duplicate(_o);
  _a.PR_insert(_tc_iCBS_ActivableServer,
               _0RL_iCBS__ActivableServer_marshal_fn,
               _0RL_iCBS__ActivableServer_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, iCBS_ActivableServer_ptr* _op)
{
  _a.PR_insert(_tc_iCBS_ActivableServer,
               _0RL_iCBS__ActivableServer_marshal_fn,
               _0RL_iCBS__ActivableServer_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = iCBS_ActivableServer::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, iCBS_ActivableServer_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(_tc_iCBS_ActivableServer,
                    _0RL_iCBS__ActivableServer_unmarshal_fn,
                    _0RL_iCBS__ActivableServer_marshal_fn,
                    _0RL_iCBS__ActivableServer_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (iCBS_ActivableServer_ptr)_r->_ptrToObjRef(iCBS_ActivableServer::_PD_repoId);
    else
      _o = iCBS_ActivableServer::_nil();
    return 1;
  }
  return 0;
}

