// This file is generated by omniidl (C++ backend)- omniORB_4_2. Do not edit.

#include "CBS_Common_s.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_2;



iCBS_OctetTransfer_ptr iCBS_OctetTransfer_Helper::_nil() {
  return ::iCBS_OctetTransfer::_nil();
}

::CORBA::Boolean iCBS_OctetTransfer_Helper::is_nil(::iCBS_OctetTransfer_ptr p) {
  return ::CORBA::is_nil(p);

}

void iCBS_OctetTransfer_Helper::release(::iCBS_OctetTransfer_ptr p) {
  ::CORBA::release(p);
}

void iCBS_OctetTransfer_Helper::marshalObjRef(::iCBS_OctetTransfer_ptr obj, cdrStream& s) {
  ::iCBS_OctetTransfer::_marshalObjRef(obj, s);
}

iCBS_OctetTransfer_ptr iCBS_OctetTransfer_Helper::unmarshalObjRef(cdrStream& s) {
  return ::iCBS_OctetTransfer::_unmarshalObjRef(s);
}

void iCBS_OctetTransfer_Helper::duplicate(::iCBS_OctetTransfer_ptr obj) {
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
}

iCBS_OctetTransfer_ptr
iCBS_OctetTransfer::_duplicate(::iCBS_OctetTransfer_ptr obj)
{
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
  return obj;
}

iCBS_OctetTransfer_ptr
iCBS_OctetTransfer::_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


iCBS_OctetTransfer_ptr
iCBS_OctetTransfer::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

iCBS_OctetTransfer_ptr
iCBS_OctetTransfer::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_iCBS_OctetTransfer _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_iCBS_OctetTransfer* _the_nil_ptr = 0;
  if (!_the_nil_ptr) {
    omni::nilRefLock().lock();
    if (!_the_nil_ptr) {
      _the_nil_ptr = new _objref_iCBS_OctetTransfer;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* iCBS_OctetTransfer::_PD_repoId = "IDL:iCBS_OctetTransfer:1.0";


_objref_iCBS_OctetTransfer::~_objref_iCBS_OctetTransfer() {
  
}


_objref_iCBS_OctetTransfer::_objref_iCBS_OctetTransfer(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::iCBS_OctetTransfer::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
_objref_iCBS_OctetTransfer::_ptrToObjRef(const char* id)
{
  if (id == ::iCBS_OctetTransfer::_PD_repoId)
    return (::iCBS_OctetTransfer_ptr) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (::CORBA::Object_ptr) this;

  if (omni::strMatch(id, ::iCBS_OctetTransfer::_PD_repoId))
    return (::iCBS_OctetTransfer_ptr) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (::CORBA::Object_ptr) this;

  return 0;
}


//
// Code for iCBS_OctetTransfer::transfer

// Proxy call descriptor class. Mangled signature:
//  void_i_cCBS__OctetSequence
class _0RL_cd_a07d237b8744a0f4_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a07d237b8744a0f4_00000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  CBS_OctetSequence_var arg_0_;
  const CBS_OctetSequence* arg_0;
};

void _0RL_cd_a07d237b8744a0f4_00000000::marshalArguments(cdrStream& _n)
{
  (const CBS_OctetSequence&) *arg_0 >>= _n;

}

void _0RL_cd_a07d237b8744a0f4_00000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new CBS_OctetSequence;
  (CBS_OctetSequence&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

const char* const _0RL_cd_a07d237b8744a0f4_00000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a07d237b8744a0f4_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a07d237b8744a0f4_00000000* tcd = (_0RL_cd_a07d237b8744a0f4_00000000*)cd;
  _impl_iCBS_OctetTransfer* impl = (_impl_iCBS_OctetTransfer*) svnt->_ptrToInterface(iCBS_OctetTransfer::_PD_repoId);
  impl->transfer(*tcd->arg_0);


}

void _objref_iCBS_OctetTransfer::transfer(const ::CBS_OctetSequence& buffer)
{
  _0RL_cd_a07d237b8744a0f4_00000000 _call_desc(_0RL_lcfn_a07d237b8744a0f4_10000000, "transfer", 9);
  _call_desc.arg_0 = &(::CBS_OctetSequence&) buffer;

  _invoke(_call_desc);



}


//
// Code for iCBS_OctetTransfer::transferAndRetBytes

// Proxy call descriptor class. Mangled signature:
//  _clong_i_cCBS__OctetSequence
class _0RL_cd_a07d237b8744a0f4_20000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a07d237b8744a0f4_20000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  CBS_OctetSequence_var arg_0_;
  const CBS_OctetSequence* arg_0;
  ::CORBA::Long result;
};

void _0RL_cd_a07d237b8744a0f4_20000000::marshalArguments(cdrStream& _n)
{
  (const CBS_OctetSequence&) *arg_0 >>= _n;

}

void _0RL_cd_a07d237b8744a0f4_20000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new CBS_OctetSequence;
  (CBS_OctetSequence&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

void _0RL_cd_a07d237b8744a0f4_20000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_a07d237b8744a0f4_20000000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Long&)result <<= _n;

}

const char* const _0RL_cd_a07d237b8744a0f4_20000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a07d237b8744a0f4_30000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a07d237b8744a0f4_20000000* tcd = (_0RL_cd_a07d237b8744a0f4_20000000*)cd;
  _impl_iCBS_OctetTransfer* impl = (_impl_iCBS_OctetTransfer*) svnt->_ptrToInterface(iCBS_OctetTransfer::_PD_repoId);
  tcd->result = impl->transferAndRetBytes(*tcd->arg_0);


}

::CORBA::Long _objref_iCBS_OctetTransfer::transferAndRetBytes(const ::CBS_OctetSequence& buffer)
{
  _0RL_cd_a07d237b8744a0f4_20000000 _call_desc(_0RL_lcfn_a07d237b8744a0f4_30000000, "transferAndRetBytes", 20);
  _call_desc.arg_0 = &(::CBS_OctetSequence&) buffer;

  _invoke(_call_desc);
  return _call_desc.result;


}

_pof_iCBS_OctetTransfer::~_pof_iCBS_OctetTransfer() {}


omniObjRef*
_pof_iCBS_OctetTransfer::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::_objref_iCBS_OctetTransfer(ior, id);
}


::CORBA::Boolean
_pof_iCBS_OctetTransfer::is_a(const char* id) const
{
  if (omni::ptrStrMatch(id, ::iCBS_OctetTransfer::_PD_repoId))
    return 1;
  
  return 0;
}

const _pof_iCBS_OctetTransfer _the_pof_iCBS__OctetTransfer;

_impl_iCBS_OctetTransfer::~_impl_iCBS_OctetTransfer() {}


::CORBA::Boolean
_impl_iCBS_OctetTransfer::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if (omni::strMatch(op, "transfer")) {

    _0RL_cd_a07d237b8744a0f4_00000000 _call_desc(_0RL_lcfn_a07d237b8744a0f4_10000000, "transfer", 9, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "transferAndRetBytes")) {

    _0RL_cd_a07d237b8744a0f4_20000000 _call_desc(_0RL_lcfn_a07d237b8744a0f4_30000000, "transferAndRetBytes", 20, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
_impl_iCBS_OctetTransfer::_ptrToInterface(const char* id)
{
  if (id == ::iCBS_OctetTransfer::_PD_repoId)
    return (::_impl_iCBS_OctetTransfer*) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (void*) 1;

  if (omni::strMatch(id, ::iCBS_OctetTransfer::_PD_repoId))
    return (::_impl_iCBS_OctetTransfer*) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (void*) 1;
  return 0;
}

const char*
_impl_iCBS_OctetTransfer::_mostDerivedRepoId()
{
  return ::iCBS_OctetTransfer::_PD_repoId;
}

void
MCBS::CBS_LocalTime::operator>>= (cdrStream &_n) const
{
  year >>= _n;
  month >>= _n;
  day >>= _n;
  hour >>= _n;
  minute >>= _n;
  second >>= _n;
  msec >>= _n;
  _n.marshalBoolean(dstFlag);

}

void
MCBS::CBS_LocalTime::operator<<= (cdrStream &_n)
{
  (::CORBA::UShort&)year <<= _n;
  (::CORBA::UShort&)month <<= _n;
  (::CORBA::UShort&)day <<= _n;
  (::CORBA::UShort&)hour <<= _n;
  (::CORBA::UShort&)minute <<= _n;
  (::CORBA::UShort&)second <<= _n;
  (::CORBA::UShort&)msec <<= _n;
  dstFlag = _n.unmarshalBoolean();

}

POA_iCBS_OctetTransfer::~POA_iCBS_OctetTransfer() {}

