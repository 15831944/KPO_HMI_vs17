// This file is generated by omniidl (C++ backend)- omniORB_4_2. Do not edit.
#ifndef __CBS__Tasks_hh__
#define __CBS__Tasks_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_CBS__Tasks
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_CBS__Tasks
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_CBS__Tasks
#endif



#ifndef __CBS__Common_hh_EXTERNAL_GUARD__
#define __CBS__Common_hh_EXTERNAL_GUARD__
#include <CBS_Common_s.hh>
#endif
#ifndef __CBS__Activation_hh_EXTERNAL_GUARD__
#define __CBS__Activation_hh_EXTERNAL_GUARD__
#include <CBS_Activation_s.hh>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif



#ifndef __iCBS__Task__
#define __iCBS__Task__
class iCBS_Task;
class _objref_iCBS_Task;
class _impl_iCBS_Task;

typedef _objref_iCBS_Task* iCBS_Task_ptr;
typedef iCBS_Task_ptr iCBS_TaskRef;

class iCBS_Task_Helper {
public:
  typedef iCBS_Task_ptr _ptr_type;

  static _ptr_type _nil();
  static _CORBA_Boolean is_nil(_ptr_type);
  static void release(_ptr_type);
  static void duplicate(_ptr_type);
  static void marshalObjRef(_ptr_type, cdrStream&);
  static _ptr_type unmarshalObjRef(cdrStream&);
};

typedef _CORBA_ObjRef_Var<_objref_iCBS_Task, iCBS_Task_Helper> iCBS_Task_var;
typedef _CORBA_ObjRef_OUT_arg<_objref_iCBS_Task,iCBS_Task_Helper > iCBS_Task_out;

#endif

_CORBA_GLOBAL_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_CBS_TaskSeq;

class CBS_TaskSeq_var;

class CBS_TaskSeq : public _CORBA_Unbounded_Sequence_ObjRef< _objref_iCBS_Task, _CORBA_ObjRef_Element< _objref_iCBS_Task, iCBS_Task_Helper> , iCBS_Task_Helper >  {
public:
  typedef CBS_TaskSeq_var _var_type;
  inline CBS_TaskSeq() {}
  inline CBS_TaskSeq(const CBS_TaskSeq& _s)
    : _CORBA_Unbounded_Sequence_ObjRef< _objref_iCBS_Task, _CORBA_ObjRef_Element< _objref_iCBS_Task, iCBS_Task_Helper> , iCBS_Task_Helper > (_s) {}

  inline CBS_TaskSeq(_CORBA_ULong _max)
    : _CORBA_Unbounded_Sequence_ObjRef< _objref_iCBS_Task, _CORBA_ObjRef_Element< _objref_iCBS_Task, iCBS_Task_Helper> , iCBS_Task_Helper > (_max) {}
  inline CBS_TaskSeq(_CORBA_ULong _max, _CORBA_ULong _len, iCBS_Task_ptr* _val, _CORBA_Boolean _rel=0)
    : _CORBA_Unbounded_Sequence_ObjRef< _objref_iCBS_Task, _CORBA_ObjRef_Element< _objref_iCBS_Task, iCBS_Task_Helper> , iCBS_Task_Helper > (_max, _len, _val, _rel) {}



  inline CBS_TaskSeq& operator = (const CBS_TaskSeq& _s) {
    _CORBA_Unbounded_Sequence_ObjRef< _objref_iCBS_Task, _CORBA_ObjRef_Element< _objref_iCBS_Task, iCBS_Task_Helper> , iCBS_Task_Helper > ::operator=(_s);
    return *this;
  }
};

class CBS_TaskSeq_out;

class CBS_TaskSeq_var {
public:
  inline CBS_TaskSeq_var() : _pd_seq(0) {}
  inline CBS_TaskSeq_var(CBS_TaskSeq* _s) : _pd_seq(_s) {}
  inline CBS_TaskSeq_var(const CBS_TaskSeq_var& _s) {
    if (_s._pd_seq)  _pd_seq = new CBS_TaskSeq(*_s._pd_seq);
    else             _pd_seq = 0;
  }
  inline ~CBS_TaskSeq_var() { if (_pd_seq)  delete _pd_seq; }
    
  inline CBS_TaskSeq_var& operator = (CBS_TaskSeq* _s) {
    if (_pd_seq)  delete _pd_seq;
    _pd_seq = _s;
    return *this;
  }
  inline CBS_TaskSeq_var& operator = (const CBS_TaskSeq_var& _s) {
    if (&_s != this) {
      if (_s._pd_seq) {
        if (!_pd_seq)  _pd_seq = new CBS_TaskSeq;
        *_pd_seq = *_s._pd_seq;
      }
      else if (_pd_seq) {
        delete _pd_seq;
        _pd_seq = 0;
      }
    }
    return *this;
  }
  inline _CORBA_ObjRef_Element< _objref_iCBS_Task, iCBS_Task_Helper>  operator [] (_CORBA_ULong _s) {
    return (*_pd_seq)[_s];
  }



  inline CBS_TaskSeq* operator -> () { return _pd_seq; }
  inline const CBS_TaskSeq* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
  inline operator CBS_TaskSeq& () const { return *_pd_seq; }
#else
  inline operator const CBS_TaskSeq& () const { return *_pd_seq; }
  inline operator CBS_TaskSeq& () { return *_pd_seq; }
#endif
    
  inline const CBS_TaskSeq& in() const { return *_pd_seq; }
  inline CBS_TaskSeq&       inout()    { return *_pd_seq; }
  inline CBS_TaskSeq*&      out() {
    if (_pd_seq) { delete _pd_seq; _pd_seq = 0; }
    return _pd_seq;
  }
  inline CBS_TaskSeq* _retn() { CBS_TaskSeq* tmp = _pd_seq; _pd_seq = 0; return tmp; }
    
  friend class CBS_TaskSeq_out;
  
private:
  CBS_TaskSeq* _pd_seq;
};

class CBS_TaskSeq_out {
public:
  inline CBS_TaskSeq_out(CBS_TaskSeq*& _s) : _data(_s) { _data = 0; }
  inline CBS_TaskSeq_out(CBS_TaskSeq_var& _s)
    : _data(_s._pd_seq) { _s = (CBS_TaskSeq*) 0; }
  inline CBS_TaskSeq_out(const CBS_TaskSeq_out& _s) : _data(_s._data) {}
  inline CBS_TaskSeq_out& operator = (const CBS_TaskSeq_out& _s) {
    _data = _s._data;
    return *this;
  }
  inline CBS_TaskSeq_out& operator = (CBS_TaskSeq* _s) {
    _data = _s;
    return *this;
  }
  inline operator CBS_TaskSeq*&()  { return _data; }
  inline CBS_TaskSeq*& ptr()       { return _data; }
  inline CBS_TaskSeq* operator->() { return _data; }

  inline _CORBA_ObjRef_Element< _objref_iCBS_Task, iCBS_Task_Helper>  operator [] (_CORBA_ULong _i) {
    return (*_data)[_i];
  }



  CBS_TaskSeq*& _data;

private:
  CBS_TaskSeq_out();
  CBS_TaskSeq_out& operator=(const CBS_TaskSeq_var&);
};

#ifndef __iCBS__TaskOutput__
#define __iCBS__TaskOutput__
class iCBS_TaskOutput;
class _objref_iCBS_TaskOutput;
class _impl_iCBS_TaskOutput;

typedef _objref_iCBS_TaskOutput* iCBS_TaskOutput_ptr;
typedef iCBS_TaskOutput_ptr iCBS_TaskOutputRef;

class iCBS_TaskOutput_Helper {
public:
  typedef iCBS_TaskOutput_ptr _ptr_type;

  static _ptr_type _nil();
  static _CORBA_Boolean is_nil(_ptr_type);
  static void release(_ptr_type);
  static void duplicate(_ptr_type);
  static void marshalObjRef(_ptr_type, cdrStream&);
  static _ptr_type unmarshalObjRef(cdrStream&);
};

typedef _CORBA_ObjRef_Var<_objref_iCBS_TaskOutput, iCBS_TaskOutput_Helper> iCBS_TaskOutput_var;
typedef _CORBA_ObjRef_OUT_arg<_objref_iCBS_TaskOutput,iCBS_TaskOutput_Helper > iCBS_TaskOutput_out;

#endif

// interface iCBS_TaskOutput
class iCBS_TaskOutput {
public:
  // Declarations for this interface type.
  typedef iCBS_TaskOutput_ptr _ptr_type;
  typedef iCBS_TaskOutput_var _var_type;

  static _ptr_type _duplicate(_ptr_type);
  static _ptr_type _narrow(::CORBA::Object_ptr);
  static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
  
  static _ptr_type _nil();

  static inline void _marshalObjRef(_ptr_type, cdrStream&);

  static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
    omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
    if (o)
      return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
    else
      return _nil();
  }

  static inline _ptr_type _fromObjRef(omniObjRef* o) {
    if (o)
      return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
    else
      return _nil();
  }

  static _core_attr const char* _PD_repoId;

  // Other IDL defined within this scope.
  
};

class _objref_iCBS_TaskOutput :
  public virtual ::CORBA::Object,
  public virtual omniObjRef
{
public:
  // IDL operations
  void setOutput(const char* output);

  // Constructors
  inline _objref_iCBS_TaskOutput()  { _PR_setobj(0); }  // nil
  _objref_iCBS_TaskOutput(omniIOR*, omniIdentity*);

protected:
  virtual ~_objref_iCBS_TaskOutput();

  
private:
  virtual void* _ptrToObjRef(const char*);

  _objref_iCBS_TaskOutput(const _objref_iCBS_TaskOutput&);
  _objref_iCBS_TaskOutput& operator = (const _objref_iCBS_TaskOutput&);
  // not implemented

  friend class iCBS_TaskOutput;
};

class _pof_iCBS_TaskOutput : public _OMNI_NS(proxyObjectFactory) {
public:
  inline _pof_iCBS_TaskOutput() : _OMNI_NS(proxyObjectFactory)(iCBS_TaskOutput::_PD_repoId) {}
  virtual ~_pof_iCBS_TaskOutput();

  virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
  virtual _CORBA_Boolean is_a(const char*) const;
};

class _impl_iCBS_TaskOutput :
  public virtual omniServant
{
public:
  virtual ~_impl_iCBS_TaskOutput();

  virtual void setOutput(const char* output) = 0;
  
public:  // Really protected, workaround for xlC
  virtual _CORBA_Boolean _dispatch(omniCallHandle&);

private:
  virtual void* _ptrToInterface(const char*);
  virtual const char* _mostDerivedRepoId();
  
};


_CORBA_GLOBAL_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_iCBS_TaskOutput;

#ifndef __iCBS__Task__
#define __iCBS__Task__
class iCBS_Task;
class _objref_iCBS_Task;
class _impl_iCBS_Task;

typedef _objref_iCBS_Task* iCBS_Task_ptr;
typedef iCBS_Task_ptr iCBS_TaskRef;

class iCBS_Task_Helper {
public:
  typedef iCBS_Task_ptr _ptr_type;

  static _ptr_type _nil();
  static _CORBA_Boolean is_nil(_ptr_type);
  static void release(_ptr_type);
  static void duplicate(_ptr_type);
  static void marshalObjRef(_ptr_type, cdrStream&);
  static _ptr_type unmarshalObjRef(cdrStream&);
};

typedef _CORBA_ObjRef_Var<_objref_iCBS_Task, iCBS_Task_Helper> iCBS_Task_var;
typedef _CORBA_ObjRef_OUT_arg<_objref_iCBS_Task,iCBS_Task_Helper > iCBS_Task_out;

#endif

// interface iCBS_Task
class iCBS_Task {
public:
  // Declarations for this interface type.
  typedef iCBS_Task_ptr _ptr_type;
  typedef iCBS_Task_var _var_type;

  static _ptr_type _duplicate(_ptr_type);
  static _ptr_type _narrow(::CORBA::Object_ptr);
  static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
  
  static _ptr_type _nil();

  static inline void _marshalObjRef(_ptr_type, cdrStream&);

  static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
    omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
    if (o)
      return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
    else
      return _nil();
  }

  static inline _ptr_type _fromObjRef(omniObjRef* o) {
    if (o)
      return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
    else
      return _nil();
  }

  static _core_attr const char* _PD_repoId;

  // Other IDL defined within this scope.
  enum CBS_RunState { CBS_NotReacheable, CBS_Running, CBS_PartiallyRunning, CBS_NotRunning /*, __max_CBS_RunState=0xffffffff */ };
  typedef CBS_RunState& CBS_RunState_out;

  static _dyn_attr const ::CORBA::TypeCode_ptr _tc_CBS_RunState;

  enum CBS_TaskPriority { CBS_PrioLowest, CBS_PrioLow, CBS_PrioNormal, CBS_PrioHigh, CBS_PrioHighest /*, __max_CBS_TaskPriority=0xffffffff */ };
  typedef CBS_TaskPriority& CBS_TaskPriority_out;

  static _dyn_attr const ::CORBA::TypeCode_ptr _tc_CBS_TaskPriority;

  enum CBS_StartupMode { ConfigMode, RuntimeMode /*, __max_CBS_StartupMode=0xffffffff */ };
  typedef CBS_StartupMode& CBS_StartupMode_out;

  static _dyn_attr const ::CORBA::TypeCode_ptr _tc_CBS_StartupMode;

  struct CBS_TaskData {
    typedef _CORBA_ConstrType_Fix_Var<CBS_TaskData> _var_type;

    
    ::CORBA::Boolean autoRecovery;

    CBS_TaskPriority priority;

    ::CORBA::Boolean critical;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef CBS_TaskData::_var_type CBS_TaskData_var;

  typedef CBS_TaskData& CBS_TaskData_out;

  static _dyn_attr const ::CORBA::TypeCode_ptr _tc_CBS_TaskData;

  enum CBS_WorkState { CBS_NotWorking, CBS_PartiallyWorking, CBS_Working /*, __max_CBS_WorkState=0xffffffff */ };
  typedef CBS_WorkState& CBS_WorkState_out;

  static _dyn_attr const ::CORBA::TypeCode_ptr _tc_CBS_WorkState;

  struct CBS_TaskState {
    typedef _CORBA_ConstrType_Fix_Var<CBS_TaskState> _var_type;

    
    CBS_RunState runState;

    CBS_WorkState workState;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef CBS_TaskState::_var_type CBS_TaskState_var;

  typedef CBS_TaskState& CBS_TaskState_out;

  static _dyn_attr const ::CORBA::TypeCode_ptr _tc_CBS_TaskState;

  struct CBS_TaskStateDetail {
    typedef _CORBA_ConstrType_Variable_Var<CBS_TaskStateDetail> _var_type;

    
    CBS_TaskState state;

    ::CORBA::String_member taskName;

    ::CORBA::String_member detail;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef CBS_TaskStateDetail::_var_type CBS_TaskStateDetail_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< CBS_TaskStateDetail,CBS_TaskStateDetail_var > CBS_TaskStateDetail_out;

  static _dyn_attr const ::CORBA::TypeCode_ptr _tc_CBS_TaskStateDetail;

  struct CBS_SubTaskStateInfo {
    typedef _CORBA_ConstrType_Variable_Var<CBS_SubTaskStateInfo> _var_type;

    
    ::CORBA::String_member taskName;

    CBS_TaskState state;

    CBS_TaskData data;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef CBS_SubTaskStateInfo::_var_type CBS_SubTaskStateInfo_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< CBS_SubTaskStateInfo,CBS_SubTaskStateInfo_var > CBS_SubTaskStateInfo_out;

  static _dyn_attr const ::CORBA::TypeCode_ptr _tc_CBS_SubTaskStateInfo;

  struct CBS_TaskStateInfo {
    typedef _CORBA_ConstrType_Variable_Var<CBS_TaskStateInfo> _var_type;

    
    ::CORBA::String_member taskName;

    CBS_TaskState state;

    typedef _CORBA_Unbounded_Sequence< CBS_SubTaskStateInfo >  _SubTaskStateInfoSeq_seq;
    _SubTaskStateInfoSeq_seq SubTaskStateInfoSeq;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef CBS_TaskStateInfo::_var_type CBS_TaskStateInfo_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< CBS_TaskStateInfo,CBS_TaskStateInfo_var > CBS_TaskStateInfo_out;

  static _dyn_attr const ::CORBA::TypeCode_ptr _tc_CBS_TaskStateInfo;

  static _dyn_attr const ::CORBA::TypeCode_ptr _tc_CBS_TaskStateDetailSeq;

  class CBS_TaskStateDetailSeq_var;

  class CBS_TaskStateDetailSeq : public _CORBA_Unbounded_Sequence< CBS_TaskStateDetail >  {
  public:
    typedef CBS_TaskStateDetailSeq_var _var_type;
    inline CBS_TaskStateDetailSeq() {}
    inline CBS_TaskStateDetailSeq(const CBS_TaskStateDetailSeq& _s)
      : _CORBA_Unbounded_Sequence< CBS_TaskStateDetail > (_s) {}

    inline CBS_TaskStateDetailSeq(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence< CBS_TaskStateDetail > (_max) {}
    inline CBS_TaskStateDetailSeq(_CORBA_ULong _max, _CORBA_ULong _len, CBS_TaskStateDetail* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence< CBS_TaskStateDetail > (_max, _len, _val, _rel) {}

  

    inline CBS_TaskStateDetailSeq& operator = (const CBS_TaskStateDetailSeq& _s) {
      _CORBA_Unbounded_Sequence< CBS_TaskStateDetail > ::operator=(_s);
      return *this;
    }
  };

  class CBS_TaskStateDetailSeq_out;

  class CBS_TaskStateDetailSeq_var {
  public:
    inline CBS_TaskStateDetailSeq_var() : _pd_seq(0) {}
    inline CBS_TaskStateDetailSeq_var(CBS_TaskStateDetailSeq* _s) : _pd_seq(_s) {}
    inline CBS_TaskStateDetailSeq_var(const CBS_TaskStateDetailSeq_var& _s) {
      if (_s._pd_seq)  _pd_seq = new CBS_TaskStateDetailSeq(*_s._pd_seq);
      else             _pd_seq = 0;
    }
    inline ~CBS_TaskStateDetailSeq_var() { if (_pd_seq)  delete _pd_seq; }
      
    inline CBS_TaskStateDetailSeq_var& operator = (CBS_TaskStateDetailSeq* _s) {
      if (_pd_seq)  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline CBS_TaskStateDetailSeq_var& operator = (const CBS_TaskStateDetailSeq_var& _s) {
      if (&_s != this) {
        if (_s._pd_seq) {
          if (!_pd_seq)  _pd_seq = new CBS_TaskStateDetailSeq;
          *_pd_seq = *_s._pd_seq;
        }
        else if (_pd_seq) {
          delete _pd_seq;
          _pd_seq = 0;
        }
      }
      return *this;
    }
    inline CBS_TaskStateDetail& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline CBS_TaskStateDetailSeq* operator -> () { return _pd_seq; }
    inline const CBS_TaskStateDetailSeq* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator CBS_TaskStateDetailSeq& () const { return *_pd_seq; }
#else
    inline operator const CBS_TaskStateDetailSeq& () const { return *_pd_seq; }
    inline operator CBS_TaskStateDetailSeq& () { return *_pd_seq; }
#endif
      
    inline const CBS_TaskStateDetailSeq& in() const { return *_pd_seq; }
    inline CBS_TaskStateDetailSeq&       inout()    { return *_pd_seq; }
    inline CBS_TaskStateDetailSeq*&      out() {
      if (_pd_seq) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline CBS_TaskStateDetailSeq* _retn() { CBS_TaskStateDetailSeq* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class CBS_TaskStateDetailSeq_out;
    
  private:
    CBS_TaskStateDetailSeq* _pd_seq;
  };

  class CBS_TaskStateDetailSeq_out {
  public:
    inline CBS_TaskStateDetailSeq_out(CBS_TaskStateDetailSeq*& _s) : _data(_s) { _data = 0; }
    inline CBS_TaskStateDetailSeq_out(CBS_TaskStateDetailSeq_var& _s)
      : _data(_s._pd_seq) { _s = (CBS_TaskStateDetailSeq*) 0; }
    inline CBS_TaskStateDetailSeq_out(const CBS_TaskStateDetailSeq_out& _s) : _data(_s._data) {}
    inline CBS_TaskStateDetailSeq_out& operator = (const CBS_TaskStateDetailSeq_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline CBS_TaskStateDetailSeq_out& operator = (CBS_TaskStateDetailSeq* _s) {
      _data = _s;
      return *this;
    }
    inline operator CBS_TaskStateDetailSeq*&()  { return _data; }
    inline CBS_TaskStateDetailSeq*& ptr()       { return _data; }
    inline CBS_TaskStateDetailSeq* operator->() { return _data; }

    inline CBS_TaskStateDetail& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    CBS_TaskStateDetailSeq*& _data;

  private:
    CBS_TaskStateDetailSeq_out();
    CBS_TaskStateDetailSeq_out& operator=(const CBS_TaskStateDetailSeq_var&);
  };


};

class _objref_iCBS_Task :
  public virtual ::CORBA::Object,
  public virtual omniObjRef
{
public:
  // IDL operations
  char* name();
  MCBS::CBS_LocalTime startTime();
  iCBS_Task::CBS_TaskStateDetail* taskStateDetail();
  iCBS_Task::CBS_TaskStateDetailSeq* subtaskDetails();
  ::CORBA::ULong traceLevel();
  void traceLevel(::CORBA::ULong _v);
  CBS_TaskSeq* subtasks();
  CBS_StringSequence* subtaskNames();
  iCBS_ActivableServer_ptr activableServer();
  iCBS_Task::CBS_TaskStateInfo* getTaskStateInfo(::CORBA::String_out taskDeails, ::MCBS::CBS_LocalTime& startTime, ::CORBA::ULong& traceLevel, ::CORBA::Boolean& traceEnabled);
  void startUp(::iCBS_Task::CBS_StartupMode mode);
  void runDown();
  iCBS_Task::CBS_RunState getOwnRunState();
  iCBS_Task::CBS_RunState getOverallRunState();
  iCBS_Task::CBS_WorkState getOwnWorkState();
  iCBS_Task::CBS_TaskState ping(::CORBA::String_out taskDetails);
  iCBS_Task::CBS_TaskState getOverallTaskState();
  iCBS_Task::CBS_TaskData getSubtaskProperties(const char* taskName);
  void setSubtaskProperties(const char* taskName, const ::iCBS_Task::CBS_TaskData& taskData);
  void showTrace(const char* hostName, ::iCBS_TaskOutput_ptr taskOutput);
  char* isTraced(::CORBA::String_INOUT_arg hostName, ::MCBS::CBS_LocalTime& startTime);
  char* enableTracing(const char* hostName, ::MCBS::CBS_LocalTime& startTime);
  void disableTracing();
  ::CORBA::Boolean isTracingEnabled();

  // Constructors
  inline _objref_iCBS_Task()  { _PR_setobj(0); }  // nil
  _objref_iCBS_Task(omniIOR*, omniIdentity*);

protected:
  virtual ~_objref_iCBS_Task();

  
private:
  virtual void* _ptrToObjRef(const char*);

  _objref_iCBS_Task(const _objref_iCBS_Task&);
  _objref_iCBS_Task& operator = (const _objref_iCBS_Task&);
  // not implemented

  friend class iCBS_Task;
};

class _pof_iCBS_Task : public _OMNI_NS(proxyObjectFactory) {
public:
  inline _pof_iCBS_Task() : _OMNI_NS(proxyObjectFactory)(iCBS_Task::_PD_repoId) {}
  virtual ~_pof_iCBS_Task();

  virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
  virtual _CORBA_Boolean is_a(const char*) const;
};

class _impl_iCBS_Task :
  public virtual omniServant
{
public:
  virtual ~_impl_iCBS_Task();

  virtual char* name() = 0;
  virtual MCBS::CBS_LocalTime startTime() = 0;
  virtual iCBS_Task::CBS_TaskStateDetail* taskStateDetail() = 0;
  virtual iCBS_Task::CBS_TaskStateDetailSeq* subtaskDetails() = 0;
  virtual ::CORBA::ULong traceLevel() = 0;
  virtual void traceLevel(::CORBA::ULong _v) = 0;
  virtual CBS_TaskSeq* subtasks() = 0;
  virtual CBS_StringSequence* subtaskNames() = 0;
  virtual iCBS_ActivableServer_ptr activableServer() = 0;
  virtual iCBS_Task::CBS_TaskStateInfo* getTaskStateInfo(::CORBA::String_out taskDeails, ::MCBS::CBS_LocalTime& startTime, ::CORBA::ULong& traceLevel, ::CORBA::Boolean& traceEnabled) = 0;
  virtual void startUp(::iCBS_Task::CBS_StartupMode mode) = 0;
  virtual void runDown() = 0;
  virtual iCBS_Task::CBS_RunState getOwnRunState() = 0;
  virtual iCBS_Task::CBS_RunState getOverallRunState() = 0;
  virtual iCBS_Task::CBS_WorkState getOwnWorkState() = 0;
  virtual iCBS_Task::CBS_TaskState ping(::CORBA::String_out taskDetails) = 0;
  virtual iCBS_Task::CBS_TaskState getOverallTaskState() = 0;
  virtual iCBS_Task::CBS_TaskData getSubtaskProperties(const char* taskName) = 0;
  virtual void setSubtaskProperties(const char* taskName, const ::iCBS_Task::CBS_TaskData& taskData) = 0;
  virtual void showTrace(const char* hostName, ::iCBS_TaskOutput_ptr taskOutput) = 0;
  virtual char* isTraced(char*& hostName, ::MCBS::CBS_LocalTime& startTime) = 0;
  virtual char* enableTracing(const char* hostName, ::MCBS::CBS_LocalTime& startTime) = 0;
  virtual void disableTracing() = 0;
  virtual ::CORBA::Boolean isTracingEnabled() = 0;
  
public:  // Really protected, workaround for xlC
  virtual _CORBA_Boolean _dispatch(omniCallHandle&);

private:
  virtual void* _ptrToInterface(const char*);
  virtual const char* _mostDerivedRepoId();
  
};


_CORBA_GLOBAL_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_iCBS_Task;



class POA_iCBS_TaskOutput :
  public virtual _impl_iCBS_TaskOutput,
  public virtual ::PortableServer::ServantBase
{
public:
  virtual ~POA_iCBS_TaskOutput();

  inline ::iCBS_TaskOutput_ptr _this() {
    return (::iCBS_TaskOutput_ptr) _do_this(::iCBS_TaskOutput::_PD_repoId);
  }
};

class POA_iCBS_Task :
  public virtual _impl_iCBS_Task,
  public virtual ::PortableServer::ServantBase
{
public:
  virtual ~POA_iCBS_Task();

  inline ::iCBS_Task_ptr _this() {
    return (::iCBS_Task_ptr) _do_this(::iCBS_Task::_PD_repoId);
  }
};







#undef _core_attr
#undef _dyn_attr

void operator<<=(::CORBA::Any& _a, const CBS_TaskSeq& _s);
void operator<<=(::CORBA::Any& _a, CBS_TaskSeq* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, CBS_TaskSeq*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const CBS_TaskSeq*& _sp);

void operator<<=(::CORBA::Any& _a, iCBS_TaskOutput_ptr _s);
void operator<<=(::CORBA::Any& _a, iCBS_TaskOutput_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, iCBS_TaskOutput_ptr& _s);

inline void operator >>=(iCBS_Task::CBS_RunState _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (iCBS_Task::CBS_RunState& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= iCBS_Task::CBS_NotRunning) {
    _e = (iCBS_Task::CBS_RunState) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, iCBS_Task::CBS_RunState _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, iCBS_Task::CBS_RunState& _s);

inline void operator >>=(iCBS_Task::CBS_TaskPriority _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (iCBS_Task::CBS_TaskPriority& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= iCBS_Task::CBS_PrioHighest) {
    _e = (iCBS_Task::CBS_TaskPriority) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, iCBS_Task::CBS_TaskPriority _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, iCBS_Task::CBS_TaskPriority& _s);

inline void operator >>=(iCBS_Task::CBS_StartupMode _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (iCBS_Task::CBS_StartupMode& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= iCBS_Task::RuntimeMode) {
    _e = (iCBS_Task::CBS_StartupMode) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, iCBS_Task::CBS_StartupMode _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, iCBS_Task::CBS_StartupMode& _s);

extern void operator<<=(::CORBA::Any& _a, const iCBS_Task::CBS_TaskData& _s);
extern void operator<<=(::CORBA::Any& _a, iCBS_Task::CBS_TaskData* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, iCBS_Task::CBS_TaskData*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const iCBS_Task::CBS_TaskData*& _sp);

inline void operator >>=(iCBS_Task::CBS_WorkState _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (iCBS_Task::CBS_WorkState& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= iCBS_Task::CBS_Working) {
    _e = (iCBS_Task::CBS_WorkState) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, iCBS_Task::CBS_WorkState _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, iCBS_Task::CBS_WorkState& _s);

extern void operator<<=(::CORBA::Any& _a, const iCBS_Task::CBS_TaskState& _s);
extern void operator<<=(::CORBA::Any& _a, iCBS_Task::CBS_TaskState* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, iCBS_Task::CBS_TaskState*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const iCBS_Task::CBS_TaskState*& _sp);

extern void operator<<=(::CORBA::Any& _a, const iCBS_Task::CBS_TaskStateDetail& _s);
extern void operator<<=(::CORBA::Any& _a, iCBS_Task::CBS_TaskStateDetail* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, iCBS_Task::CBS_TaskStateDetail*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const iCBS_Task::CBS_TaskStateDetail*& _sp);

extern void operator<<=(::CORBA::Any& _a, const iCBS_Task::CBS_SubTaskStateInfo& _s);
extern void operator<<=(::CORBA::Any& _a, iCBS_Task::CBS_SubTaskStateInfo* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, iCBS_Task::CBS_SubTaskStateInfo*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const iCBS_Task::CBS_SubTaskStateInfo*& _sp);

extern void operator<<=(::CORBA::Any& _a, const iCBS_Task::CBS_TaskStateInfo& _s);
extern void operator<<=(::CORBA::Any& _a, iCBS_Task::CBS_TaskStateInfo* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, iCBS_Task::CBS_TaskStateInfo*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const iCBS_Task::CBS_TaskStateInfo*& _sp);

void operator<<=(::CORBA::Any& _a, const iCBS_Task::CBS_TaskStateDetailSeq& _s);
void operator<<=(::CORBA::Any& _a, iCBS_Task::CBS_TaskStateDetailSeq* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, iCBS_Task::CBS_TaskStateDetailSeq*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const iCBS_Task::CBS_TaskStateDetailSeq*& _sp);

void operator<<=(::CORBA::Any& _a, iCBS_Task_ptr _s);
void operator<<=(::CORBA::Any& _a, iCBS_Task_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, iCBS_Task_ptr& _s);



inline void
iCBS_TaskOutput::_marshalObjRef(::iCBS_TaskOutput_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}

inline void
iCBS_Task::_marshalObjRef(::iCBS_Task_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}



#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_CBS__Tasks
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_CBS__Tasks
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_CBS__Tasks
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_CBS__Tasks
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_CBS__Tasks
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_CBS__Tasks
#endif

#endif  // __CBS__Tasks_hh__

