// This file is generated by omniidl (C++ backend) - omniORB_4_2. Do not edit.

#include "CBS_Tasks_s.hh"

OMNI_USING_NAMESPACE(omni)

static const char* _0RL_dyn_library_version = omniORB_4_2_dyn;

static ::CORBA::TypeCode::_Tracker _0RL_tcTrack(__FILE__);

static CORBA::TypeCode_ptr _0RL_tc_CBS__TaskSeq = CORBA::TypeCode::PR_alias_tc("IDL:CBS_TaskSeq:1.0", "CBS_TaskSeq", CORBA::TypeCode::PR_sequence_tc(0, CORBA::TypeCode::PR_interface_tc("IDL:iCBS_Task:1.0", "iCBS_Task", &_0RL_tcTrack), &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr _tc_CBS_TaskSeq = _0RL_tc_CBS__TaskSeq;

const CORBA::TypeCode_ptr _tc_iCBS_TaskOutput = CORBA::TypeCode::PR_interface_tc("IDL:iCBS_TaskOutput:1.0", "iCBS_TaskOutput", &_0RL_tcTrack);

static const char* _0RL_enumMember_iCBS__Task_mCBS__RunState[] = { "CBS_NotReacheable", "CBS_Running", "CBS_PartiallyRunning", "CBS_NotRunning" };
static CORBA::TypeCode_ptr _0RL_tc_iCBS__Task_mCBS__RunState = CORBA::TypeCode::PR_enum_tc("IDL:iCBS_Task/CBS_RunState:1.0", "CBS_RunState", _0RL_enumMember_iCBS__Task_mCBS__RunState, 4, &_0RL_tcTrack);
const CORBA::TypeCode_ptr iCBS_Task::_tc_CBS_RunState = _0RL_tc_iCBS__Task_mCBS__RunState;

static const char* _0RL_enumMember_iCBS__Task_mCBS__TaskPriority[] = { "CBS_PrioLowest", "CBS_PrioLow", "CBS_PrioNormal", "CBS_PrioHigh", "CBS_PrioHighest" };
static CORBA::TypeCode_ptr _0RL_tc_iCBS__Task_mCBS__TaskPriority = CORBA::TypeCode::PR_enum_tc("IDL:iCBS_Task/CBS_TaskPriority:1.0", "CBS_TaskPriority", _0RL_enumMember_iCBS__Task_mCBS__TaskPriority, 5, &_0RL_tcTrack);
const CORBA::TypeCode_ptr iCBS_Task::_tc_CBS_TaskPriority = _0RL_tc_iCBS__Task_mCBS__TaskPriority;

static const char* _0RL_enumMember_iCBS__Task_mCBS__StartupMode[] = { "ConfigMode", "RuntimeMode" };
static CORBA::TypeCode_ptr _0RL_tc_iCBS__Task_mCBS__StartupMode = CORBA::TypeCode::PR_enum_tc("IDL:iCBS_Task/CBS_StartupMode:1.0", "CBS_StartupMode", _0RL_enumMember_iCBS__Task_mCBS__StartupMode, 2, &_0RL_tcTrack);
const CORBA::TypeCode_ptr iCBS_Task::_tc_CBS_StartupMode = _0RL_tc_iCBS__Task_mCBS__StartupMode;

static CORBA::PR_structMember _0RL_structmember_iCBS__Task_mCBS__TaskData[] = {
  {"autoRecovery", CORBA::TypeCode::PR_boolean_tc()},
  {"priority", _0RL_tc_iCBS__Task_mCBS__TaskPriority},
  {"critical", CORBA::TypeCode::PR_boolean_tc()}
};

#ifdef _0RL_tc_iCBS__Task_mCBS__TaskData
#  undef _0RL_tc_iCBS__Task_mCBS__TaskData
#endif
static CORBA::TypeCode_ptr _0RL_tc_iCBS__Task_mCBS__TaskData = CORBA::TypeCode::PR_struct_tc("IDL:iCBS_Task/CBS_TaskData:1.0", "CBS_TaskData", _0RL_structmember_iCBS__Task_mCBS__TaskData, 3, &_0RL_tcTrack);

const CORBA::TypeCode_ptr iCBS_Task::_tc_CBS_TaskData = _0RL_tc_iCBS__Task_mCBS__TaskData;


static const char* _0RL_enumMember_iCBS__Task_mCBS__WorkState[] = { "CBS_NotWorking", "CBS_PartiallyWorking", "CBS_Working" };
static CORBA::TypeCode_ptr _0RL_tc_iCBS__Task_mCBS__WorkState = CORBA::TypeCode::PR_enum_tc("IDL:iCBS_Task/CBS_WorkState:1.0", "CBS_WorkState", _0RL_enumMember_iCBS__Task_mCBS__WorkState, 3, &_0RL_tcTrack);
const CORBA::TypeCode_ptr iCBS_Task::_tc_CBS_WorkState = _0RL_tc_iCBS__Task_mCBS__WorkState;

static CORBA::PR_structMember _0RL_structmember_iCBS__Task_mCBS__TaskState[] = {
  {"runState", _0RL_tc_iCBS__Task_mCBS__RunState},
  {"workState", _0RL_tc_iCBS__Task_mCBS__WorkState}
};

#ifdef _0RL_tc_iCBS__Task_mCBS__TaskState
#  undef _0RL_tc_iCBS__Task_mCBS__TaskState
#endif
static CORBA::TypeCode_ptr _0RL_tc_iCBS__Task_mCBS__TaskState = CORBA::TypeCode::PR_struct_tc("IDL:iCBS_Task/CBS_TaskState:1.0", "CBS_TaskState", _0RL_structmember_iCBS__Task_mCBS__TaskState, 2, &_0RL_tcTrack);

const CORBA::TypeCode_ptr iCBS_Task::_tc_CBS_TaskState = _0RL_tc_iCBS__Task_mCBS__TaskState;



static CORBA::PR_structMember _0RL_structmember_iCBS__Task_mCBS__TaskStateDetail[] = {
  {"state", _0RL_tc_iCBS__Task_mCBS__TaskState},
  {"taskName", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"detail", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)}
};

#ifdef _0RL_tc_iCBS__Task_mCBS__TaskStateDetail
#  undef _0RL_tc_iCBS__Task_mCBS__TaskStateDetail
#endif
static CORBA::TypeCode_ptr _0RL_tc_iCBS__Task_mCBS__TaskStateDetail = CORBA::TypeCode::PR_struct_tc("IDL:iCBS_Task/CBS_TaskStateDetail:1.0", "CBS_TaskStateDetail", _0RL_structmember_iCBS__Task_mCBS__TaskStateDetail, 3, &_0RL_tcTrack);


const CORBA::TypeCode_ptr iCBS_Task::_tc_CBS_TaskStateDetail = _0RL_tc_iCBS__Task_mCBS__TaskStateDetail;




static CORBA::PR_structMember _0RL_structmember_iCBS__Task_mCBS__SubTaskStateInfo[] = {
  {"taskName", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"state", _0RL_tc_iCBS__Task_mCBS__TaskState},
  {"data", _0RL_tc_iCBS__Task_mCBS__TaskData}
};

#ifdef _0RL_tc_iCBS__Task_mCBS__SubTaskStateInfo
#  undef _0RL_tc_iCBS__Task_mCBS__SubTaskStateInfo
#endif
static CORBA::TypeCode_ptr _0RL_tc_iCBS__Task_mCBS__SubTaskStateInfo = CORBA::TypeCode::PR_struct_tc("IDL:iCBS_Task/CBS_SubTaskStateInfo:1.0", "CBS_SubTaskStateInfo", _0RL_structmember_iCBS__Task_mCBS__SubTaskStateInfo, 3, &_0RL_tcTrack);



const CORBA::TypeCode_ptr iCBS_Task::_tc_CBS_SubTaskStateInfo = _0RL_tc_iCBS__Task_mCBS__SubTaskStateInfo;






static CORBA::PR_structMember _0RL_structmember_iCBS__Task_mCBS__TaskStateInfo[] = {
  {"taskName", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"state", _0RL_tc_iCBS__Task_mCBS__TaskState},
  {"SubTaskStateInfoSeq", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_iCBS__Task_mCBS__SubTaskStateInfo, &_0RL_tcTrack)}
};

#ifdef _0RL_tc_iCBS__Task_mCBS__TaskStateInfo
#  undef _0RL_tc_iCBS__Task_mCBS__TaskStateInfo
#endif
static CORBA::TypeCode_ptr _0RL_tc_iCBS__Task_mCBS__TaskStateInfo = CORBA::TypeCode::PR_struct_tc("IDL:iCBS_Task/CBS_TaskStateInfo:1.0", "CBS_TaskStateInfo", _0RL_structmember_iCBS__Task_mCBS__TaskStateInfo, 3, &_0RL_tcTrack);





const CORBA::TypeCode_ptr iCBS_Task::_tc_CBS_TaskStateInfo = _0RL_tc_iCBS__Task_mCBS__TaskStateInfo;










static CORBA::TypeCode_ptr _0RL_tc_iCBS__Task_mCBS__TaskStateDetailSeq = CORBA::TypeCode::PR_alias_tc("IDL:iCBS_Task/CBS_TaskStateDetailSeq:1.0", "CBS_TaskStateDetailSeq", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_iCBS__Task_mCBS__TaskStateDetail, &_0RL_tcTrack), &_0RL_tcTrack);


const CORBA::TypeCode_ptr iCBS_Task::_tc_CBS_TaskStateDetailSeq = _0RL_tc_iCBS__Task_mCBS__TaskStateDetailSeq;

const CORBA::TypeCode_ptr _tc_iCBS_Task = CORBA::TypeCode::PR_interface_tc("IDL:iCBS_Task:1.0", "iCBS_Task", &_0RL_tcTrack);

static void _0RL_CBS__TaskSeq_marshal_fn(cdrStream& _s, void* _v)
{
  CBS_TaskSeq* _p = (CBS_TaskSeq*)_v;
  *_p >>= _s;
}
static void _0RL_CBS__TaskSeq_unmarshal_fn(cdrStream& _s, void*& _v)
{
  CBS_TaskSeq* _p = new CBS_TaskSeq;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_CBS__TaskSeq_destructor_fn(void* _v)
{
  CBS_TaskSeq* _p = (CBS_TaskSeq*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const CBS_TaskSeq& _s)
{
  CBS_TaskSeq* _p = new CBS_TaskSeq(_s);
  _a.PR_insert(_0RL_tc_CBS__TaskSeq,
               _0RL_CBS__TaskSeq_marshal_fn,
               _0RL_CBS__TaskSeq_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, CBS_TaskSeq* _sp)
{
  _a.PR_insert(_0RL_tc_CBS__TaskSeq,
               _0RL_CBS__TaskSeq_marshal_fn,
               _0RL_CBS__TaskSeq_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, CBS_TaskSeq*& _sp)
{
  return _a >>= (const CBS_TaskSeq*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const CBS_TaskSeq*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_CBS__TaskSeq,
                    _0RL_CBS__TaskSeq_unmarshal_fn,
                    _0RL_CBS__TaskSeq_marshal_fn,
                    _0RL_CBS__TaskSeq_destructor_fn,
                    _v)) {
    _sp = (const CBS_TaskSeq*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_iCBS__TaskOutput_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_iCBS__TaskOutput_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(iCBS_TaskOutput::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_iCBS__TaskOutput_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, iCBS_TaskOutput_ptr _o)
{
  iCBS_TaskOutput_ptr _no = iCBS_TaskOutput::_duplicate(_o);
  _a.PR_insert(_tc_iCBS_TaskOutput,
               _0RL_iCBS__TaskOutput_marshal_fn,
               _0RL_iCBS__TaskOutput_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, iCBS_TaskOutput_ptr* _op)
{
  _a.PR_insert(_tc_iCBS_TaskOutput,
               _0RL_iCBS__TaskOutput_marshal_fn,
               _0RL_iCBS__TaskOutput_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = iCBS_TaskOutput::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, iCBS_TaskOutput_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(_tc_iCBS_TaskOutput,
                    _0RL_iCBS__TaskOutput_unmarshal_fn,
                    _0RL_iCBS__TaskOutput_marshal_fn,
                    _0RL_iCBS__TaskOutput_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (iCBS_TaskOutput_ptr)_r->_ptrToObjRef(iCBS_TaskOutput::_PD_repoId);
    else
      _o = iCBS_TaskOutput::_nil();
    return 1;
  }
  return 0;
}

static void _0RL_iCBS__Task_mCBS__RunState_marshal_fn(cdrStream& _s, void* _v)
{
  iCBS_Task::CBS_RunState* _p = (iCBS_Task::CBS_RunState*)_v;
  *_p >>= _s;
}
static void _0RL_iCBS__Task_mCBS__RunState_unmarshal_fn(cdrStream& _s, void*& _v)
{
  iCBS_Task::CBS_RunState* _p = (iCBS_Task::CBS_RunState*)_v;
  *_p <<= _s;
}

void operator<<=(::CORBA::Any& _a, iCBS_Task::CBS_RunState _s)
{
  _a.PR_insert(_0RL_tc_iCBS__Task_mCBS__RunState,
               _0RL_iCBS__Task_mCBS__RunState_marshal_fn,
               &_s);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, iCBS_Task::CBS_RunState& _s)
{
  return _a.PR_extract(_0RL_tc_iCBS__Task_mCBS__RunState,
                       _0RL_iCBS__Task_mCBS__RunState_unmarshal_fn,
                       &_s);
}

static void _0RL_iCBS__Task_mCBS__TaskPriority_marshal_fn(cdrStream& _s, void* _v)
{
  iCBS_Task::CBS_TaskPriority* _p = (iCBS_Task::CBS_TaskPriority*)_v;
  *_p >>= _s;
}
static void _0RL_iCBS__Task_mCBS__TaskPriority_unmarshal_fn(cdrStream& _s, void*& _v)
{
  iCBS_Task::CBS_TaskPriority* _p = (iCBS_Task::CBS_TaskPriority*)_v;
  *_p <<= _s;
}

void operator<<=(::CORBA::Any& _a, iCBS_Task::CBS_TaskPriority _s)
{
  _a.PR_insert(_0RL_tc_iCBS__Task_mCBS__TaskPriority,
               _0RL_iCBS__Task_mCBS__TaskPriority_marshal_fn,
               &_s);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, iCBS_Task::CBS_TaskPriority& _s)
{
  return _a.PR_extract(_0RL_tc_iCBS__Task_mCBS__TaskPriority,
                       _0RL_iCBS__Task_mCBS__TaskPriority_unmarshal_fn,
                       &_s);
}

static void _0RL_iCBS__Task_mCBS__StartupMode_marshal_fn(cdrStream& _s, void* _v)
{
  iCBS_Task::CBS_StartupMode* _p = (iCBS_Task::CBS_StartupMode*)_v;
  *_p >>= _s;
}
static void _0RL_iCBS__Task_mCBS__StartupMode_unmarshal_fn(cdrStream& _s, void*& _v)
{
  iCBS_Task::CBS_StartupMode* _p = (iCBS_Task::CBS_StartupMode*)_v;
  *_p <<= _s;
}

void operator<<=(::CORBA::Any& _a, iCBS_Task::CBS_StartupMode _s)
{
  _a.PR_insert(_0RL_tc_iCBS__Task_mCBS__StartupMode,
               _0RL_iCBS__Task_mCBS__StartupMode_marshal_fn,
               &_s);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, iCBS_Task::CBS_StartupMode& _s)
{
  return _a.PR_extract(_0RL_tc_iCBS__Task_mCBS__StartupMode,
                       _0RL_iCBS__Task_mCBS__StartupMode_unmarshal_fn,
                       &_s);
}

static void _0RL_iCBS__Task_mCBS__TaskData_marshal_fn(cdrStream& _s, void* _v)
{
  iCBS_Task::CBS_TaskData* _p = (iCBS_Task::CBS_TaskData*)_v;
  *_p >>= _s;
}
static void _0RL_iCBS__Task_mCBS__TaskData_unmarshal_fn(cdrStream& _s, void*& _v)
{
  iCBS_Task::CBS_TaskData* _p = new iCBS_Task::CBS_TaskData;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_iCBS__Task_mCBS__TaskData_destructor_fn(void* _v)
{
  iCBS_Task::CBS_TaskData* _p = (iCBS_Task::CBS_TaskData*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const iCBS_Task::CBS_TaskData& _s)
{
  iCBS_Task::CBS_TaskData* _p = new iCBS_Task::CBS_TaskData(_s);
  _a.PR_insert(_0RL_tc_iCBS__Task_mCBS__TaskData,
               _0RL_iCBS__Task_mCBS__TaskData_marshal_fn,
               _0RL_iCBS__Task_mCBS__TaskData_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, iCBS_Task::CBS_TaskData* _sp)
{
  _a.PR_insert(_0RL_tc_iCBS__Task_mCBS__TaskData,
               _0RL_iCBS__Task_mCBS__TaskData_marshal_fn,
               _0RL_iCBS__Task_mCBS__TaskData_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, iCBS_Task::CBS_TaskData*& _sp)
{
  return _a >>= (const iCBS_Task::CBS_TaskData*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const iCBS_Task::CBS_TaskData*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_iCBS__Task_mCBS__TaskData,
                    _0RL_iCBS__Task_mCBS__TaskData_unmarshal_fn,
                    _0RL_iCBS__Task_mCBS__TaskData_marshal_fn,
                    _0RL_iCBS__Task_mCBS__TaskData_destructor_fn,
                    _v)) {
    _sp = (const iCBS_Task::CBS_TaskData*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_iCBS__Task_mCBS__WorkState_marshal_fn(cdrStream& _s, void* _v)
{
  iCBS_Task::CBS_WorkState* _p = (iCBS_Task::CBS_WorkState*)_v;
  *_p >>= _s;
}
static void _0RL_iCBS__Task_mCBS__WorkState_unmarshal_fn(cdrStream& _s, void*& _v)
{
  iCBS_Task::CBS_WorkState* _p = (iCBS_Task::CBS_WorkState*)_v;
  *_p <<= _s;
}

void operator<<=(::CORBA::Any& _a, iCBS_Task::CBS_WorkState _s)
{
  _a.PR_insert(_0RL_tc_iCBS__Task_mCBS__WorkState,
               _0RL_iCBS__Task_mCBS__WorkState_marshal_fn,
               &_s);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, iCBS_Task::CBS_WorkState& _s)
{
  return _a.PR_extract(_0RL_tc_iCBS__Task_mCBS__WorkState,
                       _0RL_iCBS__Task_mCBS__WorkState_unmarshal_fn,
                       &_s);
}

static void _0RL_iCBS__Task_mCBS__TaskState_marshal_fn(cdrStream& _s, void* _v)
{
  iCBS_Task::CBS_TaskState* _p = (iCBS_Task::CBS_TaskState*)_v;
  *_p >>= _s;
}
static void _0RL_iCBS__Task_mCBS__TaskState_unmarshal_fn(cdrStream& _s, void*& _v)
{
  iCBS_Task::CBS_TaskState* _p = new iCBS_Task::CBS_TaskState;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_iCBS__Task_mCBS__TaskState_destructor_fn(void* _v)
{
  iCBS_Task::CBS_TaskState* _p = (iCBS_Task::CBS_TaskState*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const iCBS_Task::CBS_TaskState& _s)
{
  iCBS_Task::CBS_TaskState* _p = new iCBS_Task::CBS_TaskState(_s);
  _a.PR_insert(_0RL_tc_iCBS__Task_mCBS__TaskState,
               _0RL_iCBS__Task_mCBS__TaskState_marshal_fn,
               _0RL_iCBS__Task_mCBS__TaskState_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, iCBS_Task::CBS_TaskState* _sp)
{
  _a.PR_insert(_0RL_tc_iCBS__Task_mCBS__TaskState,
               _0RL_iCBS__Task_mCBS__TaskState_marshal_fn,
               _0RL_iCBS__Task_mCBS__TaskState_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, iCBS_Task::CBS_TaskState*& _sp)
{
  return _a >>= (const iCBS_Task::CBS_TaskState*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const iCBS_Task::CBS_TaskState*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_iCBS__Task_mCBS__TaskState,
                    _0RL_iCBS__Task_mCBS__TaskState_unmarshal_fn,
                    _0RL_iCBS__Task_mCBS__TaskState_marshal_fn,
                    _0RL_iCBS__Task_mCBS__TaskState_destructor_fn,
                    _v)) {
    _sp = (const iCBS_Task::CBS_TaskState*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_iCBS__Task_mCBS__TaskStateDetail_marshal_fn(cdrStream& _s, void* _v)
{
  iCBS_Task::CBS_TaskStateDetail* _p = (iCBS_Task::CBS_TaskStateDetail*)_v;
  *_p >>= _s;
}
static void _0RL_iCBS__Task_mCBS__TaskStateDetail_unmarshal_fn(cdrStream& _s, void*& _v)
{
  iCBS_Task::CBS_TaskStateDetail* _p = new iCBS_Task::CBS_TaskStateDetail;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_iCBS__Task_mCBS__TaskStateDetail_destructor_fn(void* _v)
{
  iCBS_Task::CBS_TaskStateDetail* _p = (iCBS_Task::CBS_TaskStateDetail*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const iCBS_Task::CBS_TaskStateDetail& _s)
{
  iCBS_Task::CBS_TaskStateDetail* _p = new iCBS_Task::CBS_TaskStateDetail(_s);
  _a.PR_insert(_0RL_tc_iCBS__Task_mCBS__TaskStateDetail,
               _0RL_iCBS__Task_mCBS__TaskStateDetail_marshal_fn,
               _0RL_iCBS__Task_mCBS__TaskStateDetail_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, iCBS_Task::CBS_TaskStateDetail* _sp)
{
  _a.PR_insert(_0RL_tc_iCBS__Task_mCBS__TaskStateDetail,
               _0RL_iCBS__Task_mCBS__TaskStateDetail_marshal_fn,
               _0RL_iCBS__Task_mCBS__TaskStateDetail_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, iCBS_Task::CBS_TaskStateDetail*& _sp)
{
  return _a >>= (const iCBS_Task::CBS_TaskStateDetail*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const iCBS_Task::CBS_TaskStateDetail*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_iCBS__Task_mCBS__TaskStateDetail,
                    _0RL_iCBS__Task_mCBS__TaskStateDetail_unmarshal_fn,
                    _0RL_iCBS__Task_mCBS__TaskStateDetail_marshal_fn,
                    _0RL_iCBS__Task_mCBS__TaskStateDetail_destructor_fn,
                    _v)) {
    _sp = (const iCBS_Task::CBS_TaskStateDetail*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_iCBS__Task_mCBS__SubTaskStateInfo_marshal_fn(cdrStream& _s, void* _v)
{
  iCBS_Task::CBS_SubTaskStateInfo* _p = (iCBS_Task::CBS_SubTaskStateInfo*)_v;
  *_p >>= _s;
}
static void _0RL_iCBS__Task_mCBS__SubTaskStateInfo_unmarshal_fn(cdrStream& _s, void*& _v)
{
  iCBS_Task::CBS_SubTaskStateInfo* _p = new iCBS_Task::CBS_SubTaskStateInfo;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_iCBS__Task_mCBS__SubTaskStateInfo_destructor_fn(void* _v)
{
  iCBS_Task::CBS_SubTaskStateInfo* _p = (iCBS_Task::CBS_SubTaskStateInfo*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const iCBS_Task::CBS_SubTaskStateInfo& _s)
{
  iCBS_Task::CBS_SubTaskStateInfo* _p = new iCBS_Task::CBS_SubTaskStateInfo(_s);
  _a.PR_insert(_0RL_tc_iCBS__Task_mCBS__SubTaskStateInfo,
               _0RL_iCBS__Task_mCBS__SubTaskStateInfo_marshal_fn,
               _0RL_iCBS__Task_mCBS__SubTaskStateInfo_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, iCBS_Task::CBS_SubTaskStateInfo* _sp)
{
  _a.PR_insert(_0RL_tc_iCBS__Task_mCBS__SubTaskStateInfo,
               _0RL_iCBS__Task_mCBS__SubTaskStateInfo_marshal_fn,
               _0RL_iCBS__Task_mCBS__SubTaskStateInfo_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, iCBS_Task::CBS_SubTaskStateInfo*& _sp)
{
  return _a >>= (const iCBS_Task::CBS_SubTaskStateInfo*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const iCBS_Task::CBS_SubTaskStateInfo*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_iCBS__Task_mCBS__SubTaskStateInfo,
                    _0RL_iCBS__Task_mCBS__SubTaskStateInfo_unmarshal_fn,
                    _0RL_iCBS__Task_mCBS__SubTaskStateInfo_marshal_fn,
                    _0RL_iCBS__Task_mCBS__SubTaskStateInfo_destructor_fn,
                    _v)) {
    _sp = (const iCBS_Task::CBS_SubTaskStateInfo*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_iCBS__Task_mCBS__TaskStateInfo_marshal_fn(cdrStream& _s, void* _v)
{
  iCBS_Task::CBS_TaskStateInfo* _p = (iCBS_Task::CBS_TaskStateInfo*)_v;
  *_p >>= _s;
}
static void _0RL_iCBS__Task_mCBS__TaskStateInfo_unmarshal_fn(cdrStream& _s, void*& _v)
{
  iCBS_Task::CBS_TaskStateInfo* _p = new iCBS_Task::CBS_TaskStateInfo;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_iCBS__Task_mCBS__TaskStateInfo_destructor_fn(void* _v)
{
  iCBS_Task::CBS_TaskStateInfo* _p = (iCBS_Task::CBS_TaskStateInfo*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const iCBS_Task::CBS_TaskStateInfo& _s)
{
  iCBS_Task::CBS_TaskStateInfo* _p = new iCBS_Task::CBS_TaskStateInfo(_s);
  _a.PR_insert(_0RL_tc_iCBS__Task_mCBS__TaskStateInfo,
               _0RL_iCBS__Task_mCBS__TaskStateInfo_marshal_fn,
               _0RL_iCBS__Task_mCBS__TaskStateInfo_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, iCBS_Task::CBS_TaskStateInfo* _sp)
{
  _a.PR_insert(_0RL_tc_iCBS__Task_mCBS__TaskStateInfo,
               _0RL_iCBS__Task_mCBS__TaskStateInfo_marshal_fn,
               _0RL_iCBS__Task_mCBS__TaskStateInfo_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, iCBS_Task::CBS_TaskStateInfo*& _sp)
{
  return _a >>= (const iCBS_Task::CBS_TaskStateInfo*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const iCBS_Task::CBS_TaskStateInfo*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_iCBS__Task_mCBS__TaskStateInfo,
                    _0RL_iCBS__Task_mCBS__TaskStateInfo_unmarshal_fn,
                    _0RL_iCBS__Task_mCBS__TaskStateInfo_marshal_fn,
                    _0RL_iCBS__Task_mCBS__TaskStateInfo_destructor_fn,
                    _v)) {
    _sp = (const iCBS_Task::CBS_TaskStateInfo*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_iCBS__Task_mCBS__TaskStateDetailSeq_marshal_fn(cdrStream& _s, void* _v)
{
  iCBS_Task::CBS_TaskStateDetailSeq* _p = (iCBS_Task::CBS_TaskStateDetailSeq*)_v;
  *_p >>= _s;
}
static void _0RL_iCBS__Task_mCBS__TaskStateDetailSeq_unmarshal_fn(cdrStream& _s, void*& _v)
{
  iCBS_Task::CBS_TaskStateDetailSeq* _p = new iCBS_Task::CBS_TaskStateDetailSeq;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_iCBS__Task_mCBS__TaskStateDetailSeq_destructor_fn(void* _v)
{
  iCBS_Task::CBS_TaskStateDetailSeq* _p = (iCBS_Task::CBS_TaskStateDetailSeq*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const iCBS_Task::CBS_TaskStateDetailSeq& _s)
{
  iCBS_Task::CBS_TaskStateDetailSeq* _p = new iCBS_Task::CBS_TaskStateDetailSeq(_s);
  _a.PR_insert(_0RL_tc_iCBS__Task_mCBS__TaskStateDetailSeq,
               _0RL_iCBS__Task_mCBS__TaskStateDetailSeq_marshal_fn,
               _0RL_iCBS__Task_mCBS__TaskStateDetailSeq_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, iCBS_Task::CBS_TaskStateDetailSeq* _sp)
{
  _a.PR_insert(_0RL_tc_iCBS__Task_mCBS__TaskStateDetailSeq,
               _0RL_iCBS__Task_mCBS__TaskStateDetailSeq_marshal_fn,
               _0RL_iCBS__Task_mCBS__TaskStateDetailSeq_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, iCBS_Task::CBS_TaskStateDetailSeq*& _sp)
{
  return _a >>= (const iCBS_Task::CBS_TaskStateDetailSeq*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const iCBS_Task::CBS_TaskStateDetailSeq*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_iCBS__Task_mCBS__TaskStateDetailSeq,
                    _0RL_iCBS__Task_mCBS__TaskStateDetailSeq_unmarshal_fn,
                    _0RL_iCBS__Task_mCBS__TaskStateDetailSeq_marshal_fn,
                    _0RL_iCBS__Task_mCBS__TaskStateDetailSeq_destructor_fn,
                    _v)) {
    _sp = (const iCBS_Task::CBS_TaskStateDetailSeq*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_iCBS__Task_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_iCBS__Task_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(iCBS_Task::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_iCBS__Task_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, iCBS_Task_ptr _o)
{
  iCBS_Task_ptr _no = iCBS_Task::_duplicate(_o);
  _a.PR_insert(_tc_iCBS_Task,
               _0RL_iCBS__Task_marshal_fn,
               _0RL_iCBS__Task_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, iCBS_Task_ptr* _op)
{
  _a.PR_insert(_tc_iCBS_Task,
               _0RL_iCBS__Task_marshal_fn,
               _0RL_iCBS__Task_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = iCBS_Task::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, iCBS_Task_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(_tc_iCBS_Task,
                    _0RL_iCBS__Task_unmarshal_fn,
                    _0RL_iCBS__Task_marshal_fn,
                    _0RL_iCBS__Task_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (iCBS_Task_ptr)_r->_ptrToObjRef(iCBS_Task::_PD_repoId);
    else
      _o = iCBS_Task::_nil();
    return 1;
  }
  return 0;
}

