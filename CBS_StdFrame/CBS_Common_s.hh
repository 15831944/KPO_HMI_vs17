// This file is generated by omniidl (C++ backend)- omniORB_4_2. Do not edit.
#ifndef __CBS__Common_hh__
#define __CBS__Common_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_CBS__Common
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_CBS__Common
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_CBS__Common
#endif






#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif



_CORBA_GLOBAL_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_CBS_OctetSequence;

class CBS_OctetSequence_var;

class CBS_OctetSequence : public _CORBA_Unbounded_Sequence_Octet {
public:
  typedef CBS_OctetSequence_var _var_type;
  inline CBS_OctetSequence() {}
  inline CBS_OctetSequence(const CBS_OctetSequence& _s)
    : _CORBA_Unbounded_Sequence_Octet(_s) {}

  inline CBS_OctetSequence(_CORBA_ULong _max)
    : _CORBA_Unbounded_Sequence_Octet(_max) {}
  inline CBS_OctetSequence(_CORBA_ULong _max, _CORBA_ULong _len, ::CORBA::Octet* _val, _CORBA_Boolean _rel=0)
    : _CORBA_Unbounded_Sequence_Octet(_max, _len, _val, _rel) {}



  inline CBS_OctetSequence& operator = (const CBS_OctetSequence& _s) {
    _CORBA_Unbounded_Sequence_Octet::operator=(_s);
    return *this;
  }
};

class CBS_OctetSequence_out;

class CBS_OctetSequence_var {
public:
  inline CBS_OctetSequence_var() : _pd_seq(0) {}
  inline CBS_OctetSequence_var(CBS_OctetSequence* _s) : _pd_seq(_s) {}
  inline CBS_OctetSequence_var(const CBS_OctetSequence_var& _s) {
    if (_s._pd_seq)  _pd_seq = new CBS_OctetSequence(*_s._pd_seq);
    else             _pd_seq = 0;
  }
  inline ~CBS_OctetSequence_var() { if (_pd_seq)  delete _pd_seq; }
    
  inline CBS_OctetSequence_var& operator = (CBS_OctetSequence* _s) {
    if (_pd_seq)  delete _pd_seq;
    _pd_seq = _s;
    return *this;
  }
  inline CBS_OctetSequence_var& operator = (const CBS_OctetSequence_var& _s) {
    if (&_s != this) {
      if (_s._pd_seq) {
        if (!_pd_seq)  _pd_seq = new CBS_OctetSequence;
        *_pd_seq = *_s._pd_seq;
      }
      else if (_pd_seq) {
        delete _pd_seq;
        _pd_seq = 0;
      }
    }
    return *this;
  }
  inline ::CORBA::Octet& operator [] (_CORBA_ULong _s) {
    return (*_pd_seq)[_s];
  }



  inline CBS_OctetSequence* operator -> () { return _pd_seq; }
  inline const CBS_OctetSequence* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
  inline operator CBS_OctetSequence& () const { return *_pd_seq; }
#else
  inline operator const CBS_OctetSequence& () const { return *_pd_seq; }
  inline operator CBS_OctetSequence& () { return *_pd_seq; }
#endif
    
  inline const CBS_OctetSequence& in() const { return *_pd_seq; }
  inline CBS_OctetSequence&       inout()    { return *_pd_seq; }
  inline CBS_OctetSequence*&      out() {
    if (_pd_seq) { delete _pd_seq; _pd_seq = 0; }
    return _pd_seq;
  }
  inline CBS_OctetSequence* _retn() { CBS_OctetSequence* tmp = _pd_seq; _pd_seq = 0; return tmp; }
    
  friend class CBS_OctetSequence_out;
  
private:
  CBS_OctetSequence* _pd_seq;
};

class CBS_OctetSequence_out {
public:
  inline CBS_OctetSequence_out(CBS_OctetSequence*& _s) : _data(_s) { _data = 0; }
  inline CBS_OctetSequence_out(CBS_OctetSequence_var& _s)
    : _data(_s._pd_seq) { _s = (CBS_OctetSequence*) 0; }
  inline CBS_OctetSequence_out(const CBS_OctetSequence_out& _s) : _data(_s._data) {}
  inline CBS_OctetSequence_out& operator = (const CBS_OctetSequence_out& _s) {
    _data = _s._data;
    return *this;
  }
  inline CBS_OctetSequence_out& operator = (CBS_OctetSequence* _s) {
    _data = _s;
    return *this;
  }
  inline operator CBS_OctetSequence*&()  { return _data; }
  inline CBS_OctetSequence*& ptr()       { return _data; }
  inline CBS_OctetSequence* operator->() { return _data; }

  inline ::CORBA::Octet& operator [] (_CORBA_ULong _i) {
    return (*_data)[_i];
  }



  CBS_OctetSequence*& _data;

private:
  CBS_OctetSequence_out();
  CBS_OctetSequence_out& operator=(const CBS_OctetSequence_var&);
};

_CORBA_GLOBAL_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_CBS_StringSequence;

class CBS_StringSequence_var;

class CBS_StringSequence : public _CORBA_Unbounded_Sequence_String {
public:
  typedef CBS_StringSequence_var _var_type;
  inline CBS_StringSequence() {}
  inline CBS_StringSequence(const CBS_StringSequence& _s)
    : _CORBA_Unbounded_Sequence_String(_s) {}

  inline CBS_StringSequence(_CORBA_ULong _max)
    : _CORBA_Unbounded_Sequence_String(_max) {}
  inline CBS_StringSequence(_CORBA_ULong _max, _CORBA_ULong _len, char** _val, _CORBA_Boolean _rel=0)
    : _CORBA_Unbounded_Sequence_String(_max, _len, _val, _rel) {}



  inline CBS_StringSequence& operator = (const CBS_StringSequence& _s) {
    _CORBA_Unbounded_Sequence_String::operator=(_s);
    return *this;
  }
};

class CBS_StringSequence_out;

class CBS_StringSequence_var {
public:
  inline CBS_StringSequence_var() : _pd_seq(0) {}
  inline CBS_StringSequence_var(CBS_StringSequence* _s) : _pd_seq(_s) {}
  inline CBS_StringSequence_var(const CBS_StringSequence_var& _s) {
    if (_s._pd_seq)  _pd_seq = new CBS_StringSequence(*_s._pd_seq);
    else             _pd_seq = 0;
  }
  inline ~CBS_StringSequence_var() { if (_pd_seq)  delete _pd_seq; }
    
  inline CBS_StringSequence_var& operator = (CBS_StringSequence* _s) {
    if (_pd_seq)  delete _pd_seq;
    _pd_seq = _s;
    return *this;
  }
  inline CBS_StringSequence_var& operator = (const CBS_StringSequence_var& _s) {
    if (&_s != this) {
      if (_s._pd_seq) {
        if (!_pd_seq)  _pd_seq = new CBS_StringSequence;
        *_pd_seq = *_s._pd_seq;
      }
      else if (_pd_seq) {
        delete _pd_seq;
        _pd_seq = 0;
      }
    }
    return *this;
  }
  inline _CORBA_String_element operator [] (_CORBA_ULong _s) {
    return (*_pd_seq)[_s];
  }



  inline CBS_StringSequence* operator -> () { return _pd_seq; }
  inline const CBS_StringSequence* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
  inline operator CBS_StringSequence& () const { return *_pd_seq; }
#else
  inline operator const CBS_StringSequence& () const { return *_pd_seq; }
  inline operator CBS_StringSequence& () { return *_pd_seq; }
#endif
    
  inline const CBS_StringSequence& in() const { return *_pd_seq; }
  inline CBS_StringSequence&       inout()    { return *_pd_seq; }
  inline CBS_StringSequence*&      out() {
    if (_pd_seq) { delete _pd_seq; _pd_seq = 0; }
    return _pd_seq;
  }
  inline CBS_StringSequence* _retn() { CBS_StringSequence* tmp = _pd_seq; _pd_seq = 0; return tmp; }
    
  friend class CBS_StringSequence_out;
  
private:
  CBS_StringSequence* _pd_seq;
};

class CBS_StringSequence_out {
public:
  inline CBS_StringSequence_out(CBS_StringSequence*& _s) : _data(_s) { _data = 0; }
  inline CBS_StringSequence_out(CBS_StringSequence_var& _s)
    : _data(_s._pd_seq) { _s = (CBS_StringSequence*) 0; }
  inline CBS_StringSequence_out(const CBS_StringSequence_out& _s) : _data(_s._data) {}
  inline CBS_StringSequence_out& operator = (const CBS_StringSequence_out& _s) {
    _data = _s._data;
    return *this;
  }
  inline CBS_StringSequence_out& operator = (CBS_StringSequence* _s) {
    _data = _s;
    return *this;
  }
  inline operator CBS_StringSequence*&()  { return _data; }
  inline CBS_StringSequence*& ptr()       { return _data; }
  inline CBS_StringSequence* operator->() { return _data; }

  inline _CORBA_String_element operator [] (_CORBA_ULong _i) {
    return (*_data)[_i];
  }



  CBS_StringSequence*& _data;

private:
  CBS_StringSequence_out();
  CBS_StringSequence_out& operator=(const CBS_StringSequence_var&);
};

_CORBA_GLOBAL_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_CBS_AnySeq;

class CBS_AnySeq_var;

class CBS_AnySeq : public _CORBA_Unbounded_Sequence< ::CORBA::Any >  {
public:
  typedef CBS_AnySeq_var _var_type;
  inline CBS_AnySeq() {}
  inline CBS_AnySeq(const CBS_AnySeq& _s)
    : _CORBA_Unbounded_Sequence< ::CORBA::Any > (_s) {}

  inline CBS_AnySeq(_CORBA_ULong _max)
    : _CORBA_Unbounded_Sequence< ::CORBA::Any > (_max) {}
  inline CBS_AnySeq(_CORBA_ULong _max, _CORBA_ULong _len, ::CORBA::Any* _val, _CORBA_Boolean _rel=0)
    : _CORBA_Unbounded_Sequence< ::CORBA::Any > (_max, _len, _val, _rel) {}



  inline CBS_AnySeq& operator = (const CBS_AnySeq& _s) {
    _CORBA_Unbounded_Sequence< ::CORBA::Any > ::operator=(_s);
    return *this;
  }
};

class CBS_AnySeq_out;

class CBS_AnySeq_var {
public:
  inline CBS_AnySeq_var() : _pd_seq(0) {}
  inline CBS_AnySeq_var(CBS_AnySeq* _s) : _pd_seq(_s) {}
  inline CBS_AnySeq_var(const CBS_AnySeq_var& _s) {
    if (_s._pd_seq)  _pd_seq = new CBS_AnySeq(*_s._pd_seq);
    else             _pd_seq = 0;
  }
  inline ~CBS_AnySeq_var() { if (_pd_seq)  delete _pd_seq; }
    
  inline CBS_AnySeq_var& operator = (CBS_AnySeq* _s) {
    if (_pd_seq)  delete _pd_seq;
    _pd_seq = _s;
    return *this;
  }
  inline CBS_AnySeq_var& operator = (const CBS_AnySeq_var& _s) {
    if (&_s != this) {
      if (_s._pd_seq) {
        if (!_pd_seq)  _pd_seq = new CBS_AnySeq;
        *_pd_seq = *_s._pd_seq;
      }
      else if (_pd_seq) {
        delete _pd_seq;
        _pd_seq = 0;
      }
    }
    return *this;
  }
  inline ::CORBA::Any& operator [] (_CORBA_ULong _s) {
    return (*_pd_seq)[_s];
  }



  inline CBS_AnySeq* operator -> () { return _pd_seq; }
  inline const CBS_AnySeq* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
  inline operator CBS_AnySeq& () const { return *_pd_seq; }
#else
  inline operator const CBS_AnySeq& () const { return *_pd_seq; }
  inline operator CBS_AnySeq& () { return *_pd_seq; }
#endif
    
  inline const CBS_AnySeq& in() const { return *_pd_seq; }
  inline CBS_AnySeq&       inout()    { return *_pd_seq; }
  inline CBS_AnySeq*&      out() {
    if (_pd_seq) { delete _pd_seq; _pd_seq = 0; }
    return _pd_seq;
  }
  inline CBS_AnySeq* _retn() { CBS_AnySeq* tmp = _pd_seq; _pd_seq = 0; return tmp; }
    
  friend class CBS_AnySeq_out;
  
private:
  CBS_AnySeq* _pd_seq;
};

class CBS_AnySeq_out {
public:
  inline CBS_AnySeq_out(CBS_AnySeq*& _s) : _data(_s) { _data = 0; }
  inline CBS_AnySeq_out(CBS_AnySeq_var& _s)
    : _data(_s._pd_seq) { _s = (CBS_AnySeq*) 0; }
  inline CBS_AnySeq_out(const CBS_AnySeq_out& _s) : _data(_s._data) {}
  inline CBS_AnySeq_out& operator = (const CBS_AnySeq_out& _s) {
    _data = _s._data;
    return *this;
  }
  inline CBS_AnySeq_out& operator = (CBS_AnySeq* _s) {
    _data = _s;
    return *this;
  }
  inline operator CBS_AnySeq*&()  { return _data; }
  inline CBS_AnySeq*& ptr()       { return _data; }
  inline CBS_AnySeq* operator->() { return _data; }

  inline ::CORBA::Any& operator [] (_CORBA_ULong _i) {
    return (*_data)[_i];
  }



  CBS_AnySeq*& _data;

private:
  CBS_AnySeq_out();
  CBS_AnySeq_out& operator=(const CBS_AnySeq_var&);
};

#ifndef __iCBS__OctetTransfer__
#define __iCBS__OctetTransfer__
class iCBS_OctetTransfer;
class _objref_iCBS_OctetTransfer;
class _impl_iCBS_OctetTransfer;

typedef _objref_iCBS_OctetTransfer* iCBS_OctetTransfer_ptr;
typedef iCBS_OctetTransfer_ptr iCBS_OctetTransferRef;

class iCBS_OctetTransfer_Helper {
public:
  typedef iCBS_OctetTransfer_ptr _ptr_type;

  static _ptr_type _nil();
  static _CORBA_Boolean is_nil(_ptr_type);
  static void release(_ptr_type);
  static void duplicate(_ptr_type);
  static void marshalObjRef(_ptr_type, cdrStream&);
  static _ptr_type unmarshalObjRef(cdrStream&);
};

typedef _CORBA_ObjRef_Var<_objref_iCBS_OctetTransfer, iCBS_OctetTransfer_Helper> iCBS_OctetTransfer_var;
typedef _CORBA_ObjRef_OUT_arg<_objref_iCBS_OctetTransfer,iCBS_OctetTransfer_Helper > iCBS_OctetTransfer_out;

#endif

// interface iCBS_OctetTransfer
class iCBS_OctetTransfer {
public:
  // Declarations for this interface type.
  typedef iCBS_OctetTransfer_ptr _ptr_type;
  typedef iCBS_OctetTransfer_var _var_type;

  static _ptr_type _duplicate(_ptr_type);
  static _ptr_type _narrow(::CORBA::Object_ptr);
  static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
  
  static _ptr_type _nil();

  static inline void _marshalObjRef(_ptr_type, cdrStream&);

  static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
    omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
    if (o)
      return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
    else
      return _nil();
  }

  static inline _ptr_type _fromObjRef(omniObjRef* o) {
    if (o)
      return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
    else
      return _nil();
  }

  static _core_attr const char* _PD_repoId;

  // Other IDL defined within this scope.
  
};

class _objref_iCBS_OctetTransfer :
  public virtual ::CORBA::Object,
  public virtual omniObjRef
{
public:
  // IDL operations
  void transfer(const ::CBS_OctetSequence& buffer);
  ::CORBA::Long transferAndRetBytes(const ::CBS_OctetSequence& buffer);

  // Constructors
  inline _objref_iCBS_OctetTransfer()  { _PR_setobj(0); }  // nil
  _objref_iCBS_OctetTransfer(omniIOR*, omniIdentity*);

protected:
  virtual ~_objref_iCBS_OctetTransfer();

  
private:
  virtual void* _ptrToObjRef(const char*);

  _objref_iCBS_OctetTransfer(const _objref_iCBS_OctetTransfer&);
  _objref_iCBS_OctetTransfer& operator = (const _objref_iCBS_OctetTransfer&);
  // not implemented

  friend class iCBS_OctetTransfer;
};

class _pof_iCBS_OctetTransfer : public _OMNI_NS(proxyObjectFactory) {
public:
  inline _pof_iCBS_OctetTransfer() : _OMNI_NS(proxyObjectFactory)(iCBS_OctetTransfer::_PD_repoId) {}
  virtual ~_pof_iCBS_OctetTransfer();

  virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
  virtual _CORBA_Boolean is_a(const char*) const;
};

class _impl_iCBS_OctetTransfer :
  public virtual omniServant
{
public:
  virtual ~_impl_iCBS_OctetTransfer();

  virtual void transfer(const ::CBS_OctetSequence& buffer) = 0;
  virtual ::CORBA::Long transferAndRetBytes(const ::CBS_OctetSequence& buffer) = 0;
  
public:  // Really protected, workaround for xlC
  virtual _CORBA_Boolean _dispatch(omniCallHandle&);

private:
  virtual void* _ptrToInterface(const char*);
  virtual const char* _mostDerivedRepoId();
  
};


_CORBA_GLOBAL_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_iCBS_OctetTransfer;

_CORBA_MODULE MCBS

_CORBA_MODULE_BEG

  struct CBS_LocalTime {
    typedef _CORBA_ConstrType_Fix_Var<CBS_LocalTime> _var_type;

    
    ::CORBA::UShort year;

    ::CORBA::UShort month;

    ::CORBA::UShort day;

    ::CORBA::UShort hour;

    ::CORBA::UShort minute;

    ::CORBA::UShort second;

    ::CORBA::UShort msec;

    ::CORBA::Boolean dstFlag;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef CBS_LocalTime::_var_type CBS_LocalTime_var;

  typedef CBS_LocalTime& CBS_LocalTime_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_CBS_LocalTime;

_CORBA_MODULE_END



class POA_iCBS_OctetTransfer :
  public virtual _impl_iCBS_OctetTransfer,
  public virtual ::PortableServer::ServantBase
{
public:
  virtual ~POA_iCBS_OctetTransfer();

  inline ::iCBS_OctetTransfer_ptr _this() {
    return (::iCBS_OctetTransfer_ptr) _do_this(::iCBS_OctetTransfer::_PD_repoId);
  }
};

_CORBA_MODULE POA_MCBS
_CORBA_MODULE_BEG

_CORBA_MODULE_END



_CORBA_MODULE OBV_MCBS
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

void operator<<=(::CORBA::Any& _a, const CBS_OctetSequence& _s);
void operator<<=(::CORBA::Any& _a, CBS_OctetSequence* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, CBS_OctetSequence*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const CBS_OctetSequence*& _sp);

void operator<<=(::CORBA::Any& _a, const CBS_StringSequence& _s);
void operator<<=(::CORBA::Any& _a, CBS_StringSequence* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, CBS_StringSequence*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const CBS_StringSequence*& _sp);

void operator<<=(::CORBA::Any& _a, const CBS_AnySeq& _s);
void operator<<=(::CORBA::Any& _a, CBS_AnySeq* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, CBS_AnySeq*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const CBS_AnySeq*& _sp);

void operator<<=(::CORBA::Any& _a, iCBS_OctetTransfer_ptr _s);
void operator<<=(::CORBA::Any& _a, iCBS_OctetTransfer_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, iCBS_OctetTransfer_ptr& _s);

extern void operator<<=(::CORBA::Any& _a, const MCBS::CBS_LocalTime& _s);
extern void operator<<=(::CORBA::Any& _a, MCBS::CBS_LocalTime* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, MCBS::CBS_LocalTime*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const MCBS::CBS_LocalTime*& _sp);



inline void
iCBS_OctetTransfer::_marshalObjRef(::iCBS_OctetTransfer_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}



#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_CBS__Common
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_CBS__Common
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_CBS__Common
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_CBS__Common
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_CBS__Common
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_CBS__Common
#endif

#endif  // __CBS__Common_hh__

