//## Copyright (C) 2015 SMS Siemag AG, Germany 
//## Version generated by DBClassCodeUtility BETA 0.6.3 
//## ALL METHODS MARKED AS - //##DBClassCodeUtility - WILL BE OVERWRITTEN, IF DB CLASS RE-GENERATED 
//## MANUALLY IMPLEMENTED METHODS MUST BE LOCATED BELOW THE MARK - "YOUR-CODE" - 

#if defined (_MSC_VER) && (_MSC_VER >= 1000)
#pragma once
#endif
#ifndef _INC_CHDL_ACTUAL_RES_INCLUDED
#define _INC_CHDL_ACTUAL_RES_INCLUDED

#include "CSMC_DBData.h"

class CHDL_ACTUAL_RES
: public CSMC_DBData

{

public:
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string HEATID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TREATID;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string PLANT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string REVTIME;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string ELEC_ENERGY;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string UPDATENO;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string DURSINCEHEATANNOUNCEMENT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string CURELECPRACPHASE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string CURELECSTEPNO;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string STEELMASS;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string SLAGMASS;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TEMP;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string VOLTTAP;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string IMPCURVE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string REMELECENERGY;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string STIRRINTENSITY;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string STIRRFLOW;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string CURPHASE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string STIRRGASTYPE;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string ACTIVITYNAME_PRIO1;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string ACTIVITYNAME_PRIO2;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string ACTIVITYNAME_PRIO3;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string COMPAVAIL_MAT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string COMPAVAIL_STIRR;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string COMPAVAIL_ELEC;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string ELECTRODEPULLREQ;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string ELECTRODELOCKREQ;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string ELEC_EGY_INIT_HEAT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string ELEC_EGY_MAIN_HEAT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string ELEC_EGY_FINAL_HEAT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TEMP_INIT_HEAT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TEMP_MAIN_HEAT;
  //##DBClassCodeUtility ! DO NOT EDIT !
  static const std::string TEMP_FINAL_HEAT;

  //##DBClassCodeUtility ! DO NOT EDIT !
  CHDL_ACTUAL_RES(cCBS_StdConnection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CHDL_ACTUAL_RES(cCBS_Connection* Connection);

  //##DBClassCodeUtility ! DO NOT EDIT !
  CHDL_ACTUAL_RES();

  //##DBClassCodeUtility ! DO NOT EDIT !
  ~CHDL_ACTUAL_RES();

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Internal heat identifier
  std::string getHEATID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setHEATID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Treatment identifier
  std::string getTREATID(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTREATID(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Plant identifier
  std::string getPLANT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setPLANT(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Date and time of last revision
  CDateTime getREVTIME(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setREVTIME(const CDateTime& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Electrical Energy
  double getELEC_ENERGY(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setELEC_ENERGY(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Number of updates in heat., First entry 1, Second    2, ...
  long getUPDATENO(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setUPDATENO(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Duration since heat announcement
  double getDURSINCEHEATANNOUNCEMENT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setDURSINCEHEATANNOUNCEMENT(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##LF Electric Pratice Phase
  std::string getCURELECPRACPHASE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setCURELECPRACPHASE(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Current step in phase for electric
  long getCURELECSTEPNO(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setCURELECSTEPNO(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getSTEELMASS(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSTEELMASS(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getSLAGMASS(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSLAGMASS(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getTEMP(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTEMP(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Transformer Voltage Tap
  long getVOLTTAP(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setVOLTTAP(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Impedance curve
  long getIMPCURVE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setIMPCURVE(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Remaining Electrical Energy
  double getREMELECENERGY(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setREMELECENERGY(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Value for Stirring Intensity
  long getSTIRRINTENSITY(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSTIRRINTENSITY(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Stirring flow
  double getSTIRRFLOW(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSTIRRFLOW(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Actual process phase
  std::string getCURPHASE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setCURPHASE(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Values are, N2  or, AR
  std::string getSTIRRGASTYPE(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setSTIRRGASTYPE(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Name of Activity.
  std::string getACTIVITYNAME_PRIO1(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setACTIVITYNAME_PRIO1(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Name of Activity.
  std::string getACTIVITYNAME_PRIO2(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setACTIVITYNAME_PRIO2(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Name of Activity.
  std::string getACTIVITYNAME_PRIO3(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setACTIVITYNAME_PRIO3(const std::string& value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Computer Mode Availibility Material
  long getCOMPAVAIL_MAT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setCOMPAVAIL_MAT(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Computer Mode Availibility Model
  long getCOMPAVAIL_STIRR(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setCOMPAVAIL_STIRR(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Computer Mode Availibility Electric
  long getCOMPAVAIL_ELEC(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setCOMPAVAIL_ELEC(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Electrode Pull request
  long getELECTRODEPULLREQ(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setELECTRODEPULLREQ(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  //##Electrode lock request
  long getELECTRODELOCKREQ(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setELECTRODELOCKREQ(long value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getELEC_EGY_INIT_HEAT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setELEC_EGY_INIT_HEAT(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getELEC_EGY_MAIN_HEAT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setELEC_EGY_MAIN_HEAT(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getELEC_EGY_FINAL_HEAT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setELEC_EGY_FINAL_HEAT(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getTEMP_INIT_HEAT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTEMP_INIT_HEAT(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getTEMP_MAIN_HEAT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTEMP_MAIN_HEAT(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  double getTEMP_FINAL_HEAT(long Row);

  //##DBClassCodeUtility ! DO NOT EDIT !
  void setTEMP_FINAL_HEAT(double value);

  //##DBClassCodeUtility ! DO NOT EDIT !
  bool select(const std::string& HEATID, const std::string& TREATID, const std::string& PLANT, const CDateTime& REVTIME);

  //## ----------------------------------END-GENERATED-CODE--------------------- 

  //## ----------------------------------YOUR-CODE------------------------------ 

};

#endif /* _INC_CHDL_ACTUAL_RES_INCLUDED */
