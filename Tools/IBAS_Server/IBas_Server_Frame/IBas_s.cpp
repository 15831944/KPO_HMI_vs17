// This file is generated by omniidl (C++ backend)- omniORB_4_2. Do not edit.

#include "IBas_s.h"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_2;



void
IBAS::u_Data::operator>>= (cdrStream& _n) const
{
  _pd__d >>= _n;


  switch(_pd__d) {
    case e_kindLong:
      _pd_LongVal >>= _n;
      break;
    case e_kindFloat:
      _pd_FloatVal >>= _n;
      break;
    case e_kindString:
      _n.marshalString(_pd_StringVal,0);
      break;

  }
}

void
IBAS::u_Data::operator<<= (cdrStream& _n)
{
  _release_member();
  
  (valueKind&)_pd__d <<= _n;

  switch(_pd__d) {
    case e_kindLong:
      _pd__default = 0;
      (::CORBA::Long&)_pd_LongVal <<= _n;
      break;
    case e_kindFloat:
      _pd__default = 0;
      (::CORBA::Float&)_pd_FloatVal <<= _n;
      break;
    case e_kindString:
      _pd__default = 0;
      _pd_StringVal = _n.unmarshalString(0);
      break;

  }
  _pd__initialised = 1;
}

void
IBAS::NamedValue::operator>>= (cdrStream &_n) const
{
  _n.marshalString(Tag,0);
  (const u_Data&) Data >>= _n;

}

void
IBAS::NamedValue::operator<<= (cdrStream &_n)
{
  Tag = _n.unmarshalString(0);
  (u_Data&)Data <<= _n;

}

IBAS::IBASIntrf_ptr IBAS::IBASIntrf_Helper::_nil() {
  return ::IBAS::IBASIntrf::_nil();
}

::CORBA::Boolean IBAS::IBASIntrf_Helper::is_nil(::IBAS::IBASIntrf_ptr p) {
  return ::CORBA::is_nil(p);

}

void IBAS::IBASIntrf_Helper::release(::IBAS::IBASIntrf_ptr p) {
  ::CORBA::release(p);
}

void IBAS::IBASIntrf_Helper::marshalObjRef(::IBAS::IBASIntrf_ptr obj, cdrStream& s) {
  ::IBAS::IBASIntrf::_marshalObjRef(obj, s);
}

IBAS::IBASIntrf_ptr IBAS::IBASIntrf_Helper::unmarshalObjRef(cdrStream& s) {
  return ::IBAS::IBASIntrf::_unmarshalObjRef(s);
}

void IBAS::IBASIntrf_Helper::duplicate(::IBAS::IBASIntrf_ptr obj) {
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
}

IBAS::IBASIntrf_ptr
IBAS::IBASIntrf::_duplicate(::IBAS::IBASIntrf_ptr obj)
{
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
  return obj;
}

IBAS::IBASIntrf_ptr
IBAS::IBASIntrf::_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


IBAS::IBASIntrf_ptr
IBAS::IBASIntrf::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

IBAS::IBASIntrf_ptr
IBAS::IBASIntrf::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_IBASIntrf _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_IBASIntrf* _the_nil_ptr = 0;
  if (!_the_nil_ptr) {
    omni::nilRefLock().lock();
    if (!_the_nil_ptr) {
      _the_nil_ptr = new _objref_IBASIntrf;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* IBAS::IBASIntrf::_PD_repoId = "IDL:IBAS/IBASIntrf:1.0";


IBAS::_objref_IBASIntrf::~_objref_IBASIntrf() {
  
}


IBAS::_objref_IBASIntrf::_objref_IBASIntrf(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::IBAS::IBASIntrf::_PD_repoId, ior, id, 1),
   _objref_BASIntrf(ior, id)
   
{
  _PR_setobj(this);
}

void*
IBAS::_objref_IBASIntrf::_ptrToObjRef(const char* id)
{
  if (id == ::IBAS::IBASIntrf::_PD_repoId)
    return (::IBAS::IBASIntrf_ptr) this;
  if (id == ::IBAS::BASIntrf::_PD_repoId)
    return (::IBAS::BASIntrf_ptr) this;


  if (id == ::CORBA::Object::_PD_repoId)
    return (::CORBA::Object_ptr) this;

  if (omni::strMatch(id, ::IBAS::IBASIntrf::_PD_repoId))
    return (::IBAS::IBASIntrf_ptr) this;
  if (omni::strMatch(id, ::IBAS::BASIntrf::_PD_repoId))
    return (::IBAS::BASIntrf_ptr) this;


  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (::CORBA::Object_ptr) this;

  return 0;
}


//
// Code for IBAS::IBASIntrf::setTelegram

// Proxy call descriptor class. Mangled signature:
//  void_i_cIBAS_mseqValues
class _0RL_cd_21da7e022242d4fd_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_21da7e022242d4fd_00000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  IBAS::seqValues_var arg_0_;
  const IBAS::seqValues* arg_0;
};

void _0RL_cd_21da7e022242d4fd_00000000::marshalArguments(cdrStream& _n)
{
  (const IBAS::seqValues&) *arg_0 >>= _n;

}

void _0RL_cd_21da7e022242d4fd_00000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new IBAS::seqValues;
  (IBAS::seqValues&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

const char* const _0RL_cd_21da7e022242d4fd_00000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_21da7e022242d4fd_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_21da7e022242d4fd_00000000* tcd = (_0RL_cd_21da7e022242d4fd_00000000*)cd;
  IBAS::_impl_IBASIntrf* impl = (IBAS::_impl_IBASIntrf*) svnt->_ptrToInterface(IBAS::IBASIntrf::_PD_repoId);
  impl->setTelegram(*tcd->arg_0);


}

void IBAS::_objref_IBASIntrf::setTelegram(const ::IBAS::seqValues& taggedValues)
{
  _0RL_cd_21da7e022242d4fd_00000000 _call_desc(_0RL_lcfn_21da7e022242d4fd_10000000, "setTelegram", 12);
  _call_desc.arg_0 = &(::IBAS::seqValues&) taggedValues;

  _invoke(_call_desc);



}


//
// Code for IBAS::IBASIntrf::forceFloat

// Proxy call descriptor class. Mangled signature:
//  _clong_i_cstring_i_cfloat_e_cIBAS_mEXC__IncorrectTagType_e_cIBAS_mEXC__TagNotFound
class _0RL_cd_21da7e022242d4fd_20000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_21da7e022242d4fd_20000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&, _OMNI_NS(IOP_C)*, const char*);
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::Float arg_1;
  ::CORBA::Long result;
};

void _0RL_cd_21da7e022242d4fd_20000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  arg_1 >>= _n;

}

void _0RL_cd_21da7e022242d4fd_20000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  (::CORBA::Float&)arg_1 <<= _n;

}

void _0RL_cd_21da7e022242d4fd_20000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_21da7e022242d4fd_20000000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Long&)result <<= _n;

}

const char* const _0RL_cd_21da7e022242d4fd_20000000::_user_exns[] = {
  IBAS::EXC_IncorrectTagType::_PD_repoId,
  IBAS::EXC_TagNotFound::_PD_repoId
};

void _0RL_cd_21da7e022242d4fd_20000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if (omni::strMatch(repoId, IBAS::EXC_IncorrectTagType::_PD_repoId)) {
    IBAS::EXC_IncorrectTagType _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if (omni::strMatch(repoId, IBAS::EXC_TagNotFound::_PD_repoId)) {
    IBAS::EXC_TagNotFound _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_21da7e022242d4fd_30000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_21da7e022242d4fd_20000000* tcd = (_0RL_cd_21da7e022242d4fd_20000000*)cd;
  IBAS::_impl_IBASIntrf* impl = (IBAS::_impl_IBASIntrf*) svnt->_ptrToInterface(IBAS::IBASIntrf::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->forceFloat(tcd->arg_0, tcd->arg_1);
#else
  if (!cd->is_upcall())
    tcd->result = impl->forceFloat(tcd->arg_0, tcd->arg_1);
  else {
    try {
      tcd->result = impl->forceFloat(tcd->arg_0, tcd->arg_1);
    }
    catch(IBAS::EXC_TagNotFound& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(IBAS::EXC_IncorrectTagType& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Long IBAS::_objref_IBASIntrf::forceFloat(const char* tag, ::CORBA::Float val)
{
  _0RL_cd_21da7e022242d4fd_20000000 _call_desc(_0RL_lcfn_21da7e022242d4fd_30000000, "forceFloat", 11);
  _call_desc.arg_0 = tag;
  _call_desc.arg_1 = val;

  _invoke(_call_desc);
  return _call_desc.result;


}


//
// Code for IBAS::IBASIntrf::forceString

// Proxy call descriptor class. Mangled signature:
//  _clong_i_cstring_i_cstring_e_cIBAS_mEXC__IncorrectTagType_e_cIBAS_mEXC__TagNotFound
class _0RL_cd_21da7e022242d4fd_40000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_21da7e022242d4fd_40000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&, _OMNI_NS(IOP_C)*, const char*);
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  ::CORBA::Long result;
};

void _0RL_cd_21da7e022242d4fd_40000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_21da7e022242d4fd_40000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_21da7e022242d4fd_40000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_21da7e022242d4fd_40000000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Long&)result <<= _n;

}

const char* const _0RL_cd_21da7e022242d4fd_40000000::_user_exns[] = {
  IBAS::EXC_IncorrectTagType::_PD_repoId,
  IBAS::EXC_TagNotFound::_PD_repoId
};

void _0RL_cd_21da7e022242d4fd_40000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if (omni::strMatch(repoId, IBAS::EXC_IncorrectTagType::_PD_repoId)) {
    IBAS::EXC_IncorrectTagType _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if (omni::strMatch(repoId, IBAS::EXC_TagNotFound::_PD_repoId)) {
    IBAS::EXC_TagNotFound _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_21da7e022242d4fd_50000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_21da7e022242d4fd_40000000* tcd = (_0RL_cd_21da7e022242d4fd_40000000*)cd;
  IBAS::_impl_IBASIntrf* impl = (IBAS::_impl_IBASIntrf*) svnt->_ptrToInterface(IBAS::IBASIntrf::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->forceString(tcd->arg_0, tcd->arg_1);
#else
  if (!cd->is_upcall())
    tcd->result = impl->forceString(tcd->arg_0, tcd->arg_1);
  else {
    try {
      tcd->result = impl->forceString(tcd->arg_0, tcd->arg_1);
    }
    catch(IBAS::EXC_TagNotFound& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(IBAS::EXC_IncorrectTagType& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Long IBAS::_objref_IBASIntrf::forceString(const char* tag, const char* val)
{
  _0RL_cd_21da7e022242d4fd_40000000 _call_desc(_0RL_lcfn_21da7e022242d4fd_50000000, "forceString", 12);
  _call_desc.arg_0 = tag;
  _call_desc.arg_1 = val;

  _invoke(_call_desc);
  return _call_desc.result;


}


//
// Code for IBAS::IBASIntrf::forceLong

// Proxy call descriptor class. Mangled signature:
//  _clong_i_cstring_i_clong_e_cIBAS_mEXC__IncorrectTagType_e_cIBAS_mEXC__TagNotFound
class _0RL_cd_21da7e022242d4fd_60000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_21da7e022242d4fd_60000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&, _OMNI_NS(IOP_C)*, const char*);
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::Long arg_1;
  ::CORBA::Long result;
};

void _0RL_cd_21da7e022242d4fd_60000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  arg_1 >>= _n;

}

void _0RL_cd_21da7e022242d4fd_60000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  (::CORBA::Long&)arg_1 <<= _n;

}

void _0RL_cd_21da7e022242d4fd_60000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_21da7e022242d4fd_60000000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Long&)result <<= _n;

}

const char* const _0RL_cd_21da7e022242d4fd_60000000::_user_exns[] = {
  IBAS::EXC_IncorrectTagType::_PD_repoId,
  IBAS::EXC_TagNotFound::_PD_repoId
};

void _0RL_cd_21da7e022242d4fd_60000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if (omni::strMatch(repoId, IBAS::EXC_IncorrectTagType::_PD_repoId)) {
    IBAS::EXC_IncorrectTagType _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if (omni::strMatch(repoId, IBAS::EXC_TagNotFound::_PD_repoId)) {
    IBAS::EXC_TagNotFound _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_21da7e022242d4fd_70000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_21da7e022242d4fd_60000000* tcd = (_0RL_cd_21da7e022242d4fd_60000000*)cd;
  IBAS::_impl_IBASIntrf* impl = (IBAS::_impl_IBASIntrf*) svnt->_ptrToInterface(IBAS::IBASIntrf::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->forceLong(tcd->arg_0, tcd->arg_1);
#else
  if (!cd->is_upcall())
    tcd->result = impl->forceLong(tcd->arg_0, tcd->arg_1);
  else {
    try {
      tcd->result = impl->forceLong(tcd->arg_0, tcd->arg_1);
    }
    catch(IBAS::EXC_TagNotFound& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(IBAS::EXC_IncorrectTagType& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Long IBAS::_objref_IBASIntrf::forceLong(const char* tag, ::CORBA::Long val)
{
  _0RL_cd_21da7e022242d4fd_60000000 _call_desc(_0RL_lcfn_21da7e022242d4fd_70000000, "forceLong", 10);
  _call_desc.arg_0 = tag;
  _call_desc.arg_1 = val;

  _invoke(_call_desc);
  return _call_desc.result;


}


//
// Code for IBAS::IBASIntrf::forceFlag

// Local call call-back function.
static void
_0RL_lcfn_21da7e022242d4fd_80000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_21da7e022242d4fd_60000000* tcd = (_0RL_cd_21da7e022242d4fd_60000000*)cd;
  IBAS::_impl_IBASIntrf* impl = (IBAS::_impl_IBASIntrf*) svnt->_ptrToInterface(IBAS::IBASIntrf::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->forceFlag(tcd->arg_0, tcd->arg_1);
#else
  if (!cd->is_upcall())
    tcd->result = impl->forceFlag(tcd->arg_0, tcd->arg_1);
  else {
    try {
      tcd->result = impl->forceFlag(tcd->arg_0, tcd->arg_1);
    }
    catch(IBAS::EXC_TagNotFound& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(IBAS::EXC_IncorrectTagType& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Long IBAS::_objref_IBASIntrf::forceFlag(const char* tag, ::CORBA::Long val)
{
  _0RL_cd_21da7e022242d4fd_60000000 _call_desc(_0RL_lcfn_21da7e022242d4fd_80000000, "forceFlag", 10);
  _call_desc.arg_0 = tag;
  _call_desc.arg_1 = val;

  _invoke(_call_desc);
  return _call_desc.result;


}


//
// Code for IBAS::IBASIntrf::setLock

// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cstring_i_cboolean_e_cIBAS_mEXC__IncorrectTagType_e_cIBAS_mEXC__TagNotFound
class _0RL_cd_21da7e022242d4fd_90000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_21da7e022242d4fd_90000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&, _OMNI_NS(IOP_C)*, const char*);
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::Boolean arg_1;
  ::CORBA::Boolean result;
};

void _0RL_cd_21da7e022242d4fd_90000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalBoolean(arg_1);

}

void _0RL_cd_21da7e022242d4fd_90000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1 = _n.unmarshalBoolean();

}

void _0RL_cd_21da7e022242d4fd_90000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_21da7e022242d4fd_90000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_21da7e022242d4fd_90000000::_user_exns[] = {
  IBAS::EXC_IncorrectTagType::_PD_repoId,
  IBAS::EXC_TagNotFound::_PD_repoId
};

void _0RL_cd_21da7e022242d4fd_90000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if (omni::strMatch(repoId, IBAS::EXC_IncorrectTagType::_PD_repoId)) {
    IBAS::EXC_IncorrectTagType _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if (omni::strMatch(repoId, IBAS::EXC_TagNotFound::_PD_repoId)) {
    IBAS::EXC_TagNotFound _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_21da7e022242d4fd_a0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_21da7e022242d4fd_90000000* tcd = (_0RL_cd_21da7e022242d4fd_90000000*)cd;
  IBAS::_impl_IBASIntrf* impl = (IBAS::_impl_IBASIntrf*) svnt->_ptrToInterface(IBAS::IBASIntrf::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->setLock(tcd->arg_0, tcd->arg_1);
#else
  if (!cd->is_upcall())
    tcd->result = impl->setLock(tcd->arg_0, tcd->arg_1);
  else {
    try {
      tcd->result = impl->setLock(tcd->arg_0, tcd->arg_1);
    }
    catch(IBAS::EXC_TagNotFound& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(IBAS::EXC_IncorrectTagType& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Boolean IBAS::_objref_IBASIntrf::setLock(const char* tag, ::CORBA::Boolean value)
{
  _0RL_cd_21da7e022242d4fd_90000000 _call_desc(_0RL_lcfn_21da7e022242d4fd_a0000000, "setLock", 8);
  _call_desc.arg_0 = tag;
  _call_desc.arg_1 = value;

  _invoke(_call_desc);
  return _call_desc.result;


}


//
// Code for IBAS::IBASIntrf::isLocked

// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cstring_e_cIBAS_mEXC__IncorrectTagType_e_cIBAS_mEXC__TagNotFound
class _0RL_cd_21da7e022242d4fd_b0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_21da7e022242d4fd_b0000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&, _OMNI_NS(IOP_C)*, const char*);
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::Boolean result;
};

void _0RL_cd_21da7e022242d4fd_b0000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_21da7e022242d4fd_b0000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_21da7e022242d4fd_b0000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_21da7e022242d4fd_b0000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_21da7e022242d4fd_b0000000::_user_exns[] = {
  IBAS::EXC_IncorrectTagType::_PD_repoId,
  IBAS::EXC_TagNotFound::_PD_repoId
};

void _0RL_cd_21da7e022242d4fd_b0000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if (omni::strMatch(repoId, IBAS::EXC_IncorrectTagType::_PD_repoId)) {
    IBAS::EXC_IncorrectTagType _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if (omni::strMatch(repoId, IBAS::EXC_TagNotFound::_PD_repoId)) {
    IBAS::EXC_TagNotFound _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_21da7e022242d4fd_c0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_21da7e022242d4fd_b0000000* tcd = (_0RL_cd_21da7e022242d4fd_b0000000*)cd;
  IBAS::_impl_IBASIntrf* impl = (IBAS::_impl_IBASIntrf*) svnt->_ptrToInterface(IBAS::IBASIntrf::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->isLocked(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->isLocked(tcd->arg_0);
  else {
    try {
      tcd->result = impl->isLocked(tcd->arg_0);
    }
    catch(IBAS::EXC_TagNotFound& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(IBAS::EXC_IncorrectTagType& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Boolean IBAS::_objref_IBASIntrf::isLocked(const char* tag)
{
  _0RL_cd_21da7e022242d4fd_b0000000 _call_desc(_0RL_lcfn_21da7e022242d4fd_c0000000, "isLocked", 9);
  _call_desc.arg_0 = tag;

  _invoke(_call_desc);
  return _call_desc.result;


}


//
// Code for IBAS::IBASIntrf::clearAllLocks

// Proxy call descriptor class. Mangled signature:
//  void
class _0RL_cd_21da7e022242d4fd_d0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_21da7e022242d4fd_d0000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
    
  
  static const char* const _user_exns[];

  
};

const char* const _0RL_cd_21da7e022242d4fd_d0000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_21da7e022242d4fd_e0000000(omniCallDescriptor*, omniServant* svnt)
{
  
  IBAS::_impl_IBASIntrf* impl = (IBAS::_impl_IBASIntrf*) svnt->_ptrToInterface(IBAS::IBASIntrf::_PD_repoId);
  impl->clearAllLocks();


}

void IBAS::_objref_IBASIntrf::clearAllLocks()
{
  _0RL_cd_21da7e022242d4fd_d0000000 _call_desc(_0RL_lcfn_21da7e022242d4fd_e0000000, "clearAllLocks", 14);


  _invoke(_call_desc);



}


//
// Code for IBAS::IBASIntrf::getListOfLockedValues

// Proxy call descriptor class. Mangled signature:
//  _cboolean_o_cIBAS_mseqLocks
class _0RL_cd_21da7e022242d4fd_f0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_21da7e022242d4fd_f0000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  IBAS::seqLocks_var arg_0;
  ::CORBA::Boolean result;
};

void _0RL_cd_21da7e022242d4fd_f0000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);
  (const IBAS::seqLocks&) arg_0 >>= _n;

}

void _0RL_cd_21da7e022242d4fd_f0000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();
  arg_0 = new IBAS::seqLocks;
  (IBAS::seqLocks&)arg_0 <<= _n;

}

const char* const _0RL_cd_21da7e022242d4fd_f0000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_21da7e022242d4fd_01000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_21da7e022242d4fd_f0000000* tcd = (_0RL_cd_21da7e022242d4fd_f0000000*)cd;
  IBAS::_impl_IBASIntrf* impl = (IBAS::_impl_IBASIntrf*) svnt->_ptrToInterface(IBAS::IBASIntrf::_PD_repoId);
  tcd->result = impl->getListOfLockedValues(tcd->arg_0.out());


}

::CORBA::Boolean IBAS::_objref_IBASIntrf::getListOfLockedValues(::IBAS::seqLocks_out list)
{
  _0RL_cd_21da7e022242d4fd_f0000000 _call_desc(_0RL_lcfn_21da7e022242d4fd_01000000, "getListOfLockedValues", 22);


  _invoke(_call_desc);
  list = _call_desc.arg_0._retn();
  return _call_desc.result;


}

IBAS::_pof_IBASIntrf::~_pof_IBASIntrf() {}


omniObjRef*
IBAS::_pof_IBASIntrf::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::IBAS::_objref_IBASIntrf(ior, id);
}


::CORBA::Boolean
IBAS::_pof_IBASIntrf::is_a(const char* id) const
{
  if (omni::ptrStrMatch(id, ::IBAS::IBASIntrf::_PD_repoId))
    return 1;
  if (omni::ptrStrMatch(id, IBAS::BASIntrf::_PD_repoId))
    return 1;


  return 0;
}

const IBAS::_pof_IBASIntrf _the_pof_IBAS_mIBASIntrf;

IBAS::_impl_IBASIntrf::~_impl_IBASIntrf() {}


::CORBA::Boolean
IBAS::_impl_IBASIntrf::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if (omni::strMatch(op, "setTelegram")) {

    _0RL_cd_21da7e022242d4fd_00000000 _call_desc(_0RL_lcfn_21da7e022242d4fd_10000000, "setTelegram", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "forceFloat")) {

    _0RL_cd_21da7e022242d4fd_20000000 _call_desc(_0RL_lcfn_21da7e022242d4fd_30000000, "forceFloat", 11, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "forceString")) {

    _0RL_cd_21da7e022242d4fd_40000000 _call_desc(_0RL_lcfn_21da7e022242d4fd_50000000, "forceString", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "forceLong")) {

    _0RL_cd_21da7e022242d4fd_60000000 _call_desc(_0RL_lcfn_21da7e022242d4fd_70000000, "forceLong", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "forceFlag")) {

    _0RL_cd_21da7e022242d4fd_60000000 _call_desc(_0RL_lcfn_21da7e022242d4fd_80000000, "forceFlag", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "setLock")) {

    _0RL_cd_21da7e022242d4fd_90000000 _call_desc(_0RL_lcfn_21da7e022242d4fd_a0000000, "setLock", 8, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "isLocked")) {

    _0RL_cd_21da7e022242d4fd_b0000000 _call_desc(_0RL_lcfn_21da7e022242d4fd_c0000000, "isLocked", 9, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "clearAllLocks")) {

    _0RL_cd_21da7e022242d4fd_d0000000 _call_desc(_0RL_lcfn_21da7e022242d4fd_e0000000, "clearAllLocks", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getListOfLockedValues")) {

    _0RL_cd_21da7e022242d4fd_f0000000 _call_desc(_0RL_lcfn_21da7e022242d4fd_01000000, "getListOfLockedValues", 22, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  
#ifndef _MSC_VER
  if (_impl_BASIntrf::_dispatch(_handle)) {
    return 1;
  }
#else
  // Work-around for incorrect MSVC code generation.
  if (((_impl_BASIntrf*)this)->
      _impl_BASIntrf::_dispatch(_handle)) {
    return 1;
  }
#endif


  return 0;
}

void*
IBAS::_impl_IBASIntrf::_ptrToInterface(const char* id)
{
  if (id == ::IBAS::IBASIntrf::_PD_repoId)
    return (::IBAS::_impl_IBASIntrf*) this;
  if (id == ::IBAS::BASIntrf::_PD_repoId)
    return (::IBAS::_impl_BASIntrf*) this;


  if (id == ::CORBA::Object::_PD_repoId)
    return (void*) 1;

  if (omni::strMatch(id, ::IBAS::IBASIntrf::_PD_repoId))
    return (::IBAS::_impl_IBASIntrf*) this;
  if (omni::strMatch(id, ::IBAS::BASIntrf::_PD_repoId))
    return (::IBAS::_impl_BASIntrf*) this;


  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (void*) 1;
  return 0;
}

const char*
IBAS::_impl_IBASIntrf::_mostDerivedRepoId()
{
  return ::IBAS::IBASIntrf::_PD_repoId;
}

POA_IBAS::IBASIntrf::~IBASIntrf() {}

