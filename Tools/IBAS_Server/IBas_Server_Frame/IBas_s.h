// This file is generated by omniidl (C++ backend)- omniORB_4_2. Do not edit.
#ifndef __IBas_hh__
#define __IBas_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_IBas
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_IBas
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_IBas
#endif



#ifndef __corbaidl_hh_EXTERNAL_GUARD__
#define __corbaidl_hh_EXTERNAL_GUARD__
#include <corbaidl_s.h>
#endif
#ifndef __boxes_hh_EXTERNAL_GUARD__
#define __boxes_hh_EXTERNAL_GUARD__
#include <boxes_s.h>
#endif
#ifndef __BasIntrf_hh_EXTERNAL_GUARD__
#define __BasIntrf_hh_EXTERNAL_GUARD__
#include <BasIntrf_s.h>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif



_CORBA_MODULE IBAS

_CORBA_MODULE_BEG

  enum valueKind { e_kindLong, e_kindFloat, e_kindString /*, __max_valueKind=0xffffffff */ };
  typedef valueKind& valueKind_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_valueKind;

  class u_Data {
  public:

    typedef _CORBA_ConstrType_Variable_Var<u_Data> _var_type;

    

    u_Data(): _pd__initialised(0) {
      
    }
    
    u_Data(const u_Data& _value) : _pd__initialised(0) {
      if (_value._pd__initialised) {
        switch(_value._pd__d) {
          case e_kindLong: LongVal(_value.LongVal()); break;

          case e_kindFloat: FloatVal(_value.FloatVal()); break;

          case e_kindString: StringVal(_value.StringVal()); break;

          default: break;

        
        }
        _pd__d = _value._pd__d;
  
        _pd__initialised = _value._pd__initialised;
      }
    }

    ~u_Data() {
      _release_member();
    }

    u_Data& operator=(const u_Data& _value) {
      if (&_value != this) {
        if (_value._pd__initialised) {
          switch(_value._pd__d) {
            case e_kindLong: LongVal(_value.LongVal()); break;

            case e_kindFloat: FloatVal(_value.FloatVal()); break;

            case e_kindString: StringVal(_value.StringVal()); break;

            default: break;

          
          }
          _pd__d = _value._pd__d;
  
          _pd__initialised = _value._pd__initialised;
        }
        else {
          _release_member();
        }
      }
      return *this;
    }

    valueKind _d() const { return _pd__d;}
    void _d(valueKind _value){
      // illegal to set discriminator before making a member active
      if (!_pd__initialised)
        OMNIORB_THROW(BAD_PARAM,_OMNI_NS(BAD_PARAM_InvalidUnionDiscValue),::CORBA::COMPLETED_NO);

      if (_value == _pd__d) return; // no change

      switch (_pd__d){
        case e_kindLong: goto fail;
        case e_kindFloat: goto fail;
        case e_kindString: goto fail;
        default: goto fail;

      };
      

      fail:
      OMNIORB_THROW(BAD_PARAM,_OMNI_NS(BAD_PARAM_InvalidUnionDiscValue),::CORBA::COMPLETED_NO);


  
    }

    

    ::CORBA::Long LongVal () const { return _pd_LongVal; }
    void LongVal (::CORBA::Long  _value) {
      _release_member();
      _pd__initialised = 1;
      _pd__d = e_kindLong;
      _pd__default = 0;
      _pd_LongVal = _value;
    }

    ::CORBA::Float FloatVal () const { return _pd_FloatVal; }
    void FloatVal (::CORBA::Float  _value) {
      _release_member();
      _pd__initialised = 1;
      _pd__d = e_kindFloat;
      _pd__default = 0;
      _pd_FloatVal = _value;
    }

    const char * StringVal () const { return  _pd_StringVal; }

    void StringVal(char* _value) {
      _release_member();
      _pd__initialised = 1;
      _pd__d = e_kindString;
      _pd__default = 0;
      _pd_StringVal = _value;
    }
    void StringVal(const char*  _value) {
      _release_member();
      _pd__initialised = 1;
      _pd__d = e_kindString;
      _pd__default = 0;
      _pd_StringVal = ::CORBA::string_dup(_value);
    }

    void StringVal(const ::CORBA::String_var& _value) {
      _release_member();
      _pd__initialised = 1;
      _pd__d = e_kindString;
      _pd__default = 0;
      _pd_StringVal = ::CORBA::string_dup(_value.in());
    }
    void StringVal(const ::CORBA::String_member& _value) {
      _release_member();
      _pd__initialised = 1;
      _pd__d = e_kindString;
      _pd__default = 0;
      _pd_StringVal = ::CORBA::string_dup(_value.in());
    }

  
    
    void operator>>= (cdrStream&) const;
    void operator<<= (cdrStream&);

  private:
    valueKind _pd__d;
    _CORBA_Boolean _pd__default;
    _CORBA_Boolean _pd__initialised;

    union {
      ::CORBA::Long _pd_LongVal;
#ifndef USING_PROXY_FLOAT
      ::CORBA::Float _pd_FloatVal;
#else
      ::CORBA::Float* _pd_FloatVal;
#endif
      char* _pd_StringVal;
  
    };
    void _release_member () {
      if (!_pd__initialised)
        return;

      switch(_pd__d) {
        case e_kindLong:

          
          break;

        case e_kindFloat:

          
          break;

        case e_kindString:

          ::CORBA::string_free(_pd_StringVal);


          break;

        default:
          
          break;


      } 
      _pd__initialised = 0;
    }

  
  };

  typedef u_Data::_var_type u_Data_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< u_Data,u_Data_var > u_Data_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_u_Data;

  struct NamedValue {
    typedef _CORBA_ConstrType_Variable_Var<NamedValue> _var_type;

    
    ::CORBA::String_member Tag;

    u_Data Data;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef NamedValue::_var_type NamedValue_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< NamedValue,NamedValue_var > NamedValue_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_NamedValue;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_seqValues;

  class seqValues_var;

  class seqValues : public _CORBA_Unbounded_Sequence< NamedValue >  {
  public:
    typedef seqValues_var _var_type;
    inline seqValues() {}
    inline seqValues(const seqValues& _s)
      : _CORBA_Unbounded_Sequence< NamedValue > (_s) {}

    inline seqValues(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence< NamedValue > (_max) {}
    inline seqValues(_CORBA_ULong _max, _CORBA_ULong _len, NamedValue* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence< NamedValue > (_max, _len, _val, _rel) {}

  

    inline seqValues& operator = (const seqValues& _s) {
      _CORBA_Unbounded_Sequence< NamedValue > ::operator=(_s);
      return *this;
    }
  };

  class seqValues_out;

  class seqValues_var {
  public:
    inline seqValues_var() : _pd_seq(0) {}
    inline seqValues_var(seqValues* _s) : _pd_seq(_s) {}
    inline seqValues_var(const seqValues_var& _s) {
      if (_s._pd_seq)  _pd_seq = new seqValues(*_s._pd_seq);
      else             _pd_seq = 0;
    }
    inline ~seqValues_var() { if (_pd_seq)  delete _pd_seq; }
      
    inline seqValues_var& operator = (seqValues* _s) {
      if (_pd_seq)  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline seqValues_var& operator = (const seqValues_var& _s) {
      if (&_s != this) {
        if (_s._pd_seq) {
          if (!_pd_seq)  _pd_seq = new seqValues;
          *_pd_seq = *_s._pd_seq;
        }
        else if (_pd_seq) {
          delete _pd_seq;
          _pd_seq = 0;
        }
      }
      return *this;
    }
    inline NamedValue& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline seqValues* operator -> () { return _pd_seq; }
    inline const seqValues* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator seqValues& () const { return *_pd_seq; }
#else
    inline operator const seqValues& () const { return *_pd_seq; }
    inline operator seqValues& () { return *_pd_seq; }
#endif
      
    inline const seqValues& in() const { return *_pd_seq; }
    inline seqValues&       inout()    { return *_pd_seq; }
    inline seqValues*&      out() {
      if (_pd_seq) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline seqValues* _retn() { seqValues* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class seqValues_out;
    
  private:
    seqValues* _pd_seq;
  };

  class seqValues_out {
  public:
    inline seqValues_out(seqValues*& _s) : _data(_s) { _data = 0; }
    inline seqValues_out(seqValues_var& _s)
      : _data(_s._pd_seq) { _s = (seqValues*) 0; }
    inline seqValues_out(const seqValues_out& _s) : _data(_s._data) {}
    inline seqValues_out& operator = (const seqValues_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline seqValues_out& operator = (seqValues* _s) {
      _data = _s;
      return *this;
    }
    inline operator seqValues*&()  { return _data; }
    inline seqValues*& ptr()       { return _data; }
    inline seqValues* operator->() { return _data; }

    inline NamedValue& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    seqValues*& _data;

  private:
    seqValues_out();
    seqValues_out& operator=(const seqValues_var&);
  };

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_seqLocks;

  class seqLocks_var;

  class seqLocks : public _CORBA_Unbounded_Sequence_String {
  public:
    typedef seqLocks_var _var_type;
    inline seqLocks() {}
    inline seqLocks(const seqLocks& _s)
      : _CORBA_Unbounded_Sequence_String(_s) {}

    inline seqLocks(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence_String(_max) {}
    inline seqLocks(_CORBA_ULong _max, _CORBA_ULong _len, char** _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence_String(_max, _len, _val, _rel) {}

  

    inline seqLocks& operator = (const seqLocks& _s) {
      _CORBA_Unbounded_Sequence_String::operator=(_s);
      return *this;
    }
  };

  class seqLocks_out;

  class seqLocks_var {
  public:
    inline seqLocks_var() : _pd_seq(0) {}
    inline seqLocks_var(seqLocks* _s) : _pd_seq(_s) {}
    inline seqLocks_var(const seqLocks_var& _s) {
      if (_s._pd_seq)  _pd_seq = new seqLocks(*_s._pd_seq);
      else             _pd_seq = 0;
    }
    inline ~seqLocks_var() { if (_pd_seq)  delete _pd_seq; }
      
    inline seqLocks_var& operator = (seqLocks* _s) {
      if (_pd_seq)  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline seqLocks_var& operator = (const seqLocks_var& _s) {
      if (&_s != this) {
        if (_s._pd_seq) {
          if (!_pd_seq)  _pd_seq = new seqLocks;
          *_pd_seq = *_s._pd_seq;
        }
        else if (_pd_seq) {
          delete _pd_seq;
          _pd_seq = 0;
        }
      }
      return *this;
    }
    inline _CORBA_String_element operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline seqLocks* operator -> () { return _pd_seq; }
    inline const seqLocks* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator seqLocks& () const { return *_pd_seq; }
#else
    inline operator const seqLocks& () const { return *_pd_seq; }
    inline operator seqLocks& () { return *_pd_seq; }
#endif
      
    inline const seqLocks& in() const { return *_pd_seq; }
    inline seqLocks&       inout()    { return *_pd_seq; }
    inline seqLocks*&      out() {
      if (_pd_seq) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline seqLocks* _retn() { seqLocks* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class seqLocks_out;
    
  private:
    seqLocks* _pd_seq;
  };

  class seqLocks_out {
  public:
    inline seqLocks_out(seqLocks*& _s) : _data(_s) { _data = 0; }
    inline seqLocks_out(seqLocks_var& _s)
      : _data(_s._pd_seq) { _s = (seqLocks*) 0; }
    inline seqLocks_out(const seqLocks_out& _s) : _data(_s._data) {}
    inline seqLocks_out& operator = (const seqLocks_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline seqLocks_out& operator = (seqLocks* _s) {
      _data = _s;
      return *this;
    }
    inline operator seqLocks*&()  { return _data; }
    inline seqLocks*& ptr()       { return _data; }
    inline seqLocks* operator->() { return _data; }

    inline _CORBA_String_element operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    seqLocks*& _data;

  private:
    seqLocks_out();
    seqLocks_out& operator=(const seqLocks_var&);
  };

#ifndef __IBAS_mIBASIntrf__
#define __IBAS_mIBASIntrf__
  class IBASIntrf;
  class _objref_IBASIntrf;
  class _impl_IBASIntrf;
  
  typedef _objref_IBASIntrf* IBASIntrf_ptr;
  typedef IBASIntrf_ptr IBASIntrfRef;

  class IBASIntrf_Helper {
  public:
    typedef IBASIntrf_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_IBASIntrf, IBASIntrf_Helper> IBASIntrf_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_IBASIntrf,IBASIntrf_Helper > IBASIntrf_out;

#endif

  // interface IBASIntrf
  class IBASIntrf {
  public:
    // Declarations for this interface type.
    typedef IBASIntrf_ptr _ptr_type;
    typedef IBASIntrf_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static inline _ptr_type _fromObjRef(omniObjRef* o) {
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_IBASIntrf :
    public virtual _objref_BASIntrf
  {
  public:
    // IDL operations
    void setTelegram(const ::IBAS::seqValues& taggedValues);
    ::CORBA::Long forceFloat(const char* tag, ::CORBA::Float val);
    ::CORBA::Long forceString(const char* tag, const char* val);
    ::CORBA::Long forceLong(const char* tag, ::CORBA::Long val);
    ::CORBA::Long forceFlag(const char* tag, ::CORBA::Long val);
    ::CORBA::Boolean setLock(const char* tag, ::CORBA::Boolean value);
    ::CORBA::Boolean isLocked(const char* tag);
    void clearAllLocks();
    ::CORBA::Boolean getListOfLockedValues(::IBAS::seqLocks_out list);

    // Constructors
    inline _objref_IBASIntrf()  { _PR_setobj(0); }  // nil
    _objref_IBASIntrf(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_IBASIntrf();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_IBASIntrf(const _objref_IBASIntrf&);
    _objref_IBASIntrf& operator = (const _objref_IBASIntrf&);
    // not implemented

    friend class IBASIntrf;
  };

  class _pof_IBASIntrf : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_IBASIntrf() : _OMNI_NS(proxyObjectFactory)(IBASIntrf::_PD_repoId) {}
    virtual ~_pof_IBASIntrf();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_IBASIntrf :
    public virtual _impl_BASIntrf
  {
  public:
    virtual ~_impl_IBASIntrf();

    virtual void setTelegram(const ::IBAS::seqValues& taggedValues) = 0;
    virtual ::CORBA::Long forceFloat(const char* tag, ::CORBA::Float val) = 0;
    virtual ::CORBA::Long forceString(const char* tag, const char* val) = 0;
    virtual ::CORBA::Long forceLong(const char* tag, ::CORBA::Long val) = 0;
    virtual ::CORBA::Long forceFlag(const char* tag, ::CORBA::Long val) = 0;
    virtual ::CORBA::Boolean setLock(const char* tag, ::CORBA::Boolean value) = 0;
    virtual ::CORBA::Boolean isLocked(const char* tag) = 0;
    virtual void clearAllLocks() = 0;
    virtual ::CORBA::Boolean getListOfLockedValues(::IBAS::seqLocks_out list) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_IBASIntrf;

_CORBA_MODULE_END



_CORBA_MODULE POA_IBAS
_CORBA_MODULE_BEG

  class IBASIntrf :
    public virtual IBAS::_impl_IBASIntrf,
    public virtual BASIntrf
  {
  public:
    virtual ~IBASIntrf();

    inline ::IBAS::IBASIntrf_ptr _this() {
      return (::IBAS::IBASIntrf_ptr) _do_this(::IBAS::IBASIntrf::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_IBAS
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

inline void operator >>=(IBAS::valueKind _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (IBAS::valueKind& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= IBAS::e_kindString) {
    _e = (IBAS::valueKind) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, IBAS::valueKind _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, IBAS::valueKind& _s);

void operator<<=(::CORBA::Any& _a, const IBAS::u_Data& _s);
void operator<<=(::CORBA::Any& _a, IBAS::u_Data* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const IBAS::u_Data*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, IBAS::u_Data*& _sp);

extern void operator<<=(::CORBA::Any& _a, const IBAS::NamedValue& _s);
extern void operator<<=(::CORBA::Any& _a, IBAS::NamedValue* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, IBAS::NamedValue*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const IBAS::NamedValue*& _sp);

void operator<<=(::CORBA::Any& _a, const IBAS::seqValues& _s);
void operator<<=(::CORBA::Any& _a, IBAS::seqValues* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, IBAS::seqValues*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const IBAS::seqValues*& _sp);

void operator<<=(::CORBA::Any& _a, const IBAS::seqLocks& _s);
void operator<<=(::CORBA::Any& _a, IBAS::seqLocks* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, IBAS::seqLocks*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const IBAS::seqLocks*& _sp);

void operator<<=(::CORBA::Any& _a, IBAS::IBASIntrf_ptr _s);
void operator<<=(::CORBA::Any& _a, IBAS::IBASIntrf_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, IBAS::IBASIntrf_ptr& _s);



inline void
IBAS::IBASIntrf::_marshalObjRef(::IBAS::IBASIntrf_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}



#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_IBas
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_IBas
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_IBas
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_IBas
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_IBas
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_IBas
#endif

#endif  // __IBas_hh__

