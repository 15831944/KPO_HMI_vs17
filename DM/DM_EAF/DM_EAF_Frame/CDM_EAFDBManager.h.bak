//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by (DB)ClassCodeUtility BETA 0.6.0 

#if defined (_MSC_VER) && (_MSC_VER >= 1000)
#pragma once
#endif
#ifndef _INC_CDM_EAFDBMANAGER_INCLUDED
#define _INC_CDM_EAFDBMANAGER_INCLUDED

#include "CDM_DBManager.h"

typedef struct
{
  std::string HeatId;
  std::string TreatId;
  std::string Plant;
  long   PlantNo;  
  long   PracNo;
  long   NoOfBasket;
  long   LiqAddAmount;
} sHdeDataKeyInfo;

class CDM_EAFDBManager
: public CDM_DBManager
{

public:

  CDM_EAFDBManager(CDM_DBManagerTask* _task);

  virtual ~CDM_EAFDBManager();

  void init();

protected:

  bool copyHDECyclMeasData(sHeatInfo &HeatInfo, bool Commit);

  bool copyHDEHeatData(sHeatInfo &HeatInfo, bool Commit);

  bool checkHDEHeatData(sHeatInfo &HeatInfo, bool Commit);

  bool copyHDEHeatDataMelt(sHeatInfo &HeatInfo, bool Commit);

  bool copyHDEHeatPhaseData(sHeatInfo &HeatInfo, bool Commit);

  bool copyHDEPpBurners(sHeatInfo &HeatInfo, bool Commit);

  bool copyHDEPpElec(sHeatInfo &HeatInfo, const std::string &SteelGradeCode, bool Commit);

  bool copyHDEPpFlameProfile(sHeatInfo &HeatInfo,bool Commit);

  bool copyHDEPpInjection(sHeatInfo &HeatInfo, bool Commit);

  bool copyHDEPpProcess(sHeatInfo &HeatInfo, bool Commit);

  bool copyHDEPpScrap(sHeatInfo& HeatInfo, const std::string& OrderID, bool Commit);

  bool copyHDEPpStirr(sHeatInfo &HeatInfo,const std::string &SteelGradeCode, bool Commit);

  bool copyHDEProdPracData(sHeatInfo &HeatInfo, const std::string &SteelGradeCode, const std::string &OrderID, bool Commit);

public:

  // assignment of hot metal
  // return values
  // <0 : in case of error
  // HotMetalLadle : return the same ladle number (HMLadleNo) if assignment was correct 
  //                 or another already assigned ladle number to this ChargeSeq
  long assignHotMetalLadle(CEventMessage& Event, long ChargeSeq, long HMLadleNo, std::string& HMLadleType, bool commit);

  // set basket id in PD_SCRAP_CONTAINER_ORDER to make new assignment
  bool assignScrapBasket(CEventMessage& Event, long BasketInSeq, long BasketId, long LastBasket, bool commit);

  bool checkTreatMode(CEventMessage& Event);

  // function checks if BasketId already used in other sequence
  bool checkBasketAssignment(CEventMessage& Event, long BasketInSeq, long BasketId);

  bool checkBasketAssignment(CEventMessage& Event);

  bool checkBasketData(long BasketInSeq, long BasketId, const std::string& HMIClientId);

  bool checkBasketData(long BasketId, const std::string& HMIClientId);

  bool checkBasketData(long BasketInSeq);

    // check if ladle is already used in other charging sequences for the same order.
  // return values
  // <0 : in case of error
  //  0 : hot metal ladle not assigned
  // HotMetalLadle : already used ladle number for this ChargeSeq
  long checkHMAssignment(CEventMessage& Event, long ChargeSeq, long HMLadleNo, std::string& HMLadleType);

  // reset hot metal counter in HOT_METAL_ORDER
  // return values
  // -1 : in case of error
  //  0 : save data was not possible. Last error is set
  // >0 : OK
  long deassignHotMetalLadle(CEventMessage& Event, long ChargeSeq, const long HMLadleNo, const std::string& HMLadleType, bool commit);

  // remove assignment for Basket for all oders af plant for respective Plant
  bool deassignScrapBasket(const std::string& Plant, const std::string& OrderId, long ContainerInSeq, long ContainerNo, bool commit);

protected:

  // discharge hot metal ladle
  // return values
  // -1 : in case of error
  //  0 : hot metal ladle could not be discharged. Last error is set
  // HotMetalLadle : return the same ladle number (HMLadleNo) if discharge was successful 
  long dischargeHotMetalLadle(CEventMessage& Event, long ChargeSeq, long HMLadleNo, std::string& HMLadleType, double& Weight, bool commit);

  bool dischargeScrapBasket(CEventMessage& Event, long BasketInSeq, long BasketId, bool commit);

public:

  bool evAutoHeatAnnouncement(CEventMessage& Event);

  bool evCancelHeat(CEventMessage &Event);

  bool evChangeProdPracDataBurner(CEventMessage &Event);

  bool evChangeProdPracPointerInjection(CEventMessage &Event);

  bool evChangeProdPracPointerOxygen(CEventMessage &Event);

  bool evChangeProdPracPointerProcess(CEventMessage &Event);

  bool evChangeProdPracPointerScrapLoading(CEventMessage &Event);

  bool evChangeProdPracPointerStirring(CEventMessage &Event);

  bool evChangeThermalStatus(CEventMessage &Event);

  bool evChangeTreatmentMode(CEventMessage &Event);

  bool evChargedHotMetal(CEventMessage& Event);

  bool evCyclicMeasurementElectric(CEventMessage& Event);

  bool evHandleBasketAssignedToHeat(CEventMessage& Event);

  bool evHandleBasketDeAssignedFromHeat(CEventMessage& Event);

  bool evHandleBasketDischarged(CEventMessage& Event);

  bool evHandleSetBasketData(CEventMessage& Event);

  virtual bool evHeatAnnouncement(CEventMessage &Event, bool commit);

  virtual bool evHeatDeparture(CEventMessage &Event);

  virtual bool evHeatStart(CEventMessage &Event);

  virtual bool evHeatEnd(CEventMessage &Event);

  bool evHotMetalAnalysisReceived(CEventMessage &Event);

  bool evHotMetalAssigned(CEventMessage& Event);

  bool evHotMetalLadleData(CEventMessage& Event);

  bool evLadleStirringStart(CEventMessage &Event);

  bool evLadleStirringStop(CEventMessage &Event);

  bool evMatFeeding(CEventMessage &Event);

  bool evPowerOff(CEventMessage &Event);

  bool evPowerOn(CEventMessage &Event);

  bool evProductionOrderChanged(CEventMessage &Event);

  bool evRemoveHotMetalData(CEventMessage& Event);

  bool evRetreatment(CEventMessage &Event);

  bool evSetupOfHeat(CEventMessage &Event);

  bool evSlagAnalysisReceived(CEventMessage &Event);

  bool evSlagSampleTaken(CEventMessage &Event);

  bool evSteelAnalysisReceived(CEventMessage &Event);

  // handle steel grade change for received order
  bool evSteelGradeChanged(CEventMessage& Event);

  bool evSteelSampleTaken(CEventMessage &Event);

  bool evTappingEnd(CEventMessage &Event);

  bool evTappingStart(CEventMessage &Event);

  bool evHeatScheduleUpdate(CEventMessage &Event);

  bool evOrderScrap(CEventMessage &Event);

  bool evMaterialHandlingReport(CEventMessage& Event);

  // return assigned hot metal ladle 
  // return values
  // -1 : in case of error
  //  0 : No ladle assigned.
  //  HotMetalLadle : return assigned ladle number 
  long getAssignedHotMetalLadle(CEventMessage& Event, long ChargeSeq);

  // return used basket for BasketInSeq 
  // -1 : if an error or no entry for the order 
  //  0 : if no Basket was assigned
  // >0 : assigned basket id 
  long getAssignedScrapBasket(CEventMessage& Event, long BasketInSeq);

    // return values:
  // true         - TREATMENTMODE is set in pp_order.
  // false        - value not defined. last error is set
  // TreatMode    - value of TREATMENTMODE
  bool getTreatmentMode(sHeatInfo &HeatInfo, const std::string& PRODORDERID, long& TreatMode);

protected:

  bool handleOrderScrap(sHeatInfo &HeatInfo, const std::string &OrderId, const std::string & ContainerType, bool commit);
  
  bool handlePDETablesOnTappingEnd(CEventMessage& Event, double TappingMass, const std::string &OrderID, const std::string &UserCode, bool Commit);
  
  bool handlePDETablesOnHeatEnd(CEventMessage& Event, const std::string &UserCode, bool Commit);

  bool handlePDRecipeDataOnAnnounce(sHeatInfo &HeatInfo, const std::string &OrderId, const std::string &UserCode, bool Commit);

  bool handlePDRecipeDataOnAssignment(sHeatInfo &HeatInfo, const std::string &OrderId, long ContainerInSeq, long ContainerNo, long RecipeStatus, const std::string &UserCode, bool Commit);

  bool handlePDRecipeDataOnDeAssignment(sHeatInfo &HeatInfo, const std::string &OrderId, long ContainerInSeq, long ContainerNo, long RecipeStatus, const std::string &UserCode, bool Commit);

  bool handlePDRecipeDataOnDischarged(sHeatInfo &HeatInfo, const std::string &OrderId, long ContainerInSeq, long ContainerNo, const std::string &UserCode, bool Commit);

  bool handlePDTablesOnAnnounce(sHeatInfo &HeatInfo, const std::string &Order, const std::string &SteelGradeCode, const std::string &UserCode, sPDData &PDData, long &SampleRef, long TreatmentPosition, bool Commit );

  bool handlePDTablesOnSetupOfHeat(sHeatInfo &HeatInfo, sPDData &PDData, long Status, const std::string &OrderId, const CDateTime &HeatStart, const CDateTime &HeatEnd, const std::string &SteelgradeCode, const std::string &UserCode, long TreatmentPosition, bool Commit );

  void log(const std::string& _message, long _level);

  bool handlePDHeatStatusOnSetBasketData(CEventMessage& Event, long BasketInSeq, long BasketId, long BasketLocation, long RecipeStatus, bool commit);

public:

  // function stores actual received BasketId data
  // return values
  // <0 in case of error
  //  0 data not stored, last error is set
  // >0 basket id whose data are stored
  bool setBasketData(CEventMessage& Event, long BasketInSeq, long BasketId, long BasketLocation, long RecipeStatus, seqBatch RecipeContent, bool commit);

  // set received hot metal data under hot metal counter from ladle
  // return values
  // -1 : in case of error
  //  0 : save data was not possible. Last error is set
  //  HotMetalLadle : return the same ladle number (HMLadleNo) if data storing was correct 
  long setHotMetalData(CEventMessage& Event, const long ChargeSeq, const long HMLadleNo, const std::string& HMLadleType, bool commit);

};

#endif /* _INC_CDM_EAFDBManager_INCLUDED */
