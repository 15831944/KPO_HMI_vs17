//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by (DB)ClassCodeUtility BETA 0.6.0 

#include "iSMC_DataDefinitions_s.hh"
#include "CSMC_EventLogFrameController.h"
#include "CDM_DataInterface_Impl.h"
#include "CDM_ProductManagementInterface_Impl.h"
#include "CDataConversion.h"
#include "CSMC_RecipeHandler.h"
#include "CStirringDataHandler.h"
#include "CPP_HEAT_PLANT.h"
//HD tables
#include "CHDL_CYCL_MEAS_DATA.h"
#include "CHDL_HEAT_DATA.h"
#include "CHDL_HEAT_DATA_MELT.h"
#include "CHDL_PP_EL.h"
#include "CHDL_PP_EL_STEP.h"
#include "CHDL_PP_STIRR.h"
#include "CHDL_PP_STIRR_SPEC.h"
#include "CHDL_ACTIVITY_RES.h"
#include "CHDL_ACTUAL_RES.h"
#include "CHDL_ACTUAL_RES_ANL.h"
#include "CHDL_PHASE_ELEC_RES.h"
#include "CHDL_PHASE_STIRRING_RES.h"
//PD tables
#include "CPDL_HEAT_DATA.h"
#include "CPD_TAPCH_DATA.h"
#include "CPD_HEAT_DATA_LIQADD.h"
#include "CPD_PRETREATDATA.h"
#include "CPD_LADLE.h"
#include "CPD_SAMPLE_REF.h"
#include "CPD_PLANTSTATUS.h"
#include "CPD_RECIPE_ENTRY.h"
#include "CPDL_CYCL_MEAS_DATA.h"
#include "CPD_HEAT_DATA.h"
#include "CPD_HEAT_DATA_STIRR.h"
#include "CPD_PLANTSTATUS_PLANT.h"
#include "CEquipmentData.h"
#include "CGT_PARAM.h"

// DEFs 
#include "DEF_GC_ACTION_DEF.h"
#include "DEF_GC_MEASUREMENT_TYPE.h"
#include "DEF_GC_LADLE_TYPE.h"
#include "DEF_GC_LADLE_POS.h"
#include "DEF_GC_PLANT_DEF.h"
#include "DEF_GC_RECIPE_SOURCE.h"
#include "DEF_GC_CHARGE_DEST.h"
#include "DEF_GC_STIRR_DEVICE.h"
#include "DEF_GC_STIRR_GAS_TYPE.H"
#include "DEF_GC_PLANTSTATUS.h"
#include "DEF_GC_PRODPRAC_DEF.h"
#include "DEF_GC_COUNTER_TYPE.h"
#include "DEF_GD_EQUIP_TYPE.h"
#include "DEF_GC_PLANTGROUP_DESC.h"

// GCs
#include "CGC_RECIPE_L1.h"

#include "CDM_LFDBManager.h"

CDM_LFDBManager::CDM_LFDBManager(CDM_DBManagerTask* _task)
: CDM_DBManager(_task)
{
}

CDM_LFDBManager::~CDM_LFDBManager()
{
}

void CDM_LFDBManager::init()
{
  log("++++++ CDM_LFDBManager::init",3);

  CDM_DBManager::init();
}

//copy PDL_CYCL_MEAS_DATA into HDL_CYCL_MEAS_DATA
bool CDM_LFDBManager::copyHDLCyclMeasData(sHeatInfo &HeatInfo, bool Commit)
{
  log("++++++ CDM_LFDBManager::copyHDLCyclMeasData",3);

  bool RetValue = (m_pDM_DBManagerTask != NULL);
  if (RetValue)
  {
    CHDL_CYCL_MEAS_DATA HDL_CYCL_MEAS_DATA(m_pDM_DBManagerTask->getStdConnection());

    RetValue = RetValue && HDL_CYCL_MEAS_DATA.copy(HeatInfo.HeatId, HeatInfo.TreatId, HeatInfo.Plant, Commit, m_lastError);
  }
  return RetValue;
}

//copy PDL_HEAT_DATA into HDL_HEAT_DATA
bool CDM_LFDBManager::copyHDLHeatData(sHeatInfo &HeatInfo, bool Commit)
{
  log("++++++ CDM_LFDBManager::copyHDLHeatData",3);

  bool RetValue = (m_pDM_DBManagerTask != NULL);
  if (RetValue)
  {
    CHDL_HEAT_DATA      HDL_HEAT_DATA(m_pDM_DBManagerTask->getStdConnection());

    //Item already exist delete it -> delete all dependent items
    if (HDL_HEAT_DATA.exists(HeatInfo.HeatId, HeatInfo.TreatId, HeatInfo.Plant))
    {
      CHDL_PP_EL			    HDL_PP_EL(m_pDM_DBManagerTask->getStdConnection());
      CHDL_PP_EL_STEP     HDL_PP_EL_STEP(m_pDM_DBManagerTask->getStdConnection());
      CHDL_PP_STIRR			  HDL_PP_STIRR(m_pDM_DBManagerTask->getStdConnection());
      CHDL_PP_STIRR_SPEC  HDL_PP_STIRR_SPEC(m_pDM_DBManagerTask->getStdConnection());
      long mPracNo = -1;

      //delete rows from HDL_PP_EL_STEP first if any
      if (RetValue && HDL_PP_STIRR_SPEC.exists(HeatInfo.HeatId, HeatInfo.TreatId, HeatInfo.Plant))
      {
        RetValue = HDL_PP_STIRR_SPEC.deleteRows();
      }
      if (RetValue && HDL_PP_STIRR.exists(HeatInfo.HeatId, HeatInfo.TreatId, HeatInfo.Plant))
      {
        RetValue = HDL_PP_STIRR.deleteRows();
      }

      //delete rows from HDL_PP_EL_STEP first if any
      if (RetValue && HDL_PP_EL_STEP.exists(HeatInfo.HeatId, HeatInfo.TreatId, HeatInfo.Plant))
      {
        RetValue = HDL_PP_EL_STEP.deleteRows();
      }
      if (RetValue && HDL_PP_EL.exists(HeatInfo.HeatId, HeatInfo.TreatId, HeatInfo.Plant))
      {
        RetValue = HDL_PP_EL.deleteRows();
      }
    }

    RetValue = RetValue && HDL_HEAT_DATA.copy(HeatInfo.HeatId, HeatInfo.TreatId, HeatInfo.Plant, Commit, m_lastError);
  }

  return RetValue;
}

bool CDM_LFDBManager::checkHDLHeatData(sHeatInfo &HeatInfo, bool Commit)
{
  log("++++++ CDM_LFDBManager::checkHDLHeatData",3);

  bool RetValue = (m_pDM_DBManagerTask != NULL);

  if (RetValue)
  {
    CHDL_HEAT_DATA HDL_HEAT_DATA(m_pDM_DBManagerTask->getStdConnection());

    bool CheckNullValues = false;
    cCBS_StdInitBase *pStdInitBase = cCBS_StdInitBase::getInstance();
    pStdInitBase->replaceWithEntry("ProcessControl", "CheckNullValues", CheckNullValues);

    if ( CheckNullValues )
    {
      HDL_HEAT_DATA.checkNULLValues(HeatInfo.HeatId, HeatInfo.TreatId, HeatInfo.Plant);
    }
  }

  checkLastError();

  return RetValue;
}


bool CDM_LFDBManager::copyHDLHeatDataMelt(sHeatInfo &HeatInfo, bool Commit)
{
  log("++++++ CDM_LFDBManager::copyHDLHeatDataMelt",3);

  bool RetValue = (m_pDM_DBManagerTask != NULL);

  if (RetValue)
  {
    CHDL_HEAT_DATA_MELT HDL_HEAT_DATA_MELT(m_pDM_DBManagerTask->getStdConnection());

    RetValue = HDL_HEAT_DATA_MELT.copy(HeatInfo.HeatId, HeatInfo.TreatId, HeatInfo.Plant, Commit, m_lastError);
  }

  return RetValue;
}

bool CDM_LFDBManager::copyHDLHeatPhaseData(sHeatInfo &HeatInfo, bool Commit)
{
  log("++++++ CDM_LFDBManager::copyHDLHeatPhaseData",3);

  bool RetValue = (m_pDM_DBManagerTask != NULL);

  if (RetValue)
  {
    CHDL_ACTIVITY_RES       HDL_ACTIVITY_RES(m_pDM_DBManagerTask->getStdConnection());
    CHDL_PHASE_ELEC_RES     HDL_PHASE_ELEC_RES(m_pDM_DBManagerTask->getStdConnection());
    CHDL_PHASE_STIRRING_RES HDL_PHASE_STIRRING_RES(m_pDM_DBManagerTask->getStdConnection());

    CHDL_ACTUAL_RES         HDL_ACTUAL_RES(m_pDM_DBManagerTask->getStdConnection());
    CHDL_ACTUAL_RES_ANL     HDL_ACTUAL_RES_ANL(m_pDM_DBManagerTask->getStdConnection());


    RetValue = RetValue && HDL_ACTIVITY_RES.copy   (HeatInfo.HeatId, HeatInfo.TreatId, HeatInfo.Plant, Commit, m_lastError);
    RetValue = RetValue && HDL_PHASE_ELEC_RES.copy (HeatInfo.HeatId, HeatInfo.TreatId, HeatInfo.Plant, Commit, m_lastError);
    RetValue = RetValue && HDL_PHASE_STIRRING_RES.copy (HeatInfo.HeatId, HeatInfo.TreatId, HeatInfo.Plant, Commit, m_lastError);

    RetValue = RetValue && HDL_ACTUAL_RES.copy     (HeatInfo.HeatId, HeatInfo.TreatId, HeatInfo.Plant, Commit, m_lastError);
    RetValue = RetValue && HDL_ACTUAL_RES_ANL.copy     (HeatInfo.HeatId, HeatInfo.TreatId, HeatInfo.Plant, Commit, m_lastError);

  }
  return RetValue;
}

//copy PDL_PP_ELL* data into HDL_PP_EL*
bool CDM_LFDBManager::copyHDLPpEls(sHeatInfo &HeatInfo, const std::string &SteelGradeCode, bool Commit)
{
  log("++++++ CDM_LFDBManager::copyHDLPpEls",3);

  bool RetValue = (m_pDM_DBManagerTask != NULL);

  if (RetValue)
  {
    CHDL_PP_EL			HDL_PP_EL(m_pDM_DBManagerTask->getStdConnection());
    CHDL_PP_EL_STEP HDL_PP_EL_STEP(m_pDM_DBManagerTask->getStdConnection());

    std::string SteelGradeCode = SteelGradeCode;
    if( SteelGradeCode.empty()|| SteelGradeCode == DEF::Inv_String )
    {
      RetValue = RetValue && getActSteelGrade(HeatInfo, SteelGradeCode);
    }
    //delete rows from HDL_PP_EL_STEP first if any
    if (RetValue && HDL_PP_EL_STEP.exists(HeatInfo.HeatId, HeatInfo.TreatId, HeatInfo.Plant))
    {
      RetValue = HDL_PP_EL_STEP.deleteRows();
    }

    //get PracNo
    long mPracNo = -1;
    RetValue = RetValue && CDM_DBManager::getPracNo(HeatInfo, DEF_GC_PRODPRAC_DEF::Electric, mPracNo);
    RetValue = RetValue && HDL_PP_EL.copy(HeatInfo.HeatId, HeatInfo.TreatId, HeatInfo.Plant, HeatInfo.PlantNo, mPracNo, Commit, m_lastError);
    RetValue = RetValue && HDL_PP_EL_STEP.copy(HeatInfo.HeatId, HeatInfo.TreatId, HeatInfo.Plant, HeatInfo.PlantNo, mPracNo, Commit, m_lastError);
  }
  return RetValue;
}

//copy PDL_PP_STIRR* into HDL_PP_STIRR*
bool CDM_LFDBManager::copyHDLPpStirrs(sHeatInfo &HeatInfo, const std::string &SteelGradeCode, bool Commit)
{
  log("++++++ CDM_LFDBManager::copyHDLPpStirrs",3);

  bool RetValue = (m_pDM_DBManagerTask != NULL);

  if (RetValue)
  {
    CHDL_PP_STIRR			 HDL_PP_STIRR(m_pDM_DBManagerTask->getStdConnection());
    CHDL_PP_STIRR_SPEC HDL_PP_STIRR_SPEC(m_pDM_DBManagerTask->getStdConnection());

    std::string SteelGradeCode = SteelGradeCode;
    if( SteelGradeCode.empty()|| SteelGradeCode == DEF::Inv_String )
    {
      RetValue = RetValue && getActSteelGrade(HeatInfo, SteelGradeCode);
    }

    //delete rows from HDL_PP_EL_STEP first if any
    if (RetValue && HDL_PP_STIRR_SPEC.select(HeatInfo.HeatId, HeatInfo.TreatId, HeatInfo.Plant, CSMC_DBData::unspecLong, CSMC_DBData::unspecString))
    {
      RetValue = HDL_PP_STIRR_SPEC.deleteRows();
    }

    //get PracNo
    long mPracNo = -1;
    RetValue = RetValue && CDM_DBManager::getPracNo(HeatInfo, DEF_GC_PRODPRAC_DEF::Stirring, mPracNo);
    RetValue = RetValue && HDL_PP_STIRR.copy(HeatInfo.HeatId, HeatInfo.TreatId, HeatInfo.Plant, HeatInfo.PlantNo, mPracNo, Commit, m_lastError);
    RetValue = RetValue && HDL_PP_STIRR_SPEC.copy(HeatInfo.HeatId, HeatInfo.TreatId, HeatInfo.Plant, HeatInfo.PlantNo, mPracNo, Commit, m_lastError);
  }

  return RetValue;
}

bool CDM_LFDBManager::evChangeProdPracPointerElec(CEventMessage &Event)
{
  log("++++++ CDM_LFDBManager::evChangeProdPracPointerElec",3);

  CDM_DataInterface_Impl *pDataInterface = m_pDM_DBManagerTask->getpDataInterface();

  sHeatInfo HeatInfo;
  setHeatInfo(Event, HeatInfo);

  std::string SteelGradeCode	= pDataInterface->getString(Event.getDataKey(),DATA::SteelGradeCode);
  long  ProdPracPointer       = pDataInterface->getLong(Event.getDataKey()  ,DATA::ProdPracPointer);
  std::string HMIClientId     = pDataInterface->getString(Event.getDataKey(),DATA::HMIClientId);

  bool RetValue = isProductionPracticeChanged(Event, DEF_GC_PRODPRAC_DEF::Electric, ProdPracPointer);

  //handle PD tables
  RetValue = RetValue && CDM_DBManager::handlePDTablesOnChangeProdPrac(HeatInfo, DEF_GC_PRODPRAC_DEF::Electric, ProdPracPointer, false);

  RetValue = RetValue && CDM_DBManager::copyHDHeatData(HeatInfo, false);

  //void the record in HD_GRADE,HD_GRADE_ANL being delete .because the main data may be  delete and then restore
  RetValue = RetValue && CDM_DBManager::copyHDGrades(HeatInfo, SteelGradeCode, false);

  //Get Actual SteelGradeCode
  if (SteelGradeCode == DEF::Inv_String || SteelGradeCode.empty())
  {
    RetValue = RetValue && CDM_DBManager::getActSteelGrade(HeatInfo, SteelGradeCode);
  }
  RetValue = RetValue && copyHDLPpEls(HeatInfo, SteelGradeCode, false);

  if (RetValue)
  {
    m_pDM_DBManagerTask->getStdConnection()->commit();
    CDM_DBManager::handleInformation(Event, HMIClientId);  
  }
  else
  {
    m_pDM_DBManagerTask->getStdConnection()->rollback();
    CDM_DBManager::handleError(Event, HMIClientId);
  }
  return RetValue;
}

//process ChangeProdPracPointerStirring event
bool CDM_LFDBManager::evChangeProdPracPointerStirring(CEventMessage &Event)
{	
  log("++++++ CDM_LFDBManager::evChangeProdPracPointerStirring",3);

  CDM_DataInterface_Impl *pDataInterface = m_pDM_DBManagerTask->getpDataInterface();

  sHeatInfo HeatInfo;
  setHeatInfo(Event, HeatInfo);

  std::string SteelGradeCode  = pDataInterface->getString(Event.getDataKey(),DATA::SteelGradeCode);
  long  ProdPracPointer       = pDataInterface->getLong(Event.getDataKey()  ,DATA::ProdPracPointer);
  std::string HMIClientId     = pDataInterface->getString(Event.getDataKey(),DATA::HMIClientId);

  bool RetValue = isProductionPracticeChanged(Event, DEF_GC_PRODPRAC_DEF::Stirring, ProdPracPointer);

  //handle PD tables
  RetValue = RetValue && CDM_DBManager::handlePDTablesOnChangeProdPrac(HeatInfo, DEF_GC_PRODPRAC_DEF::Stirring, ProdPracPointer, false);

  RetValue = RetValue && CDM_DBManager::copyHDHeatData(HeatInfo, false);
  //Get Actual SteelGradeCode
  if (SteelGradeCode == DEF::Inv_String || SteelGradeCode.empty())
  {
    RetValue = RetValue && CDM_DBManager::getActSteelGrade(HeatInfo, SteelGradeCode);
  }

  //so we should add the delete HD_GRADE to data base
  RetValue = RetValue && CDM_DBManager::copyHDGrades(HeatInfo,SteelGradeCode,false);

  RetValue = RetValue && copyHDLPpStirrs(HeatInfo, SteelGradeCode, false);

  if (RetValue)
  {
    m_pDM_DBManagerTask->getStdConnection()->commit();
    CDM_DBManager::handleInformation(Event, HMIClientId);  
  }
  else
  {
    m_pDM_DBManagerTask->getStdConnection()->rollback();
    CDM_DBManager::handleError(Event, HMIClientId);
  }
  return RetValue;
}

//1. PD_ACTION.ACTIONNO = 1100 to be filled, when Start of cleanliness stirring, based on L1-telegram: LFL281 -> Cleaniness Stirring 
bool CDM_LFDBManager::evCleaninessStirringReceived(CEventMessage &Event)
{
  log("++++++ CDM_LFDBManager::evCleaninessStirringReceived",3);

  CDM_DataInterface_Impl *pDataInterface = m_pDM_DBManagerTask->getpDataInterface();

  sHeatInfo HeatInfo;
  setHeatInfo(Event, HeatInfo);

  std::string UserCode	  = pDataInterface->getString(Event.getDataKey(), DATA::UserCode);
  std::string HMIClientId = pDataInterface->getString(Event.getDataKey(), DATA::HMIClientId);

  bool RetValue = true;

  //Add Action
  RetValue = RetValue && CDM_DBManager::handleAction(HeatInfo,DEF_GC_ACTION_DEF::CleanStirringStart, "", "", false, false, false);

  CPDL_HEAT_DATA m_PDL_HEAT_DATA(m_pDM_DBManagerTask->getStdConnection());
  if(m_PDL_HEAT_DATA.select(HeatInfo.HeatId,HeatInfo.TreatId,HeatInfo.Plant))
  {
    CDateTime now;
    m_PDL_HEAT_DATA.setCLEANLINESS_START(now);
    RetValue = RetValue && m_PDL_HEAT_DATA.update();
  }

  if (RetValue)
  {
    m_pDM_DBManagerTask->getStdConnection()->commit();
    CDM_DBManager::handleInformation(Event, HMIClientId);  
  }
  else
  {
    m_pDM_DBManagerTask->getStdConnection()->rollback();
    CDM_DBManager::handleError(Event, HMIClientId);
  }

  return RetValue;
}

bool CDM_LFDBManager::evCyclicMeasurementElectric(CEventMessage& Event)
{
  bool RetValue = false;

  CDM_DataInterface_Impl *pDataInterface = m_pDM_DBManagerTask->getpDataInterface();

  sHeatInfo HeatInfo;
  setHeatInfo(Event, HeatInfo);

  std::stringstream ExceptionMsg;
  ExceptionMsg << "Handling event: " << Event.getSender()
    << ", " << Event.getHeatID()
    << ", " << Event.getTreatID() << ", " << Event.getDataKey();

  try
  {
    if (m_pDM_DBManagerTask->getpProductManagementInterface())
    {
      CPD_PLANTSTATUS_PLANT PD_PLANTSTATUS_PLANT(m_pDM_DBManagerTask->getStdConnection());

      double ElecCons          = m_pDM_DBManagerTask->getpProductManagementInterface()->getDouble(HeatInfo.ProductId, DATA::ElecCons);
      long   TreatmentPosition = getActTreatmentPosition(Event);

      RetValue  = PD_PLANTSTATUS_PLANT.updateStatus(HeatInfo.Plant, HeatInfo.PlantNo, TreatmentPosition, 1,  DEF_GC_PLANTSTATUS::ELEC_CONS_TOTAL, CDataConversion::LongToString((long)ElecCons), true, m_lastError);
    }

  }
  catch(CORBA::SystemException& sExc) 
  {
	  cCBS_StdEventLogFrame *pEventLog = cCBS_StdEventLogFrameController::getInstance()->getpEventLog();
    sEventLogMessage sMessage = cCBS_StdEventLog::initMessage(__FILE__,__LINE__);
    pEventLog->EL_ExceptionCaught(sMessage,sExc._name(),
                                         "CDM_LFDBManager::evCyclicMeasurementElectric()",
                                         ExceptionMsg.str().c_str());
  }
  catch(CORBA::Exception& cExc) 
  {
	  cCBS_StdEventLogFrame *pEventLog = cCBS_StdEventLogFrameController::getInstance()->getpEventLog();
    sEventLogMessage sMessage = cCBS_StdEventLog::initMessage(__FILE__,__LINE__);
    pEventLog->EL_ExceptionCaught(sMessage,cExc._name(),
                                         "CDM_LFDBManager::evCyclicMeasurementElectric()",
                                         ExceptionMsg.str().c_str());
  }
  catch(...) 
  {
	  cCBS_StdEventLogFrame *pEventLog = cCBS_StdEventLogFrameController::getInstance()->getpEventLog();
    sEventLogMessage sMessage = cCBS_StdEventLog::initMessage(__FILE__,__LINE__);
    pEventLog->EL_ExceptionCaught(sMessage,"Unknown",
                                         "CDM_LFDBManager::evCyclicMeasurementElectric()",
                                         ExceptionMsg.str().c_str());
  }

  return RetValue;

}

//process Heat announcement
bool CDM_LFDBManager::evHeatAnnouncement(CEventMessage &Event, bool commit)
{
  log("++++++ CDM_LFDBManager::evHeatAnnouncement",3);

  bool RetValue = true;

  CDM_DataInterface_Impl *pDataInterface = m_pDM_DBManagerTask->getpDataInterface();

  std::string SteelGradeCode   = pDataInterface->getString(Event.getDataKey(), DATA::SteelGradeCode);
  std::string HMIClientId      = pDataInterface->getString(Event.getDataKey(), DATA::HMIClientId);

  // *******************************************************
  RetValue = RetValue && CDM_DBManager::evHeatAnnouncement(Event, false);

  // Event.HeatId and Event.TreatId will be set in CDM_DBManager::evHeatAnnouncement
  // calling setHeatInfo must not be performed earlier
  sHeatInfo HeatInfo;
  setHeatInfo(Event, HeatInfo);
  
  RetValue = RetValue && copyHDLHeatData(HeatInfo, false);
  RetValue = RetValue && copyHDLPpEls(HeatInfo, SteelGradeCode, false);
  RetValue = RetValue && copyHDLPpStirrs(HeatInfo, SteelGradeCode, false);

  if ( commit )
  {
    if ( RetValue )
    {
      m_pDM_DBManagerTask->getStdConnection()->commit();
    }
    else
    {
      m_pDM_DBManagerTask->getStdConnection()->rollback(); 
    }
  }

  if ( RetValue )
  {
    CDM_DBManager::handleInformation(Event, HMIClientId, true);
  }
  else
  {
    CDM_DBManager::handleError(Event, HMIClientId);
  }

  return RetValue;
}

//Process Departure heat
bool CDM_LFDBManager::evHeatDeparture(CEventMessage &Event)
{
  log("++++++ CDM_LFDBManager::evHeatDeparture",3);

  bool RetValue = true;

  CDM_DataInterface_Impl *pDataInterface = m_pDM_DBManagerTask->getpDataInterface();

  sHeatInfo HeatInfo;
  setHeatInfo(Event, HeatInfo);

  std::string OrderId		    = Event.getOrderID();

  long LadleNo                    = pDataInterface->getLong  (Event.getDataKey(), DATA::LadleNo) ;
  std::string LadleType           = pDataInterface->getString(Event.getDataKey(), DATA::LadleType) ;
  std::string LadleTransferCarId  = pDataInterface->getString(Event.getDataKey(), DATA::LadleTransferCarId);

  std::string HMIClientId         = pDataInterface->getString(Event.getDataKey(), DATA::HMIClientId);
  std::string UserCode            = pDataInterface->getString(Event.getDataKey(), DATA::UserCode);

  long TreatmentPosition          = getActTreatmentPosition(Event);

  // *******************************************************
  // check Ladle Data against L2 data
  // check LadleNo <= 0 due possible to HMI initialization
  // *******************************************************
  if ( LadleNo == DEF::Inv_Long || LadleNo <= 0 || LadleType == DEF::Inv_String )
  {
    if ( CDM_DBManager::getLadleFromHeatData(HeatInfo, LadleNo, LadleType) )
    {
      std::string Message = "LadleID is adapted to last known database entry: " +  LadleType + CDataConversion::LongToString(LadleNo);

      cCBS_StdEventLogFrame *pEventLog = cCBS_StdEventLogFrameController::getInstance()->getpEventLog();
      sEventLogMessage sMessage = cCBS_StdEventLog::initMessage(__FILE__,__LINE__);
      pEventLog->EL_DBReadWarning(sMessage,"LADLEID","PD_HEAT_DATA",Message.c_str());
    }
  }

  // handle general items
  RetValue = RetValue && CDM_DBManager::evHeatDeparture(Event);

  // *******************************************************
  // check Ladle Data against ladle catalogue
  // *******************************************************
  RetValue = RetValue && checkLadleData(LadleNo, LadleType, HMIClientId, "UNKNOWN_TEEMING_LADLE");

  // *******************************************************
  // set equipment Age
  // don't care the return value, for sometime return false if no equipment is mount
  // *******************************************************
  double heatTotalWeight = getHeatTotalWeight(HeatInfo);

  CDM_DBManager::setEquipmentAgeByHeat(HeatInfo, false);
  CDM_DBManager::setEquipmentAgeByWeight(HeatInfo, heatTotalWeight, false);

  //Schedule Heat
  RetValue = RetValue && CDM_DBManager::heatScheduleOnDeparture(HeatInfo, UserCode, TreatmentPosition, false);

  //update ladle Info about this time
  RetValue = RetValue && CDM_DBManager::handlePDTablesOnDeparture(HeatInfo, OrderId, UserCode, TreatmentPosition, false);
  // handlePDLadleTablesOnDeparture will return LadleNo/LadelType from PD_HEAT_DATA if required
  RetValue = RetValue && CDM_DBManager::handlePDLadleTablesOnDeparture(HeatInfo, LadleNo, LadleType, DEF_GC_LADLE_POS::BC, UserCode, false );  

  RetValue = RetValue && handlePDLTablesOnHeatDeparture(HeatInfo, UserCode, false);

  // set consumptions in pdl_heat_data of PDL_HEAT_DATA.STIRR_AR_CONS
  RetValue = RetValue && setGasConsumptions(Event, false );

  // set consumptions in pdl_heat_data of PDL_HEAT_DATA.STIRR_AR_CONS
  RetValue = RetValue && setGasConsumptions(Event, false);

  // set endtime in PD_HEAT_DATA_STIRR
  RetValue = RetValue && setStirrBypass(Event, false);

   //Add Action
  RetValue = RetValue && CDM_DBManager::handleAction(HeatInfo, DEF_GC_ACTION_DEF::Departure, "", "", false, false, false);

   //Copy data into HD tables
  std::string SteelGradeCode ;
  RetValue = RetValue && CDM_DBManager::copyHDTablesOnHeatEnd(HeatInfo,  SteelGradeCode , CSMC_DBData::unspecLong, false);

  RetValue = RetValue && copyHDLHeatData(HeatInfo,false);
  RetValue = RetValue && checkHDLHeatData(HeatInfo, false);

  RetValue = RetValue && copyHDLHeatDataMelt(HeatInfo, false);
  RetValue = RetValue && copyHDLHeatPhaseData(HeatInfo,false);

  RetValue = RetValue && copyHDLPpEls(HeatInfo, SteelGradeCode, false);	
  RetValue = RetValue && copyHDLPpStirrs(HeatInfo, SteelGradeCode, false);
  RetValue = RetValue && copyHDLCyclMeasData(HeatInfo, false);

	//sankar as per JSW because there are no CAR2 and to display data in position2 in plantStatus HMI
  RetValue = RetValue && CDM_DBManager::handleNewTreatmentPosition(HeatInfo.Plant, HeatInfo.PlantNo, DEF_GC_TRETMENTPOSITION::Furnace, DEF_GC_TRETMENTPOSITION::TappingArea, false);

  if (RetValue)
  {
    m_pDM_DBManagerTask->getStdConnection()->commit();
    CDM_DBManager::handleInformation(Event, HMIClientId);  
  }
  else
  {
    m_pDM_DBManagerTask->getStdConnection()->rollback();
    CDM_DBManager::handleError(Event, HMIClientId);
  }
  return RetValue;
}

bool CDM_LFDBManager::evHeatEnd(CEventMessage &Event)
{
  log("++++++ CDM_LFDBManager::evHeatEnd",3);

  bool RetValue = true;
  CDM_DataInterface_Impl *pDataInterface = m_pDM_DBManagerTask->getpDataInterface();

  std::string HMIClientId   = pDataInterface->getString(Event.getDataKey(), DATA::HMIClientId);
  long LadleNo              = pDataInterface->getLong  (Event.getDataKey(), DATA::LadleNo) ;
  std::string LadleType     = pDataInterface->getString(Event.getDataKey(), DATA::LadleType) ;

  // *******************************************************
  // check Ladle Data against ladle catalogue
  // *******************************************************
  RetValue = RetValue && checkLadleData(LadleNo, LadleType, HMIClientId, "UNKNOWN_TEEMING_LADLE");

  RetValue = RetValue && CDM_DBManager::evHeatEnd(Event);

  return RetValue;
}

bool CDM_LFDBManager::evHeatStart(CEventMessage &Event)
{
  log("++++++ CDM_LFDBManager::evHeatStart",3);
  
  bool RetValue = true;

  sHeatInfo HeatInfo;
  setHeatInfo(Event, HeatInfo);
  
  CPD_TAPCH_DATA      PD_TAPCH_DATA     (m_pDM_DBManagerTask->getStdConnection());

  CDM_DataInterface_Impl *pDataInterface = m_pDM_DBManagerTask->getpDataInterface();

  std::string HMIClientId = pDataInterface->getString(Event.getDataKey(), DATA::HMIClientId);
  long LadleNo            = pDataInterface->getLong  (Event.getDataKey(), DATA::LadleNo) ;
  std::string LadleType   = pDataInterface->getString(Event.getDataKey(), DATA::LadleType) ;

  CDM_PlantManagementInterface_Impl *pPlantInterface = m_pDM_DBManagerTask->getpPlantManagementInterface();

  long VoltTapNo      = pPlantInterface->getLong(DEF_PLANT::Furnace,DATA::VoltTapNo);
  long EltrdRegCurve  = pPlantInterface->getLong(DEF_PLANT::Furnace,DATA::ElectrodRegCurve);


  // *******************************************************
  // check Ladle Data against ladle catalogue
  // *******************************************************
  RetValue = RetValue && checkLadleData(LadleNo, LadleType, HMIClientId, "UNKNOWN_TEEMING_LADLE");

  RetValue = RetValue && CDM_DBManager::evHeatStart(Event);

  RetValue = RetValue && PD_TAPCH_DATA.doHeatStart(HeatInfo.HeatId, HeatInfo.TreatId, HeatInfo.Plant, VoltTapNo, EltrdRegCurve, 0.0, DEF_GEN_STATES::Off, true, m_lastError);

  return RetValue;
}

bool CDM_LFDBManager::evLFHandleUpdatePurpose(CEventMessage &Event)
{
  log("++++++ CDM_LFDBManager::evLFHandleUpdatePurpose",3);

  bool RetValue = true;

  CDM_DataInterface_Impl *pDataInterface = m_pDM_DBManagerTask->getpDataInterface();

  sHeatInfo HeatInfo;
  setHeatInfo(Event, HeatInfo);

  seqMaterials sqMat    =  CIntfData::ToCORBAType(pDataInterface->getMaterials(Event.getDataKey().c_str(),DATA::MinBinWeight));
  bool IsContainAllMat  = pDataInterface->getBoolean(Event.getDataKey().c_str(),DATA::AllMaterials);

  RetValue = handleMatAvailibiltyChange( HeatInfo.Plant,HeatInfo.PlantNo,sqMat,IsContainAllMat,true);

  return RetValue;
}

bool CDM_LFDBManager::evLFSteelGradeChanged(CEventMessage& Event)
{
  log("++++++ CDM_LFDBManager::evLFSteelGradeChanged",3);

  CDM_DataInterface_Impl *pDataInterface = m_pDM_DBManagerTask->getpDataInterface();

  sHeatInfo HeatInfo;
  setHeatInfo(Event, HeatInfo);

  std::string OrderId         = Event.getOrderID();
  std::string SteelGradeCode  = pDataInterface->getString(Event.getDataKey(), DATA::SteelGradeCode);
  std::string UserCode        = pDataInterface->getString(Event.getDataKey(), DATA::UserCode);
  std::string HMIClientId     = pDataInterface->getString(Event.getDataKey(), DATA::HMIClientId);

  if (SteelGradeCode.empty() || SteelGradeCode == DEF::Inv_String)
  {
    setLastError("INVALID_GRADE_CODE", 0, SteelGradeCode, 1);
    return false;
  }

  long TreatmentMode      = 0;
    
  bool RetValue = CDM_DBManager::handlePDTablesOnSteelGradeChanged(HeatInfo, SteelGradeCode, OrderId, UserCode, false);

  RetValue = RetValue && getTreatmentMode(HeatInfo, OrderId, TreatmentMode);

  RetValue = RetValue && CDM_DBManager::copyHDHeatData(HeatInfo, false);
  RetValue = RetValue && CDM_DBManager::copyHDGrades(HeatInfo, "", false);
  RetValue = RetValue && CDM_DBManager::copyHDParams(HeatInfo, false);
  RetValue = RetValue && CDM_DBManager::copyHDRestris(HeatInfo, TreatmentMode, false);

  RetValue = RetValue && copyHDLHeatData(HeatInfo, false);
  RetValue = RetValue && copyHDLPpEls(HeatInfo, SteelGradeCode, false);
  RetValue = RetValue && copyHDLPpStirrs(HeatInfo, SteelGradeCode, false);

  if (RetValue)
  {
    m_pDM_DBManagerTask->getStdConnection()->commit();
    CDM_DBManager::handleInformation(Event, HMIClientId);  
  }
  else
  {
    m_pDM_DBManagerTask->getStdConnection()->rollback();      
    CDM_DBManager::handleError(Event, HMIClientId);
  }
  return RetValue;
}

bool CDM_LFDBManager::evPowerOff(CEventMessage &Event)
{
  log("++++++ CDM_LFDBManager::evPowerOff",3);

  CDM_DataInterface_Impl *pDataInterface = m_pDM_DBManagerTask->getpDataInterface();

  sHeatInfo HeatInfo;
  setHeatInfo(Event, HeatInfo);

  std::string UserCode	  = pDataInterface->getString(Event.getDataKey(), DATA::UserCode);
  std::string HMIClientId = pDataInterface->getString(Event.getDataKey(), DATA::HMIClientId);

  bool RetValue = true;
  //Add Action
  RetValue = RetValue && CDM_DBManager::handleAction(HeatInfo,DEF_GC_ACTION_DEF::PowerOff, "", "", false, false, false);

  RetValue = RetValue && CDM_DBManager::handleAction(HeatInfo,DEF_GC_ACTION_DEF::LastPowerOff, "", "", true, false, false);

  if (RetValue)
  {
    m_pDM_DBManagerTask->getStdConnection()->commit();
    CDM_DBManager::handleInformation(Event, HMIClientId);  
  }
  else
  {
    m_pDM_DBManagerTask->getStdConnection()->rollback();
    CDM_DBManager::handleError(Event, HMIClientId);
  }

  return RetValue;
}

bool CDM_LFDBManager::evPowerOn(CEventMessage &Event)
{
  log("++++++ CDM_LFDBManager::evPowerOn",3);

  CDM_DataInterface_Impl *pDataInterface = m_pDM_DBManagerTask->getpDataInterface();

  sHeatInfo HeatInfo;
  setHeatInfo(Event, HeatInfo);

  std::string UserCode	  = pDataInterface->getString(Event.getDataKey(), DATA::UserCode);
  std::string HMIClientId = pDataInterface->getString(Event.getDataKey(), DATA::HMIClientId);

  bool RetValue = true;
  //Add Action
  RetValue = RetValue && CDM_DBManager::handleAction(HeatInfo,DEF_GC_ACTION_DEF::PowerOn, "", "", false, false, false);

  RetValue = RetValue && CDM_DBManager::handleAction(HeatInfo,DEF_GC_ACTION_DEF::FirstPowerOn, "", "", true, true, false);

  if (RetValue)
  {
    m_pDM_DBManagerTask->getStdConnection()->commit();
    CDM_DBManager::handleInformation(Event, HMIClientId);  
  }
  else
  {
    m_pDM_DBManagerTask->getStdConnection()->rollback();
    CDM_DBManager::handleError(Event, HMIClientId);
  }

  return RetValue;
}

bool CDM_LFDBManager::evProductionOrderChanged(CEventMessage &Event)
{
  log("++++++ CDM_LFDBManager::evProductionOrderChanged",3);

  bool RetValue = true;

  CDM_DataInterface_Impl *pDataInterface = m_pDM_DBManagerTask->getpDataInterface();

  sHeatInfo HeatInfo;
  setHeatInfo(Event, HeatInfo);

  std::string SteelGradeCode	= pDataInterface->getString(Event.getDataKey(), DATA::SteelGradeCode);
  std::string HMIClientId     = pDataInterface->getString(Event.getDataKey(), DATA::HMIClientId);

  RetValue = RetValue && CDM_DBManager::evProductionOrderChanged(Event);

  //Get SteelGradeCode if empty
  if (RetValue &&  ( SteelGradeCode.empty() || SteelGradeCode == DEF::Inv_String ) )
  {
    RetValue = RetValue && CDM_DBManager::getActSteelGrade(HeatInfo, SteelGradeCode);
  }

  RetValue = RetValue && copyHDLHeatData(HeatInfo, false);
  RetValue = RetValue && copyHDLHeatDataMelt(HeatInfo, false);
  RetValue = RetValue && copyHDLPpEls(HeatInfo, SteelGradeCode, false);
  RetValue = RetValue && copyHDLPpStirrs(HeatInfo, SteelGradeCode, false);

  if (RetValue)
  {
    m_pDM_DBManagerTask->getStdConnection()->commit();
    CDM_DBManager::handleInformation(Event, HMIClientId);  
  }
  else
  {
    m_pDM_DBManagerTask->getStdConnection()->rollback();
    CDM_DBManager::handleError(Event, HMIClientId);
  }
  return RetValue;
}

//process Retreatment heat
bool CDM_LFDBManager::evRetreatment(CEventMessage &Event)
{
  log("++++++ CDM_LFDBManager::evRetreatment",3);

  CDM_DataInterface_Impl *pDataInterface = m_pDM_DBManagerTask->getpDataInterface();

  sHeatInfo HeatInfo;
  setHeatInfo(Event, HeatInfo);

  std::string OrderId		      = Event.getOrderID();
  std::string OrderIdUser     = pDataInterface->getString(Event.getDataKey(),DATA::OrderIdUser);
  std::string CustHeatId      = pDataInterface->getString(Event.getDataKey(),DATA::CustHeatID);
  std::string CustTreatId     = pDataInterface->getString(Event.getDataKey(),DATA::CustTreatID);
  std::string CustHeatIdUser  = pDataInterface->getString(Event.getDataKey(),DATA::CustHeatIdUser);
  std::string CustTreatIdUser = pDataInterface->getString(Event.getDataKey(),DATA::CustTreatIdUser);
  std::string SteelGradeCode  = pDataInterface->getString(Event.getDataKey(),DATA::SteelGradeCode);
  std::string UserCode	      = pDataInterface->getString(Event.getDataKey(),DATA::UserCode);
  std::string HMIClientId     = pDataInterface->getString(Event.getDataKey(),DATA::HMIClientId);

  sPDData PDData;
  // now within construction  PDData.init();
  PDData.SteelMass       = pDataInterface->getDouble(Event.getDataKey().c_str(),  DATA::SteelMassAct);
  PDData.SlagMass        = pDataInterface->getDouble(Event.getDataKey().c_str(),  DATA::SlagMassAct);
  // Incoming ladle
  PDData.PreLadleNo      = pDataInterface->getLong(Event.getDataKey().c_str(),    DATA::LadleNo);
  PDData.PreLadleType    = pDataInterface->getString(Event.getDataKey().c_str(),  DATA::LadleType);
  PDData.PreLadleState   = pDataInterface->getString(Event.getDataKey().c_str(), DATA::LadleStatus);

  PDData.SampleNo        = pDataInterface->getLong(Event.getDataKey().c_str(),    DATA::SampleNo);
  PDData.SteelSampleTime = pDataInterface->getDate(Event.getDataKey().c_str(),    DATA::SteelSampleTime);
  PDData.Temp            = pDataInterface->getDouble(Event.getDataKey().c_str(),  DATA::MeasTemp);
  PDData.TempTime        = pDataInterface->getDate(Event.getDataKey().c_str(),    DATA::TempMeasTime);
  PDData.SampleMode      = pDataInterface->getLong(Event.getDataKey().c_str(),    DATA::SampleMode);
  PDData.SampleOrigin    = pDataInterface->getLong(Event.getDataKey().c_str(),    DATA::SampleOrigin);
  PDData.SteelAnalysis   = CIntfData::ToCORBAType(pDataInterface->getAnalysis(Event.getDataKey().c_str(), DATA::SteelMeasAnalysis));
  PDData.PretreatCounter = pDataInterface->getLong(Event.getDataKey().c_str(),    DATA::Counter);

  double AimWeight	      = pDataInterface->getDouble(Event.getDataKey(),DATA::AimWeightUser);
  CDateTime mPlanEndTime	= pDataInterface->getDate(Event.getDataKey().c_str(), DATA::PlanEndTime);
  double AimTemp          = pDataInterface->getDouble(Event.getDataKey(), DATA::TempAim);

  long TreatmentPosition  = getActTreatmentPosition(Event);

  bool RetValue = true;
  if (!OrderId.empty() || !OrderIdUser.empty()) 
  {
    std::string mOrd = OrderIdUser.empty() ? OrderId : OrderIdUser;
    std::string mHeatCust = CustHeatIdUser.empty() ? CustHeatId : CustHeatIdUser;
    std::string mTreatCust = CustTreatIdUser.empty() ? CustTreatId : CustTreatIdUser;

    long TreatmentMode      = 0;
    
    getTreatmentMode(HeatInfo, mOrd, TreatmentMode);

    //Check if Heat is onRequest or doesn't exest
    if (CDM_DBManager::isOnRequest(CustHeatId, CustHeatIdUser) || !CDM_DBManager::isHeatPlanned(HeatInfo))  
    {
      RetValue = RetValue && CDM_DBManager::handlePPTabelsOnAnnounce(HeatInfo, PDData, mHeatCust, mTreatCust, mOrd, SteelGradeCode, mPlanEndTime, true, UserCode, AimWeight, AimTemp, TreatmentMode, false);
    }
    else
    {
      RetValue = RetValue && CDM_DBManager::handlePPTabelsOnAnnounce(HeatInfo, PDData, mHeatCust, mTreatCust, mOrd, SteelGradeCode, mPlanEndTime, false, UserCode, AimWeight, AimTemp, TreatmentMode, false);
    } 

    //Schedule Heat
    RetValue = RetValue && CDM_DBManager::heatScheduleOnAnnouncement(HeatInfo, UserCode, TreatmentPosition, false);

    if (RetValue)
    {
      m_pDM_DBManagerTask->getStdConnection()->commit();
      CDM_DBManager::handleInformation(Event, HMIClientId);  
    }
    else
    {
      m_pDM_DBManagerTask->getStdConnection()->rollback();			
      CDM_DBManager::handleError(Event, HMIClientId);
    }
  }

  return RetValue;
}

bool CDM_LFDBManager::evSetupOfHeat(CEventMessage &Event)
{
  log("++++++ CDM_LFDBManager::evSetupOfHeat",3);

  CDM_DataInterface_Impl *pDataInterface = m_pDM_DBManagerTask->getpDataInterface();

  sHeatInfo HeatInfo;
  setHeatInfo(Event, HeatInfo);

  std::string OrderId		      = (Event.getOrderID());
  std::string HMIClientId     = pDataInterface->getString(Event.getDataKey(), DATA::HMIClientId);
  std::string UserCode	      = pDataInterface->getString(Event.getDataKey(), DATA::UserCode);
  std::string SteelGradeCode	= pDataInterface->getString(Event.getDataKey(), DATA::SteelGradeCode);
  long mStatus		            = pDataInterface->getLong(Event.getDataKey()  , DATA::Status);
  CDateTime mTreatStart	      = pDataInterface->getDate(Event.getDataKey().c_str(), DATA::TreatStartAim);
  CDateTime mTreatEnd		      = pDataInterface->getDate(Event.getDataKey().c_str(), DATA::TreatEndAim);

  sPDData PDData;
  // now within construction  PDData.init();
  PDData.SteelMass	      = pDataInterface->getDouble(Event.getDataKey(), DATA::SteelMassAct);
  // Incoming ladle
  PDData.PreLadleNo		    = pDataInterface->getLong(Event.getDataKey(), DATA::LadleNo);
  PDData.PreLadleType	    = pDataInterface->getString(Event.getDataKey(), DATA::LadleType);

  PDData.Temp		          = pDataInterface->getDouble(Event.getDataKey(), DATA::TempAim); 
  PDData.TempTime	        = CDateTime().assDate();
  PDData.SteelMass        = pDataInterface->getDouble(Event.getDataKey(), DATA::SteelMassAct);

  long TreatmentPosition  = getActTreatmentPosition(Event);
 
  bool RetValue = handlePDTablesOnSetupOfHeat(HeatInfo, PDData, mStatus, OrderId, mTreatStart, mTreatEnd, SteelGradeCode, UserCode, TreatmentPosition, false);
    
  if (RetValue)
  {
    m_pDM_DBManagerTask->getStdConnection()->commit();
    CDM_DBManager::handleInformation(Event, HMIClientId, true);  
  }
  else
  {
    m_pDM_DBManagerTask->getStdConnection()->rollback();
    CDM_DBManager::handleError(Event, HMIClientId);
  }

  //======================= update the heat stack  ==============================
  setHeatStack();  
  //======================= update the heat stack  ==============================

  return RetValue;
}

bool CDM_LFDBManager::evSlagAnalysisReceived(CEventMessage &Event)
{
  log("++++++ CDM_LFDBManager::evSlagAnalysisReceived",3);

  bool RetValue = true;

  CDM_DataInterface_Impl *pDataInterface = m_pDM_DBManagerTask->getpDataInterface();

  sHeatInfo HeatInfo;
  setHeatInfo(Event, HeatInfo);

  std::string OrderId         = Event.getOrderID();

  long  LadleNo               = pDataInterface->getLong   (Event.getDataKey(), DATA::LadleNo );
  std::string LadleType       = pDataInterface->getString (Event.getDataKey(), DATA::LadleType);

  long  SampleOrigin          = pDataInterface->getLong   (Event.getDataKey(), DATA::SampleOrigin);
  long  SampleNo              = pDataInterface->getLong   (Event.getDataKey(), DATA::SampleNo);
  long  SampleMode            = pDataInterface->getLong   (Event.getDataKey(), DATA::SampleMode);

  std::string SampleLocation  = pDataInterface->getString (Event.getDataKey(), DATA::SampleLocation);
  std::string SampleId        = pDataInterface->getString (Event.getDataKey(), DATA::SampleId);

  std::string UserCode        = pDataInterface->getString(Event.getDataKey(), DATA::UserCode);
  std::string HMIClientId     = pDataInterface->getString(Event.getDataKey(), DATA::HMIClientId);
  seqAnalysis SeqAnalysis     = CIntfData::ToCORBAType(pDataInterface->getAnalysis(Event.getDataKey().c_str(), DATA::SlagMeasAnalysis));
  CDateTime SampleTime        = pDataInterface->getDate(Event.getDataKey().c_str(), DATA::SlagSampleTime);
  long SampleCounter          = CSMC_DBData::unspecLong;

  long TreatmentPosition      = getActTreatmentPosition(Event);

  if( HeatInfo.Plant.empty() || HeatInfo.Plant ==DEF::Inv_String )
  {
    //we should get the plant and plant no from database because it is from lab, not LF
    HeatInfo.Plant = DEF_GC_PLANT_DEF::LF;
    RetValue = RetValue && CDM_DBManager::getPlantNoByHeatIDTreatID(HeatInfo.HeatId, HeatInfo.TreatId, HeatInfo.Plant, HeatInfo.PlantNo );
  }

  if( UserCode == DEF::Inv_String )
  {
    UserCode = "";
  }

  RetValue = CDM_DBManager::handlePDTablesOnAnalysisReceived(HeatInfo, SeqAnalysis, LadleNo, LadleType, SampleTime, DEF_GC_MEASUREMENT_TYPE::Slag, SampleNo, SampleMode, SampleOrigin, SampleLocation, SampleCounter, SampleId, OrderId, UserCode, TreatmentPosition, false); 

  //Add Action

  RetValue = RetValue && CDM_DBManager::handleAction(HeatInfo,DEF_GC_ACTION_DEF::AnalysisReceived, "", "", false, false, false);

  RetValue = RetValue && CDM_DBManager::copyHDSamples(HeatInfo, SampleCounter, false);

  if (RetValue)
  {
    m_pDM_DBManagerTask->getStdConnection()->commit();
    CDM_DBManager::handleInformation(Event, HMIClientId);  
  }
  else
  {
    m_pDM_DBManagerTask->getStdConnection()->rollback();      
    CDM_DBManager::handleError(Event, HMIClientId);
  }
  return RetValue;
}

bool CDM_LFDBManager::evSteelAnalysisReceived(CEventMessage &Event)
{
  log("++++++ CDM_LFDBManager::evSteelAnalysisReceived",3);

  bool RetValue = true;

  CDM_DataInterface_Impl *pDataInterface = m_pDM_DBManagerTask->getpDataInterface();

  sHeatInfo HeatInfo;
  setHeatInfo(Event, HeatInfo);

  std::string OrderId    = Event.getOrderID();

  long  LadleNo           = pDataInterface->getLong   (Event.getDataKey(), DATA::LadleNo );
  std::string LadleType   = pDataInterface->getString (Event.getDataKey(), DATA::LadleType);

  long  SampleOrigin          = pDataInterface->getLong   (Event.getDataKey(), DATA::SampleOrigin);
  long  SampleNo              = pDataInterface->getLong   (Event.getDataKey(), DATA::SampleNo);
  long  SampleMode            = pDataInterface->getLong   (Event.getDataKey(), DATA::SampleMode);
  std::string SampleLocation  = pDataInterface->getString (Event.getDataKey(), DATA::SampleLocation);
  std::string SampleId        = pDataInterface->getString (Event.getDataKey(), DATA::SampleId);
  std::string HMIClientId     = pDataInterface->getString (Event.getDataKey(), DATA::HMIClientId);
  

  std::string UserCode      = pDataInterface->getString(Event.getDataKey(),DATA::UserCode);
  seqAnalysis SeqAnalysis   = CIntfData::ToCORBAType(pDataInterface->getAnalysis(Event.getDataKey().c_str(), DATA::SteelMeasAnalysis));
  CDateTime SampleTime      (pDataInterface->getDate(Event.getDataKey().c_str(), DATA::SteelSampleTime));
  long  SampleCounter       = CSMC_DBData::unspecLong;

  long TreatmentPosition    = getActTreatmentPosition(Event);

  if( HeatInfo.Plant.empty() || HeatInfo.Plant ==DEF::Inv_String )
  {
    //we should get the plant and plant no from database because it is from lab, not LF
    HeatInfo.Plant = DEF_GC_PLANT_DEF::LF;
    RetValue = RetValue && CDM_DBManager::getPlantNoByHeatIDTreatID(HeatInfo.HeatId, HeatInfo.TreatId, HeatInfo.Plant, HeatInfo.PlantNo );
  }

  if( UserCode == DEF::Inv_String )
  {
    UserCode = "";
  }


  RetValue = CDM_DBManager::handlePDTablesOnAnalysisReceived(HeatInfo, SeqAnalysis, LadleNo, LadleType, SampleTime, DEF_GC_MEASUREMENT_TYPE::Steel, SampleNo, SampleMode, SampleOrigin, SampleLocation, SampleCounter, SampleId, OrderId , UserCode, TreatmentPosition, false);

  //Add Action

  RetValue = RetValue && CDM_DBManager::handleAction(HeatInfo,DEF_GC_ACTION_DEF::AnalysisReceived, "", "", false, false, false);

  RetValue = RetValue && CDM_DBManager::copyHDSamples(HeatInfo, SampleCounter, false);

  if (RetValue)
  {
    m_pDM_DBManagerTask->getStdConnection()->commit();
    CDM_DBManager::handleInformation(Event, HMIClientId);  
  }
  else
  {
    m_pDM_DBManagerTask->getStdConnection()->rollback();
    CDM_DBManager::handleError(Event, HMIClientId);
  }
  return RetValue;
}

double CDM_LFDBManager::getHeatTotalWeight(sHeatInfo &HeatInfo)
{
  log("++++++ CDM_LFDBManager::getHeatTotalWeight",3);

  CPD_HEAT_DATA  PD_HEAT_DATA(m_pDM_DBManagerTask->getStdConnection());

  double totalWeight = 0.;

  if( PD_HEAT_DATA.select(HeatInfo.HeatId,HeatInfo.TreatId,HeatInfo.Plant) )
  {
    if( !PD_HEAT_DATA.isNull(CPD_HEAT_DATA::STEELMASS,1) )
    {
      totalWeight = PD_HEAT_DATA.getSTEELMASS(1);
      
      if ( !PD_HEAT_DATA.isNull(CPD_HEAT_DATA::SLAGMASS,1) )
      {
        totalWeight += PD_HEAT_DATA.getSLAGMASS(1);
      }
    }
  }

  return totalWeight;
}

CDateTime CDM_LFDBManager::getLastTreatmentEndTime(sHeatInfo &HeatInfo, long TreatmentPosition)
{
  CDateTime LastTreatmentEndTime;

  CPDL_HEAT_DATA           PDL_HEAT_DATA          (m_pDM_DBManagerTask->getStdConnection());

  LastTreatmentEndTime = PDL_HEAT_DATA.getLastFinishedTimeByPlant(HeatInfo.Plant, HeatInfo.PlantNo, TreatmentPosition);


  return LastTreatmentEndTime;
}

//handle data in PD_ tables when Announcement occures
bool CDM_LFDBManager::handlePDTablesOnAnnounce(sHeatInfo &HeatInfo, const std::string &Order, const std::string &SteelGradeCode, const std::string &UserCode, sPDData &PDData, long &SampleRef, long TreatmentPosition, bool Commit )
{
  log("++++++ CDM_LFDBManager::handlePDTablesOnAnnounce",3);

  bool RetValue = (m_pDM_DBManagerTask != NULL);
  
  if (RetValue)
  {    
    CPD_HEAT_DATA          PD_HEAT_DATA          (m_pDM_DBManagerTask->getStdConnection());
    CPD_HEAT_DATA_LIQADD   PD_HEAT_DATA_LIQADD   (m_pDM_DBManagerTask->getStdConnection());
    CPD_SAMPLE_REF         PD_SAMPLE_REF         (m_pDM_DBManagerTask->getStdConnection());
    CPD_PLANTSTATUS        PD_PLANTSTATUS        (m_pDM_DBManagerTask->getStdConnection());

    CPDL_HEAT_DATA         PDL_HEAT_DATA         (m_pDM_DBManagerTask->getStdConnection());

    long SAMPLE_REF = CSMC_DBData::unspecLong; 

    // at LF incoming and Outgoing ladle are identical
    PDData.LadleNo    = PDData.PreLadleNo;
    PDData.LadleType  = PDData.PreLadleType;
    PDData.LadleState = PDData.PreLadleState;

    RetValue = RetValue && CDM_DBManager::handlePDTablesOnAnnounce(HeatInfo, Order, SteelGradeCode, UserCode, PDData, SAMPLE_REF, TreatmentPosition, Commit);

    long SampleCounter = PD_SAMPLE_REF.getSampleCounter(SAMPLE_REF, DEF_GC_MEASUREMENT_TYPE::Steel);

    // Outgoing Ladle
	  RetValue = RetValue && PD_PLANTSTATUS.doAnnouncement(HeatInfo.Plant,  HeatInfo.PlantNo, TreatmentPosition,  SampleCounter, 
                                                        HeatInfo.HeatId, HeatInfo.TreatId, m_HeatStatus.Announced, SteelGradeCode,  PDData.LadleNo, PDData.LadleType, 
                                                        PDData.Temp,     PDData.TempTime,  PDData.SteelMass,       PDData.SlagMass, Commit, m_lastError);

    if (RetValue)
    {
      log("CDM_LFDBManager::handlePDTablesOnAnnounce: PD_HEAT_DATA_LIQADD.doAnnouncement", 4);
      // Incoming ladle
      RetValue = RetValue && PD_HEAT_DATA_LIQADD.doAnnouncement(HeatInfo.HeatId, HeatInfo.TreatId, HeatInfo.Plant, 
                                                                PDData.SteelMass, PDData.SlagMass, PDData.PreLadleNo, PDData.PreLadleType, PDData.PreLadleState, 
                                                                PDData.SampleRef, Commit, m_lastError);
    }

    RetValue = RetValue && PDL_HEAT_DATA.doAnnouncement(HeatInfo.HeatId, HeatInfo.TreatId, HeatInfo.Plant, TreatmentPosition, Commit, m_lastError);
  }
  return RetValue;
}

bool CDM_LFDBManager::handlePDTablesOnSetupOfHeat(sHeatInfo &HeatInfo, sPDData &PDData, long Status, const std::string &OrderId, const CDateTime &HeatStart, const CDateTime &HeatEnd, const std::string &SteelgradeCode, const std::string &UserCode, long TreatmentPosition, bool Commit )
{
  bool RetValue = (m_pDM_DBManagerTask != NULL);

  if ( RetValue )
  {
    //check if heat is planned and set outgoing parameter
    bool IsHeatPlanned      = isHeatPlanned(HeatInfo.HeatId);

    CPP_HEAT_PLANT    PP_HEAT_PLANT   (m_pDM_DBManagerTask->getStdConnection());
    CPDL_HEAT_DATA    PDL_HEAT_DATA   (m_pDM_DBManagerTask->getStdConnection());

    //select data from PP_HEAT_PLANT and check if heat is planned
    if (PP_HEAT_PLANT.select(HeatInfo.HeatId, HeatInfo.TreatId, HeatInfo.Plant))
    {
      long SampleRef = CSMC_DBData::unspecLong;

      RetValue = RetValue && CDM_DBManager::handlePDTablesOnSetupOfHeat(IsHeatPlanned, HeatInfo, PDData, Status, OrderId,
                                                                   HeatStart, HeatEnd, SteelgradeCode, UserCode, SampleRef, TreatmentPosition, false);

      if (IsHeatPlanned)
      {
        if ( Status >= m_HeatStatus.Announced )
        {
          RetValue = RetValue && PDL_HEAT_DATA.doAnnouncement(HeatInfo.HeatId, HeatInfo.TreatId, HeatInfo.Plant, CSMC_DBData::unspecLong, Commit, m_lastError);
        }
      }// if (IsHeatPlanned) 

      if ( Status == m_HeatStatus.Tapping || Status == m_HeatStatus.Departure )
      {
        //Copy data into HD tables
        std::string SteelGradeCode = "";
        RetValue = RetValue && CDM_DBManager::copyHDTablesOnHeatEnd(HeatInfo, SteelGradeCode, CSMC_DBData::unspecLong, false);

        RetValue = RetValue && copyHDLHeatData(HeatInfo, false);
      }

    }// if (PP_HEAT_PLANT.select(HeatInfo.HeatId, HeatInfo.TreatId, HeatInfo.Plant))
    else
    {
      setLastError("NO_HEAT_DATA_FOUND", 0, PP_HEAT_PLANT.getActStatement(), 1); 
    }
  }

  return RetValue;
}

void CDM_LFDBManager::log(const std::string& _message, long _level)
{
  if (m_pDM_DBManagerTask)
    m_pDM_DBManagerTask->log(_message, _level);
}

bool CDM_LFDBManager::setGasConsumptions(CEventMessage &Event, bool Commit)
{
  log("++++++ CDM_LFDBManager::setGasConsumptions",3);

  bool RetValue = true;

  CDM_DataInterface_Impl              *pDataInterface     = m_pDM_DBManagerTask->getpDataInterface();
  CDM_ProductManagementInterface_Impl *pProductInterface  = m_pDM_DBManagerTask->getpProductManagementInterface();

  std::string HMIClientId     = pDataInterface->getString (Event.getDataKey(), DATA::HMIClientId);

  sHeatInfo HeatInfo;
  setHeatInfo(Event, HeatInfo);

  double heatTotalWeight = getHeatTotalWeight(HeatInfo);

  seqStirringData StirrAmount = CIntfData::ToCORBAType(pProductInterface->getStirringData(HeatInfo.ProductId.c_str(),DATA::StirringAmount));

  if (CIntfData::getLength(StirrAmount) < 1)
    return true;

  CGasDataHandler     GasDataHandler;
  CPDL_HEAT_DATA      PDL_HEAT_DATA(m_pDM_DBManagerTask->getStdConnection());
  CHDL_PP_STIRR_SPEC  HDL_PP_STIRR_SPEC(m_pDM_DBManagerTask->getStdConnection());
  double dStirArLanceCons = 0;

  CStirringDataHandler StirringDataHandler(StirrAmount);
  seqGasData StirrAmountGasData = StirringDataHandler.getAccumulatedGasDataSeq(); // equals obsolete DEF_DEVICES::Total

  if ( PDL_HEAT_DATA.select(HeatInfo.HeatId, HeatInfo.TreatId, HeatInfo.Plant) )
  {
    if (CIntfData::getLength(StirrAmount) > 0)
    {
      // general
      StirrAmountGasData = StirringDataHandler.getAccumulatedGasDataSeq(); // equals obsolete DEF_DEVICES::Total
      GasDataHandler.setGasData(StirrAmountGasData);

      PDL_HEAT_DATA.setSTIRR_AR_CONS(GasDataHandler.getGasData(DEF_GAS::Ar));
      PDL_HEAT_DATA.setSTIRR_N2_CONS(GasDataHandler.getGasData(DEF_GAS::N2));
      if(heatTotalWeight > 0.)
      {
        PDL_HEAT_DATA.setSTIRR_SPEC_AR(GasDataHandler.getGasData(DEF_GAS::Ar)/heatTotalWeight);
        PDL_HEAT_DATA.setSTIRR_SPEC_N2(GasDataHandler.getGasData(DEF_GAS::N2)/heatTotalWeight);
      }

      // emergency lance
      StirrAmountGasData = StirringDataHandler.getGasDataSeq(DEF_GC_STIRR_DEVICE::EmergencyLance);
      GasDataHandler.setGasData(StirrAmountGasData);

      PDL_HEAT_DATA.setSTIRR_AR_CONS_EMRGNCY(GasDataHandler.getGasData(DEF_GAS::Ar));
      PDL_HEAT_DATA.setSTIRR_N2_CONS_EMRGNCY(GasDataHandler.getGasData(DEF_GAS::N2));
      dStirArLanceCons = dStirArLanceCons + GasDataHandler.getGasData(DEF_GAS::Ar);


      // Plug 1
      StirrAmountGasData = StirringDataHandler.getGasDataSeq(DEF_GC_STIRR_DEVICE::Plug1);
      GasDataHandler.setGasData(StirrAmountGasData);

      dStirArLanceCons = dStirArLanceCons + GasDataHandler.getGasData(DEF_GAS::Ar);

      // Plug 2
      StirrAmountGasData = StirringDataHandler.getGasDataSeq(DEF_GC_STIRR_DEVICE::Plug2);
      GasDataHandler.setGasData(StirrAmountGasData);

      dStirArLanceCons = dStirArLanceCons + GasDataHandler.getGasData(DEF_GAS::Ar);
    }

    PDL_HEAT_DATA.setSTIRR_AR_CONS(dStirArLanceCons);

    //set SoftStirring Duration
    double dSoftStirringDur = 0;
    if(HDL_PP_STIRR_SPEC.select(HeatInfo.HeatId, HeatInfo.TreatId, HeatInfo.Plant,CSMC_DBData::unspecLong,"SoftStirring"))
    {
      dSoftStirringDur = HDL_PP_STIRR_SPEC.getDURATION(1);
      PDL_HEAT_DATA.setSOFTSTIRR_DUR(dSoftStirringDur);
    }

    //set CLEANLINESS_END
    CDateTime now;
    PDL_HEAT_DATA.setCLEANLINESS_END(now);
  }

  if (PDL_HEAT_DATA.update())
  {
    RetValue = true;
  }
  else
  {
    RetValue = false;
    m_lastError = PDL_HEAT_DATA.getLastError();
  }

  if ( Commit )
  {
    if ( RetValue )
    {
      m_pDM_DBManagerTask->getStdConnection()->commit();
    }
    else
    {
      m_pDM_DBManagerTask->getStdConnection()->rollback(); 
    }
  }

  if ( RetValue )
  {
    CDM_DBManager::handleInformation(Event, HMIClientId, true);
  }
  else
  {
    CDM_DBManager::handleError(Event, HMIClientId);
  }

  return RetValue;
}

bool CDM_LFDBManager::setHeatDataAlloyWeight(sHeatInfo &HeatInfo,bool Commit)
{
  log("++++++ CDM_LFDBManager::setHeatDataAlloyWeight",3);

  bool RetValue = (m_pDM_DBManagerTask != NULL);

  if (RetValue)
  {
    CPD_RECIPE_ENTRY PD_RECIPE_ENTRY(m_pDM_DBManagerTask->getStdConnection());
    CPDL_HEAT_DATA   PDL_HEAT_DATA(m_pDM_DBManagerTask->getStdConnection());

    double Alloyweight = PD_RECIPE_ENTRY.getAlloyWeight( HeatInfo.Plant,HeatInfo.HeatId,HeatInfo.TreatId);

    RetValue = PDL_HEAT_DATA.UpdateAlloyWeight(HeatInfo.HeatId,HeatInfo.TreatId,HeatInfo.Plant,Alloyweight,Commit, m_lastError);

    if (!RetValue)
    {
      m_lastError = PDL_HEAT_DATA.getLastError();
    }
  }

  return RetValue;
}

bool CDM_LFDBManager::setHeatDataBinWeight(sHeatInfo &HeatInfo,bool Commit)
{
  log("++++++ CDM_LFDBManager::setHeatDataBinWeight",3);

  bool RetValue = (m_pDM_DBManagerTask != NULL);

  if (RetValue)
  {
    CPD_RECIPE_ENTRY PD_RECIPE_ENTRY(m_pDM_DBManagerTask->getStdConnection());
    CPDL_HEAT_DATA   PDL_HEAT_DATA  (m_pDM_DBManagerTask->getStdConnection());

    double BinWeight = PD_RECIPE_ENTRY.getBinWeight(HeatInfo.Plant,HeatInfo.HeatId ,HeatInfo.TreatId);

    RetValue = PDL_HEAT_DATA.UpdateBinWeight(HeatInfo.HeatId,HeatInfo.TreatId,HeatInfo.Plant,BinWeight,Commit, m_lastError);

    if (!RetValue)
    {
      m_lastError = PDL_HEAT_DATA.getLastError();
    }
  }
  return RetValue;
}

//set the PDL_HEAT_DATA.ELEC_CONS_TOTAL from PDL_CYCL_MEAS_DATA as a sum
bool CDM_LFDBManager::setHeatDataElectConsTotal(sHeatInfo &HeatInfo,bool Commit)
{
  log("++++++ CDM_LFDBManager::setHeatDataElectConsTotal",3);

  bool RetValue = (m_pDM_DBManagerTask != NULL);

  if (RetValue)
  {
    CPDL_CYCL_MEAS_DATA   PDL_CYCL_MEAS_DATA (m_pDM_DBManagerTask->getStdConnection());
    CPDL_HEAT_DATA        PDL_HEAT_DATA   (m_pDM_DBManagerTask->getStdConnection());


    double heatTotalWeight = getHeatTotalWeight(HeatInfo);
    //get the value from pd_tapch_data table
    double  dbElectricalEnergy = 0;
    RetValue = PDL_CYCL_MEAS_DATA.selectMax( HeatInfo.HeatId,HeatInfo.TreatId,HeatInfo.Plant,CPDL_CYCL_MEAS_DATA::ELEC_CONS);
    if(RetValue)
    {
      dbElectricalEnergy =  PDL_CYCL_MEAS_DATA.getELEC_CONS(1);
    }
    else 
    {
      return true;
    }

    double specEgy = 0. ;
    if(heatTotalWeight > 0.)
    {
      specEgy =  dbElectricalEnergy/heatTotalWeight;
    }

    //update the value to the table
    RetValue = PDL_HEAT_DATA.UpdateElecConsTotal(HeatInfo.HeatId, HeatInfo.TreatId, HeatInfo.Plant, dbElectricalEnergy, specEgy, Commit, m_lastError);

    if (!RetValue)
    {
      m_lastError = PDL_HEAT_DATA.getLastError();
    }

  }
  return RetValue;
}

bool CDM_LFDBManager::setHeatDataSlagFormer(sHeatInfo &HeatInfo,bool Commit)
{
  log("++++++ CDM_LFDBManager::setHeatDataSlagFormer",3);

  bool RetValue = (m_pDM_DBManagerTask != NULL);

  if (RetValue)
  {
    CPD_RECIPE_ENTRY PD_RECIPE_ENTRY(m_pDM_DBManagerTask->getStdConnection());
    CPDL_HEAT_DATA   PDL_HEAT_DATA(m_pDM_DBManagerTask->getStdConnection());

    double SlagFormer = PD_RECIPE_ENTRY.getSlagFormer( HeatInfo.Plant,HeatInfo.HeatId,HeatInfo.TreatId);

    RetValue = PDL_HEAT_DATA.UpdateSlagFormer(HeatInfo.HeatId,HeatInfo.TreatId,HeatInfo.Plant,SlagFormer,Commit, m_lastError);

    if (!RetValue)
    {
      m_lastError = PDL_HEAT_DATA.getLastError();
    }
  }

  return RetValue;
}

bool CDM_LFDBManager::setHeatLadleData(sHeatInfo &HeatInfo,bool Commit)
{
  log("++++++ CDM_LFDBManager::setHeatLadleData",3);

  bool RetValue = (m_pDM_DBManagerTask != NULL);

  if (RetValue)
  {
    CPDL_HEAT_DATA  PDL_HEAT_DATA(m_pDM_DBManagerTask->getStdConnection());

    if(PDL_HEAT_DATA.select(HeatInfo.HeatId,HeatInfo.TreatId,HeatInfo.Plant))
    {
      CDateTime now;
      PDL_HEAT_DATA.setLADLE_DEPARTTIME(now);
      RetValue = PDL_HEAT_DATA.update();

      if (!RetValue)
      {
        m_lastError = PDL_HEAT_DATA.getLastError();
        PDL_HEAT_DATA.rollback();
      } 
      if(RetValue &&  Commit)
        PDL_HEAT_DATA.commit();
    }
  }
  return RetValue;
}

bool CDM_LFDBManager::setStirrBypass(CEventMessage &Event,bool Commit)
{
  log("++++++ CDM_LFDBManager::setStirrBypass",3);

  bool RetValue = (m_pDM_DBManagerTask != NULL);

  sHeatInfo HeatInfo;
  setHeatInfo(Event, HeatInfo);

  if (RetValue)
  {
    CPD_HEAT_DATA_STIRR PD_HEAT_DATA_STIRR(m_pDM_DBManagerTask->getStdConnection());

    long TreatmentPosition    = getActTreatmentPosition(Event);

    if(PD_HEAT_DATA_STIRR.selectActual(HeatInfo.HeatId, HeatInfo.TreatId, HeatInfo.Plant, TreatmentPosition, CSMC_DBData::unspecString, 1, CSMC_DBData::unspecString))
    {
      CDateTime now;
      PD_HEAT_DATA_STIRR.setENDTIME(now);
      
      RetValue = PD_HEAT_DATA_STIRR.update();

      if (!RetValue)
      {
        m_lastError = PD_HEAT_DATA_STIRR.getLastError();
        PD_HEAT_DATA_STIRR.rollback();
      }
      else if (RetValue &&  Commit)
      {
        PD_HEAT_DATA_STIRR.commit();
      }
    }
  }
  return RetValue;
}


long CDM_LFDBManager::getActTreatmentPosition(CEventMessage &Event)
{
  long TreatmentPosition = DEF::Inv_Long; 

  log("++++++ CDM_DBManager::getActTreatmentPosition",3);

  sHeatInfo HeatInfo;
  setHeatInfo(Event, HeatInfo);

  if ( m_pDM_DBManagerTask )
  {
    TreatmentPosition = m_pDM_DBManagerTask->getpProductManagementInterface()->getLong  (HeatInfo.ProductId, DATA::TreatmentPosition);

    // try to find respective car
    if ( TreatmentPosition == DEF::Inv_Long )
    {
      std::string LadleTransferCarId = m_pDM_DBManagerTask->getpDataInterface()->getString(Event.getDataKey(), DATA::LadleTransferCarId);
      if ( LadleTransferCarId != DEF::Inv_String )
      {
        TreatmentPosition = CDataConversion::StringToLong(LadleTransferCarId);
      }
    }

    if ( TreatmentPosition == DEF::Inv_Long )
    {
      std::string LadleTransferCarId = m_pDM_DBManagerTask->getpProductManagementInterface()->getString(HeatInfo.ProductId, DATA::LadleTransferCarId);
      if ( LadleTransferCarId != DEF::Inv_String )
      {
        TreatmentPosition = CDataConversion::StringToLong(LadleTransferCarId);
      }
    }

    if( TreatmentPosition == DEF::Inv_Long )
    {
      CPDL_HEAT_DATA   PDL_HEAT_DATA(m_pDM_DBManagerTask->getStdConnection());
      if( PDL_HEAT_DATA.select( HeatInfo.HeatId,HeatInfo.TreatId,HeatInfo.Plant) )
      {
        TreatmentPosition = PDL_HEAT_DATA.getCARNO(1);
      }
    }

    if ( TreatmentPosition == DEF::Inv_Long )
    {
      TreatmentPosition = DEF_GC_TRETMENTPOSITION::TransferCar1 ; // "TransferCar1" as default
    }
  }

  return TreatmentPosition;
}

bool CDM_LFDBManager::AutomaticlyFillRelativeDelays(CEventMessage &Event,bool pCommit,bool &isDelay)
{
  bool result = true;

	//SARS
	isDelay = false;
  sHeatInfo HeatInfo;
  setHeatInfo(Event, HeatInfo);

	CGT_PARAM      GT_PARAM(m_pDM_DBManagerTask->getStdConnection());
	CPD_HEAT_DATA  PD_HEAT_DATA(m_pDM_DBManagerTask->getStdConnection());
		
  if( PD_HEAT_DATA.select(HeatInfo.HeatId,HeatInfo.TreatId,HeatInfo.Plant ) )
  {
    CDateTime	 mActTreatStart,mActTreatEnd;

    mActTreatStart = PD_HEAT_DATA.getTREATSTART_ACT(1);
    mActTreatEnd = PD_HEAT_DATA.getTREATEND_ACT(1);
	  string mDelayCode = "1609";  

    CDeltaTime actProdDur = CDateTime::subTimes(mActTreatEnd, mActTreatStart);
    double DefltTreatDur = 1800.0; // 30 minutes in seconds
		if(GT_PARAM.select(DEF_GC_PLANTGROUP_DESC::All_LF,"DefltTreatDuration", 0, CSMC_DBData::unspecLong))
    {
      DefltTreatDur = CDataConversion::StringToDouble(GT_PARAM.getVALUE(1)) * 60.0; //DB contains minutes, we need seconds
    }
                  
    if( actProdDur.asSeconds() > DefltTreatDur)
    {
      CDateTime mdelayStartTime; 
			mdelayStartTime = CDateTime::addTimes(DefltTreatDur,mActTreatStart) ; 

			CDM_DataInterface_Impl *dataProvider = m_pDM_DBManagerTask->getpDataInterface();
			dataProvider->setString(Event.getDataKey(), DATA::DelayCode, mDelayCode);
			dataProvider->setDate(Event.getDataKey().c_str(), DATA::DelayStartDate, mdelayStartTime.assDate());
			dataProvider->setDate(Event.getDataKey().c_str(), DATA::DelayEndDate, mActTreatEnd.assDate());
			dataProvider->setString(Event.getDataKey(), DATA::UserCode, "ADM");
			dataProvider->setString(Event.getDataKey(), DATA::Comment, " "); //Operator has to fill via HMI.
			dataProvider->setLong(Event.getDataKey(), DATA::Status, DEF_GEN_STATES::New);

			isDelay = true;
    }   
  }

  return result;
}

bool CDM_LFDBManager::evMaterialHandlingReport(CEventMessage& Event)
{
  log("++++++ CDM_LFDBManager::evMaterialHandlingReport",3);

  sHeatInfo HeatInfo;
  setHeatInfo(Event,HeatInfo);

  // Unified exception handling *******************************************************
  std::string Scope("CDM_LFDBManager::evMaterialHandlingReport");
  std::stringstream ExceptionMsg;
  ExceptionMsg << "Handling event: " << Event.getSender()
    << ", " << HeatInfo.ProductId << ", " << HeatInfo.HeatId
    << ", " << HeatInfo.TreatId   << ", " << Event.getDataKey();
  //***********************************************************************************

  bool RetValue = false;

  try
  {
    CSMC_DataProvider_Impl*               pDataInterface              = m_pDM_DBManagerTask->getpDataInterface();
    CDM_ProductManagementInterface_Impl*  pProductManagementInterface = m_pDM_DBManagerTask->getpProductManagementInterface();

    if ( m_pDM_DBManagerTask && 
         pDataInterface && 
         pProductManagementInterface
       )
    {
      std::string DataKey = Event.getDataKey();

      seqStirringData StirringAmount = CIntfData::ToCORBAType(pProductManagementInterface->getStirringData(HeatInfo.ProductId.c_str(),DATA::StirringAmount));
      CStirringDataHandler StirringDataHandler(StirringAmount);
      seqGasData SeqGasData = StirringDataHandler.getAccumulatedGasDataSeq(); // equals obsolete DEF_DEVICES::Total

      double ElecCons = pProductManagementInterface->getDouble(HeatInfo.ProductId.c_str(), DATA::ElecCons);

      sRecipeInfo RecipeInfo;
      seqBatch SeqBatch;

      RecipeInfo.RecipeName           = pDataInterface->getString(DataKey,DATA::RecipeName);
      RecipeInfo.RecipeSource         = pDataInterface->getString(DataKey,DATA::RecipeSource);
      RecipeInfo.RecipeStatus         = pDataInterface->getLong(DataKey,DATA::RecipeStatus);
      RecipeInfo.RecipeNo             = pDataInterface->getLong(DataKey,DATA::RecipeNo);
      RecipeInfo.RecipeTarget         = pDataInterface->getString(DataKey,DATA::RecipeTarget);
      RecipeInfo.DurSinceHeatAnnounce = pProductManagementInterface->getDouble(HeatInfo.ProductId, DATA::DurSinceHeatAnnounce);
      RecipeInfo.DurSinceHeatStart    = pProductManagementInterface->getDouble(HeatInfo.ProductId, DATA::DurSinceHeatStart);

      SeqBatch = CIntfData::ToCORBAType(pDataInterface->getBatch(DataKey.c_str(),DATA::RecipeContent));
   
      RetValue = CDM_DBManager::handlePDTablesOnMaterialHandlingReport(HeatInfo, RecipeInfo, SeqBatch, SeqGasData, ElecCons, false );

      if (RetValue)
      {
        m_pDM_DBManagerTask->getStdConnection()->getpCBSConnection()->commit();
      }
      else
      {
        m_pDM_DBManagerTask->getStdConnection()->getpCBSConnection()->rollback();
        CDM_DBManager::handleError(Event);
      }
    }
  }
  catch (cCBS_DBExc &e)
  {
    cCBS_StdEventLogFrame *pEventLog = cCBS_StdEventLogFrameController::getInstance()->getpEventLog();
    sEventLogMessage sMessage = cCBS_StdEventLog::initMessage(__FILE__,__LINE__);
    pEventLog->EL_ExceptionCaught(sMessage, (e.getText()).c_str(),
      Scope.c_str(), ExceptionMsg.str().c_str()); 
    RetValue = false;
  }
  catch(CORBA::SystemException& sExc) 
  {
    cCBS_StdEventLogFrame *pEventLog = cCBS_StdEventLogFrameController::getInstance()->getpEventLog();
    sEventLogMessage sMessage = cCBS_StdEventLog::initMessage(__FILE__,__LINE__);
    pEventLog->EL_ExceptionCaught(sMessage,sExc._name(),
      Scope.c_str(), ExceptionMsg.str().c_str());
    RetValue = false;
  }
  catch(CORBA::Exception& cExc) 
  {
    cCBS_StdEventLogFrame *pEventLog = cCBS_StdEventLogFrameController::getInstance()->getpEventLog();
    sEventLogMessage sMessage = cCBS_StdEventLog::initMessage(__FILE__,__LINE__);
    pEventLog->EL_ExceptionCaught(sMessage,cExc._name(),
      Scope.c_str(), ExceptionMsg.str().c_str());
    RetValue = false;
  }
  catch(...)
  {
    std::string Msg("Unknown exception:");
    Msg += ExceptionMsg.str();

    cCBS_StdEventLogFrame *pEventLog = cCBS_StdEventLogFrameController::getInstance()->getpEventLog();
    sEventLogMessage sMessage = cCBS_StdEventLog::initMessage(__FILE__,__LINE__);
    pEventLog->EL_ExceptionCaught(sMessage, "",
      Scope.c_str(), Msg.c_str()); 
    RetValue = false;
  }

  return RetValue;
} // bool CDM_LFDBManager::evMaterialHandlingReport(const CEventMessage& Event)

bool CDM_LFDBManager::handlePDLTablesOnHeatDeparture(sHeatInfo &HeatInfo, const std::string &UserCode, bool Commit)
{
  log("++++++ CDM_LFDBManager::handlePDLTablesOnHeatDeparture",3);

  bool RetValue = true;
  CEquipmentData  EquipmentData (m_pDM_DBManagerTask->getStdConnection());
  CPDL_HEAT_DATA  PDL_HEAT_DATA (m_pDM_DBManagerTask->getStdConnection());


  if(PDL_HEAT_DATA.select(HeatInfo.HeatId,HeatInfo.TreatId,HeatInfo.Plant))
  {
    long roofAge = (long)EquipmentData.getEquipmentAge(HeatInfo.Plant, HeatInfo.PlantNo, DEF_GD_EQUIP_TYPE::ROOF, DEF_GC_COUNTER_TYPE::HEATS);

    PDL_HEAT_DATA.setFURNACE_ROOFAGE(roofAge);
    RetValue = PDL_HEAT_DATA.update();
  }

  //add the alloy weight to table PDL_HEAT_DATA
  RetValue = RetValue && setHeatDataAlloyWeight(HeatInfo, Commit);

  //add the Bin weight to table PDL_HEAT_DATA(HDL_HEAT_DATA.BIN_MATERIAL)
  RetValue = RetValue && setHeatDataBinWeight(HeatInfo, Commit);

  //add the slag former to table HDL_HEAT_DATA
  RetValue = RetValue && setHeatDataSlagFormer(HeatInfo, Commit);

  //set the PDL_HEAT_DATA.ELEC_CONS_TOTAL from PDL_CYCL_MEAS_DATA as a sum
  RetValue = RetValue && setHeatDataElectConsTotal(HeatInfo, Commit);

  RetValue = RetValue && setHeatLadleData(HeatInfo, Commit);

  if(Commit)
  {
    if ( RetValue )
    {
      PDL_HEAT_DATA.commit();
    }
    else
    {
      PDL_HEAT_DATA.rollback();
    }
  }


  return RetValue;
}
