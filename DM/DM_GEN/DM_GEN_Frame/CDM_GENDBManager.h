//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by (DB)ClassCodeUtility BETA 0.6.0 
#if defined (_MSC_VER) && (_MSC_VER >= 1000)
#pragma once
#endif
#ifndef _INC_CDM_GENDBMANAGER_INCLUDED
#define _INC_CDM_GENDBMANAGER_INCLUDED

#include "CDM_DBManager.h"

class CGC_Plant_Container;

class CDM_GENDBManager
  : CDM_DBManager
{

public:

  CDM_GENDBManager(CDM_DBManagerTask* _task);

  virtual ~CDM_GENDBManager();

  void init();

  bool evCCSHeatStatus(CEventMessage &Event);

  bool evHeatScheduleUpdate(CEventMessage &Event);

  bool evBOFHeatAnnouncementOffline(CEventMessage &Event);

  bool evBOFHeatAnnouncement(CEventMessage& Event);

  bool evBOFHeatCancellation(CEventMessage &Event);

  //find the next order for which scrap should be loaded
  bool evScrapChuteRequest(CEventMessage& Event);

  // Function handles hot metal analysis
  bool evHotMetalAnalysisReceived(CEventMessage &Event);

  bool evHotMetalTemperatureReceived(CEventMessage &Event);

protected:

  //make the container class a member so we do not need to initialize it every time
  CGC_Plant_Container * m_pGC_Plant_Container;

  //default plant for the heat schedule operations
  std::string m_DefaultPlant;

  //default plant number for the heat schedule operations
  long m_DefaultPlantNo;

  //name under which in the DB the customer heat ID counter is stored
  std::string m_ParameterNameForCustomerHeatIDSequenceCounter;

  bool m_PlantSpecificHeatCounter;

  bool m_UnitSpecificHeatCounter;
  
  long m_StartCounter;

  long m_HeatRange;

  bool m_UpdateCustHeatIDAtHeatAnnouncement;

  std::string m_FinalShop;
};

#endif /* _INC_CDM_GENDBManager_INCLUDED */
