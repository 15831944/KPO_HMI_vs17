//## Copyright (C) 2009 SMS Siemag AG, Germany 
//## Version generated by (DB)ClassCodeUtility BETA 0.6.0 

#if defined (_MSC_VER) && (_MSC_VER >= 1000)
#pragma once
#endif
#ifndef _INC_CDM_DBMANAGER_INCLUDED
#define _INC_CDM_DBMANAGER_INCLUDED

#include <vector>
#include <set>

#include "CDM_DBManagerTask.h"
#include "CEventMessage.h"
#include "CDateTime.h"
#include "SRECIPE.h"
#include "CSMC_ErrorHandler.h"

class CGC_Plantgroup_Container;
class CGC_Plant_Container;
class CGCC_TRANSLATE_VALUE;
class CHeatStatusContainer;

//ProdPrac Definition
typedef struct
{
  std::string Injection;
  std::string Restri;
  std::string Param;
  std::string Scrap;
  std::string Burner;
  std::string Process;
  std::string Electric;
  std::string Blowing;
  std::string Oxygen;
  std::string Stirring;
} sProdPracDef;

//Heat status, load from ini file
struct sHeatStatus
{
  long Departure;
  long Planned;
  long Announced;
  long Tapping;
  long TreatmentStart;
	long TreatmentEnd;//SARS
  long Blowing;
  long Melting;
  long ChargeMatCalc;
  long ChargMatOrder;
  sHeatStatus()
  {
    Departure      = DEF::Inv_Long;
    Planned        = DEF::Inv_Long;
    Announced      = DEF::Inv_Long;
    Tapping        = DEF::Inv_Long;
    TreatmentStart = DEF::Inv_Long;
		TreatmentEnd   = DEF::Inv_Long;
    Blowing        = DEF::Inv_Long;
    Melting        = DEF::Inv_Long;
    ChargeMatCalc  = DEF::Inv_Long;
    ChargMatOrder  = DEF::Inv_Long;
  }
};

//Heat information
struct sHeatInfo
{
  std::string ProductId;
  std::string HeatId;
  std::string TreatId;
  std::string Plant;
  long PlantNo;
  sHeatInfo()
  {
    ProductId = DEF::Inv_String;
    HeatId    = DEF::Inv_String;
    TreatId   = DEF::Inv_String;
    Plant     = DEF::Inv_String;
    PlantNo   = DEF::Inv_Long;
  };
};

// to transport data between functions
struct sPDData
{
  double    SteelMass;
  double    SlagMass;
  long      LadleNo;
  std::string    LadleType;
  long      SampleNo;
  bool      OverWriteSampleTime;
  CDateTime SteelSampleTime;
  CDateTime SlagSampleTime;
  CDateTime HMSampleTime; // if sample taken e.g. HMD
  double    Temp;
  CDateTime TempTime;
  std::string    LadleState;
  long      SampleMode;
  long      SampleOrigin;
  std::string    SampleLocation;
  long      PretreatCounter;
  long      SampleRef;
  std::string    PreLadleState;
  long      PreLadleNo;
  std::string    PreLadleType;
  seqAnalysis SteelAnalysis;
  seqAnalysis SlagAnalysis;
  seqAnalysis HMAnalysis;

  sPDData()
  {
    SteelMass       = DEF::Inv_Double;
    SlagMass        = DEF::Inv_Double;
    LadleNo         = DEF::Inv_Long;
    LadleType       = DEF::Inv_String;
    SampleNo        = DEF::Inv_Long;
    OverWriteSampleTime = false;
    SteelSampleTime = CDateTime::InvalidDateTime();
    SlagSampleTime  = CDateTime::InvalidDateTime();
    HMSampleTime    = CDateTime::InvalidDateTime();
    Temp            = DEF::Inv_Double;
    TempTime        = CDateTime::InvalidDate();
    LadleState      = DEF::Inv_String;
    SampleMode      = DEF::Inv_Long;
    SampleOrigin    = DEF::Inv_Long;
    SampleLocation  = DEF::Inv_String;
    PretreatCounter = DEF::Inv_Long;
    SampleRef       = DEF::Inv_Long;
    PreLadleNo      = DEF::Inv_Long;
    PreLadleType    = DEF::Inv_String;

  };
};

class CDM_DBManager
{

public:

  CDM_DBManager(CDM_DBManagerTask* _task);

  virtual ~CDM_DBManager();

  void init();

protected:

  bool AutomaticlyFillRelativeDelays(const std::string Plant,long PlantNo,const std::string HeatID,const std::string TreatID,bool& bAutoEnd,const std::string &User,bool Commit );

  void initialSampleRef(sSampleRef &pSample);

  bool copyHDAction(sHeatInfo &HeatInfo, bool Commit );

  bool copyHDCoolWater(sHeatInfo &HeatInfo, bool Commit );

  bool copyHDDelays(sHeatInfo &HeatInfo, bool Commit );

  bool copyHDElecSystem(sHeatInfo &HeatInfo, bool Commit );

  //bool copyHDEquipMount(sHeatInfo &HeatInfo, bool Commit );

  bool copyHDGrades(sHeatInfo &HeatInfo, const std::string &SteelGrade, bool Commit );

  bool copyHDHeatData(sHeatInfo &HeatInfo, bool Commitconst);

  bool checkHDHeatData(sHeatInfo &HeatInfo, bool Commit);

  bool copyHDHeatDataMatFeed(sHeatInfo &HeatInfo, bool Commit );

  bool copyHDLadleLifeData(sHeatInfo &HeatInfo, bool Commit );

  bool copyHDMatFeed(sHeatInfo &HeatInfo, const std::string &SteelGrade, long &TreatModeNo, bool Commit );

  bool copyHDMatFeedCyclicMeasData(sHeatInfo &HeatInfo, bool Commit );

  bool copyHDMatFeedRes(sHeatInfo &HeatInfo, bool Commit );

  bool copyHDParams(sHeatInfo &HeatInfo, bool Commit );

  bool copyHDPhaseRes(sHeatInfo &HeatInfo, bool Commit );

  bool copyHDRecipes(sHeatInfo &HeatInfo, bool Commit );

  bool copyHDRestris(sHeatInfo &HeatInfo, long &TreatModeNo, bool Commit);

  bool copyHDSamples(sHeatInfo &HeatInfo, long SAMPLE_COUNTER, bool Commit );

  bool copyHDTablesOnHeatEnd(sHeatInfo &HeatInfo, const std::string &SteelGrade, const long &Sample_Counter, bool Commit );

  bool copyHDTapchData(sHeatInfo &HeatInfo, bool Commit );

  bool copyHDTreatmode(sHeatInfo &HeatInfo, const std::string &OrderId, long &TreatModeNo, bool Commit );

  bool copyHDWastegasCyclMeasData(sHeatInfo &HeatInfo, bool Commit );

  //bool addSampleAnalysis(sHeatInfo &HeatInfo, seqAnalysis &pSeqAnalysis, long LadleNo, const std::string &LadleType, long pMeasType, CDateTime &pSampTime, const std::string &UserCode, long &pSampCounter, bool Commit = false);
  bool addSampleAnalysis(sHeatInfo &HeatInfo, seqAnalysis& SeqAnalysis, long LadleNo, const std::string& LadleType, CDateTime SampleTime, long SampleType, long SampleNo, long SampleMode, long SampleOrigin, const std::string& SampleLocation, long& SampleRef, long &SampleCounter, const std::string& SampleId, const std::string& OrderId, bool OverWriteSampleTime, const std::string& User, bool Commit );

  bool addSampleAnalysisAndTemp(sHeatInfo &HeatInfo, double MeasValue, seqAnalysis &SeqAnalysis, long LadleNo, const std::string& LadleType, CDateTime SampleTime, long SampleType, long SampleNo, long SampleMode, long SampleOrigin, const std::string& SampleLocation, long& SampleRef, long& SampleCounter, const std::string& SampleId, const std::string& OrderId, bool OverWriteSampleTime, const std::string& User, bool Commit );

  bool addSampleAnalysisRef(sHeatInfo &HeatInfo, const std::string &UserCode, sPDData &PDData, long &SampleRef, bool Commit);

  bool addSampleAndTemp(sHeatInfo &HeatInfo, double MeasValue, long LadleNo, const std::string& LadleType, CDateTime SampleTime, long SampleType, long SampleNo, long SampleMode, long SampleOrigin, const std::string& SampleLocation, long& SampleCounter, const std::string& SampleId, const std::string& OrderId, bool OverWriteSampleTime, const std::string& User, bool Commit);

  //bool addSampleAnalysis(sHeatInfo &HeatInfo, seqAnalysis &SeqAnalysis, long ORIGIN, CDateTime &pSampTime, const std::string &UserCode, long pSampCounterPrev, long &pSampCounter, bool Commit );
  bool addSampleValue(sHeatInfo &HeatInfo, double MeasValue, const std::string& MeasName, long LadleNo, const std::string& LadleType, CDateTime SampleTime, long SampleType, long SampleNo, long SampleMode, long SampleOrigin, const std::string& SampleLocation, long& SampleRef, long& SampleCounter, const std::string& SampleId, const std::string& OrderId, bool OverWriteSampleTime, const std::string& User, bool Commit = false);

  bool changeHotHeelData(sHeatInfo &HeatInfo, long& sampleRef, double steelMass, double slagMass, bool Commit );

  // check methods
  bool checkLadleData(long LadleNo, const std::string& LadleType, const std::string& HMIClientId, const std::string& ERROR_MESSAGE );

  bool checkContainerData(long ContainerNo, const std::string& ContainerType, const std::string& HMIClientId, const std::string& ERROR_MESSAGE );

  bool checkSeqOfCustHeatId(sHeatInfo &HeatInfo, std::string& CustHeatId, std::string& CustTreatId, bool commit);

public:

  virtual bool evChangeHotHeelData(CEventMessage &Event);
  virtual bool evHeatEnd(CEventMessage &Event);
  virtual bool evHeatStart(CEventMessage &Event);
  virtual bool evHandleUpdatePurpose(CEventMessage &Event);
  virtual bool evChangeAimData(CEventMessage &Event);
  virtual bool evCancelHeat(CEventMessage &Event);
  virtual bool evChangeLiquidAdditionData(CEventMessage &Event);
  virtual bool evChangeProdPracPointerParameter(CEventMessage &Event);
  virtual bool evChangeProdPracPointerRestriction(CEventMessage &Event);
  virtual bool evChangeTapLadleData(CEventMessage &Event);
  virtual bool evDelayStatus(CEventMessage &Event);
  virtual bool evHeatAnnouncement(CEventMessage &Event, bool commit);
  virtual bool evProductionOrderChanged(CEventMessage &Event);
  virtual bool evHeatDeparture(CEventMessage &Event);


protected:

  bool getActSteelGrade(sHeatInfo &HeatInfo, std::string &SteelGrade);

  // return values:
  // true      - AIMTEMP is set in pp_order.
  // false     - value not defined. last error is set
  // AimTemp   - value of AIMTEMP
  bool getAimTemperature(const std::string& PLANT, const std::string& OrderId, long& AimTemp);

  // return values:
  // true      - AIMSTEEL is set in pp_order.
  // false     - value not defined. last error is set
  // AimWeight - value of AIMSTEEL
  bool getAimWeight(const std::string& PLANT, const std::string& OrderId, long& AimWeight);

  virtual CDateTime getLastTreatmentEndTime(sHeatInfo &HeatInfo, long TreatmentPosition);

  // obsolete
  bool getConstraintTran(std::string &pTranslation);

  bool getTranslation(CSMC_Error * pSMC_Error);

  //Gel ladle from PD_HEAT_DATA_LIQADD
  bool getLadleFromLiqAdd(sHeatInfo &HeatInfo, long LiqAddNo, long &LadleNo, std::string &LadleType);

  //Gel ladle from PD_PRETREATDATA
  bool getLadleFromPretreat(long PretreatCounter, long &LadleNo, std::string &LadleType);

  bool getOrderByHeat(sHeatInfo &HeatInfo, std::string &Order);

  // return values:
  // true         - LIQADD is set in pp_order independent of aim steel
  // false        - value not defined. last error is set
  // LiqAddAmount - value of LIQADD
  // Fraction     - fraction of LiqAddAmount to AimSteel in percent.
  //                0 if aim steel doesn't exist or LiqAddAmount is zero
  bool getLiqAddAmount(const std::string& PLANT, const std::string& OrderId, long& LiqAddAmount, long& Fraction);

  //Get LiqAddNo according to LadleType
  //bool getLiqAddNo(sHeatInfo &HeatInfo, std::string &LadleType, bool NextNo, long &LiqAddNo);

  bool getPlantNoByHeatIDTreatID( const std::string HeatId, const std::string TreatID,const std::string PlantID,long& lngPlantNO );

  long getPlantNoFromHeatTreatID(const std::string HeatID,const std::string TreatID,const std::string  PlantID );

  bool getPracNo(sHeatInfo &HeatInfo, const std::string &Description, long &PracNo);

  // return values:
  // true         - TREATMENTMODE is set in pp_order.
  // false        - value not defined. last error is set
  // TreatMode    - value of TREATMENTMODE
  virtual bool getTreatmentMode(sHeatInfo &HeatInfo, const std::string& OrderId, long& TreatMode);

  bool handleAction(sHeatInfo &HeatInfo, const long ActionNo, bool Commit);

  bool handleAction(sHeatInfo &HeatInfo, const long ActionNo, std::string ActionUnit, std::string ActionValue, bool UniqueAction, bool UniqueValue, bool Commit );

  void handleInformation( CEventMessage &Event, const std::string &HMIClientId = "", bool ForceAcknowledge = false);

  virtual bool handleLadleLifeData(long LadleNo, const std::string& LadleType, long Action, bool Commit );

  virtual bool handleMatAvailibiltyChange(  std::string Plant,long PlantNo,seqMaterials &sqMat,bool IsContainAllMat,bool Commit );

  bool handleMatFeedingStart(sHeatInfo &HeatInfo, seqBatch& sqMatFeedingBatch, bool Commit );

  bool handleMatFeedingStop(sHeatInfo &HeatInfo, seqBatch& sqMatFeedingBatch, bool Commit );

  virtual bool handlePDHeatStatus(sHeatInfo &HeatInfo, long StatusNo, const std::string &UserCode, const long& TreatmentPosition , bool Commit );

  bool handlePDLadleTablesOnDeparture(sHeatInfo &HeatInfo, long &LadelNo, std::string &LadleType, long LadleLocation, const std::string &UserCode, bool Commit );

  bool handlePDLadleTablesOnTappingEnd(sHeatInfo &HeatInfo, long &LadleNo, std::string &LadleType, long LadleLocation, const std::string &UserCode, bool Commit);

  virtual bool handlePDPretreatTablesOnAnnounce(sHeatInfo &HeatInfo, const std::string &Order, const std::string &SteelGrade, const std::string &UserCode, sPDData &PDData, bool Commit );

  virtual bool handlePDTablesOnAnalysisReceived(sHeatInfo &HeatInfo, seqAnalysis &SeqAnalysis, long LadleNo, const std::string& LadleType, CDateTime SampleTime, long SampleType, long SampleNo, long SampleMode, long SampleOrigin, const std::string& SampleLocation, long &SampleCounter, const std::string& SampleId, const std::string& OrderId, const std::string& User, long TreatmentPosition, bool Commit );

  virtual bool handlePDTablesOnAnnounce(sHeatInfo &HeatInfo, const std::string &Order, const std::string &SteelGrade, const std::string &UserCode, sPDData &PDData, long &SampleRef, long TreatmentPosition, bool Commit );

  virtual bool handlePDTablesOnChangeAimData(sHeatInfo &HeatInfo, const std::string &SteelGrade, const std::string &Order, double AimWeight, double Temp, CDateTime &TreatStart, CDateTime &TreatEnd, long TreatmentPosition, const std::string &UserCode, bool Commit );

  virtual bool handlePDTablesOnChangeLiquidAddition(sHeatInfo &HeatInfo, long LiqAddNo, std::string &UserCode, sPDData &PDData, bool Commit );

  virtual bool handlePDTablesOnChangeProdPrac(sHeatInfo &HeatInfo, const std::string &Description, long ProdPrac, bool Commit );

  virtual bool handlePDTablesOnDelayStatus(sHeatInfo &HeatInfo, CDateTime &StartTime, CDateTime &EndTime, const std::string &Code, const std::string &UserCode, const std::string &Comment, long Status, bool Commit );

  virtual bool handlePDTablesOnDeparture(sHeatInfo &HeatInfo, const std::string &OrderId, const std::string &UserCode, long TreatmentPosition, bool Commit );

  virtual bool handlePDTablesOnLadleDataChanged(sHeatInfo &HeatInfo, const std::string &UserCode, const std::string &pLadleStatus, long LadleNo, const std::string &LadleType, bool Commit );

  virtual bool handlePDTablesOnProdOrdChanged(sHeatInfo &HeatInfo, const std::string &SteelGrade, const std::string &Order, const std::string &UserCode, bool Commit );

  virtual bool handlePDTablesOnRemoveLiquidAddition(sHeatInfo &HeatInfo, long LiqAddNo, bool Commit );

  virtual bool handlePDTablesOnSampleTaken(sHeatInfo &HeatInfo, long MeasurementType, CDateTime &SampleTime, long LadleNo, const std::string &LadleType, const std::string &UserCode, long &SampCounter, long SampleOrigin, long SampleNo, bool Commit);

  virtual bool handlePDTablesOnSetupOfHeat(bool IsHeatPlanned, sHeatInfo &HeatInfo, sPDData &PDData, long Status, const std::string &OrderId, const CDateTime &HeatStart, const CDateTime &HeatEnd, const std::string &SteelgradeCode, const std::string &UserCode, long &SampleRef, long TreatmentPosition, bool Commit );

  virtual bool handlePDTablesOnSteelGradeChanged(sHeatInfo &HeatInfo, const std::string &SteelGrade, const std::string &Order, const std::string &UserCode, bool Commit );

  virtual bool handlePDTablesOnTappingStart(sHeatInfo &HeatInfo, const std::string& UserCode, const long& TreatmentPosition , bool Commit );

  virtual bool handlePDTablesOnTempMeasurement(sHeatInfo &pHeatInfo, sPDData &PDData, const std::string &pUser, long &pSampCounter, bool Commit);

  bool handlePDPretreatDataOnDeparture(sHeatInfo &HeatInfo, const std::string &OrderId, const std::string &UserCode, bool Commit );

  bool handlePPTabelsOnAnnounce(sHeatInfo &HeatInfo, sPDData &PDData, const std::string &HeatIdCust, std::string &TreatIdCust, const std::string &Order, const std::string &SteelGrade, const CDateTime &TreatEnd, const bool &OnRequest, const std::string &UserCode, double &AimWeight, double &AimTemp, long TreatmentMode, bool Commit);

  bool heatScheduleOnAnnouncement(sHeatInfo &HeatInfo, const std::string &UserCode,const long &TreatmentPosition ,  bool Commit );

  bool heatScheduleOnCancelHeat(sHeatInfo &HeatInfo, std::string &HeatCustId, const long &TreatmentPosition , bool Commit );

  bool heatScheduleOnDeparture(sHeatInfo &HeatInfo, const std::string &UserCode, const long &TreatmentPosition , bool Commit );

  bool handlePDTablesOnMaterialHandlingReport(const sHeatInfo& HeatInfo, const sRecipeInfo& RecipeInfo, const seqBatch& Batch, const seqGasData& GasData, double ElecEnergy, bool Commit );

  bool insertOrder(sHeatInfo &HeatInfo, const std::string &Order, const std::string &SteelGrade, const double AimWeight, const std::string &UserCode, bool Commit);

  bool insertPlannedHeat(sHeatInfo &HeatInfo, const std::string &HeatIdCust, const std::string &TreatIdCust, const std::string &Order, const std::string &UserCode, CDateTime &TreatEnd, bool Commit);
 
  bool isOnRequest(std::string &pPlan, std::string &UserCode);

  void log(cCBS_ODBC_DBError& CBS_ODBC_DBError, long _level);

  void log(const std::string& _message, long _level);

  bool isHeatPlanned(sHeatInfo &HeatInfo);

  bool isOrdered(const std::string &Order);
  
  bool changeHeatCustSeqParam(long PlantNo, long Value, bool Commit);

  bool handleNewTreatmentPosition(const std::string& Plant, long PlantNo, long OriginPosition, long AimPosition, bool commit);

  // return actual tratment position of ProductManagementInterface
  // function to be overwritten by respctive plant unts
  virtual long getActTreatmentPosition(CEventMessage &Event);

public:

  void checkLastError();

  bool isError(cCBS_ODBC_DBError& Error);

  bool resetCustHeatId(const std::string & Plant, long PlantNo, std::vector<std::string> &PlantList, long ReturnHeatNo, bool Commit);

  void resetLastError();

  void handleError(CEventMessage &Event, const std::string &HMIClientId = "");

  //EventLog method
  void sendEventLog(sEventLogMessage &Event, std::string &pException, std::string &pFunction, std::string &pAction);

  // increase life of eqiuipment at specific plant by adding 1 
  // on all counters where counter type is HEAT
  bool setEquipmentAgeByHeat(sHeatInfo &HeatInfo, bool Commit);

  // increase life of eqiuipment at specific plant by adding Weight 
  // on all counters where counter type is TONS
  bool setEquipmentAgeByWeight(sHeatInfo &HeatInfo, double Weight, bool Commit);

  void setLastError(cCBS_ODBC_DBError& LastError, long OpAcknowledge );

  void setLastError(const std::string &ErrorMessage, long ErrCode, const std::string &SQL, long OpAcknowledge = 0);

  bool setScrapContainerData(CEventMessage& Event, const std::string ContainerType, long ContainerInSeq, long ContainerNo, long ContainerLocation, long RecipeStatus, seqBatch& RecipeContent, bool commit);

  long getNextContainerInSeqWithStatus(CEventMessage& Event, const std::string& ContainerType, long StatusNo);

  bool checkContainerAssignment(CEventMessage& Event, const std::string& ContainerType, long ContainerInSeq, long ContainerNo);

  // remove assignment for ContainerNo for all oders af plant for respective Plant and ContainerType
  bool deassignScrapContainer(const std::string& Plant, const std::string& OrderId, const std::string& ContainerType, long ContainerInSeq, long ContainerNo, bool commit);

  bool assignScrapContainer(CEventMessage& Event, const std::string& ContainerType, long ContainerInSeq, long ContainerNo, long LastBasket, bool commit);

  bool handlePDRecipeDataOnScrapContainerAssignment(sHeatInfo &HeatInfo, const std::string &OrderId, const std::string &ContainerType, long ContainerInSeq, long ContainerNo, long RecipeStatus, const std::string &UserCode, bool Commit);
  bool handlePDRecipeDataOnScrapContainerDeAssignment(sHeatInfo &HeatInfo, const std::string &OrderId, const std::string &ContainerType, long ContainerInSeq, long ContainerNo, long RecipeStatus, const std::string &UserCode, bool Commit);
  bool handlePDRecipeDataOnScrapContainerDischarged(sHeatInfo &HeatInfo, const std::string &OrderId, const std::string &ContainerType, long ContainerInSeq, long ContainerNo, const std::string &UserCode, bool Commit);
  bool handlePDRecipeDataOnScrapContainerOnAnnounce(sHeatInfo &HeatInfo, const std::string &OrderId, const std::string &ContainerType, const std::string &UserCode, bool Commit);
  
  bool dischargeScrapContainer(CEventMessage& Event, const std::string& ContainerType, long ContainerInSeq, long ContainerNo, long ContainerLocation, bool commit);

  void splitPlantPlantNo(std::string &PlantID, std::string &Plant, long &PlantNo);

  void setHeatInfo(CEventMessage &Event, sHeatInfo &HeatInfo);
  // entered operator comment will be store inPD_HEAT_DATA
  bool handleOperatorComment(sHeatInfo &HeatInfo, const std::string &OperatorComment, bool Commit);

protected:

  bool updateMaterialAmount(  std::string Plant,long PlantNo,seqMaterials &sqMat,bool IsContainAllMat,bool Commit );

  bool updateMaterialPurpose(  std::string Plant,long PlantNo,seqMaterials &sqMat,bool IsContainAllMat,bool Commit );

  bool updatePlannedHeat(sHeatInfo &HeatInfo, const std::string &HeatIdCust, const std::string &TreatIdCust, const std::string &Order, const std::string &UserCode, CDateTime &TreatEnd, bool Commit);
  
  bool updateOrder(const std::string &Order, const std::string &Plant, const std::string &SteelGrade, const double AimWeight, const std::string &UserCode, bool Commit);

  bool writeHotHeelAnalysisOnTappingStart(sHeatInfo &HeatInfo, long Sample_Ref_HotHeel, bool Commit );

  bool insertPDPretreatData(sHeatInfo &HeatInfo, std::string &OrderId, std::string &User, bool Commit);

  bool isHeatPlanned(const std::string &HeatId);

  bool isCustHeatPlanned(const std::string &CustHeatId, const std::string &CustTreatId );

  bool getLadleFromHeatData(sHeatInfo &HeatInfo, long &LadleNo, std::string &LadleType);

  // set of treatment start time, heat status, write plant status
  bool handlePDTableOnHeatStart(sHeatInfo &HeatInfo, const std::string& UserCode, long TreatmentPosition, bool Commit);

  // set of treatment end time, heat status
  bool handlePDTableOnHeatEnd(sHeatInfo &HeatInfo, bool Commit);

  // read current announced heat and set heat stack in plant interface
  virtual bool CDM_DBManager::setHeatStack();

  bool checkHeatInStack(seqHeatStack& SeqHeatStack, sHeatStack NewHeatStack);

  // Function to check if new Aim Data are different to existing
  // stored in data base (PD_HEAT_DATA)
  bool isAimDataChanged(CEventMessage& Event, const std::string &SteelGrade, double AimWeight, double AimTemp, CDateTime &TreatStart, CDateTime &mTreatEnd);

  // Function to check if ProdPracNo is different to practice number 
  // stored in data base (PD_HEAT_DATA_PRODPRAC)
  bool isProductionPracticeChanged(CEventMessage& Event, const std::string &Desc_PP, long& ProdPracNo);

  // Analysis can be store with this function.
  // The HotMetalCounter is stored in PD_SAMPLE for unique identification of hot metal
  // In case of invalid SampleRef new sample ref will be returned.
  bool addAnalysisHotMetal(sHeatInfo &HeatInfo, const std::string &ProdOrderId, sPDData &PDData, long HotMetalCounter, const std::string &UserCode, bool Commit);

  // Temperature can be store with this function.
  // The HotMetalCounter is stored in PD_SAMPLE for unique identification of hot metal
  // In case of invalid SampleRef new sample ref will be returned.
  bool addTemperatureHotMetal(sHeatInfo &HeatInfo, const std::string &ProdOrderId, sPDData &PDData, long HotMetalCounter, const std::string &UserCode, bool Commit);

  bool handleEquivalences(sHeatInfo &HeatInfo, seqAnalysis & SeqAnalysis);

  std::set<std::string> getHeatsPresettedAndPlanned(const std::string& Plant);

  std::set<std::string> getUsedHeatsFromSchedule(const std::string& Plant);

  // find available heat id cust
  // if it is in HeatsPresettedAndPlanned or HeatsInProduction function will increase HeatIDGeneration
  std::string getNextAvailableHeatIdCust(const std::string& Plant, const std::set<std::string> &HeatsPresettedAndPlanned, const std::set<std::string>& HeatsInProduction, const std::string& HeatIDPrefix, long& HeatIDCounter, const std::string& TreatID);

  std::string getNextAvailableHeatIdCust(const std::string& Plant, const std::string& HeatIDPrefix, long& HeatIDCounter, const std::string& TreatID);

  std::string getNextHeatIdCust(const std::string& Plant);

private:
  //Translation language read from ini file, (used for Error translation in EventLog)
  std::string m_TranslationLang; 
  CGC_Plantgroup_Container * m_pGC_Plantgroup_Container;
  CGCC_TRANSLATE_VALUE     * m_pGCC_TRANSLATE_VALUE;

protected:
  // to read heat status no
  CHeatStatusContainer     * m_pHeatStatusContainer;
  CGC_Plant_Container      * m_pGC_Plant_Container;

  CSMC_ErrorHandler        m_SMC_ErrorHandler;

  //structure for heat status read from ini file
  sHeatStatus m_HeatStatus; 
  // task to access DM interfaces
  // to read or write data on event
  // and to get data base connection
  CDM_DBManagerTask* m_pDM_DBManagerTask;
  //pcermak Last SQL Error which occured
  cCBS_ODBC_DBError m_lastError;
  long m_lastErrorOpAcknowledge;
};

#endif /* _INC_CDM_DBManager_INCLUDED */
